//===- e2eFirLowpass.cpp - Example of DAP fir filter ----------------------===//
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//===----------------------------------------------------------------------===//
//
// This file implements an end to end example for fir filter in buddy-mlir. It
// generates coefficients for a filter and apply it on a piece of mono audio,
// then saves the audio.
// This file will be linked with the object file generated by mlir to generate
// the executable file.
//
//===----------------------------------------------------------------------===//

#include "Interface/buddy/core/AudioContainer.h"
#include "Interface/buddy/dap/dap.h"
#include <iostream>

using namespace dap;
using namespace std;

int main(int argc, char *argv[]) {
  size_t kernelSize = 1023;
  MemRef<float, 1> kernel(reinterpret_cast<intptr_t *>(&kernelSize));
  dap::firLowpass<float, 1>(kernel, dap::WINDOW_TYPE::HAMMING, 1023, 0.1,
                            nullptr);
  Audio<float, 1> aud("../../../tests/Interface/"
                      "core/NASA_Mars.wav");
  auto audSize = aud.getSize();
  Audio<float, 1> output(reinterpret_cast<intptr_t *>(&audSize));
  dap::fir(&aud, &kernel, &output);
  output.setAudioFile(&aud.getAudioFile());
  output.save("Fir_NASA_Mars.wav");
  return 0;
}
