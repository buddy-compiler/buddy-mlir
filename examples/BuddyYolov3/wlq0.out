tensor([[[[ 0.4758,  0.8483,  0.2970,  ...,  1.2130,  1.7261,  1.2707],
          [ 1.0027,  0.3399,  0.9158,  ...,  0.2019,  1.4681,  1.7714],
          [ 0.5189,  2.0539,  0.4268,  ...,  0.1301,  0.0498,  0.8835],
          ...,
          [ 2.0986,  1.2896,  1.8383,  ...,  0.7204, -0.1144,  1.3759],
          [ 1.0358,  1.4437,  0.2115,  ...,  0.4834, -0.3276,  0.7465],
          [ 1.1682,  1.7959,  2.6277,  ...,  1.0311,  0.4961,  1.4305]],

         [[ 1.0233,  2.1746,  0.5003,  ...,  0.9369, -0.2310,  1.3532],
          [ 0.5907, -0.2940,  1.0640,  ...,  1.7814,  0.4957, -0.1070],
          [ 1.3448,  0.9145,  1.3977,  ...,  1.6520,  1.4945,  1.1159],
          ...,
          [ 1.0828,  1.0221,  0.1060,  ...,  0.0793,  1.8071,  1.6440],
          [ 1.5543,  1.9708,  1.8086,  ...,  0.1624,  0.7291,  1.8899],
          [-0.6191,  1.6113, -0.0455,  ...,  2.4959,  0.4177,  0.1425]],

         [[ 0.8232,  1.7725,  1.3399,  ...,  2.2862,  1.5854, -0.2309],
          [-0.6411,  2.8491,  0.0273,  ...,  0.4134,  1.9174,  0.3301],
          [ 0.8994,  0.5384,  1.7782,  ...,  1.1824,  0.6027,  0.7852],
          ...,
          [ 0.2488,  1.3561,  0.9933,  ...,  0.6812,  1.3206,  0.2465],
          [ 0.6315,  1.7807,  1.2729,  ...,  0.7515,  0.8359,  0.0182],
          [-0.3653,  0.1035,  0.8891,  ...,  0.7352,  0.6516,  1.0986]]]])
class <lambda>(torch.nn.Module):
    def forward(self, arg0_1: f32[1, 3, 640, 480]):
        # File: /root/buddy-mlir/examples/BuddyYolov3/test_op.py:15, code: return self.maxpool(a)
        max_pool2d_with_indices = torch.ops.aten.max_pool2d_with_indices.default(arg0_1, [2, 2], [2, 2]);  arg0_1 = None
        getitem: f32[1, 3, 320, 240] = max_pool2d_with_indices[0];  max_pool2d_with_indices = None
        return (getitem,)
        
{'name': 'arg0_1', 'op': 'placeholder', 'op_name': None, 'target': 'arg0_1', '_input_nodes': {}, 'args': (), 'kwargs': {}, 'users': {max_pool2d_with_indices: None}, 'prev_node': '', 'next_node': 'getitem', 'meta': {'val': FakeTensor(..., size=(1, 3, 640, 480)), 'tensor_meta': TensorMetadata(shape=torch.Size([1, 3, 640, 480]), dtype=torch.float32, requires_grad=False, stride=(921600, 307200, 480, 1), memory_format=torch.contiguous_format, is_quantized=False, qparams={})}}
{'name': 'getitem', 'op': 'call_function', 'op_name': 'maxpool2d.tosa_default', 'target': <OpOverload(op='aten.max_pool2d_with_indices', overload='default')>, '_input_nodes': {arg0_1: None}, 'args': (arg0_1, [2, 2], [2, 2]), 'kwargs': {}, 'users': {output: None}, 'prev_node': 'arg0_1', 'next_node': 'output', 'meta': {'val': FakeTensor(..., size=(1, 3, 320, 240)), 'tensor_meta': TensorMetadata(shape=torch.Size([1, 3, 320, 240]), dtype=torch.float32, requires_grad=False, stride=(230400, 76800, 240, 1), memory_format=torch.contiguous_format, is_quantized=False, qparams={})}}
{'name': 'output', 'op': 'output', 'op_name': None, 'target': 'output', '_input_nodes': {getitem: None}, 'args': ((getitem,),), 'kwargs': {}, 'users': {}, 'prev_node': 'getitem', 'next_node': '', 'meta': {'val': None, 'tensor_meta': None}}
--------------------------------
{'graph': <torch.fx.graph.Graph object at 0x7fb78993c190>, 'name': 'arg0_1', 'op': 'placeholder', 'target': 'arg0_1', '_input_nodes': {}, '_args': (), '_kwargs': {}, 'users': {max_pool2d_with_indices: None}, 'type': None, '_prev': , '_next': max_pool2d_with_indices, '_erased': False, '_repr_fn': None, 'meta': {'val': FakeTensor(..., size=(1, 3, 640, 480)), 'tensor_meta': TensorMetadata(shape=torch.Size([1, 3, 640, 480]), dtype=torch.float32, requires_grad=False, stride=(921600, 307200, 480, 1), memory_format=torch.contiguous_format, is_quantized=False, qparams={})}}
{'graph': <torch.fx.graph.Graph object at 0x7fb78993c190>, 'name': 'max_pool2d_with_indices', 'op': 'call_function', 'target': <OpOverload(op='aten.max_pool2d_with_indices', overload='default')>, '_input_nodes': {arg0_1: None}, '_args': (arg0_1, [2, 2], [2, 2]), '_kwargs': {}, 'users': {getitem: None}, 'type': None, '_prev': arg0_1, '_next': getitem, '_erased': False, '_repr_fn': None, 'meta': {'stack_trace': '  File "/root/buddy-mlir/examples/BuddyYolov3/test_op.py", line 15, in forward\n    return self.maxpool(a)\n', 'nn_module_stack': {'L__self___maxpool': ("L['self'].maxpool", <class 'torch.nn.modules.pooling.MaxPool2d'>)}, 'source_fn': ('l__self___maxpool', <class 'torch.nn.modules.pooling.MaxPool2d'>), 'original_aten': <OpOverload(op='aten.max_pool2d_with_indices', overload='default')>, 'from_node': [('l__self___maxpool', 'L__self___maxpool')], 'seq_nr': -1, 'val': (FakeTensor(..., size=(1, 3, 320, 240)), FakeTensor(..., size=(1, 3, 320, 240), dtype=torch.int64)), 'tensor_meta': None}}
{'graph': <torch.fx.graph.Graph object at 0x7fb78993c190>, 'name': 'getitem', 'op': 'call_function', 'target': <built-in function getitem>, '_input_nodes': {max_pool2d_with_indices: None}, '_args': (max_pool2d_with_indices, 0), '_kwargs': {}, 'users': {output: None}, 'type': None, '_prev': max_pool2d_with_indices, '_next': output, '_erased': False, '_repr_fn': None, 'meta': {'stack_trace': '  File "/root/buddy-mlir/examples/BuddyYolov3/test_op.py", line 15, in forward\n    return self.maxpool(a)\n', 'nn_module_stack': {'L__self___maxpool': ("L['self'].maxpool", <class 'torch.nn.modules.pooling.MaxPool2d'>)}, 'source_fn': ('l__self___maxpool', <class 'torch.nn.modules.pooling.MaxPool2d'>), 'original_aten': <OpOverload(op='aten.max_pool2d_with_indices', overload='default')>, 'from_node': [('l__self___maxpool', 'L__self___maxpool')], 'seq_nr': -1, 'val': FakeTensor(..., size=(1, 3, 320, 240)), 'tensor_meta': TensorMetadata(shape=torch.Size([1, 3, 320, 240]), dtype=torch.float32, requires_grad=False, stride=(230400, 76800, 240, 1), memory_format=torch.contiguous_format, is_quantized=False, qparams={})}}
{'graph': <torch.fx.graph.Graph object at 0x7fb78993c190>, 'name': 'output', 'op': 'output', 'target': 'output', '_input_nodes': {getitem: None}, '_args': ((getitem,),), '_kwargs': {}, 'users': {}, 'type': None, '_prev': getitem, '_next': , '_erased': False, '_repr_fn': None, 'meta': {'tensor_meta': None, 'val': None}}
