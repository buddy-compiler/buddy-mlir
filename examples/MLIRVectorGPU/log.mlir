module attributes {gpu.container_module} {
  llvm.func @malloc(i64) -> !llvm.ptr
  llvm.func @printNewline()
  llvm.func @printClose()
  llvm.func @printComma()
  llvm.func @printI64(i64)
  llvm.func @printOpen()
  gpu.binary @kernels  [#gpu.object<#nvvm.target<O = 3, chip = "sm_89">, "P\EDU\BA\01\00\10\00@\0E\00\00\00\00\00\00\02\00\01\01@\00\00\00(\0C\00\00\00\00\00\00\00\00\00\00\00\00\00\00\07\00\01\00Y\00\00\00\00\00\00\00\00\00\00\00\11\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\7FELF\02\01\013\07\00\00\00\00\00\00\00\02\00\BE\00~\00\00\00\00\00\00\00\00\00\00\00\80\0B\00\00\00\00\00\00\80\08\00\00\00\00\00\00Y\05Y\00@\008\00\03\00@\00\0C\00\01\00\00.shstrtab\00.strtab\00.symtab\00.symtab_shndx\00.nv.info\00.text.vector_outerproduct\00.nv.info.vector_outerproduct\00.nv.shared.vector_outerproduct\00.nv.constant0.vector_outerproduct\00.rel.nv.constant0.vector_outerproduct\00.debug_frame\00.rel.debug_frame\00.rela.debug_frame\00.nv.callgraph\00.nv.prototype\00.nv.rel.action\00\00.shstrtab\00.strtab\00.symtab\00.symtab_shndx\00.nv.info\00.text.vector_outerproduct\00.nv.info.vector_outerproduct\00.nv.shared.vector_outerproduct\00.rel.nv.constant0.vector_outerproduct\00.nv.constant0.vector_outerproduct\00.debug_frame\00.rel.debug_frame\00.rela.debug_frame\00.nv.callgraph\00.nv.prototype\00.nv.rel.action\00vector_outerproduct|\FF\FF\FF\FF\0F\0C\81\80\80(\00\08\FF\81\80(\08\81\80\80(\00\00\00\FF\FF\FF\FF4\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\00\00\00\00\00\00\04\04\00\00\00\04T\00\00\00\0C\81\80\80(\00\04\FC\FF\FF?\00\00\00\00\00\00\00\04/\08\00\06\00\00\00\16\00\00\00\04\11\08\00\06\00\00\00\00\00\00\00\04\12\08\00\06\00\00\00\00\00\00\00\047\04\00~\00\00\00\04\0A\08\00\02\00\00\00`\01(\00\03\19(\00\04\17\0C\00\00\00\00\00\04\00 \00\00\F0!\00\04\17\0C\00\00\00\00\00\03\00\18\00\00\F0!\00\04\17\0C\00\00\00\00\00\02\00\10\00\00\F0!\00\04\17\0C\00\00\00\00\00\01\00\08\00\00\F0!\00\04\17\0C\00\00\00\00\00\00\00\00\00\00\F0!\00\03\1B\FF\00\04\1C\04\00P\01\00\00\00\00\00\00\FF\FF\FF\FF\00\00\00\00\FE\FF\FF\FF\00\00\00\00\FD\FF\FF\FF\00\00\00\00\FC\FF\FF\FFsz\01\00\00\0A\00\00\00\0F\00\00\00\E4\0F\00\02x\05\00\0F\00\00\00\00\0F\00\00\00\E2\0F\00$v\02\FF\00Z\00\00\FF\00\8E\07\00\E2\0F\00\02z\03\00\00[\00\00\00\0F\00\00\00\E2\0F\00$t\07\FF\0C\00\00\00\FF\00\8E\07\00\E2\0F\00\02x\09\00\0A\00\00\00\00\0F\00\00\00\E2\0F\00$t\0B\FF\08\00\00\00\FF\00\8E\07\00\E2\0F\00\02x\0D\00\06\00\00\00\00\0F\00\00\00\E2\0F\00$t\0F\FF\05\00\00\00\FF\00\8E\07\00\E2\0F\00\02x\11\00\04\00\00\00\00\0F\00\00\00\E2\0F\00$t\13\FF\12\00\00\00\FF\00\8E\07\00\E2\0F\00\B9z\04\00\00F\00\00\00\0A\00\00\00\C4\0F\00\86y\00\02\05\1C\00\00\04\19\10\0C\00\E8\0F\00\86y\00\02\07\18\00\00\04\19\10\0C\00\E8\0F\00\86y\00\02\07\14\00\00\04\19\10\0C\00\E8\0F\00\86y\00\02\09\10\00\00\04\19\10\0C\00\E8\0F\00\86y\00\02\0B\0C\00\00\04\19\10\0C\00\E8\0F\00\86y\00\02\0D\08\00\00\04\19\10\0C\00\E8\0F\00\86y\00\02\0F\04\00\00\04\19\10\0C\00\E8\0F\00\86y\00\02\11\00\00\00\04\19\10\0C\00\E8\0F\00\86y\00\02\13 \00\00\04\19\10\0C\00\E2\0F\00My\00\00\00\00\00\00\00\00\80\03\00\EA\0F\00Gy\00\00\F0\FF\FF\FF\FF\FF\83\03\00\C0\0F\00\18y\00\00\00\00\00\00\00\00\00\00\00\C0\0F\00\18y\00\00\00\00\00\00\00\00\00\00\00\C0\0F\00\18y\00\00\00\00\00\00\00\00\00\00\00\C0\0F\00\18y\00\00\00\00\00\00\00\00\00\00\00\C0\0F\00\18y\00\00\00\00\00\00\00\00\00\00\00\C0\0F\00\18y\00\00\00\00\00\00\00\00\00\00\00\C0\0F\00\18y\00\00\00\00\00\00\00\00\00\00\00\C0\0F\00\18y\00\00\00\00\00\00\00\00\00\00\00\C0\0F\00\18y\00\00\00\00\00\00\00\00\00\00\00\C0\0F\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01\00\00\00\03\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00@\00\00\00\00\00\00\00+\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0B\00\00\00\03\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00k\01\00\00\00\00\00\00?\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\13\00\00\00\02\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\B0\02\00\00\00\00\00\00\A8\00\00\00\00\00\00\00\02\00\00\00\06\00\00\00\08\00\00\00\00\00\00\00\18\00\00\00\00\00\00\00\D0\00\00\00\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00X\03\00\00\00\00\00\00p\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00)\00\00\00\00\00\00p\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\C8\03\00\00\00\00\00\00$\00\00\00\00\00\00\00\03\00\00\00\00\00\00\00\04\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00L\00\00\00\00\00\00p@\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\EC\03\00\00\00\00\00\00t\00\00\00\00\00\00\00\03\00\00\00\0B\00\00\00\04\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01\00\00\01\00\00p\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00`\04\00\00\00\00\00\00 \00\00\00\00\00\00\00\03\00\00\00\00\00\00\00\04\00\00\00\00\00\00\00\08\00\00\00\00\00\00\00\1C\01\00\00\0B\00\00pversion 7.8\0A.target sm_89\0A.address_size 64\0A1\00\FF\1Fisible .entry vector_outerproduct(\0A.param .u64!\00\01\11_\1F\00?_0,)\00\14\1F1)\00\15\1F2)\00\15\1F3)\00\15\F4\074\0A)\0A{\0A.reg .b32 %r<2>;\11\00\F2\0064 %rd<10>;\0A\0AldS\00\22.u\17\00O1, [Y\00\07\F4\031];\0Acvta.to.global8\00!2,>\00T;\0Amov\14\00\953, 15;\0Ast,\00@32 [-\00A+28]1\00\1931\00_4, 121\00\04\1241\00\1F4\1F\00\04\150\1F\00\07P\00_5, 101\00\03\22161\00\1951\00O6, 80\00\04\1220\00\1960\00O7, 60\00\03\03\E0\00\197/\00?8, \10\01\04\03\DE\00\198/\00?9, \EF\00\03\02-\00\129-\00\02\E1\01O1, 1\BB\00\04\1230\00\C01;\0Aret;\0A\0A}\0A\00\00\00\00\00\00\00\00">]
  llvm.func @main() {
    %0 = llvm.mlir.constant(0 : index) : i64
    %1 = llvm.mlir.constant(3 : index) : i64
    %2 = llvm.mlir.constant(1 : index) : i64
    %3 = llvm.mlir.constant(2 : index) : i64
    %4 = llvm.mlir.constant(9 : index) : i64
    %5 = llvm.mlir.constant(1 : index) : i64
    %6 = llvm.mlir.zero : !llvm.ptr
    %7 = llvm.getelementptr %6[9] : (!llvm.ptr) -> !llvm.ptr, i32
    %8 = llvm.ptrtoint %7 : !llvm.ptr to i64
    %9 = llvm.call @malloc(%8) : (i64) -> !llvm.ptr
    %10 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %11 = llvm.insertvalue %9, %10[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %12 = llvm.insertvalue %9, %11[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %13 = llvm.mlir.constant(0 : index) : i64
    %14 = llvm.insertvalue %13, %12[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %15 = llvm.insertvalue %4, %14[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %16 = llvm.insertvalue %5, %15[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %17 = llvm.mlir.constant(1 : index) : i64
    %18 = llvm.alloca %17 x !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> : (i64) -> !llvm.ptr
    llvm.store %16, %18 : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, !llvm.ptr
    %19 = llvm.mlir.constant(1 : index) : i64
    %20 = llvm.mlir.undef : !llvm.struct<(i64, ptr)>
    %21 = llvm.insertvalue %19, %20[0] : !llvm.struct<(i64, ptr)> 
    %22 = llvm.insertvalue %18, %21[1] : !llvm.struct<(i64, ptr)> 
    %23 = llvm.mlir.zero : !llvm.ptr
    %24 = llvm.getelementptr %23[1] : (!llvm.ptr) -> !llvm.ptr, i32
    %25 = llvm.ptrtoint %24 : !llvm.ptr to i64
    llvm.call @mgpuMemHostRegisterMemRef(%19, %18, %25) : (i64, !llvm.ptr, i64) -> ()
    gpu.launch_func  @kernels::@vector_outerproduct blocks in (%2, %2, %2) threads in (%2, %2, %2) : i64 args(%9 : !llvm.ptr, %9 : !llvm.ptr, %13 : i64, %4 : i64, %5 : i64)
    %26 = llvm.extractvalue %16[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %27 = llvm.getelementptr %26[%0] : (!llvm.ptr, i64) -> !llvm.ptr, i32
    %28 = llvm.load %27 {alignment = 4 : i64} : !llvm.ptr -> vector<9xi32>
    llvm.call @printOpen() : () -> ()
    llvm.br ^bb1(%0 : i64)
  ^bb1(%29: i64):  // 2 preds: ^bb0, ^bb9
    %30 = llvm.icmp "slt" %29, %1 : i64
    llvm.cond_br %30, ^bb2, ^bb10
  ^bb2:  // pred: ^bb1
    llvm.call @printOpen() : () -> ()
    llvm.br ^bb3(%0 : i64)
  ^bb3(%31: i64):  // 2 preds: ^bb2, ^bb6
    %32 = llvm.icmp "slt" %31, %1 : i64
    llvm.cond_br %32, ^bb4, ^bb7
  ^bb4:  // pred: ^bb3
    %33 = llvm.mul %29, %1  : i64
    %34 = llvm.add %31, %33  : i64
    %35 = llvm.extractelement %28[%34 : i64] : vector<9xi32>
    %36 = llvm.sext %35 : i32 to i64
    llvm.call @printI64(%36) : (i64) -> ()
    %37 = llvm.icmp "ult" %31, %3 : i64
    llvm.cond_br %37, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    llvm.call @printComma() : () -> ()
    llvm.br ^bb6
  ^bb6:  // 2 preds: ^bb4, ^bb5
    %38 = llvm.add %31, %2  : i64
    llvm.br ^bb3(%38 : i64)
  ^bb7:  // pred: ^bb3
    llvm.call @printClose() : () -> ()
    %39 = llvm.icmp "ult" %29, %3 : i64
    llvm.cond_br %39, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    llvm.call @printComma() : () -> ()
    llvm.br ^bb9
  ^bb9:  // 2 preds: ^bb7, ^bb8
    %40 = llvm.add %29, %2  : i64
    llvm.br ^bb1(%40 : i64)
  ^bb10:  // pred: ^bb1
    llvm.call @printClose() : () -> ()
    llvm.call @printNewline() : () -> ()
    llvm.return
  }
  llvm.func @mgpuMemHostRegisterMemRef(i64, !llvm.ptr, i64)
}

