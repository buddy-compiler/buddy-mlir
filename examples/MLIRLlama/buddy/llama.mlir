#map = affine_map<(d0, d1, d2) -> (d0, d1)>
#map1 = affine_map<(d0, d1, d2) -> (d0, d1, d2)>
#map2 = affine_map<(d0, d1, d2) -> (d1)>
#map3 = affine_map<(d0, d1, d2) -> (d0, d2)>
#map4 = affine_map<(d0, d1) -> (d0, d1)>
#map5 = affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>
#map6 = affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>
#map7 = affine_map<(d0, d1, d2, d3) -> (d0, d1, d3)>
#map8 = affine_map<(d0, d1, d2) -> (d2)>
#map9 = affine_map<(d0, d1) -> (d1, d0)>
#map10 = affine_map<(d0, d1, d2) -> (d2, d1)>
#map11 = affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>
#map12 = affine_map<(d0, d1, d2) -> (d0, 0, d1, d2)>
#map13 = affine_map<(d0, d1) -> (0, d0, d1)>
#map14 = affine_map<(d0, d1, d2, d3, d4) -> (d0, d4, d2, d3)>
#map15 = affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>
#map16 = affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>
#map17 = affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>
module {
  func.func @forward(%arg0: tensor<6755192832xf32>, %arg1: tensor<1x80xi64>) -> tensor<1x80x32000xf32> {
    %extracted_slice = tensor.extract_slice %arg0[0] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_0 = tensor.extract_slice %arg0[4096] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_1 = tensor.extract_slice %arg0[8192] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_2 = tensor.extract_slice %arg0[12288] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_3 = tensor.extract_slice %arg0[16384] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_4 = tensor.extract_slice %arg0[20480] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_5 = tensor.extract_slice %arg0[24576] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_6 = tensor.extract_slice %arg0[28672] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_7 = tensor.extract_slice %arg0[32768] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_8 = tensor.extract_slice %arg0[36864] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_9 = tensor.extract_slice %arg0[40960] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_10 = tensor.extract_slice %arg0[45056] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_11 = tensor.extract_slice %arg0[49152] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_12 = tensor.extract_slice %arg0[53248] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_13 = tensor.extract_slice %arg0[57344] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_14 = tensor.extract_slice %arg0[61440] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_15 = tensor.extract_slice %arg0[65536] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_16 = tensor.extract_slice %arg0[69632] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_17 = tensor.extract_slice %arg0[73728] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_18 = tensor.extract_slice %arg0[77824] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_19 = tensor.extract_slice %arg0[81920] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_20 = tensor.extract_slice %arg0[86016] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_21 = tensor.extract_slice %arg0[90112] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_22 = tensor.extract_slice %arg0[94208] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_23 = tensor.extract_slice %arg0[98304] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_24 = tensor.extract_slice %arg0[102400] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_25 = tensor.extract_slice %arg0[106496] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_26 = tensor.extract_slice %arg0[110592] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_27 = tensor.extract_slice %arg0[114688] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_28 = tensor.extract_slice %arg0[118784] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_29 = tensor.extract_slice %arg0[122880] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_30 = tensor.extract_slice %arg0[126976] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_31 = tensor.extract_slice %arg0[131072] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_32 = tensor.extract_slice %arg0[135168] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_33 = tensor.extract_slice %arg0[139264] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_34 = tensor.extract_slice %arg0[143360] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_35 = tensor.extract_slice %arg0[147456] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_36 = tensor.extract_slice %arg0[151552] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_37 = tensor.extract_slice %arg0[155648] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_38 = tensor.extract_slice %arg0[159744] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_39 = tensor.extract_slice %arg0[163840] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_40 = tensor.extract_slice %arg0[167936] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_41 = tensor.extract_slice %arg0[172032] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_42 = tensor.extract_slice %arg0[176128] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_43 = tensor.extract_slice %arg0[180224] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_44 = tensor.extract_slice %arg0[184320] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_45 = tensor.extract_slice %arg0[188416] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_46 = tensor.extract_slice %arg0[192512] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_47 = tensor.extract_slice %arg0[196608] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_48 = tensor.extract_slice %arg0[200704] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_49 = tensor.extract_slice %arg0[204800] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_50 = tensor.extract_slice %arg0[208896] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_51 = tensor.extract_slice %arg0[212992] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_52 = tensor.extract_slice %arg0[217088] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_53 = tensor.extract_slice %arg0[221184] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_54 = tensor.extract_slice %arg0[225280] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_55 = tensor.extract_slice %arg0[229376] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_56 = tensor.extract_slice %arg0[233472] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_57 = tensor.extract_slice %arg0[237568] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_58 = tensor.extract_slice %arg0[241664] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_59 = tensor.extract_slice %arg0[245760] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_60 = tensor.extract_slice %arg0[249856] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_61 = tensor.extract_slice %arg0[253952] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_62 = tensor.extract_slice %arg0[258048] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_63 = tensor.extract_slice %arg0[262144] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_64 = tensor.extract_slice %arg0[266240] [131072000] [1] : tensor<6755192832xf32> to tensor<131072000xf32>
    %expanded = tensor.expand_shape %extracted_slice_64 [[0, 1]] : tensor<131072000xf32> into tensor<32000x4096xf32>
    %extracted_slice_65 = tensor.extract_slice %arg0[131338240] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_66 = tensor.expand_shape %extracted_slice_65 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_67 = tensor.extract_slice %arg0[148115456] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_68 = tensor.expand_shape %extracted_slice_67 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_69 = tensor.extract_slice %arg0[164892672] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_70 = tensor.expand_shape %extracted_slice_69 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_71 = tensor.extract_slice %arg0[181669888] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_72 = tensor.expand_shape %extracted_slice_71 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_73 = tensor.extract_slice %arg0[198447104] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_74 = tensor.expand_shape %extracted_slice_73 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_75 = tensor.extract_slice %arg0[243535872] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_76 = tensor.expand_shape %extracted_slice_75 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_77 = tensor.extract_slice %arg0[288624640] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_78 = tensor.expand_shape %extracted_slice_77 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_79 = tensor.extract_slice %arg0[333713408] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_80 = tensor.expand_shape %extracted_slice_79 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_81 = tensor.extract_slice %arg0[350490624] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_82 = tensor.expand_shape %extracted_slice_81 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_83 = tensor.extract_slice %arg0[367267840] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_84 = tensor.expand_shape %extracted_slice_83 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_85 = tensor.extract_slice %arg0[384045056] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_86 = tensor.expand_shape %extracted_slice_85 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_87 = tensor.extract_slice %arg0[400822272] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_88 = tensor.expand_shape %extracted_slice_87 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_89 = tensor.extract_slice %arg0[445911040] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_90 = tensor.expand_shape %extracted_slice_89 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_91 = tensor.extract_slice %arg0[490999808] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_92 = tensor.expand_shape %extracted_slice_91 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_93 = tensor.extract_slice %arg0[536088576] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_94 = tensor.expand_shape %extracted_slice_93 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_95 = tensor.extract_slice %arg0[552865792] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_96 = tensor.expand_shape %extracted_slice_95 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_97 = tensor.extract_slice %arg0[569643008] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_98 = tensor.expand_shape %extracted_slice_97 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_99 = tensor.extract_slice %arg0[586420224] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_100 = tensor.expand_shape %extracted_slice_99 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_101 = tensor.extract_slice %arg0[603197440] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_102 = tensor.expand_shape %extracted_slice_101 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_103 = tensor.extract_slice %arg0[648286208] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_104 = tensor.expand_shape %extracted_slice_103 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_105 = tensor.extract_slice %arg0[693374976] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_106 = tensor.expand_shape %extracted_slice_105 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_107 = tensor.extract_slice %arg0[738463744] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_108 = tensor.expand_shape %extracted_slice_107 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_109 = tensor.extract_slice %arg0[755240960] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_110 = tensor.expand_shape %extracted_slice_109 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_111 = tensor.extract_slice %arg0[772018176] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_112 = tensor.expand_shape %extracted_slice_111 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_113 = tensor.extract_slice %arg0[788795392] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_114 = tensor.expand_shape %extracted_slice_113 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_115 = tensor.extract_slice %arg0[805572608] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_116 = tensor.expand_shape %extracted_slice_115 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_117 = tensor.extract_slice %arg0[850661376] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_118 = tensor.expand_shape %extracted_slice_117 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_119 = tensor.extract_slice %arg0[895750144] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_120 = tensor.expand_shape %extracted_slice_119 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_121 = tensor.extract_slice %arg0[940838912] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_122 = tensor.expand_shape %extracted_slice_121 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_123 = tensor.extract_slice %arg0[957616128] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_124 = tensor.expand_shape %extracted_slice_123 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_125 = tensor.extract_slice %arg0[974393344] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_126 = tensor.expand_shape %extracted_slice_125 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_127 = tensor.extract_slice %arg0[991170560] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_128 = tensor.expand_shape %extracted_slice_127 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_129 = tensor.extract_slice %arg0[1007947776] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_130 = tensor.expand_shape %extracted_slice_129 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_131 = tensor.extract_slice %arg0[1053036544] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_132 = tensor.expand_shape %extracted_slice_131 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_133 = tensor.extract_slice %arg0[1098125312] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_134 = tensor.expand_shape %extracted_slice_133 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_135 = tensor.extract_slice %arg0[1143214080] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_136 = tensor.expand_shape %extracted_slice_135 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_137 = tensor.extract_slice %arg0[1159991296] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_138 = tensor.expand_shape %extracted_slice_137 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_139 = tensor.extract_slice %arg0[1176768512] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_140 = tensor.expand_shape %extracted_slice_139 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_141 = tensor.extract_slice %arg0[1193545728] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_142 = tensor.expand_shape %extracted_slice_141 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_143 = tensor.extract_slice %arg0[1210322944] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_144 = tensor.expand_shape %extracted_slice_143 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_145 = tensor.extract_slice %arg0[1255411712] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_146 = tensor.expand_shape %extracted_slice_145 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_147 = tensor.extract_slice %arg0[1300500480] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_148 = tensor.expand_shape %extracted_slice_147 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_149 = tensor.extract_slice %arg0[1345589248] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_150 = tensor.expand_shape %extracted_slice_149 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_151 = tensor.extract_slice %arg0[1362366464] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_152 = tensor.expand_shape %extracted_slice_151 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_153 = tensor.extract_slice %arg0[1379143680] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_154 = tensor.expand_shape %extracted_slice_153 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_155 = tensor.extract_slice %arg0[1395920896] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_156 = tensor.expand_shape %extracted_slice_155 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_157 = tensor.extract_slice %arg0[1412698112] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_158 = tensor.expand_shape %extracted_slice_157 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_159 = tensor.extract_slice %arg0[1457786880] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_160 = tensor.expand_shape %extracted_slice_159 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_161 = tensor.extract_slice %arg0[1502875648] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_162 = tensor.expand_shape %extracted_slice_161 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_163 = tensor.extract_slice %arg0[1547964416] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_164 = tensor.expand_shape %extracted_slice_163 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_165 = tensor.extract_slice %arg0[1564741632] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_166 = tensor.expand_shape %extracted_slice_165 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_167 = tensor.extract_slice %arg0[1581518848] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_168 = tensor.expand_shape %extracted_slice_167 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_169 = tensor.extract_slice %arg0[1598296064] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_170 = tensor.expand_shape %extracted_slice_169 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_171 = tensor.extract_slice %arg0[1615073280] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_172 = tensor.expand_shape %extracted_slice_171 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_173 = tensor.extract_slice %arg0[1660162048] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_174 = tensor.expand_shape %extracted_slice_173 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_175 = tensor.extract_slice %arg0[1705250816] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_176 = tensor.expand_shape %extracted_slice_175 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_177 = tensor.extract_slice %arg0[1750339584] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_178 = tensor.expand_shape %extracted_slice_177 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_179 = tensor.extract_slice %arg0[1767116800] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_180 = tensor.expand_shape %extracted_slice_179 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_181 = tensor.extract_slice %arg0[1783894016] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_182 = tensor.expand_shape %extracted_slice_181 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_183 = tensor.extract_slice %arg0[1800671232] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_184 = tensor.expand_shape %extracted_slice_183 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_185 = tensor.extract_slice %arg0[1817448448] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_186 = tensor.expand_shape %extracted_slice_185 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_187 = tensor.extract_slice %arg0[1862537216] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_188 = tensor.expand_shape %extracted_slice_187 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_189 = tensor.extract_slice %arg0[1907625984] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_190 = tensor.expand_shape %extracted_slice_189 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_191 = tensor.extract_slice %arg0[1952714752] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_192 = tensor.expand_shape %extracted_slice_191 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_193 = tensor.extract_slice %arg0[1969491968] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_194 = tensor.expand_shape %extracted_slice_193 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_195 = tensor.extract_slice %arg0[1986269184] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_196 = tensor.expand_shape %extracted_slice_195 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_197 = tensor.extract_slice %arg0[2003046400] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_198 = tensor.expand_shape %extracted_slice_197 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_199 = tensor.extract_slice %arg0[2019823616] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_200 = tensor.expand_shape %extracted_slice_199 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_201 = tensor.extract_slice %arg0[2064912384] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_202 = tensor.expand_shape %extracted_slice_201 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_203 = tensor.extract_slice %arg0[2110001152] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_204 = tensor.expand_shape %extracted_slice_203 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_205 = tensor.extract_slice %arg0[2155089920] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_206 = tensor.expand_shape %extracted_slice_205 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_207 = tensor.extract_slice %arg0[2171867136] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_208 = tensor.expand_shape %extracted_slice_207 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_209 = tensor.extract_slice %arg0[2188644352] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_210 = tensor.expand_shape %extracted_slice_209 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_211 = tensor.extract_slice %arg0[2205421568] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_212 = tensor.expand_shape %extracted_slice_211 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_213 = tensor.extract_slice %arg0[2222198784] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_214 = tensor.expand_shape %extracted_slice_213 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_215 = tensor.extract_slice %arg0[2267287552] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_216 = tensor.expand_shape %extracted_slice_215 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_217 = tensor.extract_slice %arg0[2312376320] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_218 = tensor.expand_shape %extracted_slice_217 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_219 = tensor.extract_slice %arg0[2357465088] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_220 = tensor.expand_shape %extracted_slice_219 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_221 = tensor.extract_slice %arg0[2374242304] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_222 = tensor.expand_shape %extracted_slice_221 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_223 = tensor.extract_slice %arg0[2391019520] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_224 = tensor.expand_shape %extracted_slice_223 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_225 = tensor.extract_slice %arg0[2407796736] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_226 = tensor.expand_shape %extracted_slice_225 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_227 = tensor.extract_slice %arg0[2424573952] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_228 = tensor.expand_shape %extracted_slice_227 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_229 = tensor.extract_slice %arg0[2469662720] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_230 = tensor.expand_shape %extracted_slice_229 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_231 = tensor.extract_slice %arg0[2514751488] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_232 = tensor.expand_shape %extracted_slice_231 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_233 = tensor.extract_slice %arg0[2559840256] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_234 = tensor.expand_shape %extracted_slice_233 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_235 = tensor.extract_slice %arg0[2576617472] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_236 = tensor.expand_shape %extracted_slice_235 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_237 = tensor.extract_slice %arg0[2593394688] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_238 = tensor.expand_shape %extracted_slice_237 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_239 = tensor.extract_slice %arg0[2610171904] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_240 = tensor.expand_shape %extracted_slice_239 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_241 = tensor.extract_slice %arg0[2626949120] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_242 = tensor.expand_shape %extracted_slice_241 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_243 = tensor.extract_slice %arg0[2672037888] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_244 = tensor.expand_shape %extracted_slice_243 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_245 = tensor.extract_slice %arg0[2717126656] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_246 = tensor.expand_shape %extracted_slice_245 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_247 = tensor.extract_slice %arg0[2762215424] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_248 = tensor.expand_shape %extracted_slice_247 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_249 = tensor.extract_slice %arg0[2778992640] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_250 = tensor.expand_shape %extracted_slice_249 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_251 = tensor.extract_slice %arg0[2795769856] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_252 = tensor.expand_shape %extracted_slice_251 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_253 = tensor.extract_slice %arg0[2812547072] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_254 = tensor.expand_shape %extracted_slice_253 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_255 = tensor.extract_slice %arg0[2829324288] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_256 = tensor.expand_shape %extracted_slice_255 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_257 = tensor.extract_slice %arg0[2874413056] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_258 = tensor.expand_shape %extracted_slice_257 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_259 = tensor.extract_slice %arg0[2919501824] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_260 = tensor.expand_shape %extracted_slice_259 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_261 = tensor.extract_slice %arg0[2964590592] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_262 = tensor.expand_shape %extracted_slice_261 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_263 = tensor.extract_slice %arg0[2981367808] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_264 = tensor.expand_shape %extracted_slice_263 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_265 = tensor.extract_slice %arg0[2998145024] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_266 = tensor.expand_shape %extracted_slice_265 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_267 = tensor.extract_slice %arg0[3014922240] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_268 = tensor.expand_shape %extracted_slice_267 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_269 = tensor.extract_slice %arg0[3031699456] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_270 = tensor.expand_shape %extracted_slice_269 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_271 = tensor.extract_slice %arg0[3076788224] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_272 = tensor.expand_shape %extracted_slice_271 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_273 = tensor.extract_slice %arg0[3121876992] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_274 = tensor.expand_shape %extracted_slice_273 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_275 = tensor.extract_slice %arg0[3166965760] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_276 = tensor.expand_shape %extracted_slice_275 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_277 = tensor.extract_slice %arg0[3183742976] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_278 = tensor.expand_shape %extracted_slice_277 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_279 = tensor.extract_slice %arg0[3200520192] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_280 = tensor.expand_shape %extracted_slice_279 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_281 = tensor.extract_slice %arg0[3217297408] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_282 = tensor.expand_shape %extracted_slice_281 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_283 = tensor.extract_slice %arg0[3234074624] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_284 = tensor.expand_shape %extracted_slice_283 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_285 = tensor.extract_slice %arg0[3279163392] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_286 = tensor.expand_shape %extracted_slice_285 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_287 = tensor.extract_slice %arg0[3324252160] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_288 = tensor.expand_shape %extracted_slice_287 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_289 = tensor.extract_slice %arg0[3369340928] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_290 = tensor.expand_shape %extracted_slice_289 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_291 = tensor.extract_slice %arg0[3386118144] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_292 = tensor.expand_shape %extracted_slice_291 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_293 = tensor.extract_slice %arg0[3402895360] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_294 = tensor.expand_shape %extracted_slice_293 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_295 = tensor.extract_slice %arg0[3419672576] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_296 = tensor.expand_shape %extracted_slice_295 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_297 = tensor.extract_slice %arg0[3436449792] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_298 = tensor.expand_shape %extracted_slice_297 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_299 = tensor.extract_slice %arg0[3481538560] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_300 = tensor.expand_shape %extracted_slice_299 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_301 = tensor.extract_slice %arg0[3526627328] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_302 = tensor.expand_shape %extracted_slice_301 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_303 = tensor.extract_slice %arg0[3571716096] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_304 = tensor.expand_shape %extracted_slice_303 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_305 = tensor.extract_slice %arg0[3588493312] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_306 = tensor.expand_shape %extracted_slice_305 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_307 = tensor.extract_slice %arg0[3605270528] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_308 = tensor.expand_shape %extracted_slice_307 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_309 = tensor.extract_slice %arg0[3622047744] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_310 = tensor.expand_shape %extracted_slice_309 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_311 = tensor.extract_slice %arg0[3638824960] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_312 = tensor.expand_shape %extracted_slice_311 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_313 = tensor.extract_slice %arg0[3683913728] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_314 = tensor.expand_shape %extracted_slice_313 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_315 = tensor.extract_slice %arg0[3729002496] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_316 = tensor.expand_shape %extracted_slice_315 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_317 = tensor.extract_slice %arg0[3774091264] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_318 = tensor.expand_shape %extracted_slice_317 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_319 = tensor.extract_slice %arg0[3790868480] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_320 = tensor.expand_shape %extracted_slice_319 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_321 = tensor.extract_slice %arg0[3807645696] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_322 = tensor.expand_shape %extracted_slice_321 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_323 = tensor.extract_slice %arg0[3824422912] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_324 = tensor.expand_shape %extracted_slice_323 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_325 = tensor.extract_slice %arg0[3841200128] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_326 = tensor.expand_shape %extracted_slice_325 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_327 = tensor.extract_slice %arg0[3886288896] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_328 = tensor.expand_shape %extracted_slice_327 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_329 = tensor.extract_slice %arg0[3931377664] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_330 = tensor.expand_shape %extracted_slice_329 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_331 = tensor.extract_slice %arg0[3976466432] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_332 = tensor.expand_shape %extracted_slice_331 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_333 = tensor.extract_slice %arg0[3993243648] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_334 = tensor.expand_shape %extracted_slice_333 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_335 = tensor.extract_slice %arg0[4010020864] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_336 = tensor.expand_shape %extracted_slice_335 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_337 = tensor.extract_slice %arg0[4026798080] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_338 = tensor.expand_shape %extracted_slice_337 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_339 = tensor.extract_slice %arg0[4043575296] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_340 = tensor.expand_shape %extracted_slice_339 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_341 = tensor.extract_slice %arg0[4088664064] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_342 = tensor.expand_shape %extracted_slice_341 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_343 = tensor.extract_slice %arg0[4133752832] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_344 = tensor.expand_shape %extracted_slice_343 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_345 = tensor.extract_slice %arg0[4178841600] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_346 = tensor.expand_shape %extracted_slice_345 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_347 = tensor.extract_slice %arg0[4195618816] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_348 = tensor.expand_shape %extracted_slice_347 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_349 = tensor.extract_slice %arg0[4212396032] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_350 = tensor.expand_shape %extracted_slice_349 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_351 = tensor.extract_slice %arg0[4229173248] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_352 = tensor.expand_shape %extracted_slice_351 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_353 = tensor.extract_slice %arg0[4245950464] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_354 = tensor.expand_shape %extracted_slice_353 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_355 = tensor.extract_slice %arg0[4291039232] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_356 = tensor.expand_shape %extracted_slice_355 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_357 = tensor.extract_slice %arg0[4336128000] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_358 = tensor.expand_shape %extracted_slice_357 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_359 = tensor.extract_slice %arg0[4381216768] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_360 = tensor.expand_shape %extracted_slice_359 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_361 = tensor.extract_slice %arg0[4397993984] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_362 = tensor.expand_shape %extracted_slice_361 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_363 = tensor.extract_slice %arg0[4414771200] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_364 = tensor.expand_shape %extracted_slice_363 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_365 = tensor.extract_slice %arg0[4431548416] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_366 = tensor.expand_shape %extracted_slice_365 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_367 = tensor.extract_slice %arg0[4448325632] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_368 = tensor.expand_shape %extracted_slice_367 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_369 = tensor.extract_slice %arg0[4493414400] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_370 = tensor.expand_shape %extracted_slice_369 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_371 = tensor.extract_slice %arg0[4538503168] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_372 = tensor.expand_shape %extracted_slice_371 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_373 = tensor.extract_slice %arg0[4583591936] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_374 = tensor.expand_shape %extracted_slice_373 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_375 = tensor.extract_slice %arg0[4600369152] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_376 = tensor.expand_shape %extracted_slice_375 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_377 = tensor.extract_slice %arg0[4617146368] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_378 = tensor.expand_shape %extracted_slice_377 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_379 = tensor.extract_slice %arg0[4633923584] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_380 = tensor.expand_shape %extracted_slice_379 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_381 = tensor.extract_slice %arg0[4650700800] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_382 = tensor.expand_shape %extracted_slice_381 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_383 = tensor.extract_slice %arg0[4695789568] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_384 = tensor.expand_shape %extracted_slice_383 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_385 = tensor.extract_slice %arg0[4740878336] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_386 = tensor.expand_shape %extracted_slice_385 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_387 = tensor.extract_slice %arg0[4785967104] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_388 = tensor.expand_shape %extracted_slice_387 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_389 = tensor.extract_slice %arg0[4802744320] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_390 = tensor.expand_shape %extracted_slice_389 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_391 = tensor.extract_slice %arg0[4819521536] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_392 = tensor.expand_shape %extracted_slice_391 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_393 = tensor.extract_slice %arg0[4836298752] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_394 = tensor.expand_shape %extracted_slice_393 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_395 = tensor.extract_slice %arg0[4853075968] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_396 = tensor.expand_shape %extracted_slice_395 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_397 = tensor.extract_slice %arg0[4898164736] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_398 = tensor.expand_shape %extracted_slice_397 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_399 = tensor.extract_slice %arg0[4943253504] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_400 = tensor.expand_shape %extracted_slice_399 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_401 = tensor.extract_slice %arg0[4988342272] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_402 = tensor.expand_shape %extracted_slice_401 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_403 = tensor.extract_slice %arg0[5005119488] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_404 = tensor.expand_shape %extracted_slice_403 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_405 = tensor.extract_slice %arg0[5021896704] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_406 = tensor.expand_shape %extracted_slice_405 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_407 = tensor.extract_slice %arg0[5038673920] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_408 = tensor.expand_shape %extracted_slice_407 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_409 = tensor.extract_slice %arg0[5055451136] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_410 = tensor.expand_shape %extracted_slice_409 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_411 = tensor.extract_slice %arg0[5100539904] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_412 = tensor.expand_shape %extracted_slice_411 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_413 = tensor.extract_slice %arg0[5145628672] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_414 = tensor.expand_shape %extracted_slice_413 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_415 = tensor.extract_slice %arg0[5190717440] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_416 = tensor.expand_shape %extracted_slice_415 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_417 = tensor.extract_slice %arg0[5207494656] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_418 = tensor.expand_shape %extracted_slice_417 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_419 = tensor.extract_slice %arg0[5224271872] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_420 = tensor.expand_shape %extracted_slice_419 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_421 = tensor.extract_slice %arg0[5241049088] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_422 = tensor.expand_shape %extracted_slice_421 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_423 = tensor.extract_slice %arg0[5257826304] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_424 = tensor.expand_shape %extracted_slice_423 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_425 = tensor.extract_slice %arg0[5302915072] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_426 = tensor.expand_shape %extracted_slice_425 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_427 = tensor.extract_slice %arg0[5348003840] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_428 = tensor.expand_shape %extracted_slice_427 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_429 = tensor.extract_slice %arg0[5393092608] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_430 = tensor.expand_shape %extracted_slice_429 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_431 = tensor.extract_slice %arg0[5409869824] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_432 = tensor.expand_shape %extracted_slice_431 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_433 = tensor.extract_slice %arg0[5426647040] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_434 = tensor.expand_shape %extracted_slice_433 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_435 = tensor.extract_slice %arg0[5443424256] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_436 = tensor.expand_shape %extracted_slice_435 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_437 = tensor.extract_slice %arg0[5460201472] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_438 = tensor.expand_shape %extracted_slice_437 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_439 = tensor.extract_slice %arg0[5505290240] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_440 = tensor.expand_shape %extracted_slice_439 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_441 = tensor.extract_slice %arg0[5550379008] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_442 = tensor.expand_shape %extracted_slice_441 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_443 = tensor.extract_slice %arg0[5595467776] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_444 = tensor.expand_shape %extracted_slice_443 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_445 = tensor.extract_slice %arg0[5612244992] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_446 = tensor.expand_shape %extracted_slice_445 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_447 = tensor.extract_slice %arg0[5629022208] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_448 = tensor.expand_shape %extracted_slice_447 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_449 = tensor.extract_slice %arg0[5645799424] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_450 = tensor.expand_shape %extracted_slice_449 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_451 = tensor.extract_slice %arg0[5662576640] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_452 = tensor.expand_shape %extracted_slice_451 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_453 = tensor.extract_slice %arg0[5707665408] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_454 = tensor.expand_shape %extracted_slice_453 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_455 = tensor.extract_slice %arg0[5752754176] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_456 = tensor.expand_shape %extracted_slice_455 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_457 = tensor.extract_slice %arg0[5797842944] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_458 = tensor.expand_shape %extracted_slice_457 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_459 = tensor.extract_slice %arg0[5814620160] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_460 = tensor.expand_shape %extracted_slice_459 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_461 = tensor.extract_slice %arg0[5831397376] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_462 = tensor.expand_shape %extracted_slice_461 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_463 = tensor.extract_slice %arg0[5848174592] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_464 = tensor.expand_shape %extracted_slice_463 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_465 = tensor.extract_slice %arg0[5864951808] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_466 = tensor.expand_shape %extracted_slice_465 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_467 = tensor.extract_slice %arg0[5910040576] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_468 = tensor.expand_shape %extracted_slice_467 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_469 = tensor.extract_slice %arg0[5955129344] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_470 = tensor.expand_shape %extracted_slice_469 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_471 = tensor.extract_slice %arg0[6000218112] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_472 = tensor.expand_shape %extracted_slice_471 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_473 = tensor.extract_slice %arg0[6016995328] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_474 = tensor.expand_shape %extracted_slice_473 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_475 = tensor.extract_slice %arg0[6033772544] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_476 = tensor.expand_shape %extracted_slice_475 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_477 = tensor.extract_slice %arg0[6050549760] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_478 = tensor.expand_shape %extracted_slice_477 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_479 = tensor.extract_slice %arg0[6067326976] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_480 = tensor.expand_shape %extracted_slice_479 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_481 = tensor.extract_slice %arg0[6112415744] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_482 = tensor.expand_shape %extracted_slice_481 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_483 = tensor.extract_slice %arg0[6157504512] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_484 = tensor.expand_shape %extracted_slice_483 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_485 = tensor.extract_slice %arg0[6202593280] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_486 = tensor.expand_shape %extracted_slice_485 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_487 = tensor.extract_slice %arg0[6219370496] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_488 = tensor.expand_shape %extracted_slice_487 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_489 = tensor.extract_slice %arg0[6236147712] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_490 = tensor.expand_shape %extracted_slice_489 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_491 = tensor.extract_slice %arg0[6252924928] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_492 = tensor.expand_shape %extracted_slice_491 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_493 = tensor.extract_slice %arg0[6269702144] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_494 = tensor.expand_shape %extracted_slice_493 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_495 = tensor.extract_slice %arg0[6314790912] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_496 = tensor.expand_shape %extracted_slice_495 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_497 = tensor.extract_slice %arg0[6359879680] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_498 = tensor.expand_shape %extracted_slice_497 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_499 = tensor.extract_slice %arg0[6404968448] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_500 = tensor.expand_shape %extracted_slice_499 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_501 = tensor.extract_slice %arg0[6421745664] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_502 = tensor.expand_shape %extracted_slice_501 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_503 = tensor.extract_slice %arg0[6438522880] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_504 = tensor.expand_shape %extracted_slice_503 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_505 = tensor.extract_slice %arg0[6455300096] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_506 = tensor.expand_shape %extracted_slice_505 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_507 = tensor.extract_slice %arg0[6472077312] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_508 = tensor.expand_shape %extracted_slice_507 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_509 = tensor.extract_slice %arg0[6517166080] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_510 = tensor.expand_shape %extracted_slice_509 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_511 = tensor.extract_slice %arg0[6562254848] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_512 = tensor.expand_shape %extracted_slice_511 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_513 = tensor.extract_slice %arg0[6607343616] [131072000] [1] : tensor<6755192832xf32> to tensor<131072000xf32>
    %expanded_514 = tensor.expand_shape %extracted_slice_513 [[0, 1]] : tensor<131072000xf32> into tensor<32000x4096xf32>
    %extracted_slice_515 = tensor.extract_slice %arg0[6738415616] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_516 = tensor.expand_shape %extracted_slice_515 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_517 = tensor.extract_slice %arg0[6738677760] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_518 = tensor.expand_shape %extracted_slice_517 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_519 = tensor.extract_slice %arg0[6738939904] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_520 = tensor.expand_shape %extracted_slice_519 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_521 = tensor.extract_slice %arg0[6739202048] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_522 = tensor.expand_shape %extracted_slice_521 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_523 = tensor.extract_slice %arg0[6739464192] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_524 = tensor.expand_shape %extracted_slice_523 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_525 = tensor.extract_slice %arg0[6739726336] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_526 = tensor.expand_shape %extracted_slice_525 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_527 = tensor.extract_slice %arg0[6739988480] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_528 = tensor.expand_shape %extracted_slice_527 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_529 = tensor.extract_slice %arg0[6740250624] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_530 = tensor.expand_shape %extracted_slice_529 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_531 = tensor.extract_slice %arg0[6740512768] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_532 = tensor.expand_shape %extracted_slice_531 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_533 = tensor.extract_slice %arg0[6740774912] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_534 = tensor.expand_shape %extracted_slice_533 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_535 = tensor.extract_slice %arg0[6741037056] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_536 = tensor.expand_shape %extracted_slice_535 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_537 = tensor.extract_slice %arg0[6741299200] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_538 = tensor.expand_shape %extracted_slice_537 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_539 = tensor.extract_slice %arg0[6741561344] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_540 = tensor.expand_shape %extracted_slice_539 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_541 = tensor.extract_slice %arg0[6741823488] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_542 = tensor.expand_shape %extracted_slice_541 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_543 = tensor.extract_slice %arg0[6742085632] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_544 = tensor.expand_shape %extracted_slice_543 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_545 = tensor.extract_slice %arg0[6742347776] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_546 = tensor.expand_shape %extracted_slice_545 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_547 = tensor.extract_slice %arg0[6742609920] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_548 = tensor.expand_shape %extracted_slice_547 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_549 = tensor.extract_slice %arg0[6742872064] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_550 = tensor.expand_shape %extracted_slice_549 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_551 = tensor.extract_slice %arg0[6743134208] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_552 = tensor.expand_shape %extracted_slice_551 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_553 = tensor.extract_slice %arg0[6743396352] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_554 = tensor.expand_shape %extracted_slice_553 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_555 = tensor.extract_slice %arg0[6743658496] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_556 = tensor.expand_shape %extracted_slice_555 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_557 = tensor.extract_slice %arg0[6743920640] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_558 = tensor.expand_shape %extracted_slice_557 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_559 = tensor.extract_slice %arg0[6744182784] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_560 = tensor.expand_shape %extracted_slice_559 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_561 = tensor.extract_slice %arg0[6744444928] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_562 = tensor.expand_shape %extracted_slice_561 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_563 = tensor.extract_slice %arg0[6744707072] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_564 = tensor.expand_shape %extracted_slice_563 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_565 = tensor.extract_slice %arg0[6744969216] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_566 = tensor.expand_shape %extracted_slice_565 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_567 = tensor.extract_slice %arg0[6745231360] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_568 = tensor.expand_shape %extracted_slice_567 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_569 = tensor.extract_slice %arg0[6745493504] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_570 = tensor.expand_shape %extracted_slice_569 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_571 = tensor.extract_slice %arg0[6745755648] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_572 = tensor.expand_shape %extracted_slice_571 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_573 = tensor.extract_slice %arg0[6746017792] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_574 = tensor.expand_shape %extracted_slice_573 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_575 = tensor.extract_slice %arg0[6746279936] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_576 = tensor.expand_shape %extracted_slice_575 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_577 = tensor.extract_slice %arg0[6746542080] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_578 = tensor.expand_shape %extracted_slice_577 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_579 = tensor.extract_slice %arg0[6746804224] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_580 = tensor.expand_shape %extracted_slice_579 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_581 = tensor.extract_slice %arg0[6747066368] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_582 = tensor.expand_shape %extracted_slice_581 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_583 = tensor.extract_slice %arg0[6747328512] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_584 = tensor.expand_shape %extracted_slice_583 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_585 = tensor.extract_slice %arg0[6747590656] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_586 = tensor.expand_shape %extracted_slice_585 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_587 = tensor.extract_slice %arg0[6747852800] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_588 = tensor.expand_shape %extracted_slice_587 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_589 = tensor.extract_slice %arg0[6748114944] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_590 = tensor.expand_shape %extracted_slice_589 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_591 = tensor.extract_slice %arg0[6748377088] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_592 = tensor.expand_shape %extracted_slice_591 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_593 = tensor.extract_slice %arg0[6748639232] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_594 = tensor.expand_shape %extracted_slice_593 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_595 = tensor.extract_slice %arg0[6748901376] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_596 = tensor.expand_shape %extracted_slice_595 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_597 = tensor.extract_slice %arg0[6749163520] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_598 = tensor.expand_shape %extracted_slice_597 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_599 = tensor.extract_slice %arg0[6749425664] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_600 = tensor.expand_shape %extracted_slice_599 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_601 = tensor.extract_slice %arg0[6749687808] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_602 = tensor.expand_shape %extracted_slice_601 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_603 = tensor.extract_slice %arg0[6749949952] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_604 = tensor.expand_shape %extracted_slice_603 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_605 = tensor.extract_slice %arg0[6750212096] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_606 = tensor.expand_shape %extracted_slice_605 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_607 = tensor.extract_slice %arg0[6750474240] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_608 = tensor.expand_shape %extracted_slice_607 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_609 = tensor.extract_slice %arg0[6750736384] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_610 = tensor.expand_shape %extracted_slice_609 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_611 = tensor.extract_slice %arg0[6750998528] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_612 = tensor.expand_shape %extracted_slice_611 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_613 = tensor.extract_slice %arg0[6751260672] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_614 = tensor.expand_shape %extracted_slice_613 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_615 = tensor.extract_slice %arg0[6751522816] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_616 = tensor.expand_shape %extracted_slice_615 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_617 = tensor.extract_slice %arg0[6751784960] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_618 = tensor.expand_shape %extracted_slice_617 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_619 = tensor.extract_slice %arg0[6752047104] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_620 = tensor.expand_shape %extracted_slice_619 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_621 = tensor.extract_slice %arg0[6752309248] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_622 = tensor.expand_shape %extracted_slice_621 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_623 = tensor.extract_slice %arg0[6752571392] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_624 = tensor.expand_shape %extracted_slice_623 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_625 = tensor.extract_slice %arg0[6752833536] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_626 = tensor.expand_shape %extracted_slice_625 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_627 = tensor.extract_slice %arg0[6753095680] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_628 = tensor.expand_shape %extracted_slice_627 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_629 = tensor.extract_slice %arg0[6753357824] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_630 = tensor.expand_shape %extracted_slice_629 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_631 = tensor.extract_slice %arg0[6753619968] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_632 = tensor.expand_shape %extracted_slice_631 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_633 = tensor.extract_slice %arg0[6753882112] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_634 = tensor.expand_shape %extracted_slice_633 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_635 = tensor.extract_slice %arg0[6754144256] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_636 = tensor.expand_shape %extracted_slice_635 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_637 = tensor.extract_slice %arg0[6754406400] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_638 = tensor.expand_shape %extracted_slice_637 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_639 = tensor.extract_slice %arg0[6754668544] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_640 = tensor.expand_shape %extracted_slice_639 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_641 = tensor.extract_slice %arg0[6754930688] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_642 = tensor.expand_shape %extracted_slice_641 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %cst = arith.constant dense<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]> : tensor<80xi64>
    %0 = "tosa.reshape"(%cst) {new_shape = array<i64: 1, 80>} : (tensor<80xi64>) -> tensor<1x80xi64>
    %1 = "tosa.reshape"(%0) {new_shape = array<i64: 1, 80>} : (tensor<1x80xi64>) -> tensor<1x80xi64>
    %2 = tensor.empty() : tensor<1x80x4096xf32>
    %3 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg1 : tensor<1x80xi64>) outs(%2 : tensor<1x80x4096xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %expanded[%5230, %5231] : tensor<32000x4096xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x4096xf32>
    %cst_643 = arith.constant dense<true> : tensor<1x80xi1>
    %cst_644 = arith.constant dense<-3.40282347E+38> : tensor<80x80xf32>
    %cst_645 = arith.constant dense<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]> : tensor<80xi64>
    %cst_646 = arith.constant dense<1> : tensor<i64>
    %4 = "tosa.add"(%cst_645, %cst_646) : (tensor<80xi64>, tensor<i64>) -> tensor<80xi64>
    %5 = "tosa.reshape"(%4) {new_shape = array<i64: 80, 1>} : (tensor<80xi64>) -> tensor<80x1xi64>
    %6 = tensor.empty() : tensor<80x80xi1>
    %7 = linalg.generic {indexing_maps = [#map2, #map3, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%cst_645, %5 : tensor<80xi64>, tensor<80x1xi64>) outs(%6 : tensor<80x80xi1>) {
    ^bb0(%in: i64, %in_1777: i64, %out: i1):
      %5230 = arith.cmpi slt, %in, %in_1777 : i64
      linalg.yield %5230 : i1
    } -> tensor<80x80xi1>
    %cst_647 = arith.constant 0.000000e+00 : f32
    %8 = tensor.empty() : tensor<80x80xf32>
    %9 = linalg.generic {indexing_maps = [#map4, #map4, #map4], iterator_types = ["parallel", "parallel"]} ins(%cst_644, %7 : tensor<80x80xf32>, tensor<80x80xi1>) outs(%8 : tensor<80x80xf32>) {
    ^bb0(%in: f32, %in_1777: i1, %out: f32):
      %5230 = arith.select %in_1777, %cst_647, %in : f32
      linalg.yield %5230 : f32
    } -> tensor<80x80xf32>
    %extracted_slice_648 = tensor.extract_slice %cst_643[0, 0] [1, 80] [1, 1] : tensor<1x80xi1> to tensor<1x80xi1>
    %10 = "tosa.reshape"(%extracted_slice_648) {new_shape = array<i64: 1, 1, 80>} : (tensor<1x80xi1>) -> tensor<1x1x80xi1>
    %11 = "tosa.reshape"(%10) {new_shape = array<i64: 1, 1, 1, 80>} : (tensor<1x1x80xi1>) -> tensor<1x1x1x80xi1>
    %extracted_slice_649 = tensor.extract_slice %11[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %12 = tensor.empty() : tensor<1x1x80x80xi1>
    %extracted_slice_650 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice = tensor.insert_slice %extracted_slice_650 into %12[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_651 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_652 = tensor.insert_slice %extracted_slice_651 into %inserted_slice[0, 0, 1, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_653 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_654 = tensor.insert_slice %extracted_slice_653 into %inserted_slice_652[0, 0, 2, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_655 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_656 = tensor.insert_slice %extracted_slice_655 into %inserted_slice_654[0, 0, 3, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_657 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_658 = tensor.insert_slice %extracted_slice_657 into %inserted_slice_656[0, 0, 4, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_659 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_660 = tensor.insert_slice %extracted_slice_659 into %inserted_slice_658[0, 0, 5, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_661 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_662 = tensor.insert_slice %extracted_slice_661 into %inserted_slice_660[0, 0, 6, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_663 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_664 = tensor.insert_slice %extracted_slice_663 into %inserted_slice_662[0, 0, 7, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_665 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_666 = tensor.insert_slice %extracted_slice_665 into %inserted_slice_664[0, 0, 8, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_667 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_668 = tensor.insert_slice %extracted_slice_667 into %inserted_slice_666[0, 0, 9, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_669 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_670 = tensor.insert_slice %extracted_slice_669 into %inserted_slice_668[0, 0, 10, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_671 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_672 = tensor.insert_slice %extracted_slice_671 into %inserted_slice_670[0, 0, 11, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_673 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_674 = tensor.insert_slice %extracted_slice_673 into %inserted_slice_672[0, 0, 12, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_675 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_676 = tensor.insert_slice %extracted_slice_675 into %inserted_slice_674[0, 0, 13, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_677 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_678 = tensor.insert_slice %extracted_slice_677 into %inserted_slice_676[0, 0, 14, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_679 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_680 = tensor.insert_slice %extracted_slice_679 into %inserted_slice_678[0, 0, 15, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_681 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_682 = tensor.insert_slice %extracted_slice_681 into %inserted_slice_680[0, 0, 16, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_683 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_684 = tensor.insert_slice %extracted_slice_683 into %inserted_slice_682[0, 0, 17, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_685 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_686 = tensor.insert_slice %extracted_slice_685 into %inserted_slice_684[0, 0, 18, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_687 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_688 = tensor.insert_slice %extracted_slice_687 into %inserted_slice_686[0, 0, 19, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_689 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_690 = tensor.insert_slice %extracted_slice_689 into %inserted_slice_688[0, 0, 20, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_691 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_692 = tensor.insert_slice %extracted_slice_691 into %inserted_slice_690[0, 0, 21, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_693 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_694 = tensor.insert_slice %extracted_slice_693 into %inserted_slice_692[0, 0, 22, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_695 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_696 = tensor.insert_slice %extracted_slice_695 into %inserted_slice_694[0, 0, 23, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_697 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_698 = tensor.insert_slice %extracted_slice_697 into %inserted_slice_696[0, 0, 24, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_699 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_700 = tensor.insert_slice %extracted_slice_699 into %inserted_slice_698[0, 0, 25, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_701 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_702 = tensor.insert_slice %extracted_slice_701 into %inserted_slice_700[0, 0, 26, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_703 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_704 = tensor.insert_slice %extracted_slice_703 into %inserted_slice_702[0, 0, 27, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_705 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_706 = tensor.insert_slice %extracted_slice_705 into %inserted_slice_704[0, 0, 28, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_707 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_708 = tensor.insert_slice %extracted_slice_707 into %inserted_slice_706[0, 0, 29, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_709 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_710 = tensor.insert_slice %extracted_slice_709 into %inserted_slice_708[0, 0, 30, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_711 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_712 = tensor.insert_slice %extracted_slice_711 into %inserted_slice_710[0, 0, 31, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_713 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_714 = tensor.insert_slice %extracted_slice_713 into %inserted_slice_712[0, 0, 32, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_715 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_716 = tensor.insert_slice %extracted_slice_715 into %inserted_slice_714[0, 0, 33, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_717 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_718 = tensor.insert_slice %extracted_slice_717 into %inserted_slice_716[0, 0, 34, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_719 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_720 = tensor.insert_slice %extracted_slice_719 into %inserted_slice_718[0, 0, 35, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_721 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_722 = tensor.insert_slice %extracted_slice_721 into %inserted_slice_720[0, 0, 36, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_723 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_724 = tensor.insert_slice %extracted_slice_723 into %inserted_slice_722[0, 0, 37, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_725 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_726 = tensor.insert_slice %extracted_slice_725 into %inserted_slice_724[0, 0, 38, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_727 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_728 = tensor.insert_slice %extracted_slice_727 into %inserted_slice_726[0, 0, 39, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_729 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_730 = tensor.insert_slice %extracted_slice_729 into %inserted_slice_728[0, 0, 40, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_731 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_732 = tensor.insert_slice %extracted_slice_731 into %inserted_slice_730[0, 0, 41, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_733 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_734 = tensor.insert_slice %extracted_slice_733 into %inserted_slice_732[0, 0, 42, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_735 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_736 = tensor.insert_slice %extracted_slice_735 into %inserted_slice_734[0, 0, 43, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_737 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_738 = tensor.insert_slice %extracted_slice_737 into %inserted_slice_736[0, 0, 44, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_739 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_740 = tensor.insert_slice %extracted_slice_739 into %inserted_slice_738[0, 0, 45, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_741 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_742 = tensor.insert_slice %extracted_slice_741 into %inserted_slice_740[0, 0, 46, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_743 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_744 = tensor.insert_slice %extracted_slice_743 into %inserted_slice_742[0, 0, 47, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_745 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_746 = tensor.insert_slice %extracted_slice_745 into %inserted_slice_744[0, 0, 48, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_747 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_748 = tensor.insert_slice %extracted_slice_747 into %inserted_slice_746[0, 0, 49, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_749 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_750 = tensor.insert_slice %extracted_slice_749 into %inserted_slice_748[0, 0, 50, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_751 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_752 = tensor.insert_slice %extracted_slice_751 into %inserted_slice_750[0, 0, 51, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_753 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_754 = tensor.insert_slice %extracted_slice_753 into %inserted_slice_752[0, 0, 52, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_755 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_756 = tensor.insert_slice %extracted_slice_755 into %inserted_slice_754[0, 0, 53, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_757 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_758 = tensor.insert_slice %extracted_slice_757 into %inserted_slice_756[0, 0, 54, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_759 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_760 = tensor.insert_slice %extracted_slice_759 into %inserted_slice_758[0, 0, 55, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_761 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_762 = tensor.insert_slice %extracted_slice_761 into %inserted_slice_760[0, 0, 56, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_763 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_764 = tensor.insert_slice %extracted_slice_763 into %inserted_slice_762[0, 0, 57, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_765 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_766 = tensor.insert_slice %extracted_slice_765 into %inserted_slice_764[0, 0, 58, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_767 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_768 = tensor.insert_slice %extracted_slice_767 into %inserted_slice_766[0, 0, 59, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_769 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_770 = tensor.insert_slice %extracted_slice_769 into %inserted_slice_768[0, 0, 60, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_771 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_772 = tensor.insert_slice %extracted_slice_771 into %inserted_slice_770[0, 0, 61, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_773 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_774 = tensor.insert_slice %extracted_slice_773 into %inserted_slice_772[0, 0, 62, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_775 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_776 = tensor.insert_slice %extracted_slice_775 into %inserted_slice_774[0, 0, 63, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_777 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_778 = tensor.insert_slice %extracted_slice_777 into %inserted_slice_776[0, 0, 64, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_779 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_780 = tensor.insert_slice %extracted_slice_779 into %inserted_slice_778[0, 0, 65, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_781 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_782 = tensor.insert_slice %extracted_slice_781 into %inserted_slice_780[0, 0, 66, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_783 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_784 = tensor.insert_slice %extracted_slice_783 into %inserted_slice_782[0, 0, 67, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_785 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_786 = tensor.insert_slice %extracted_slice_785 into %inserted_slice_784[0, 0, 68, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_787 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_788 = tensor.insert_slice %extracted_slice_787 into %inserted_slice_786[0, 0, 69, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_789 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_790 = tensor.insert_slice %extracted_slice_789 into %inserted_slice_788[0, 0, 70, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_791 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_792 = tensor.insert_slice %extracted_slice_791 into %inserted_slice_790[0, 0, 71, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_793 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_794 = tensor.insert_slice %extracted_slice_793 into %inserted_slice_792[0, 0, 72, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_795 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_796 = tensor.insert_slice %extracted_slice_795 into %inserted_slice_794[0, 0, 73, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_797 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_798 = tensor.insert_slice %extracted_slice_797 into %inserted_slice_796[0, 0, 74, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_799 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_800 = tensor.insert_slice %extracted_slice_799 into %inserted_slice_798[0, 0, 75, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_801 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_802 = tensor.insert_slice %extracted_slice_801 into %inserted_slice_800[0, 0, 76, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_803 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_804 = tensor.insert_slice %extracted_slice_803 into %inserted_slice_802[0, 0, 77, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_805 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_806 = tensor.insert_slice %extracted_slice_805 into %inserted_slice_804[0, 0, 78, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_807 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_808 = tensor.insert_slice %extracted_slice_807 into %inserted_slice_806[0, 0, 79, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %13 = tensor.empty() : tensor<1x1x80x80xf32>
    %14 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_808 : tensor<1x1x80x80xi1>) outs(%13 : tensor<1x1x80x80xf32>) {
    ^bb0(%in: i1, %out: f32):
      %5230 = arith.extui %in : i1 to i32
      %5231 = arith.sitofp %5230 : i32 to f32
      linalg.yield %5231 : f32
    } -> tensor<1x1x80x80xf32>
    %cst_809 = arith.constant 1.000000e+00 : f32
    %15 = tensor.empty() : tensor<1x1x80x80xf32>
    %16 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%14 : tensor<1x1x80x80xf32>) outs(%15 : tensor<1x1x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.subf %cst_809, %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x1x80x80xf32>
    %17 = tensor.empty() : tensor<1x1x80x80xi1>
    %18 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%16 : tensor<1x1x80x80xf32>) outs(%17 : tensor<1x1x80x80xi1>) {
    ^bb0(%in: f32, %out: i1):
      %5230 = arith.fptosi %in : f32 to i32
      %5231 = arith.trunci %5230 : i32 to i1
      linalg.yield %5231 : i1
    } -> tensor<1x1x80x80xi1>
    %cst_810 = arith.constant -3.40282347E+38 : f32
    %19 = tensor.empty() : tensor<1x1x80x80xf32>
    %20 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%16, %18 : tensor<1x1x80x80xf32>, tensor<1x1x80x80xi1>) outs(%19 : tensor<1x1x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: i1, %out: f32):
      %5230 = arith.select %in_1777, %cst_810, %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x1x80x80xf32>
    %21 = "tosa.reshape"(%9) {new_shape = array<i64: 1, 80, 80>} : (tensor<80x80xf32>) -> tensor<1x80x80xf32>
    %22 = "tosa.reshape"(%21) {new_shape = array<i64: 1, 1, 80, 80>} : (tensor<1x80x80xf32>) -> tensor<1x1x80x80xf32>
    %extracted_slice_811 = tensor.extract_slice %22[0, 0, 0, 0] [1, 1, 80, 80] [1, 1, 1, 1] : tensor<1x1x80x80xf32> to tensor<1x1x80x80xf32>
    %extracted_slice_812 = tensor.extract_slice %extracted_slice_811[0, 0, 0, 0] [1, 1, 80, 80] [1, 1, 1, 1] : tensor<1x1x80x80xf32> to tensor<1x1x80x80xf32>
    %23 = tensor.empty() : tensor<1x1x80x80xf32>
    %extracted_slice_813 = tensor.extract_slice %extracted_slice_812[0, 0, 0, 0] [1, 1, 80, 80] [1, 1, 1, 1] : tensor<1x1x80x80xf32> to tensor<1x1x80x80xf32>
    %inserted_slice_814 = tensor.insert_slice %extracted_slice_813 into %23[0, 0, 0, 0] [1, 1, 80, 80] [1, 1, 1, 1] : tensor<1x1x80x80xf32> into tensor<1x1x80x80xf32>
    %24 = "tosa.add"(%20, %inserted_slice_814) : (tensor<1x1x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x1x80x80xf32>
    %25 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32 = arith.constant 2 : i32
    %26 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3 : tensor<1x80x4096xf32>) outs(%25 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_815 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %27 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%26 : tensor<1x80x4096xf32>) outs(%cst_815 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_816 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %28 = "tosa.add"(%27, %cst_816) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %29 = tensor.empty() : tensor<1x80x1xf32>
    %30 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%28 : tensor<1x80x1xf32>) outs(%29 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %31 = tensor.empty() : tensor<1x80x4096xf32>
    %32 = tensor.empty() : tensor<1x80x4096xf32>
    %33 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%30 : tensor<1x80x1xf32>) outs(%32 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %34 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3, %33 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%31 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %35 = tensor.empty() : tensor<1x80x4096xf32>
    %36 = tensor.empty() : tensor<1x80x4096xf32>
    %37 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice : tensor<4096xf32>) outs(%36 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %38 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%37, %34 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%35 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %39 = tensor.empty() : tensor<4096x4096xf32>
    %40 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_66 : tensor<4096x4096xf32>) outs(%39 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %41 = "tosa.reshape"(%38) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %42 = tensor.empty() : tensor<80x4096xf32>
    %43 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%42 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %44 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%41, %40 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%43 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %45 = "tosa.reshape"(%44) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %46 = tensor.empty() : tensor<4096x4096xf32>
    %47 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_68 : tensor<4096x4096xf32>) outs(%46 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %48 = "tosa.reshape"(%38) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %49 = tensor.empty() : tensor<80x4096xf32>
    %50 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%49 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %51 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%48, %47 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%50 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %52 = "tosa.reshape"(%51) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %53 = tensor.empty() : tensor<4096x4096xf32>
    %54 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_70 : tensor<4096x4096xf32>) outs(%53 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %55 = "tosa.reshape"(%38) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %56 = tensor.empty() : tensor<80x4096xf32>
    %57 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%56 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %58 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%55, %54 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%57 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %59 = "tosa.reshape"(%58) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %60 = "tosa.reshape"(%45) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %61 = tensor.empty() : tensor<1x32x80x128xf32>
    %62 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%60 : tensor<1x80x32x128xf32>) outs(%61 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %63 = "tosa.reshape"(%52) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %64 = tensor.empty() : tensor<1x32x80x128xf32>
    %65 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%63 : tensor<1x80x32x128xf32>) outs(%64 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %66 = "tosa.reshape"(%59) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %67 = tensor.empty() : tensor<1x32x80x128xf32>
    %68 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%66 : tensor<1x80x32x128xf32>) outs(%67 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_817 = tensor.extract_slice %expanded_516[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_818 = tensor.extract_slice %extracted_slice_817[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_819 = tensor.extract_slice %extracted_slice_818[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_820 = tensor.extract_slice %expanded_518[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_821 = tensor.extract_slice %extracted_slice_820[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_822 = tensor.extract_slice %extracted_slice_821[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %69 = tensor.empty() : tensor<1x80x128xf32>
    %70 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_819 : tensor<1x1x80x128xf32>) outs(%69 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %71 = tensor.empty() : tensor<80x128xf32>
    %72 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%70 : tensor<1x80x128xf32>) outs(%71 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %73 = tensor.empty() : tensor<1x80x128xf32>
    %74 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_822 : tensor<1x1x80x128xf32>) outs(%73 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %75 = tensor.empty() : tensor<80x128xf32>
    %76 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%74 : tensor<1x80x128xf32>) outs(%75 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %77 = tensor.empty() : tensor<1x80x128xf32>
    %78 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%77 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %72[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %79 = "tosa.reshape"(%78) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %80 = tensor.empty() : tensor<1x80x128xf32>
    %81 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%80 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %76[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %82 = "tosa.reshape"(%81) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %83 = tensor.empty() : tensor<1x32x80x128xf32>
    %84 = tensor.empty() : tensor<1x32x80x128xf32>
    %85 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%79 : tensor<1x1x80x128xf32>) outs(%84 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %86 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%62, %85 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%83 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_823 = tensor.extract_slice %62[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_824 = tensor.extract_slice %62[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %87 = tensor.empty() : tensor<1x32x80x64xf32>
    %88 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_824 : tensor<1x32x80x64xf32>) outs(%87 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %89 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_825 = tensor.insert_slice %88 into %89[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_826 = tensor.insert_slice %extracted_slice_823 into %inserted_slice_825[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %90 = tensor.empty() : tensor<1x32x80x128xf32>
    %91 = tensor.empty() : tensor<1x32x80x128xf32>
    %92 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%82 : tensor<1x1x80x128xf32>) outs(%91 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %93 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_826, %92 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%90 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %94 = "tosa.add"(%86, %93) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %95 = tensor.empty() : tensor<1x32x80x128xf32>
    %96 = tensor.empty() : tensor<1x32x80x128xf32>
    %97 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%79 : tensor<1x1x80x128xf32>) outs(%96 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %98 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%65, %97 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%95 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_827 = tensor.extract_slice %65[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_828 = tensor.extract_slice %65[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %99 = tensor.empty() : tensor<1x32x80x64xf32>
    %100 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_828 : tensor<1x32x80x64xf32>) outs(%99 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %101 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_829 = tensor.insert_slice %100 into %101[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_830 = tensor.insert_slice %extracted_slice_827 into %inserted_slice_829[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %102 = tensor.empty() : tensor<1x32x80x128xf32>
    %103 = tensor.empty() : tensor<1x32x80x128xf32>
    %104 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%82 : tensor<1x1x80x128xf32>) outs(%103 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %105 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_830, %104 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%102 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %106 = "tosa.add"(%98, %105) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %107 = tensor.empty() : tensor<1x32x128x80xf32>
    %108 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%106 : tensor<1x32x80x128xf32>) outs(%107 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %109 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_831 = tensor.extract_slice %94[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_832 = tensor.insert_slice %extracted_slice_831 into %109[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %110 = "tosa.reshape"(%inserted_slice_832) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %111 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_833 = tensor.extract_slice %108[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_834 = tensor.insert_slice %extracted_slice_833 into %111[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %112 = "tosa.reshape"(%inserted_slice_834) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %113 = tensor.empty() : tensor<32x80x80xf32>
    %114 = linalg.batch_matmul ins(%110, %112 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%113 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %115 = "tosa.reshape"(%114) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_835 = arith.constant 11.3137083 : f32
    %116 = tensor.empty() : tensor<1x32x80x80xf32>
    %117 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%115 : tensor<1x32x80x80xf32>) outs(%116 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.divf %in, %cst_835 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %118 = "tosa.add"(%117, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %119 = tensor.empty() : tensor<1x32x80x1xf32>
    %120 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%119 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %121 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%118 : tensor<1x32x80x80xf32>) outs(%119 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.maxf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %122 = tensor.empty() : tensor<1x32x80x80xf32>
    %123 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%118, %121 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%122 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.subf %in, %in_1777 : f32
      %5231 = math.exp %5230 : f32
      linalg.yield %5231 : f32
    } -> tensor<1x32x80x80xf32>
    %124 = tensor.empty() : tensor<1x32x80x1xf32>
    %125 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%124 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %126 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%123 : tensor<1x32x80x80xf32>) outs(%125 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.addf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %127 = tensor.empty() : tensor<1x32x80x80xf32>
    %128 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%123, %126 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%127 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.divf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %129 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_836 = tensor.extract_slice %128[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_837 = tensor.insert_slice %extracted_slice_836 into %129[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %130 = "tosa.reshape"(%inserted_slice_837) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %131 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_838 = tensor.extract_slice %68[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_839 = tensor.insert_slice %extracted_slice_838 into %131[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %132 = "tosa.reshape"(%inserted_slice_839) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %133 = tensor.empty() : tensor<32x80x128xf32>
    %134 = linalg.batch_matmul ins(%130, %132 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%133 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %135 = "tosa.reshape"(%134) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %136 = tensor.empty() : tensor<1x80x32x128xf32>
    %137 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%135 : tensor<1x32x80x128xf32>) outs(%136 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_840 = tensor.extract_slice %137[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %138 = "tosa.reshape"(%extracted_slice_840) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %139 = tensor.empty() : tensor<4096x4096xf32>
    %140 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_72 : tensor<4096x4096xf32>) outs(%139 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %141 = "tosa.reshape"(%138) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %142 = tensor.empty() : tensor<80x4096xf32>
    %143 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%142 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %144 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%141, %140 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%143 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %145 = "tosa.reshape"(%144) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %146 = "tosa.add"(%3, %145) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %147 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_841 = arith.constant 2 : i32
    %148 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%146 : tensor<1x80x4096xf32>) outs(%147 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_841 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_842 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %149 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%148 : tensor<1x80x4096xf32>) outs(%cst_842 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_843 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %150 = "tosa.add"(%149, %cst_843) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %151 = tensor.empty() : tensor<1x80x1xf32>
    %152 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%150 : tensor<1x80x1xf32>) outs(%151 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %153 = tensor.empty() : tensor<1x80x4096xf32>
    %154 = tensor.empty() : tensor<1x80x4096xf32>
    %155 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%152 : tensor<1x80x1xf32>) outs(%154 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %156 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%146, %155 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%153 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %157 = tensor.empty() : tensor<1x80x4096xf32>
    %158 = tensor.empty() : tensor<1x80x4096xf32>
    %159 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_0 : tensor<4096xf32>) outs(%158 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %160 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%159, %156 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%157 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %161 = tensor.empty() : tensor<4096x11008xf32>
    %162 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_74 : tensor<11008x4096xf32>) outs(%161 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %163 = "tosa.reshape"(%160) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %164 = tensor.empty() : tensor<80x11008xf32>
    %165 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%164 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %166 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%163, %162 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%165 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %167 = "tosa.reshape"(%166) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %168 = tensor.empty() : tensor<1x80x11008xf32>
    %169 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%167 : tensor<1x80x11008xf32>) outs(%168 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      %5231 = math.exp %5230 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5232 = arith.addf %cst_1777, %5231 : f32
      %5233 = arith.divf %in, %5232 : f32
      linalg.yield %5233 : f32
    } -> tensor<1x80x11008xf32>
    %170 = tensor.empty() : tensor<4096x11008xf32>
    %171 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_76 : tensor<11008x4096xf32>) outs(%170 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %172 = "tosa.reshape"(%160) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %173 = tensor.empty() : tensor<80x11008xf32>
    %174 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%173 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %175 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%172, %171 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%174 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %176 = "tosa.reshape"(%175) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %177 = tensor.empty() : tensor<1x80x11008xf32>
    %178 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%169, %176 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%177 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x11008xf32>
    %179 = tensor.empty() : tensor<11008x4096xf32>
    %180 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_78 : tensor<4096x11008xf32>) outs(%179 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %181 = "tosa.reshape"(%178) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %182 = tensor.empty() : tensor<80x4096xf32>
    %183 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%182 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %184 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%181, %180 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%183 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %185 = "tosa.reshape"(%184) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %186 = "tosa.add"(%146, %185) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %187 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_844 = arith.constant 2 : i32
    %188 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%186 : tensor<1x80x4096xf32>) outs(%187 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_844 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_845 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %189 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%188 : tensor<1x80x4096xf32>) outs(%cst_845 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_846 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %190 = "tosa.add"(%189, %cst_846) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %191 = tensor.empty() : tensor<1x80x1xf32>
    %192 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%190 : tensor<1x80x1xf32>) outs(%191 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %193 = tensor.empty() : tensor<1x80x4096xf32>
    %194 = tensor.empty() : tensor<1x80x4096xf32>
    %195 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%192 : tensor<1x80x1xf32>) outs(%194 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %196 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%186, %195 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%193 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %197 = tensor.empty() : tensor<1x80x4096xf32>
    %198 = tensor.empty() : tensor<1x80x4096xf32>
    %199 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1 : tensor<4096xf32>) outs(%198 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %200 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%199, %196 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%197 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %201 = tensor.empty() : tensor<4096x4096xf32>
    %202 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_80 : tensor<4096x4096xf32>) outs(%201 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %203 = "tosa.reshape"(%200) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %204 = tensor.empty() : tensor<80x4096xf32>
    %205 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%204 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %206 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%203, %202 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%205 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %207 = "tosa.reshape"(%206) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %208 = tensor.empty() : tensor<4096x4096xf32>
    %209 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_82 : tensor<4096x4096xf32>) outs(%208 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %210 = "tosa.reshape"(%200) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %211 = tensor.empty() : tensor<80x4096xf32>
    %212 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%211 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %213 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%210, %209 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%212 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %214 = "tosa.reshape"(%213) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %215 = tensor.empty() : tensor<4096x4096xf32>
    %216 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_84 : tensor<4096x4096xf32>) outs(%215 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %217 = "tosa.reshape"(%200) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %218 = tensor.empty() : tensor<80x4096xf32>
    %219 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%218 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %220 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%217, %216 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%219 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %221 = "tosa.reshape"(%220) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %222 = "tosa.reshape"(%207) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %223 = tensor.empty() : tensor<1x32x80x128xf32>
    %224 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%222 : tensor<1x80x32x128xf32>) outs(%223 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %225 = "tosa.reshape"(%214) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %226 = tensor.empty() : tensor<1x32x80x128xf32>
    %227 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%225 : tensor<1x80x32x128xf32>) outs(%226 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %228 = "tosa.reshape"(%221) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %229 = tensor.empty() : tensor<1x32x80x128xf32>
    %230 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%228 : tensor<1x80x32x128xf32>) outs(%229 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_847 = tensor.extract_slice %expanded_520[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_848 = tensor.extract_slice %extracted_slice_847[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_849 = tensor.extract_slice %extracted_slice_848[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_850 = tensor.extract_slice %expanded_522[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_851 = tensor.extract_slice %extracted_slice_850[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_852 = tensor.extract_slice %extracted_slice_851[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %231 = tensor.empty() : tensor<1x80x128xf32>
    %232 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_849 : tensor<1x1x80x128xf32>) outs(%231 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %233 = tensor.empty() : tensor<80x128xf32>
    %234 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%232 : tensor<1x80x128xf32>) outs(%233 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %235 = tensor.empty() : tensor<1x80x128xf32>
    %236 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_852 : tensor<1x1x80x128xf32>) outs(%235 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %237 = tensor.empty() : tensor<80x128xf32>
    %238 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%236 : tensor<1x80x128xf32>) outs(%237 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %239 = tensor.empty() : tensor<1x80x128xf32>
    %240 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%239 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %234[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %241 = "tosa.reshape"(%240) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %242 = tensor.empty() : tensor<1x80x128xf32>
    %243 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%242 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %238[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %244 = "tosa.reshape"(%243) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %245 = tensor.empty() : tensor<1x32x80x128xf32>
    %246 = tensor.empty() : tensor<1x32x80x128xf32>
    %247 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%241 : tensor<1x1x80x128xf32>) outs(%246 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %248 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%224, %247 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%245 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_853 = tensor.extract_slice %224[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_854 = tensor.extract_slice %224[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %249 = tensor.empty() : tensor<1x32x80x64xf32>
    %250 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_854 : tensor<1x32x80x64xf32>) outs(%249 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %251 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_855 = tensor.insert_slice %250 into %251[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_856 = tensor.insert_slice %extracted_slice_853 into %inserted_slice_855[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %252 = tensor.empty() : tensor<1x32x80x128xf32>
    %253 = tensor.empty() : tensor<1x32x80x128xf32>
    %254 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%244 : tensor<1x1x80x128xf32>) outs(%253 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %255 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_856, %254 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%252 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %256 = "tosa.add"(%248, %255) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %257 = tensor.empty() : tensor<1x32x80x128xf32>
    %258 = tensor.empty() : tensor<1x32x80x128xf32>
    %259 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%241 : tensor<1x1x80x128xf32>) outs(%258 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %260 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%227, %259 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%257 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_857 = tensor.extract_slice %227[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_858 = tensor.extract_slice %227[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %261 = tensor.empty() : tensor<1x32x80x64xf32>
    %262 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_858 : tensor<1x32x80x64xf32>) outs(%261 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %263 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_859 = tensor.insert_slice %262 into %263[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_860 = tensor.insert_slice %extracted_slice_857 into %inserted_slice_859[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %264 = tensor.empty() : tensor<1x32x80x128xf32>
    %265 = tensor.empty() : tensor<1x32x80x128xf32>
    %266 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%244 : tensor<1x1x80x128xf32>) outs(%265 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %267 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_860, %266 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%264 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %268 = "tosa.add"(%260, %267) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %269 = tensor.empty() : tensor<1x32x128x80xf32>
    %270 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%268 : tensor<1x32x80x128xf32>) outs(%269 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %271 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_861 = tensor.extract_slice %256[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_862 = tensor.insert_slice %extracted_slice_861 into %271[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %272 = "tosa.reshape"(%inserted_slice_862) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %273 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_863 = tensor.extract_slice %270[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_864 = tensor.insert_slice %extracted_slice_863 into %273[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %274 = "tosa.reshape"(%inserted_slice_864) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %275 = tensor.empty() : tensor<32x80x80xf32>
    %276 = linalg.batch_matmul ins(%272, %274 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%275 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %277 = "tosa.reshape"(%276) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_865 = arith.constant 11.3137083 : f32
    %278 = tensor.empty() : tensor<1x32x80x80xf32>
    %279 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%277 : tensor<1x32x80x80xf32>) outs(%278 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.divf %in, %cst_865 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %280 = "tosa.add"(%279, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %281 = tensor.empty() : tensor<1x32x80x1xf32>
    %282 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%281 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %283 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%280 : tensor<1x32x80x80xf32>) outs(%281 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.maxf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %284 = tensor.empty() : tensor<1x32x80x80xf32>
    %285 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%280, %283 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%284 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.subf %in, %in_1777 : f32
      %5231 = math.exp %5230 : f32
      linalg.yield %5231 : f32
    } -> tensor<1x32x80x80xf32>
    %286 = tensor.empty() : tensor<1x32x80x1xf32>
    %287 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%286 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %288 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%285 : tensor<1x32x80x80xf32>) outs(%287 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.addf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %289 = tensor.empty() : tensor<1x32x80x80xf32>
    %290 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%285, %288 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%289 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.divf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %291 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_866 = tensor.extract_slice %290[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_867 = tensor.insert_slice %extracted_slice_866 into %291[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %292 = "tosa.reshape"(%inserted_slice_867) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %293 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_868 = tensor.extract_slice %230[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_869 = tensor.insert_slice %extracted_slice_868 into %293[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %294 = "tosa.reshape"(%inserted_slice_869) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %295 = tensor.empty() : tensor<32x80x128xf32>
    %296 = linalg.batch_matmul ins(%292, %294 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%295 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %297 = "tosa.reshape"(%296) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %298 = tensor.empty() : tensor<1x80x32x128xf32>
    %299 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%297 : tensor<1x32x80x128xf32>) outs(%298 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_870 = tensor.extract_slice %299[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %300 = "tosa.reshape"(%extracted_slice_870) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %301 = tensor.empty() : tensor<4096x4096xf32>
    %302 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_86 : tensor<4096x4096xf32>) outs(%301 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %303 = "tosa.reshape"(%300) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %304 = tensor.empty() : tensor<80x4096xf32>
    %305 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%304 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %306 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%303, %302 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%305 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %307 = "tosa.reshape"(%306) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %308 = "tosa.add"(%186, %307) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %309 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_871 = arith.constant 2 : i32
    %310 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%308 : tensor<1x80x4096xf32>) outs(%309 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_871 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_872 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %311 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%310 : tensor<1x80x4096xf32>) outs(%cst_872 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_873 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %312 = "tosa.add"(%311, %cst_873) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %313 = tensor.empty() : tensor<1x80x1xf32>
    %314 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%312 : tensor<1x80x1xf32>) outs(%313 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %315 = tensor.empty() : tensor<1x80x4096xf32>
    %316 = tensor.empty() : tensor<1x80x4096xf32>
    %317 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%314 : tensor<1x80x1xf32>) outs(%316 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %318 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%308, %317 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%315 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %319 = tensor.empty() : tensor<1x80x4096xf32>
    %320 = tensor.empty() : tensor<1x80x4096xf32>
    %321 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_2 : tensor<4096xf32>) outs(%320 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %322 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%321, %318 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%319 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %323 = tensor.empty() : tensor<4096x11008xf32>
    %324 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_88 : tensor<11008x4096xf32>) outs(%323 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %325 = "tosa.reshape"(%322) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %326 = tensor.empty() : tensor<80x11008xf32>
    %327 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%326 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %328 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%325, %324 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%327 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %329 = "tosa.reshape"(%328) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %330 = tensor.empty() : tensor<1x80x11008xf32>
    %331 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%329 : tensor<1x80x11008xf32>) outs(%330 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      %5231 = math.exp %5230 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5232 = arith.addf %cst_1777, %5231 : f32
      %5233 = arith.divf %in, %5232 : f32
      linalg.yield %5233 : f32
    } -> tensor<1x80x11008xf32>
    %332 = tensor.empty() : tensor<4096x11008xf32>
    %333 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_90 : tensor<11008x4096xf32>) outs(%332 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %334 = "tosa.reshape"(%322) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %335 = tensor.empty() : tensor<80x11008xf32>
    %336 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%335 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %337 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%334, %333 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%336 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %338 = "tosa.reshape"(%337) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %339 = tensor.empty() : tensor<1x80x11008xf32>
    %340 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%331, %338 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%339 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x11008xf32>
    %341 = tensor.empty() : tensor<11008x4096xf32>
    %342 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_92 : tensor<4096x11008xf32>) outs(%341 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %343 = "tosa.reshape"(%340) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %344 = tensor.empty() : tensor<80x4096xf32>
    %345 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%344 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %346 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%343, %342 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%345 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %347 = "tosa.reshape"(%346) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %348 = "tosa.add"(%308, %347) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %349 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_874 = arith.constant 2 : i32
    %350 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%348 : tensor<1x80x4096xf32>) outs(%349 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_874 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_875 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %351 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%350 : tensor<1x80x4096xf32>) outs(%cst_875 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_876 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %352 = "tosa.add"(%351, %cst_876) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %353 = tensor.empty() : tensor<1x80x1xf32>
    %354 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%352 : tensor<1x80x1xf32>) outs(%353 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %355 = tensor.empty() : tensor<1x80x4096xf32>
    %356 = tensor.empty() : tensor<1x80x4096xf32>
    %357 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%354 : tensor<1x80x1xf32>) outs(%356 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %358 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%348, %357 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%355 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %359 = tensor.empty() : tensor<1x80x4096xf32>
    %360 = tensor.empty() : tensor<1x80x4096xf32>
    %361 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_3 : tensor<4096xf32>) outs(%360 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %362 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%361, %358 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%359 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %363 = tensor.empty() : tensor<4096x4096xf32>
    %364 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_94 : tensor<4096x4096xf32>) outs(%363 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %365 = "tosa.reshape"(%362) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %366 = tensor.empty() : tensor<80x4096xf32>
    %367 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%366 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %368 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%365, %364 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%367 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %369 = "tosa.reshape"(%368) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %370 = tensor.empty() : tensor<4096x4096xf32>
    %371 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_96 : tensor<4096x4096xf32>) outs(%370 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %372 = "tosa.reshape"(%362) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %373 = tensor.empty() : tensor<80x4096xf32>
    %374 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%373 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %375 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%372, %371 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%374 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %376 = "tosa.reshape"(%375) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %377 = tensor.empty() : tensor<4096x4096xf32>
    %378 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_98 : tensor<4096x4096xf32>) outs(%377 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %379 = "tosa.reshape"(%362) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %380 = tensor.empty() : tensor<80x4096xf32>
    %381 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%380 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %382 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%379, %378 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%381 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %383 = "tosa.reshape"(%382) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %384 = "tosa.reshape"(%369) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %385 = tensor.empty() : tensor<1x32x80x128xf32>
    %386 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%384 : tensor<1x80x32x128xf32>) outs(%385 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %387 = "tosa.reshape"(%376) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %388 = tensor.empty() : tensor<1x32x80x128xf32>
    %389 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%387 : tensor<1x80x32x128xf32>) outs(%388 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %390 = "tosa.reshape"(%383) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %391 = tensor.empty() : tensor<1x32x80x128xf32>
    %392 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%390 : tensor<1x80x32x128xf32>) outs(%391 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_877 = tensor.extract_slice %expanded_524[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_878 = tensor.extract_slice %extracted_slice_877[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_879 = tensor.extract_slice %extracted_slice_878[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_880 = tensor.extract_slice %expanded_526[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_881 = tensor.extract_slice %extracted_slice_880[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_882 = tensor.extract_slice %extracted_slice_881[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %393 = tensor.empty() : tensor<1x80x128xf32>
    %394 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_879 : tensor<1x1x80x128xf32>) outs(%393 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %395 = tensor.empty() : tensor<80x128xf32>
    %396 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%394 : tensor<1x80x128xf32>) outs(%395 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %397 = tensor.empty() : tensor<1x80x128xf32>
    %398 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_882 : tensor<1x1x80x128xf32>) outs(%397 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %399 = tensor.empty() : tensor<80x128xf32>
    %400 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%398 : tensor<1x80x128xf32>) outs(%399 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %401 = tensor.empty() : tensor<1x80x128xf32>
    %402 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%401 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %396[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %403 = "tosa.reshape"(%402) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %404 = tensor.empty() : tensor<1x80x128xf32>
    %405 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%404 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %400[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %406 = "tosa.reshape"(%405) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %407 = tensor.empty() : tensor<1x32x80x128xf32>
    %408 = tensor.empty() : tensor<1x32x80x128xf32>
    %409 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%403 : tensor<1x1x80x128xf32>) outs(%408 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %410 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%386, %409 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%407 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_883 = tensor.extract_slice %386[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_884 = tensor.extract_slice %386[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %411 = tensor.empty() : tensor<1x32x80x64xf32>
    %412 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_884 : tensor<1x32x80x64xf32>) outs(%411 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %413 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_885 = tensor.insert_slice %412 into %413[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_886 = tensor.insert_slice %extracted_slice_883 into %inserted_slice_885[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %414 = tensor.empty() : tensor<1x32x80x128xf32>
    %415 = tensor.empty() : tensor<1x32x80x128xf32>
    %416 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%406 : tensor<1x1x80x128xf32>) outs(%415 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %417 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_886, %416 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%414 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %418 = "tosa.add"(%410, %417) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %419 = tensor.empty() : tensor<1x32x80x128xf32>
    %420 = tensor.empty() : tensor<1x32x80x128xf32>
    %421 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%403 : tensor<1x1x80x128xf32>) outs(%420 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %422 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%389, %421 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%419 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_887 = tensor.extract_slice %389[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_888 = tensor.extract_slice %389[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %423 = tensor.empty() : tensor<1x32x80x64xf32>
    %424 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_888 : tensor<1x32x80x64xf32>) outs(%423 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %425 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_889 = tensor.insert_slice %424 into %425[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_890 = tensor.insert_slice %extracted_slice_887 into %inserted_slice_889[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %426 = tensor.empty() : tensor<1x32x80x128xf32>
    %427 = tensor.empty() : tensor<1x32x80x128xf32>
    %428 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%406 : tensor<1x1x80x128xf32>) outs(%427 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %429 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_890, %428 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%426 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %430 = "tosa.add"(%422, %429) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %431 = tensor.empty() : tensor<1x32x128x80xf32>
    %432 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%430 : tensor<1x32x80x128xf32>) outs(%431 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %433 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_891 = tensor.extract_slice %418[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_892 = tensor.insert_slice %extracted_slice_891 into %433[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %434 = "tosa.reshape"(%inserted_slice_892) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %435 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_893 = tensor.extract_slice %432[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_894 = tensor.insert_slice %extracted_slice_893 into %435[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %436 = "tosa.reshape"(%inserted_slice_894) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %437 = tensor.empty() : tensor<32x80x80xf32>
    %438 = linalg.batch_matmul ins(%434, %436 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%437 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %439 = "tosa.reshape"(%438) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_895 = arith.constant 11.3137083 : f32
    %440 = tensor.empty() : tensor<1x32x80x80xf32>
    %441 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%439 : tensor<1x32x80x80xf32>) outs(%440 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.divf %in, %cst_895 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %442 = "tosa.add"(%441, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %443 = tensor.empty() : tensor<1x32x80x1xf32>
    %444 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%443 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %445 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%442 : tensor<1x32x80x80xf32>) outs(%443 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.maxf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %446 = tensor.empty() : tensor<1x32x80x80xf32>
    %447 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%442, %445 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%446 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.subf %in, %in_1777 : f32
      %5231 = math.exp %5230 : f32
      linalg.yield %5231 : f32
    } -> tensor<1x32x80x80xf32>
    %448 = tensor.empty() : tensor<1x32x80x1xf32>
    %449 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%448 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %450 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%447 : tensor<1x32x80x80xf32>) outs(%449 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.addf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %451 = tensor.empty() : tensor<1x32x80x80xf32>
    %452 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%447, %450 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%451 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.divf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %453 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_896 = tensor.extract_slice %452[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_897 = tensor.insert_slice %extracted_slice_896 into %453[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %454 = "tosa.reshape"(%inserted_slice_897) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %455 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_898 = tensor.extract_slice %392[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_899 = tensor.insert_slice %extracted_slice_898 into %455[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %456 = "tosa.reshape"(%inserted_slice_899) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %457 = tensor.empty() : tensor<32x80x128xf32>
    %458 = linalg.batch_matmul ins(%454, %456 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%457 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %459 = "tosa.reshape"(%458) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %460 = tensor.empty() : tensor<1x80x32x128xf32>
    %461 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%459 : tensor<1x32x80x128xf32>) outs(%460 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_900 = tensor.extract_slice %461[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %462 = "tosa.reshape"(%extracted_slice_900) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %463 = tensor.empty() : tensor<4096x4096xf32>
    %464 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_100 : tensor<4096x4096xf32>) outs(%463 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %465 = "tosa.reshape"(%462) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %466 = tensor.empty() : tensor<80x4096xf32>
    %467 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%466 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %468 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%465, %464 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%467 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %469 = "tosa.reshape"(%468) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %470 = "tosa.add"(%348, %469) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %471 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_901 = arith.constant 2 : i32
    %472 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%470 : tensor<1x80x4096xf32>) outs(%471 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_901 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_902 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %473 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%472 : tensor<1x80x4096xf32>) outs(%cst_902 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_903 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %474 = "tosa.add"(%473, %cst_903) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %475 = tensor.empty() : tensor<1x80x1xf32>
    %476 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%474 : tensor<1x80x1xf32>) outs(%475 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %477 = tensor.empty() : tensor<1x80x4096xf32>
    %478 = tensor.empty() : tensor<1x80x4096xf32>
    %479 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%476 : tensor<1x80x1xf32>) outs(%478 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %480 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%470, %479 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%477 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %481 = tensor.empty() : tensor<1x80x4096xf32>
    %482 = tensor.empty() : tensor<1x80x4096xf32>
    %483 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_4 : tensor<4096xf32>) outs(%482 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %484 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%483, %480 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%481 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %485 = tensor.empty() : tensor<4096x11008xf32>
    %486 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_102 : tensor<11008x4096xf32>) outs(%485 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %487 = "tosa.reshape"(%484) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %488 = tensor.empty() : tensor<80x11008xf32>
    %489 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%488 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %490 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%487, %486 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%489 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %491 = "tosa.reshape"(%490) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %492 = tensor.empty() : tensor<1x80x11008xf32>
    %493 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%491 : tensor<1x80x11008xf32>) outs(%492 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      %5231 = math.exp %5230 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5232 = arith.addf %cst_1777, %5231 : f32
      %5233 = arith.divf %in, %5232 : f32
      linalg.yield %5233 : f32
    } -> tensor<1x80x11008xf32>
    %494 = tensor.empty() : tensor<4096x11008xf32>
    %495 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_104 : tensor<11008x4096xf32>) outs(%494 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %496 = "tosa.reshape"(%484) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %497 = tensor.empty() : tensor<80x11008xf32>
    %498 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%497 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %499 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%496, %495 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%498 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %500 = "tosa.reshape"(%499) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %501 = tensor.empty() : tensor<1x80x11008xf32>
    %502 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%493, %500 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%501 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x11008xf32>
    %503 = tensor.empty() : tensor<11008x4096xf32>
    %504 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_106 : tensor<4096x11008xf32>) outs(%503 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %505 = "tosa.reshape"(%502) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %506 = tensor.empty() : tensor<80x4096xf32>
    %507 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%506 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %508 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%505, %504 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%507 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %509 = "tosa.reshape"(%508) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %510 = "tosa.add"(%470, %509) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %511 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_904 = arith.constant 2 : i32
    %512 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%510 : tensor<1x80x4096xf32>) outs(%511 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_904 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_905 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %513 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%512 : tensor<1x80x4096xf32>) outs(%cst_905 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_906 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %514 = "tosa.add"(%513, %cst_906) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %515 = tensor.empty() : tensor<1x80x1xf32>
    %516 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%514 : tensor<1x80x1xf32>) outs(%515 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %517 = tensor.empty() : tensor<1x80x4096xf32>
    %518 = tensor.empty() : tensor<1x80x4096xf32>
    %519 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%516 : tensor<1x80x1xf32>) outs(%518 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %520 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%510, %519 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%517 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %521 = tensor.empty() : tensor<1x80x4096xf32>
    %522 = tensor.empty() : tensor<1x80x4096xf32>
    %523 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_5 : tensor<4096xf32>) outs(%522 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %524 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%523, %520 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%521 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %525 = tensor.empty() : tensor<4096x4096xf32>
    %526 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_108 : tensor<4096x4096xf32>) outs(%525 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %527 = "tosa.reshape"(%524) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %528 = tensor.empty() : tensor<80x4096xf32>
    %529 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%528 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %530 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%527, %526 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%529 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %531 = "tosa.reshape"(%530) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %532 = tensor.empty() : tensor<4096x4096xf32>
    %533 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_110 : tensor<4096x4096xf32>) outs(%532 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %534 = "tosa.reshape"(%524) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %535 = tensor.empty() : tensor<80x4096xf32>
    %536 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%535 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %537 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%534, %533 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%536 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %538 = "tosa.reshape"(%537) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %539 = tensor.empty() : tensor<4096x4096xf32>
    %540 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_112 : tensor<4096x4096xf32>) outs(%539 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %541 = "tosa.reshape"(%524) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %542 = tensor.empty() : tensor<80x4096xf32>
    %543 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%542 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %544 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%541, %540 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%543 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %545 = "tosa.reshape"(%544) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %546 = "tosa.reshape"(%531) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %547 = tensor.empty() : tensor<1x32x80x128xf32>
    %548 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%546 : tensor<1x80x32x128xf32>) outs(%547 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %549 = "tosa.reshape"(%538) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %550 = tensor.empty() : tensor<1x32x80x128xf32>
    %551 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%549 : tensor<1x80x32x128xf32>) outs(%550 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %552 = "tosa.reshape"(%545) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %553 = tensor.empty() : tensor<1x32x80x128xf32>
    %554 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%552 : tensor<1x80x32x128xf32>) outs(%553 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_907 = tensor.extract_slice %expanded_528[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_908 = tensor.extract_slice %extracted_slice_907[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_909 = tensor.extract_slice %extracted_slice_908[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_910 = tensor.extract_slice %expanded_530[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_911 = tensor.extract_slice %extracted_slice_910[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_912 = tensor.extract_slice %extracted_slice_911[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %555 = tensor.empty() : tensor<1x80x128xf32>
    %556 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_909 : tensor<1x1x80x128xf32>) outs(%555 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %557 = tensor.empty() : tensor<80x128xf32>
    %558 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%556 : tensor<1x80x128xf32>) outs(%557 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %559 = tensor.empty() : tensor<1x80x128xf32>
    %560 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_912 : tensor<1x1x80x128xf32>) outs(%559 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %561 = tensor.empty() : tensor<80x128xf32>
    %562 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%560 : tensor<1x80x128xf32>) outs(%561 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %563 = tensor.empty() : tensor<1x80x128xf32>
    %564 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%563 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %558[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %565 = "tosa.reshape"(%564) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %566 = tensor.empty() : tensor<1x80x128xf32>
    %567 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%566 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %562[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %568 = "tosa.reshape"(%567) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %569 = tensor.empty() : tensor<1x32x80x128xf32>
    %570 = tensor.empty() : tensor<1x32x80x128xf32>
    %571 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%565 : tensor<1x1x80x128xf32>) outs(%570 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %572 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%548, %571 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%569 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_913 = tensor.extract_slice %548[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_914 = tensor.extract_slice %548[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %573 = tensor.empty() : tensor<1x32x80x64xf32>
    %574 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_914 : tensor<1x32x80x64xf32>) outs(%573 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %575 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_915 = tensor.insert_slice %574 into %575[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_916 = tensor.insert_slice %extracted_slice_913 into %inserted_slice_915[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %576 = tensor.empty() : tensor<1x32x80x128xf32>
    %577 = tensor.empty() : tensor<1x32x80x128xf32>
    %578 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%568 : tensor<1x1x80x128xf32>) outs(%577 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %579 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_916, %578 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%576 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %580 = "tosa.add"(%572, %579) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %581 = tensor.empty() : tensor<1x32x80x128xf32>
    %582 = tensor.empty() : tensor<1x32x80x128xf32>
    %583 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%565 : tensor<1x1x80x128xf32>) outs(%582 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %584 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%551, %583 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%581 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_917 = tensor.extract_slice %551[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_918 = tensor.extract_slice %551[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %585 = tensor.empty() : tensor<1x32x80x64xf32>
    %586 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_918 : tensor<1x32x80x64xf32>) outs(%585 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %587 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_919 = tensor.insert_slice %586 into %587[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_920 = tensor.insert_slice %extracted_slice_917 into %inserted_slice_919[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %588 = tensor.empty() : tensor<1x32x80x128xf32>
    %589 = tensor.empty() : tensor<1x32x80x128xf32>
    %590 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%568 : tensor<1x1x80x128xf32>) outs(%589 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %591 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_920, %590 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%588 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %592 = "tosa.add"(%584, %591) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %593 = tensor.empty() : tensor<1x32x128x80xf32>
    %594 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%592 : tensor<1x32x80x128xf32>) outs(%593 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %595 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_921 = tensor.extract_slice %580[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_922 = tensor.insert_slice %extracted_slice_921 into %595[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %596 = "tosa.reshape"(%inserted_slice_922) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %597 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_923 = tensor.extract_slice %594[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_924 = tensor.insert_slice %extracted_slice_923 into %597[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %598 = "tosa.reshape"(%inserted_slice_924) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %599 = tensor.empty() : tensor<32x80x80xf32>
    %600 = linalg.batch_matmul ins(%596, %598 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%599 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %601 = "tosa.reshape"(%600) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_925 = arith.constant 11.3137083 : f32
    %602 = tensor.empty() : tensor<1x32x80x80xf32>
    %603 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%601 : tensor<1x32x80x80xf32>) outs(%602 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.divf %in, %cst_925 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %604 = "tosa.add"(%603, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %605 = tensor.empty() : tensor<1x32x80x1xf32>
    %606 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%605 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %607 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%604 : tensor<1x32x80x80xf32>) outs(%605 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.maxf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %608 = tensor.empty() : tensor<1x32x80x80xf32>
    %609 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%604, %607 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%608 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.subf %in, %in_1777 : f32
      %5231 = math.exp %5230 : f32
      linalg.yield %5231 : f32
    } -> tensor<1x32x80x80xf32>
    %610 = tensor.empty() : tensor<1x32x80x1xf32>
    %611 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%610 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %612 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%609 : tensor<1x32x80x80xf32>) outs(%611 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.addf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %613 = tensor.empty() : tensor<1x32x80x80xf32>
    %614 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%609, %612 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%613 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.divf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %615 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_926 = tensor.extract_slice %614[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_927 = tensor.insert_slice %extracted_slice_926 into %615[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %616 = "tosa.reshape"(%inserted_slice_927) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %617 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_928 = tensor.extract_slice %554[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_929 = tensor.insert_slice %extracted_slice_928 into %617[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %618 = "tosa.reshape"(%inserted_slice_929) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %619 = tensor.empty() : tensor<32x80x128xf32>
    %620 = linalg.batch_matmul ins(%616, %618 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%619 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %621 = "tosa.reshape"(%620) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %622 = tensor.empty() : tensor<1x80x32x128xf32>
    %623 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%621 : tensor<1x32x80x128xf32>) outs(%622 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_930 = tensor.extract_slice %623[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %624 = "tosa.reshape"(%extracted_slice_930) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %625 = tensor.empty() : tensor<4096x4096xf32>
    %626 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_114 : tensor<4096x4096xf32>) outs(%625 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %627 = "tosa.reshape"(%624) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %628 = tensor.empty() : tensor<80x4096xf32>
    %629 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%628 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %630 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%627, %626 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%629 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %631 = "tosa.reshape"(%630) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %632 = "tosa.add"(%510, %631) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %633 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_931 = arith.constant 2 : i32
    %634 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%632 : tensor<1x80x4096xf32>) outs(%633 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_931 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_932 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %635 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%634 : tensor<1x80x4096xf32>) outs(%cst_932 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_933 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %636 = "tosa.add"(%635, %cst_933) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %637 = tensor.empty() : tensor<1x80x1xf32>
    %638 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%636 : tensor<1x80x1xf32>) outs(%637 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %639 = tensor.empty() : tensor<1x80x4096xf32>
    %640 = tensor.empty() : tensor<1x80x4096xf32>
    %641 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%638 : tensor<1x80x1xf32>) outs(%640 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %642 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%632, %641 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%639 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %643 = tensor.empty() : tensor<1x80x4096xf32>
    %644 = tensor.empty() : tensor<1x80x4096xf32>
    %645 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_6 : tensor<4096xf32>) outs(%644 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %646 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%645, %642 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%643 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %647 = tensor.empty() : tensor<4096x11008xf32>
    %648 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_116 : tensor<11008x4096xf32>) outs(%647 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %649 = "tosa.reshape"(%646) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %650 = tensor.empty() : tensor<80x11008xf32>
    %651 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%650 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %652 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%649, %648 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%651 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %653 = "tosa.reshape"(%652) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %654 = tensor.empty() : tensor<1x80x11008xf32>
    %655 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%653 : tensor<1x80x11008xf32>) outs(%654 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      %5231 = math.exp %5230 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5232 = arith.addf %cst_1777, %5231 : f32
      %5233 = arith.divf %in, %5232 : f32
      linalg.yield %5233 : f32
    } -> tensor<1x80x11008xf32>
    %656 = tensor.empty() : tensor<4096x11008xf32>
    %657 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_118 : tensor<11008x4096xf32>) outs(%656 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %658 = "tosa.reshape"(%646) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %659 = tensor.empty() : tensor<80x11008xf32>
    %660 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%659 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %661 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%658, %657 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%660 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %662 = "tosa.reshape"(%661) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %663 = tensor.empty() : tensor<1x80x11008xf32>
    %664 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%655, %662 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%663 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x11008xf32>
    %665 = tensor.empty() : tensor<11008x4096xf32>
    %666 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_120 : tensor<4096x11008xf32>) outs(%665 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %667 = "tosa.reshape"(%664) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %668 = tensor.empty() : tensor<80x4096xf32>
    %669 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%668 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %670 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%667, %666 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%669 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %671 = "tosa.reshape"(%670) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %672 = "tosa.add"(%632, %671) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %673 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_934 = arith.constant 2 : i32
    %674 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%672 : tensor<1x80x4096xf32>) outs(%673 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_934 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_935 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %675 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%674 : tensor<1x80x4096xf32>) outs(%cst_935 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_936 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %676 = "tosa.add"(%675, %cst_936) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %677 = tensor.empty() : tensor<1x80x1xf32>
    %678 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%676 : tensor<1x80x1xf32>) outs(%677 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %679 = tensor.empty() : tensor<1x80x4096xf32>
    %680 = tensor.empty() : tensor<1x80x4096xf32>
    %681 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%678 : tensor<1x80x1xf32>) outs(%680 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %682 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%672, %681 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%679 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %683 = tensor.empty() : tensor<1x80x4096xf32>
    %684 = tensor.empty() : tensor<1x80x4096xf32>
    %685 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_7 : tensor<4096xf32>) outs(%684 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %686 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%685, %682 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%683 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %687 = tensor.empty() : tensor<4096x4096xf32>
    %688 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_122 : tensor<4096x4096xf32>) outs(%687 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %689 = "tosa.reshape"(%686) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %690 = tensor.empty() : tensor<80x4096xf32>
    %691 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%690 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %692 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%689, %688 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%691 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %693 = "tosa.reshape"(%692) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %694 = tensor.empty() : tensor<4096x4096xf32>
    %695 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_124 : tensor<4096x4096xf32>) outs(%694 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %696 = "tosa.reshape"(%686) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %697 = tensor.empty() : tensor<80x4096xf32>
    %698 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%697 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %699 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%696, %695 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%698 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %700 = "tosa.reshape"(%699) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %701 = tensor.empty() : tensor<4096x4096xf32>
    %702 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_126 : tensor<4096x4096xf32>) outs(%701 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %703 = "tosa.reshape"(%686) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %704 = tensor.empty() : tensor<80x4096xf32>
    %705 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%704 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %706 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%703, %702 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%705 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %707 = "tosa.reshape"(%706) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %708 = "tosa.reshape"(%693) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %709 = tensor.empty() : tensor<1x32x80x128xf32>
    %710 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%708 : tensor<1x80x32x128xf32>) outs(%709 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %711 = "tosa.reshape"(%700) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %712 = tensor.empty() : tensor<1x32x80x128xf32>
    %713 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%711 : tensor<1x80x32x128xf32>) outs(%712 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %714 = "tosa.reshape"(%707) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %715 = tensor.empty() : tensor<1x32x80x128xf32>
    %716 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%714 : tensor<1x80x32x128xf32>) outs(%715 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_937 = tensor.extract_slice %expanded_532[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_938 = tensor.extract_slice %extracted_slice_937[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_939 = tensor.extract_slice %extracted_slice_938[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_940 = tensor.extract_slice %expanded_534[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_941 = tensor.extract_slice %extracted_slice_940[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_942 = tensor.extract_slice %extracted_slice_941[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %717 = tensor.empty() : tensor<1x80x128xf32>
    %718 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_939 : tensor<1x1x80x128xf32>) outs(%717 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %719 = tensor.empty() : tensor<80x128xf32>
    %720 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%718 : tensor<1x80x128xf32>) outs(%719 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %721 = tensor.empty() : tensor<1x80x128xf32>
    %722 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_942 : tensor<1x1x80x128xf32>) outs(%721 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %723 = tensor.empty() : tensor<80x128xf32>
    %724 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%722 : tensor<1x80x128xf32>) outs(%723 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %725 = tensor.empty() : tensor<1x80x128xf32>
    %726 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%725 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %720[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %727 = "tosa.reshape"(%726) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %728 = tensor.empty() : tensor<1x80x128xf32>
    %729 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%728 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %724[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %730 = "tosa.reshape"(%729) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %731 = tensor.empty() : tensor<1x32x80x128xf32>
    %732 = tensor.empty() : tensor<1x32x80x128xf32>
    %733 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%727 : tensor<1x1x80x128xf32>) outs(%732 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %734 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%710, %733 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%731 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_943 = tensor.extract_slice %710[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_944 = tensor.extract_slice %710[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %735 = tensor.empty() : tensor<1x32x80x64xf32>
    %736 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_944 : tensor<1x32x80x64xf32>) outs(%735 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %737 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_945 = tensor.insert_slice %736 into %737[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_946 = tensor.insert_slice %extracted_slice_943 into %inserted_slice_945[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %738 = tensor.empty() : tensor<1x32x80x128xf32>
    %739 = tensor.empty() : tensor<1x32x80x128xf32>
    %740 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%730 : tensor<1x1x80x128xf32>) outs(%739 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %741 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_946, %740 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%738 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %742 = "tosa.add"(%734, %741) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %743 = tensor.empty() : tensor<1x32x80x128xf32>
    %744 = tensor.empty() : tensor<1x32x80x128xf32>
    %745 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%727 : tensor<1x1x80x128xf32>) outs(%744 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %746 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%713, %745 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%743 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_947 = tensor.extract_slice %713[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_948 = tensor.extract_slice %713[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %747 = tensor.empty() : tensor<1x32x80x64xf32>
    %748 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_948 : tensor<1x32x80x64xf32>) outs(%747 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %749 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_949 = tensor.insert_slice %748 into %749[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_950 = tensor.insert_slice %extracted_slice_947 into %inserted_slice_949[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %750 = tensor.empty() : tensor<1x32x80x128xf32>
    %751 = tensor.empty() : tensor<1x32x80x128xf32>
    %752 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%730 : tensor<1x1x80x128xf32>) outs(%751 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %753 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_950, %752 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%750 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %754 = "tosa.add"(%746, %753) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %755 = tensor.empty() : tensor<1x32x128x80xf32>
    %756 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%754 : tensor<1x32x80x128xf32>) outs(%755 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %757 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_951 = tensor.extract_slice %742[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_952 = tensor.insert_slice %extracted_slice_951 into %757[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %758 = "tosa.reshape"(%inserted_slice_952) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %759 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_953 = tensor.extract_slice %756[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_954 = tensor.insert_slice %extracted_slice_953 into %759[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %760 = "tosa.reshape"(%inserted_slice_954) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %761 = tensor.empty() : tensor<32x80x80xf32>
    %762 = linalg.batch_matmul ins(%758, %760 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%761 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %763 = "tosa.reshape"(%762) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_955 = arith.constant 11.3137083 : f32
    %764 = tensor.empty() : tensor<1x32x80x80xf32>
    %765 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%763 : tensor<1x32x80x80xf32>) outs(%764 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.divf %in, %cst_955 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %766 = "tosa.add"(%765, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %767 = tensor.empty() : tensor<1x32x80x1xf32>
    %768 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%767 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %769 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%766 : tensor<1x32x80x80xf32>) outs(%767 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.maxf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %770 = tensor.empty() : tensor<1x32x80x80xf32>
    %771 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%766, %769 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%770 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.subf %in, %in_1777 : f32
      %5231 = math.exp %5230 : f32
      linalg.yield %5231 : f32
    } -> tensor<1x32x80x80xf32>
    %772 = tensor.empty() : tensor<1x32x80x1xf32>
    %773 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%772 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %774 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%771 : tensor<1x32x80x80xf32>) outs(%773 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.addf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %775 = tensor.empty() : tensor<1x32x80x80xf32>
    %776 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%771, %774 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%775 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.divf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %777 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_956 = tensor.extract_slice %776[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_957 = tensor.insert_slice %extracted_slice_956 into %777[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %778 = "tosa.reshape"(%inserted_slice_957) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %779 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_958 = tensor.extract_slice %716[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_959 = tensor.insert_slice %extracted_slice_958 into %779[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %780 = "tosa.reshape"(%inserted_slice_959) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %781 = tensor.empty() : tensor<32x80x128xf32>
    %782 = linalg.batch_matmul ins(%778, %780 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%781 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %783 = "tosa.reshape"(%782) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %784 = tensor.empty() : tensor<1x80x32x128xf32>
    %785 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%783 : tensor<1x32x80x128xf32>) outs(%784 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_960 = tensor.extract_slice %785[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %786 = "tosa.reshape"(%extracted_slice_960) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %787 = tensor.empty() : tensor<4096x4096xf32>
    %788 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_128 : tensor<4096x4096xf32>) outs(%787 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %789 = "tosa.reshape"(%786) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %790 = tensor.empty() : tensor<80x4096xf32>
    %791 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%790 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %792 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%789, %788 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%791 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %793 = "tosa.reshape"(%792) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %794 = "tosa.add"(%672, %793) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %795 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_961 = arith.constant 2 : i32
    %796 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%794 : tensor<1x80x4096xf32>) outs(%795 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_961 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_962 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %797 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%796 : tensor<1x80x4096xf32>) outs(%cst_962 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_963 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %798 = "tosa.add"(%797, %cst_963) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %799 = tensor.empty() : tensor<1x80x1xf32>
    %800 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%798 : tensor<1x80x1xf32>) outs(%799 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %801 = tensor.empty() : tensor<1x80x4096xf32>
    %802 = tensor.empty() : tensor<1x80x4096xf32>
    %803 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%800 : tensor<1x80x1xf32>) outs(%802 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %804 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%794, %803 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%801 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %805 = tensor.empty() : tensor<1x80x4096xf32>
    %806 = tensor.empty() : tensor<1x80x4096xf32>
    %807 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_8 : tensor<4096xf32>) outs(%806 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %808 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%807, %804 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%805 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %809 = tensor.empty() : tensor<4096x11008xf32>
    %810 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_130 : tensor<11008x4096xf32>) outs(%809 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %811 = "tosa.reshape"(%808) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %812 = tensor.empty() : tensor<80x11008xf32>
    %813 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%812 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %814 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%811, %810 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%813 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %815 = "tosa.reshape"(%814) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %816 = tensor.empty() : tensor<1x80x11008xf32>
    %817 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%815 : tensor<1x80x11008xf32>) outs(%816 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      %5231 = math.exp %5230 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5232 = arith.addf %cst_1777, %5231 : f32
      %5233 = arith.divf %in, %5232 : f32
      linalg.yield %5233 : f32
    } -> tensor<1x80x11008xf32>
    %818 = tensor.empty() : tensor<4096x11008xf32>
    %819 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_132 : tensor<11008x4096xf32>) outs(%818 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %820 = "tosa.reshape"(%808) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %821 = tensor.empty() : tensor<80x11008xf32>
    %822 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%821 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %823 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%820, %819 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%822 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %824 = "tosa.reshape"(%823) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %825 = tensor.empty() : tensor<1x80x11008xf32>
    %826 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%817, %824 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%825 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x11008xf32>
    %827 = tensor.empty() : tensor<11008x4096xf32>
    %828 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_134 : tensor<4096x11008xf32>) outs(%827 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %829 = "tosa.reshape"(%826) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %830 = tensor.empty() : tensor<80x4096xf32>
    %831 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%830 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %832 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%829, %828 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%831 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %833 = "tosa.reshape"(%832) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %834 = "tosa.add"(%794, %833) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %835 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_964 = arith.constant 2 : i32
    %836 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%834 : tensor<1x80x4096xf32>) outs(%835 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_964 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_965 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %837 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%836 : tensor<1x80x4096xf32>) outs(%cst_965 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_966 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %838 = "tosa.add"(%837, %cst_966) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %839 = tensor.empty() : tensor<1x80x1xf32>
    %840 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%838 : tensor<1x80x1xf32>) outs(%839 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %841 = tensor.empty() : tensor<1x80x4096xf32>
    %842 = tensor.empty() : tensor<1x80x4096xf32>
    %843 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%840 : tensor<1x80x1xf32>) outs(%842 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %844 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%834, %843 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%841 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %845 = tensor.empty() : tensor<1x80x4096xf32>
    %846 = tensor.empty() : tensor<1x80x4096xf32>
    %847 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_9 : tensor<4096xf32>) outs(%846 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %848 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%847, %844 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%845 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %849 = tensor.empty() : tensor<4096x4096xf32>
    %850 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_136 : tensor<4096x4096xf32>) outs(%849 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %851 = "tosa.reshape"(%848) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %852 = tensor.empty() : tensor<80x4096xf32>
    %853 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%852 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %854 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%851, %850 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%853 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %855 = "tosa.reshape"(%854) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %856 = tensor.empty() : tensor<4096x4096xf32>
    %857 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_138 : tensor<4096x4096xf32>) outs(%856 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %858 = "tosa.reshape"(%848) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %859 = tensor.empty() : tensor<80x4096xf32>
    %860 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%859 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %861 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%858, %857 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%860 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %862 = "tosa.reshape"(%861) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %863 = tensor.empty() : tensor<4096x4096xf32>
    %864 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_140 : tensor<4096x4096xf32>) outs(%863 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %865 = "tosa.reshape"(%848) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %866 = tensor.empty() : tensor<80x4096xf32>
    %867 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%866 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %868 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%865, %864 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%867 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %869 = "tosa.reshape"(%868) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %870 = "tosa.reshape"(%855) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %871 = tensor.empty() : tensor<1x32x80x128xf32>
    %872 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%870 : tensor<1x80x32x128xf32>) outs(%871 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %873 = "tosa.reshape"(%862) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %874 = tensor.empty() : tensor<1x32x80x128xf32>
    %875 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%873 : tensor<1x80x32x128xf32>) outs(%874 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %876 = "tosa.reshape"(%869) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %877 = tensor.empty() : tensor<1x32x80x128xf32>
    %878 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%876 : tensor<1x80x32x128xf32>) outs(%877 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_967 = tensor.extract_slice %expanded_536[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_968 = tensor.extract_slice %extracted_slice_967[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_969 = tensor.extract_slice %extracted_slice_968[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_970 = tensor.extract_slice %expanded_538[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_971 = tensor.extract_slice %extracted_slice_970[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_972 = tensor.extract_slice %extracted_slice_971[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %879 = tensor.empty() : tensor<1x80x128xf32>
    %880 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_969 : tensor<1x1x80x128xf32>) outs(%879 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %881 = tensor.empty() : tensor<80x128xf32>
    %882 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%880 : tensor<1x80x128xf32>) outs(%881 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %883 = tensor.empty() : tensor<1x80x128xf32>
    %884 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_972 : tensor<1x1x80x128xf32>) outs(%883 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %885 = tensor.empty() : tensor<80x128xf32>
    %886 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%884 : tensor<1x80x128xf32>) outs(%885 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %887 = tensor.empty() : tensor<1x80x128xf32>
    %888 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%887 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %882[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %889 = "tosa.reshape"(%888) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %890 = tensor.empty() : tensor<1x80x128xf32>
    %891 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%890 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %886[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %892 = "tosa.reshape"(%891) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %893 = tensor.empty() : tensor<1x32x80x128xf32>
    %894 = tensor.empty() : tensor<1x32x80x128xf32>
    %895 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%889 : tensor<1x1x80x128xf32>) outs(%894 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %896 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%872, %895 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%893 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_973 = tensor.extract_slice %872[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_974 = tensor.extract_slice %872[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %897 = tensor.empty() : tensor<1x32x80x64xf32>
    %898 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_974 : tensor<1x32x80x64xf32>) outs(%897 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %899 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_975 = tensor.insert_slice %898 into %899[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_976 = tensor.insert_slice %extracted_slice_973 into %inserted_slice_975[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %900 = tensor.empty() : tensor<1x32x80x128xf32>
    %901 = tensor.empty() : tensor<1x32x80x128xf32>
    %902 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%892 : tensor<1x1x80x128xf32>) outs(%901 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %903 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_976, %902 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%900 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %904 = "tosa.add"(%896, %903) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %905 = tensor.empty() : tensor<1x32x80x128xf32>
    %906 = tensor.empty() : tensor<1x32x80x128xf32>
    %907 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%889 : tensor<1x1x80x128xf32>) outs(%906 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %908 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%875, %907 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%905 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_977 = tensor.extract_slice %875[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_978 = tensor.extract_slice %875[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %909 = tensor.empty() : tensor<1x32x80x64xf32>
    %910 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_978 : tensor<1x32x80x64xf32>) outs(%909 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %911 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_979 = tensor.insert_slice %910 into %911[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_980 = tensor.insert_slice %extracted_slice_977 into %inserted_slice_979[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %912 = tensor.empty() : tensor<1x32x80x128xf32>
    %913 = tensor.empty() : tensor<1x32x80x128xf32>
    %914 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%892 : tensor<1x1x80x128xf32>) outs(%913 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %915 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_980, %914 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%912 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %916 = "tosa.add"(%908, %915) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %917 = tensor.empty() : tensor<1x32x128x80xf32>
    %918 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%916 : tensor<1x32x80x128xf32>) outs(%917 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %919 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_981 = tensor.extract_slice %904[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_982 = tensor.insert_slice %extracted_slice_981 into %919[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %920 = "tosa.reshape"(%inserted_slice_982) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %921 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_983 = tensor.extract_slice %918[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_984 = tensor.insert_slice %extracted_slice_983 into %921[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %922 = "tosa.reshape"(%inserted_slice_984) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %923 = tensor.empty() : tensor<32x80x80xf32>
    %924 = linalg.batch_matmul ins(%920, %922 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%923 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %925 = "tosa.reshape"(%924) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_985 = arith.constant 11.3137083 : f32
    %926 = tensor.empty() : tensor<1x32x80x80xf32>
    %927 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%925 : tensor<1x32x80x80xf32>) outs(%926 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.divf %in, %cst_985 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %928 = "tosa.add"(%927, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %929 = tensor.empty() : tensor<1x32x80x1xf32>
    %930 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%929 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %931 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%928 : tensor<1x32x80x80xf32>) outs(%929 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.maxf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %932 = tensor.empty() : tensor<1x32x80x80xf32>
    %933 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%928, %931 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%932 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.subf %in, %in_1777 : f32
      %5231 = math.exp %5230 : f32
      linalg.yield %5231 : f32
    } -> tensor<1x32x80x80xf32>
    %934 = tensor.empty() : tensor<1x32x80x1xf32>
    %935 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%934 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %936 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%933 : tensor<1x32x80x80xf32>) outs(%935 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.addf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %937 = tensor.empty() : tensor<1x32x80x80xf32>
    %938 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%933, %936 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%937 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.divf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %939 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_986 = tensor.extract_slice %938[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_987 = tensor.insert_slice %extracted_slice_986 into %939[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %940 = "tosa.reshape"(%inserted_slice_987) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %941 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_988 = tensor.extract_slice %878[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_989 = tensor.insert_slice %extracted_slice_988 into %941[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %942 = "tosa.reshape"(%inserted_slice_989) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %943 = tensor.empty() : tensor<32x80x128xf32>
    %944 = linalg.batch_matmul ins(%940, %942 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%943 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %945 = "tosa.reshape"(%944) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %946 = tensor.empty() : tensor<1x80x32x128xf32>
    %947 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%945 : tensor<1x32x80x128xf32>) outs(%946 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_990 = tensor.extract_slice %947[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %948 = "tosa.reshape"(%extracted_slice_990) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %949 = tensor.empty() : tensor<4096x4096xf32>
    %950 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_142 : tensor<4096x4096xf32>) outs(%949 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %951 = "tosa.reshape"(%948) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %952 = tensor.empty() : tensor<80x4096xf32>
    %953 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%952 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %954 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%951, %950 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%953 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %955 = "tosa.reshape"(%954) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %956 = "tosa.add"(%834, %955) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %957 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_991 = arith.constant 2 : i32
    %958 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%956 : tensor<1x80x4096xf32>) outs(%957 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_991 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_992 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %959 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%958 : tensor<1x80x4096xf32>) outs(%cst_992 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_993 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %960 = "tosa.add"(%959, %cst_993) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %961 = tensor.empty() : tensor<1x80x1xf32>
    %962 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%960 : tensor<1x80x1xf32>) outs(%961 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %963 = tensor.empty() : tensor<1x80x4096xf32>
    %964 = tensor.empty() : tensor<1x80x4096xf32>
    %965 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%962 : tensor<1x80x1xf32>) outs(%964 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %966 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%956, %965 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%963 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %967 = tensor.empty() : tensor<1x80x4096xf32>
    %968 = tensor.empty() : tensor<1x80x4096xf32>
    %969 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_10 : tensor<4096xf32>) outs(%968 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %970 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%969, %966 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%967 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %971 = tensor.empty() : tensor<4096x11008xf32>
    %972 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_144 : tensor<11008x4096xf32>) outs(%971 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %973 = "tosa.reshape"(%970) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %974 = tensor.empty() : tensor<80x11008xf32>
    %975 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%974 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %976 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%973, %972 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%975 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %977 = "tosa.reshape"(%976) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %978 = tensor.empty() : tensor<1x80x11008xf32>
    %979 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%977 : tensor<1x80x11008xf32>) outs(%978 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      %5231 = math.exp %5230 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5232 = arith.addf %cst_1777, %5231 : f32
      %5233 = arith.divf %in, %5232 : f32
      linalg.yield %5233 : f32
    } -> tensor<1x80x11008xf32>
    %980 = tensor.empty() : tensor<4096x11008xf32>
    %981 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_146 : tensor<11008x4096xf32>) outs(%980 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %982 = "tosa.reshape"(%970) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %983 = tensor.empty() : tensor<80x11008xf32>
    %984 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%983 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %985 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%982, %981 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%984 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %986 = "tosa.reshape"(%985) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %987 = tensor.empty() : tensor<1x80x11008xf32>
    %988 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%979, %986 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%987 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x11008xf32>
    %989 = tensor.empty() : tensor<11008x4096xf32>
    %990 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_148 : tensor<4096x11008xf32>) outs(%989 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %991 = "tosa.reshape"(%988) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %992 = tensor.empty() : tensor<80x4096xf32>
    %993 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%992 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %994 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%991, %990 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%993 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %995 = "tosa.reshape"(%994) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %996 = "tosa.add"(%956, %995) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %997 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_994 = arith.constant 2 : i32
    %998 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%996 : tensor<1x80x4096xf32>) outs(%997 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_994 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_995 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %999 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%998 : tensor<1x80x4096xf32>) outs(%cst_995 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_996 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1000 = "tosa.add"(%999, %cst_996) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %1001 = tensor.empty() : tensor<1x80x1xf32>
    %1002 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1000 : tensor<1x80x1xf32>) outs(%1001 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %1003 = tensor.empty() : tensor<1x80x4096xf32>
    %1004 = tensor.empty() : tensor<1x80x4096xf32>
    %1005 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1002 : tensor<1x80x1xf32>) outs(%1004 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1006 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%996, %1005 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1003 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %1007 = tensor.empty() : tensor<1x80x4096xf32>
    %1008 = tensor.empty() : tensor<1x80x4096xf32>
    %1009 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_11 : tensor<4096xf32>) outs(%1008 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1010 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1009, %1006 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1007 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %1011 = tensor.empty() : tensor<4096x4096xf32>
    %1012 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_150 : tensor<4096x4096xf32>) outs(%1011 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1013 = "tosa.reshape"(%1010) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1014 = tensor.empty() : tensor<80x4096xf32>
    %1015 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1014 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %1016 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1013, %1012 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1015 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %1017 = "tosa.reshape"(%1016) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1018 = tensor.empty() : tensor<4096x4096xf32>
    %1019 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_152 : tensor<4096x4096xf32>) outs(%1018 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1020 = "tosa.reshape"(%1010) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1021 = tensor.empty() : tensor<80x4096xf32>
    %1022 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1021 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %1023 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1020, %1019 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1022 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %1024 = "tosa.reshape"(%1023) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1025 = tensor.empty() : tensor<4096x4096xf32>
    %1026 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_154 : tensor<4096x4096xf32>) outs(%1025 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1027 = "tosa.reshape"(%1010) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1028 = tensor.empty() : tensor<80x4096xf32>
    %1029 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1028 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %1030 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1027, %1026 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1029 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %1031 = "tosa.reshape"(%1030) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1032 = "tosa.reshape"(%1017) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1033 = tensor.empty() : tensor<1x32x80x128xf32>
    %1034 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1032 : tensor<1x80x32x128xf32>) outs(%1033 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1035 = "tosa.reshape"(%1024) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1036 = tensor.empty() : tensor<1x32x80x128xf32>
    %1037 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1035 : tensor<1x80x32x128xf32>) outs(%1036 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1038 = "tosa.reshape"(%1031) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1039 = tensor.empty() : tensor<1x32x80x128xf32>
    %1040 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1038 : tensor<1x80x32x128xf32>) outs(%1039 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_997 = tensor.extract_slice %expanded_540[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_998 = tensor.extract_slice %extracted_slice_997[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_999 = tensor.extract_slice %extracted_slice_998[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1000 = tensor.extract_slice %expanded_542[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1001 = tensor.extract_slice %extracted_slice_1000[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1002 = tensor.extract_slice %extracted_slice_1001[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %1041 = tensor.empty() : tensor<1x80x128xf32>
    %1042 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_999 : tensor<1x1x80x128xf32>) outs(%1041 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %1043 = tensor.empty() : tensor<80x128xf32>
    %1044 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%1042 : tensor<1x80x128xf32>) outs(%1043 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %1045 = tensor.empty() : tensor<1x80x128xf32>
    %1046 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1002 : tensor<1x1x80x128xf32>) outs(%1045 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %1047 = tensor.empty() : tensor<80x128xf32>
    %1048 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%1046 : tensor<1x80x128xf32>) outs(%1047 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %1049 = tensor.empty() : tensor<1x80x128xf32>
    %1050 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%1049 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %1044[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %1051 = "tosa.reshape"(%1050) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %1052 = tensor.empty() : tensor<1x80x128xf32>
    %1053 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%1052 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %1048[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %1054 = "tosa.reshape"(%1053) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %1055 = tensor.empty() : tensor<1x32x80x128xf32>
    %1056 = tensor.empty() : tensor<1x32x80x128xf32>
    %1057 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1051 : tensor<1x1x80x128xf32>) outs(%1056 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1058 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1034, %1057 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1055 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1003 = tensor.extract_slice %1034[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1004 = tensor.extract_slice %1034[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %1059 = tensor.empty() : tensor<1x32x80x64xf32>
    %1060 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1004 : tensor<1x32x80x64xf32>) outs(%1059 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %1061 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1005 = tensor.insert_slice %1060 into %1061[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1006 = tensor.insert_slice %extracted_slice_1003 into %inserted_slice_1005[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %1062 = tensor.empty() : tensor<1x32x80x128xf32>
    %1063 = tensor.empty() : tensor<1x32x80x128xf32>
    %1064 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1054 : tensor<1x1x80x128xf32>) outs(%1063 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1065 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1006, %1064 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1062 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %1066 = "tosa.add"(%1058, %1065) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1067 = tensor.empty() : tensor<1x32x80x128xf32>
    %1068 = tensor.empty() : tensor<1x32x80x128xf32>
    %1069 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1051 : tensor<1x1x80x128xf32>) outs(%1068 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1070 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1037, %1069 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1067 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1007 = tensor.extract_slice %1037[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1008 = tensor.extract_slice %1037[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %1071 = tensor.empty() : tensor<1x32x80x64xf32>
    %1072 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1008 : tensor<1x32x80x64xf32>) outs(%1071 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %1073 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1009 = tensor.insert_slice %1072 into %1073[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1010 = tensor.insert_slice %extracted_slice_1007 into %inserted_slice_1009[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %1074 = tensor.empty() : tensor<1x32x80x128xf32>
    %1075 = tensor.empty() : tensor<1x32x80x128xf32>
    %1076 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1054 : tensor<1x1x80x128xf32>) outs(%1075 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1077 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1010, %1076 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1074 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %1078 = "tosa.add"(%1070, %1077) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1079 = tensor.empty() : tensor<1x32x128x80xf32>
    %1080 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1078 : tensor<1x32x80x128xf32>) outs(%1079 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %1081 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1011 = tensor.extract_slice %1066[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1012 = tensor.insert_slice %extracted_slice_1011 into %1081[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %1082 = "tosa.reshape"(%inserted_slice_1012) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %1083 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1013 = tensor.extract_slice %1080[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1014 = tensor.insert_slice %extracted_slice_1013 into %1083[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %1084 = "tosa.reshape"(%inserted_slice_1014) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %1085 = tensor.empty() : tensor<32x80x80xf32>
    %1086 = linalg.batch_matmul ins(%1082, %1084 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%1085 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %1087 = "tosa.reshape"(%1086) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1015 = arith.constant 11.3137083 : f32
    %1088 = tensor.empty() : tensor<1x32x80x80xf32>
    %1089 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1087 : tensor<1x32x80x80xf32>) outs(%1088 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.divf %in, %cst_1015 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %1090 = "tosa.add"(%1089, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %1091 = tensor.empty() : tensor<1x32x80x1xf32>
    %1092 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1091 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %1093 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1090 : tensor<1x32x80x80xf32>) outs(%1091 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.maxf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %1094 = tensor.empty() : tensor<1x32x80x80xf32>
    %1095 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1090, %1093 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%1094 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.subf %in, %in_1777 : f32
      %5231 = math.exp %5230 : f32
      linalg.yield %5231 : f32
    } -> tensor<1x32x80x80xf32>
    %1096 = tensor.empty() : tensor<1x32x80x1xf32>
    %1097 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1096 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %1098 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1095 : tensor<1x32x80x80xf32>) outs(%1097 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.addf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %1099 = tensor.empty() : tensor<1x32x80x80xf32>
    %1100 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1095, %1098 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%1099 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.divf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %1101 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1016 = tensor.extract_slice %1100[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1017 = tensor.insert_slice %extracted_slice_1016 into %1101[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %1102 = "tosa.reshape"(%inserted_slice_1017) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %1103 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1018 = tensor.extract_slice %1040[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1019 = tensor.insert_slice %extracted_slice_1018 into %1103[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %1104 = "tosa.reshape"(%inserted_slice_1019) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %1105 = tensor.empty() : tensor<32x80x128xf32>
    %1106 = linalg.batch_matmul ins(%1102, %1104 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%1105 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %1107 = "tosa.reshape"(%1106) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1108 = tensor.empty() : tensor<1x80x32x128xf32>
    %1109 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1107 : tensor<1x32x80x128xf32>) outs(%1108 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1020 = tensor.extract_slice %1109[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %1110 = "tosa.reshape"(%extracted_slice_1020) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %1111 = tensor.empty() : tensor<4096x4096xf32>
    %1112 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_156 : tensor<4096x4096xf32>) outs(%1111 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1113 = "tosa.reshape"(%1110) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1114 = tensor.empty() : tensor<80x4096xf32>
    %1115 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1114 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %1116 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1113, %1112 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1115 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %1117 = "tosa.reshape"(%1116) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1118 = "tosa.add"(%996, %1117) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %1119 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1021 = arith.constant 2 : i32
    %1120 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1118 : tensor<1x80x4096xf32>) outs(%1119 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1021 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1022 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %1121 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1120 : tensor<1x80x4096xf32>) outs(%cst_1022 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1023 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1122 = "tosa.add"(%1121, %cst_1023) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %1123 = tensor.empty() : tensor<1x80x1xf32>
    %1124 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1122 : tensor<1x80x1xf32>) outs(%1123 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %1125 = tensor.empty() : tensor<1x80x4096xf32>
    %1126 = tensor.empty() : tensor<1x80x4096xf32>
    %1127 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1124 : tensor<1x80x1xf32>) outs(%1126 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1128 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1118, %1127 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1125 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %1129 = tensor.empty() : tensor<1x80x4096xf32>
    %1130 = tensor.empty() : tensor<1x80x4096xf32>
    %1131 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_12 : tensor<4096xf32>) outs(%1130 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1132 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1131, %1128 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1129 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %1133 = tensor.empty() : tensor<4096x11008xf32>
    %1134 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_158 : tensor<11008x4096xf32>) outs(%1133 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1135 = "tosa.reshape"(%1132) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1136 = tensor.empty() : tensor<80x11008xf32>
    %1137 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1136 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %1138 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1135, %1134 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%1137 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %1139 = "tosa.reshape"(%1138) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %1140 = tensor.empty() : tensor<1x80x11008xf32>
    %1141 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1139 : tensor<1x80x11008xf32>) outs(%1140 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      %5231 = math.exp %5230 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5232 = arith.addf %cst_1777, %5231 : f32
      %5233 = arith.divf %in, %5232 : f32
      linalg.yield %5233 : f32
    } -> tensor<1x80x11008xf32>
    %1142 = tensor.empty() : tensor<4096x11008xf32>
    %1143 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_160 : tensor<11008x4096xf32>) outs(%1142 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1144 = "tosa.reshape"(%1132) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1145 = tensor.empty() : tensor<80x11008xf32>
    %1146 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1145 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %1147 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1144, %1143 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%1146 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %1148 = "tosa.reshape"(%1147) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %1149 = tensor.empty() : tensor<1x80x11008xf32>
    %1150 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1141, %1148 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%1149 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x11008xf32>
    %1151 = tensor.empty() : tensor<11008x4096xf32>
    %1152 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_162 : tensor<4096x11008xf32>) outs(%1151 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %1153 = "tosa.reshape"(%1150) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %1154 = tensor.empty() : tensor<80x4096xf32>
    %1155 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1154 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %1156 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1153, %1152 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%1155 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %1157 = "tosa.reshape"(%1156) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1158 = "tosa.add"(%1118, %1157) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %1159 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1024 = arith.constant 2 : i32
    %1160 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1158 : tensor<1x80x4096xf32>) outs(%1159 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1024 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1025 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %1161 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1160 : tensor<1x80x4096xf32>) outs(%cst_1025 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1026 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1162 = "tosa.add"(%1161, %cst_1026) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %1163 = tensor.empty() : tensor<1x80x1xf32>
    %1164 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1162 : tensor<1x80x1xf32>) outs(%1163 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %1165 = tensor.empty() : tensor<1x80x4096xf32>
    %1166 = tensor.empty() : tensor<1x80x4096xf32>
    %1167 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1164 : tensor<1x80x1xf32>) outs(%1166 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1168 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1158, %1167 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1165 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %1169 = tensor.empty() : tensor<1x80x4096xf32>
    %1170 = tensor.empty() : tensor<1x80x4096xf32>
    %1171 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_13 : tensor<4096xf32>) outs(%1170 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1172 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1171, %1168 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1169 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %1173 = tensor.empty() : tensor<4096x4096xf32>
    %1174 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_164 : tensor<4096x4096xf32>) outs(%1173 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1175 = "tosa.reshape"(%1172) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1176 = tensor.empty() : tensor<80x4096xf32>
    %1177 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1176 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %1178 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1175, %1174 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1177 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %1179 = "tosa.reshape"(%1178) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1180 = tensor.empty() : tensor<4096x4096xf32>
    %1181 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_166 : tensor<4096x4096xf32>) outs(%1180 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1182 = "tosa.reshape"(%1172) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1183 = tensor.empty() : tensor<80x4096xf32>
    %1184 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1183 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %1185 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1182, %1181 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1184 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %1186 = "tosa.reshape"(%1185) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1187 = tensor.empty() : tensor<4096x4096xf32>
    %1188 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_168 : tensor<4096x4096xf32>) outs(%1187 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1189 = "tosa.reshape"(%1172) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1190 = tensor.empty() : tensor<80x4096xf32>
    %1191 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1190 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %1192 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1189, %1188 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1191 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %1193 = "tosa.reshape"(%1192) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1194 = "tosa.reshape"(%1179) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1195 = tensor.empty() : tensor<1x32x80x128xf32>
    %1196 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1194 : tensor<1x80x32x128xf32>) outs(%1195 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1197 = "tosa.reshape"(%1186) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1198 = tensor.empty() : tensor<1x32x80x128xf32>
    %1199 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1197 : tensor<1x80x32x128xf32>) outs(%1198 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1200 = "tosa.reshape"(%1193) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1201 = tensor.empty() : tensor<1x32x80x128xf32>
    %1202 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1200 : tensor<1x80x32x128xf32>) outs(%1201 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1027 = tensor.extract_slice %expanded_544[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1028 = tensor.extract_slice %extracted_slice_1027[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1029 = tensor.extract_slice %extracted_slice_1028[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1030 = tensor.extract_slice %expanded_546[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1031 = tensor.extract_slice %extracted_slice_1030[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1032 = tensor.extract_slice %extracted_slice_1031[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %1203 = tensor.empty() : tensor<1x80x128xf32>
    %1204 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1029 : tensor<1x1x80x128xf32>) outs(%1203 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %1205 = tensor.empty() : tensor<80x128xf32>
    %1206 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%1204 : tensor<1x80x128xf32>) outs(%1205 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %1207 = tensor.empty() : tensor<1x80x128xf32>
    %1208 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1032 : tensor<1x1x80x128xf32>) outs(%1207 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %1209 = tensor.empty() : tensor<80x128xf32>
    %1210 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%1208 : tensor<1x80x128xf32>) outs(%1209 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %1211 = tensor.empty() : tensor<1x80x128xf32>
    %1212 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%1211 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %1206[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %1213 = "tosa.reshape"(%1212) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %1214 = tensor.empty() : tensor<1x80x128xf32>
    %1215 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%1214 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %1210[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %1216 = "tosa.reshape"(%1215) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %1217 = tensor.empty() : tensor<1x32x80x128xf32>
    %1218 = tensor.empty() : tensor<1x32x80x128xf32>
    %1219 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1213 : tensor<1x1x80x128xf32>) outs(%1218 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1220 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1196, %1219 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1217 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1033 = tensor.extract_slice %1196[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1034 = tensor.extract_slice %1196[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %1221 = tensor.empty() : tensor<1x32x80x64xf32>
    %1222 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1034 : tensor<1x32x80x64xf32>) outs(%1221 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %1223 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1035 = tensor.insert_slice %1222 into %1223[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1036 = tensor.insert_slice %extracted_slice_1033 into %inserted_slice_1035[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %1224 = tensor.empty() : tensor<1x32x80x128xf32>
    %1225 = tensor.empty() : tensor<1x32x80x128xf32>
    %1226 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1216 : tensor<1x1x80x128xf32>) outs(%1225 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1227 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1036, %1226 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1224 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %1228 = "tosa.add"(%1220, %1227) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1229 = tensor.empty() : tensor<1x32x80x128xf32>
    %1230 = tensor.empty() : tensor<1x32x80x128xf32>
    %1231 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1213 : tensor<1x1x80x128xf32>) outs(%1230 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1232 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1199, %1231 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1229 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1037 = tensor.extract_slice %1199[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1038 = tensor.extract_slice %1199[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %1233 = tensor.empty() : tensor<1x32x80x64xf32>
    %1234 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1038 : tensor<1x32x80x64xf32>) outs(%1233 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %1235 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1039 = tensor.insert_slice %1234 into %1235[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1040 = tensor.insert_slice %extracted_slice_1037 into %inserted_slice_1039[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %1236 = tensor.empty() : tensor<1x32x80x128xf32>
    %1237 = tensor.empty() : tensor<1x32x80x128xf32>
    %1238 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1216 : tensor<1x1x80x128xf32>) outs(%1237 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1239 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1040, %1238 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1236 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %1240 = "tosa.add"(%1232, %1239) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1241 = tensor.empty() : tensor<1x32x128x80xf32>
    %1242 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1240 : tensor<1x32x80x128xf32>) outs(%1241 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %1243 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1041 = tensor.extract_slice %1228[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1042 = tensor.insert_slice %extracted_slice_1041 into %1243[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %1244 = "tosa.reshape"(%inserted_slice_1042) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %1245 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1043 = tensor.extract_slice %1242[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1044 = tensor.insert_slice %extracted_slice_1043 into %1245[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %1246 = "tosa.reshape"(%inserted_slice_1044) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %1247 = tensor.empty() : tensor<32x80x80xf32>
    %1248 = linalg.batch_matmul ins(%1244, %1246 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%1247 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %1249 = "tosa.reshape"(%1248) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1045 = arith.constant 11.3137083 : f32
    %1250 = tensor.empty() : tensor<1x32x80x80xf32>
    %1251 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1249 : tensor<1x32x80x80xf32>) outs(%1250 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.divf %in, %cst_1045 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %1252 = "tosa.add"(%1251, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %1253 = tensor.empty() : tensor<1x32x80x1xf32>
    %1254 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1253 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %1255 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1252 : tensor<1x32x80x80xf32>) outs(%1253 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.maxf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %1256 = tensor.empty() : tensor<1x32x80x80xf32>
    %1257 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1252, %1255 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%1256 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.subf %in, %in_1777 : f32
      %5231 = math.exp %5230 : f32
      linalg.yield %5231 : f32
    } -> tensor<1x32x80x80xf32>
    %1258 = tensor.empty() : tensor<1x32x80x1xf32>
    %1259 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1258 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %1260 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1257 : tensor<1x32x80x80xf32>) outs(%1259 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.addf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %1261 = tensor.empty() : tensor<1x32x80x80xf32>
    %1262 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1257, %1260 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%1261 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.divf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %1263 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1046 = tensor.extract_slice %1262[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1047 = tensor.insert_slice %extracted_slice_1046 into %1263[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %1264 = "tosa.reshape"(%inserted_slice_1047) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %1265 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1048 = tensor.extract_slice %1202[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1049 = tensor.insert_slice %extracted_slice_1048 into %1265[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %1266 = "tosa.reshape"(%inserted_slice_1049) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %1267 = tensor.empty() : tensor<32x80x128xf32>
    %1268 = linalg.batch_matmul ins(%1264, %1266 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%1267 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %1269 = "tosa.reshape"(%1268) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1270 = tensor.empty() : tensor<1x80x32x128xf32>
    %1271 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1269 : tensor<1x32x80x128xf32>) outs(%1270 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1050 = tensor.extract_slice %1271[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %1272 = "tosa.reshape"(%extracted_slice_1050) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %1273 = tensor.empty() : tensor<4096x4096xf32>
    %1274 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_170 : tensor<4096x4096xf32>) outs(%1273 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1275 = "tosa.reshape"(%1272) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1276 = tensor.empty() : tensor<80x4096xf32>
    %1277 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1276 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %1278 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1275, %1274 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1277 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %1279 = "tosa.reshape"(%1278) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1280 = "tosa.add"(%1158, %1279) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %1281 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1051 = arith.constant 2 : i32
    %1282 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1280 : tensor<1x80x4096xf32>) outs(%1281 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1051 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1052 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %1283 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1282 : tensor<1x80x4096xf32>) outs(%cst_1052 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1053 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1284 = "tosa.add"(%1283, %cst_1053) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %1285 = tensor.empty() : tensor<1x80x1xf32>
    %1286 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1284 : tensor<1x80x1xf32>) outs(%1285 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %1287 = tensor.empty() : tensor<1x80x4096xf32>
    %1288 = tensor.empty() : tensor<1x80x4096xf32>
    %1289 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1286 : tensor<1x80x1xf32>) outs(%1288 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1290 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1280, %1289 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1287 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %1291 = tensor.empty() : tensor<1x80x4096xf32>
    %1292 = tensor.empty() : tensor<1x80x4096xf32>
    %1293 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_14 : tensor<4096xf32>) outs(%1292 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1294 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1293, %1290 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1291 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %1295 = tensor.empty() : tensor<4096x11008xf32>
    %1296 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_172 : tensor<11008x4096xf32>) outs(%1295 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1297 = "tosa.reshape"(%1294) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1298 = tensor.empty() : tensor<80x11008xf32>
    %1299 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1298 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %1300 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1297, %1296 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%1299 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %1301 = "tosa.reshape"(%1300) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %1302 = tensor.empty() : tensor<1x80x11008xf32>
    %1303 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1301 : tensor<1x80x11008xf32>) outs(%1302 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      %5231 = math.exp %5230 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5232 = arith.addf %cst_1777, %5231 : f32
      %5233 = arith.divf %in, %5232 : f32
      linalg.yield %5233 : f32
    } -> tensor<1x80x11008xf32>
    %1304 = tensor.empty() : tensor<4096x11008xf32>
    %1305 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_174 : tensor<11008x4096xf32>) outs(%1304 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1306 = "tosa.reshape"(%1294) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1307 = tensor.empty() : tensor<80x11008xf32>
    %1308 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1307 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %1309 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1306, %1305 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%1308 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %1310 = "tosa.reshape"(%1309) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %1311 = tensor.empty() : tensor<1x80x11008xf32>
    %1312 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1303, %1310 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%1311 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x11008xf32>
    %1313 = tensor.empty() : tensor<11008x4096xf32>
    %1314 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_176 : tensor<4096x11008xf32>) outs(%1313 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %1315 = "tosa.reshape"(%1312) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %1316 = tensor.empty() : tensor<80x4096xf32>
    %1317 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1316 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %1318 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1315, %1314 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%1317 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %1319 = "tosa.reshape"(%1318) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1320 = "tosa.add"(%1280, %1319) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %1321 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1054 = arith.constant 2 : i32
    %1322 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1320 : tensor<1x80x4096xf32>) outs(%1321 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1054 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1055 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %1323 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1322 : tensor<1x80x4096xf32>) outs(%cst_1055 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1056 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1324 = "tosa.add"(%1323, %cst_1056) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %1325 = tensor.empty() : tensor<1x80x1xf32>
    %1326 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1324 : tensor<1x80x1xf32>) outs(%1325 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %1327 = tensor.empty() : tensor<1x80x4096xf32>
    %1328 = tensor.empty() : tensor<1x80x4096xf32>
    %1329 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1326 : tensor<1x80x1xf32>) outs(%1328 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1330 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1320, %1329 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1327 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %1331 = tensor.empty() : tensor<1x80x4096xf32>
    %1332 = tensor.empty() : tensor<1x80x4096xf32>
    %1333 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_15 : tensor<4096xf32>) outs(%1332 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1334 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1333, %1330 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1331 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %1335 = tensor.empty() : tensor<4096x4096xf32>
    %1336 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_178 : tensor<4096x4096xf32>) outs(%1335 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1337 = "tosa.reshape"(%1334) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1338 = tensor.empty() : tensor<80x4096xf32>
    %1339 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1338 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %1340 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1337, %1336 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1339 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %1341 = "tosa.reshape"(%1340) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1342 = tensor.empty() : tensor<4096x4096xf32>
    %1343 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_180 : tensor<4096x4096xf32>) outs(%1342 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1344 = "tosa.reshape"(%1334) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1345 = tensor.empty() : tensor<80x4096xf32>
    %1346 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1345 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %1347 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1344, %1343 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1346 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %1348 = "tosa.reshape"(%1347) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1349 = tensor.empty() : tensor<4096x4096xf32>
    %1350 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_182 : tensor<4096x4096xf32>) outs(%1349 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1351 = "tosa.reshape"(%1334) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1352 = tensor.empty() : tensor<80x4096xf32>
    %1353 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1352 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %1354 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1351, %1350 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1353 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %1355 = "tosa.reshape"(%1354) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1356 = "tosa.reshape"(%1341) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1357 = tensor.empty() : tensor<1x32x80x128xf32>
    %1358 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1356 : tensor<1x80x32x128xf32>) outs(%1357 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1359 = "tosa.reshape"(%1348) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1360 = tensor.empty() : tensor<1x32x80x128xf32>
    %1361 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1359 : tensor<1x80x32x128xf32>) outs(%1360 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1362 = "tosa.reshape"(%1355) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1363 = tensor.empty() : tensor<1x32x80x128xf32>
    %1364 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1362 : tensor<1x80x32x128xf32>) outs(%1363 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1057 = tensor.extract_slice %expanded_548[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1058 = tensor.extract_slice %extracted_slice_1057[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1059 = tensor.extract_slice %extracted_slice_1058[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1060 = tensor.extract_slice %expanded_550[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1061 = tensor.extract_slice %extracted_slice_1060[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1062 = tensor.extract_slice %extracted_slice_1061[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %1365 = tensor.empty() : tensor<1x80x128xf32>
    %1366 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1059 : tensor<1x1x80x128xf32>) outs(%1365 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %1367 = tensor.empty() : tensor<80x128xf32>
    %1368 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%1366 : tensor<1x80x128xf32>) outs(%1367 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %1369 = tensor.empty() : tensor<1x80x128xf32>
    %1370 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1062 : tensor<1x1x80x128xf32>) outs(%1369 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %1371 = tensor.empty() : tensor<80x128xf32>
    %1372 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%1370 : tensor<1x80x128xf32>) outs(%1371 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %1373 = tensor.empty() : tensor<1x80x128xf32>
    %1374 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%1373 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %1368[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %1375 = "tosa.reshape"(%1374) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %1376 = tensor.empty() : tensor<1x80x128xf32>
    %1377 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%1376 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %1372[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %1378 = "tosa.reshape"(%1377) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %1379 = tensor.empty() : tensor<1x32x80x128xf32>
    %1380 = tensor.empty() : tensor<1x32x80x128xf32>
    %1381 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1375 : tensor<1x1x80x128xf32>) outs(%1380 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1382 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1358, %1381 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1379 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1063 = tensor.extract_slice %1358[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1064 = tensor.extract_slice %1358[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %1383 = tensor.empty() : tensor<1x32x80x64xf32>
    %1384 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1064 : tensor<1x32x80x64xf32>) outs(%1383 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %1385 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1065 = tensor.insert_slice %1384 into %1385[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1066 = tensor.insert_slice %extracted_slice_1063 into %inserted_slice_1065[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %1386 = tensor.empty() : tensor<1x32x80x128xf32>
    %1387 = tensor.empty() : tensor<1x32x80x128xf32>
    %1388 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1378 : tensor<1x1x80x128xf32>) outs(%1387 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1389 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1066, %1388 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1386 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %1390 = "tosa.add"(%1382, %1389) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1391 = tensor.empty() : tensor<1x32x80x128xf32>
    %1392 = tensor.empty() : tensor<1x32x80x128xf32>
    %1393 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1375 : tensor<1x1x80x128xf32>) outs(%1392 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1394 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1361, %1393 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1391 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1067 = tensor.extract_slice %1361[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1068 = tensor.extract_slice %1361[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %1395 = tensor.empty() : tensor<1x32x80x64xf32>
    %1396 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1068 : tensor<1x32x80x64xf32>) outs(%1395 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %1397 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1069 = tensor.insert_slice %1396 into %1397[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1070 = tensor.insert_slice %extracted_slice_1067 into %inserted_slice_1069[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %1398 = tensor.empty() : tensor<1x32x80x128xf32>
    %1399 = tensor.empty() : tensor<1x32x80x128xf32>
    %1400 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1378 : tensor<1x1x80x128xf32>) outs(%1399 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1401 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1070, %1400 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1398 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %1402 = "tosa.add"(%1394, %1401) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1403 = tensor.empty() : tensor<1x32x128x80xf32>
    %1404 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1402 : tensor<1x32x80x128xf32>) outs(%1403 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %1405 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1071 = tensor.extract_slice %1390[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1072 = tensor.insert_slice %extracted_slice_1071 into %1405[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %1406 = "tosa.reshape"(%inserted_slice_1072) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %1407 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1073 = tensor.extract_slice %1404[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1074 = tensor.insert_slice %extracted_slice_1073 into %1407[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %1408 = "tosa.reshape"(%inserted_slice_1074) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %1409 = tensor.empty() : tensor<32x80x80xf32>
    %1410 = linalg.batch_matmul ins(%1406, %1408 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%1409 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %1411 = "tosa.reshape"(%1410) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1075 = arith.constant 11.3137083 : f32
    %1412 = tensor.empty() : tensor<1x32x80x80xf32>
    %1413 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1411 : tensor<1x32x80x80xf32>) outs(%1412 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.divf %in, %cst_1075 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %1414 = "tosa.add"(%1413, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %1415 = tensor.empty() : tensor<1x32x80x1xf32>
    %1416 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1415 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %1417 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1414 : tensor<1x32x80x80xf32>) outs(%1415 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.maxf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %1418 = tensor.empty() : tensor<1x32x80x80xf32>
    %1419 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1414, %1417 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%1418 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.subf %in, %in_1777 : f32
      %5231 = math.exp %5230 : f32
      linalg.yield %5231 : f32
    } -> tensor<1x32x80x80xf32>
    %1420 = tensor.empty() : tensor<1x32x80x1xf32>
    %1421 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1420 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %1422 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1419 : tensor<1x32x80x80xf32>) outs(%1421 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.addf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %1423 = tensor.empty() : tensor<1x32x80x80xf32>
    %1424 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1419, %1422 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%1423 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.divf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %1425 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1076 = tensor.extract_slice %1424[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1077 = tensor.insert_slice %extracted_slice_1076 into %1425[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %1426 = "tosa.reshape"(%inserted_slice_1077) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %1427 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1078 = tensor.extract_slice %1364[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1079 = tensor.insert_slice %extracted_slice_1078 into %1427[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %1428 = "tosa.reshape"(%inserted_slice_1079) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %1429 = tensor.empty() : tensor<32x80x128xf32>
    %1430 = linalg.batch_matmul ins(%1426, %1428 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%1429 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %1431 = "tosa.reshape"(%1430) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1432 = tensor.empty() : tensor<1x80x32x128xf32>
    %1433 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1431 : tensor<1x32x80x128xf32>) outs(%1432 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1080 = tensor.extract_slice %1433[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %1434 = "tosa.reshape"(%extracted_slice_1080) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %1435 = tensor.empty() : tensor<4096x4096xf32>
    %1436 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_184 : tensor<4096x4096xf32>) outs(%1435 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1437 = "tosa.reshape"(%1434) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1438 = tensor.empty() : tensor<80x4096xf32>
    %1439 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1438 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %1440 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1437, %1436 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1439 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %1441 = "tosa.reshape"(%1440) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1442 = "tosa.add"(%1320, %1441) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %1443 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1081 = arith.constant 2 : i32
    %1444 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1442 : tensor<1x80x4096xf32>) outs(%1443 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1081 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1082 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %1445 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1444 : tensor<1x80x4096xf32>) outs(%cst_1082 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1083 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1446 = "tosa.add"(%1445, %cst_1083) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %1447 = tensor.empty() : tensor<1x80x1xf32>
    %1448 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1446 : tensor<1x80x1xf32>) outs(%1447 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %1449 = tensor.empty() : tensor<1x80x4096xf32>
    %1450 = tensor.empty() : tensor<1x80x4096xf32>
    %1451 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1448 : tensor<1x80x1xf32>) outs(%1450 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1452 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1442, %1451 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1449 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %1453 = tensor.empty() : tensor<1x80x4096xf32>
    %1454 = tensor.empty() : tensor<1x80x4096xf32>
    %1455 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_16 : tensor<4096xf32>) outs(%1454 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1456 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1455, %1452 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1453 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %1457 = tensor.empty() : tensor<4096x11008xf32>
    %1458 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_186 : tensor<11008x4096xf32>) outs(%1457 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1459 = "tosa.reshape"(%1456) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1460 = tensor.empty() : tensor<80x11008xf32>
    %1461 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1460 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %1462 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1459, %1458 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%1461 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %1463 = "tosa.reshape"(%1462) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %1464 = tensor.empty() : tensor<1x80x11008xf32>
    %1465 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1463 : tensor<1x80x11008xf32>) outs(%1464 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      %5231 = math.exp %5230 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5232 = arith.addf %cst_1777, %5231 : f32
      %5233 = arith.divf %in, %5232 : f32
      linalg.yield %5233 : f32
    } -> tensor<1x80x11008xf32>
    %1466 = tensor.empty() : tensor<4096x11008xf32>
    %1467 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_188 : tensor<11008x4096xf32>) outs(%1466 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1468 = "tosa.reshape"(%1456) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1469 = tensor.empty() : tensor<80x11008xf32>
    %1470 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1469 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %1471 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1468, %1467 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%1470 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %1472 = "tosa.reshape"(%1471) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %1473 = tensor.empty() : tensor<1x80x11008xf32>
    %1474 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1465, %1472 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%1473 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x11008xf32>
    %1475 = tensor.empty() : tensor<11008x4096xf32>
    %1476 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_190 : tensor<4096x11008xf32>) outs(%1475 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %1477 = "tosa.reshape"(%1474) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %1478 = tensor.empty() : tensor<80x4096xf32>
    %1479 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1478 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %1480 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1477, %1476 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%1479 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %1481 = "tosa.reshape"(%1480) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1482 = "tosa.add"(%1442, %1481) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %1483 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1084 = arith.constant 2 : i32
    %1484 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1482 : tensor<1x80x4096xf32>) outs(%1483 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1084 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1085 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %1485 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1484 : tensor<1x80x4096xf32>) outs(%cst_1085 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1086 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1486 = "tosa.add"(%1485, %cst_1086) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %1487 = tensor.empty() : tensor<1x80x1xf32>
    %1488 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1486 : tensor<1x80x1xf32>) outs(%1487 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %1489 = tensor.empty() : tensor<1x80x4096xf32>
    %1490 = tensor.empty() : tensor<1x80x4096xf32>
    %1491 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1488 : tensor<1x80x1xf32>) outs(%1490 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1492 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1482, %1491 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1489 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %1493 = tensor.empty() : tensor<1x80x4096xf32>
    %1494 = tensor.empty() : tensor<1x80x4096xf32>
    %1495 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_17 : tensor<4096xf32>) outs(%1494 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1496 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1495, %1492 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1493 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %1497 = tensor.empty() : tensor<4096x4096xf32>
    %1498 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_192 : tensor<4096x4096xf32>) outs(%1497 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1499 = "tosa.reshape"(%1496) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1500 = tensor.empty() : tensor<80x4096xf32>
    %1501 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1500 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %1502 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1499, %1498 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1501 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %1503 = "tosa.reshape"(%1502) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1504 = tensor.empty() : tensor<4096x4096xf32>
    %1505 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_194 : tensor<4096x4096xf32>) outs(%1504 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1506 = "tosa.reshape"(%1496) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1507 = tensor.empty() : tensor<80x4096xf32>
    %1508 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1507 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %1509 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1506, %1505 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1508 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %1510 = "tosa.reshape"(%1509) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1511 = tensor.empty() : tensor<4096x4096xf32>
    %1512 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_196 : tensor<4096x4096xf32>) outs(%1511 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1513 = "tosa.reshape"(%1496) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1514 = tensor.empty() : tensor<80x4096xf32>
    %1515 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1514 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %1516 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1513, %1512 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1515 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %1517 = "tosa.reshape"(%1516) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1518 = "tosa.reshape"(%1503) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1519 = tensor.empty() : tensor<1x32x80x128xf32>
    %1520 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1518 : tensor<1x80x32x128xf32>) outs(%1519 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1521 = "tosa.reshape"(%1510) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1522 = tensor.empty() : tensor<1x32x80x128xf32>
    %1523 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1521 : tensor<1x80x32x128xf32>) outs(%1522 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1524 = "tosa.reshape"(%1517) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1525 = tensor.empty() : tensor<1x32x80x128xf32>
    %1526 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1524 : tensor<1x80x32x128xf32>) outs(%1525 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1087 = tensor.extract_slice %expanded_552[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1088 = tensor.extract_slice %extracted_slice_1087[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1089 = tensor.extract_slice %extracted_slice_1088[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1090 = tensor.extract_slice %expanded_554[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1091 = tensor.extract_slice %extracted_slice_1090[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1092 = tensor.extract_slice %extracted_slice_1091[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %1527 = tensor.empty() : tensor<1x80x128xf32>
    %1528 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1089 : tensor<1x1x80x128xf32>) outs(%1527 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %1529 = tensor.empty() : tensor<80x128xf32>
    %1530 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%1528 : tensor<1x80x128xf32>) outs(%1529 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %1531 = tensor.empty() : tensor<1x80x128xf32>
    %1532 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1092 : tensor<1x1x80x128xf32>) outs(%1531 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %1533 = tensor.empty() : tensor<80x128xf32>
    %1534 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%1532 : tensor<1x80x128xf32>) outs(%1533 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %1535 = tensor.empty() : tensor<1x80x128xf32>
    %1536 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%1535 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %1530[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %1537 = "tosa.reshape"(%1536) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %1538 = tensor.empty() : tensor<1x80x128xf32>
    %1539 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%1538 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %1534[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %1540 = "tosa.reshape"(%1539) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %1541 = tensor.empty() : tensor<1x32x80x128xf32>
    %1542 = tensor.empty() : tensor<1x32x80x128xf32>
    %1543 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1537 : tensor<1x1x80x128xf32>) outs(%1542 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1544 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1520, %1543 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1541 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1093 = tensor.extract_slice %1520[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1094 = tensor.extract_slice %1520[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %1545 = tensor.empty() : tensor<1x32x80x64xf32>
    %1546 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1094 : tensor<1x32x80x64xf32>) outs(%1545 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %1547 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1095 = tensor.insert_slice %1546 into %1547[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1096 = tensor.insert_slice %extracted_slice_1093 into %inserted_slice_1095[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %1548 = tensor.empty() : tensor<1x32x80x128xf32>
    %1549 = tensor.empty() : tensor<1x32x80x128xf32>
    %1550 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1540 : tensor<1x1x80x128xf32>) outs(%1549 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1551 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1096, %1550 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1548 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %1552 = "tosa.add"(%1544, %1551) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1553 = tensor.empty() : tensor<1x32x80x128xf32>
    %1554 = tensor.empty() : tensor<1x32x80x128xf32>
    %1555 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1537 : tensor<1x1x80x128xf32>) outs(%1554 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1556 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1523, %1555 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1553 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1097 = tensor.extract_slice %1523[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1098 = tensor.extract_slice %1523[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %1557 = tensor.empty() : tensor<1x32x80x64xf32>
    %1558 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1098 : tensor<1x32x80x64xf32>) outs(%1557 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %1559 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1099 = tensor.insert_slice %1558 into %1559[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1100 = tensor.insert_slice %extracted_slice_1097 into %inserted_slice_1099[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %1560 = tensor.empty() : tensor<1x32x80x128xf32>
    %1561 = tensor.empty() : tensor<1x32x80x128xf32>
    %1562 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1540 : tensor<1x1x80x128xf32>) outs(%1561 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1563 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1100, %1562 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1560 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %1564 = "tosa.add"(%1556, %1563) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1565 = tensor.empty() : tensor<1x32x128x80xf32>
    %1566 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1564 : tensor<1x32x80x128xf32>) outs(%1565 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %1567 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1101 = tensor.extract_slice %1552[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1102 = tensor.insert_slice %extracted_slice_1101 into %1567[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %1568 = "tosa.reshape"(%inserted_slice_1102) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %1569 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1103 = tensor.extract_slice %1566[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1104 = tensor.insert_slice %extracted_slice_1103 into %1569[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %1570 = "tosa.reshape"(%inserted_slice_1104) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %1571 = tensor.empty() : tensor<32x80x80xf32>
    %1572 = linalg.batch_matmul ins(%1568, %1570 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%1571 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %1573 = "tosa.reshape"(%1572) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1105 = arith.constant 11.3137083 : f32
    %1574 = tensor.empty() : tensor<1x32x80x80xf32>
    %1575 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1573 : tensor<1x32x80x80xf32>) outs(%1574 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.divf %in, %cst_1105 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %1576 = "tosa.add"(%1575, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %1577 = tensor.empty() : tensor<1x32x80x1xf32>
    %1578 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1577 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %1579 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1576 : tensor<1x32x80x80xf32>) outs(%1577 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.maxf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %1580 = tensor.empty() : tensor<1x32x80x80xf32>
    %1581 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1576, %1579 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%1580 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.subf %in, %in_1777 : f32
      %5231 = math.exp %5230 : f32
      linalg.yield %5231 : f32
    } -> tensor<1x32x80x80xf32>
    %1582 = tensor.empty() : tensor<1x32x80x1xf32>
    %1583 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1582 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %1584 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1581 : tensor<1x32x80x80xf32>) outs(%1583 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.addf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %1585 = tensor.empty() : tensor<1x32x80x80xf32>
    %1586 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1581, %1584 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%1585 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.divf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %1587 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1106 = tensor.extract_slice %1586[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1107 = tensor.insert_slice %extracted_slice_1106 into %1587[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %1588 = "tosa.reshape"(%inserted_slice_1107) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %1589 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1108 = tensor.extract_slice %1526[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1109 = tensor.insert_slice %extracted_slice_1108 into %1589[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %1590 = "tosa.reshape"(%inserted_slice_1109) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %1591 = tensor.empty() : tensor<32x80x128xf32>
    %1592 = linalg.batch_matmul ins(%1588, %1590 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%1591 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %1593 = "tosa.reshape"(%1592) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1594 = tensor.empty() : tensor<1x80x32x128xf32>
    %1595 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1593 : tensor<1x32x80x128xf32>) outs(%1594 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1110 = tensor.extract_slice %1595[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %1596 = "tosa.reshape"(%extracted_slice_1110) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %1597 = tensor.empty() : tensor<4096x4096xf32>
    %1598 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_198 : tensor<4096x4096xf32>) outs(%1597 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1599 = "tosa.reshape"(%1596) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1600 = tensor.empty() : tensor<80x4096xf32>
    %1601 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1600 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %1602 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1599, %1598 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1601 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %1603 = "tosa.reshape"(%1602) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1604 = "tosa.add"(%1482, %1603) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %1605 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1111 = arith.constant 2 : i32
    %1606 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1604 : tensor<1x80x4096xf32>) outs(%1605 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1111 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1112 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %1607 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1606 : tensor<1x80x4096xf32>) outs(%cst_1112 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1113 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1608 = "tosa.add"(%1607, %cst_1113) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %1609 = tensor.empty() : tensor<1x80x1xf32>
    %1610 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1608 : tensor<1x80x1xf32>) outs(%1609 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %1611 = tensor.empty() : tensor<1x80x4096xf32>
    %1612 = tensor.empty() : tensor<1x80x4096xf32>
    %1613 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1610 : tensor<1x80x1xf32>) outs(%1612 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1614 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1604, %1613 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1611 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %1615 = tensor.empty() : tensor<1x80x4096xf32>
    %1616 = tensor.empty() : tensor<1x80x4096xf32>
    %1617 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_18 : tensor<4096xf32>) outs(%1616 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1618 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1617, %1614 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1615 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %1619 = tensor.empty() : tensor<4096x11008xf32>
    %1620 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_200 : tensor<11008x4096xf32>) outs(%1619 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1621 = "tosa.reshape"(%1618) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1622 = tensor.empty() : tensor<80x11008xf32>
    %1623 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1622 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %1624 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1621, %1620 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%1623 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %1625 = "tosa.reshape"(%1624) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %1626 = tensor.empty() : tensor<1x80x11008xf32>
    %1627 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1625 : tensor<1x80x11008xf32>) outs(%1626 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      %5231 = math.exp %5230 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5232 = arith.addf %cst_1777, %5231 : f32
      %5233 = arith.divf %in, %5232 : f32
      linalg.yield %5233 : f32
    } -> tensor<1x80x11008xf32>
    %1628 = tensor.empty() : tensor<4096x11008xf32>
    %1629 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_202 : tensor<11008x4096xf32>) outs(%1628 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1630 = "tosa.reshape"(%1618) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1631 = tensor.empty() : tensor<80x11008xf32>
    %1632 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1631 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %1633 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1630, %1629 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%1632 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %1634 = "tosa.reshape"(%1633) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %1635 = tensor.empty() : tensor<1x80x11008xf32>
    %1636 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1627, %1634 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%1635 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x11008xf32>
    %1637 = tensor.empty() : tensor<11008x4096xf32>
    %1638 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_204 : tensor<4096x11008xf32>) outs(%1637 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %1639 = "tosa.reshape"(%1636) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %1640 = tensor.empty() : tensor<80x4096xf32>
    %1641 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1640 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %1642 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1639, %1638 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%1641 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %1643 = "tosa.reshape"(%1642) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1644 = "tosa.add"(%1604, %1643) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %1645 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1114 = arith.constant 2 : i32
    %1646 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1644 : tensor<1x80x4096xf32>) outs(%1645 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1114 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1115 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %1647 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1646 : tensor<1x80x4096xf32>) outs(%cst_1115 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1116 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1648 = "tosa.add"(%1647, %cst_1116) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %1649 = tensor.empty() : tensor<1x80x1xf32>
    %1650 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1648 : tensor<1x80x1xf32>) outs(%1649 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %1651 = tensor.empty() : tensor<1x80x4096xf32>
    %1652 = tensor.empty() : tensor<1x80x4096xf32>
    %1653 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1650 : tensor<1x80x1xf32>) outs(%1652 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1654 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1644, %1653 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1651 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %1655 = tensor.empty() : tensor<1x80x4096xf32>
    %1656 = tensor.empty() : tensor<1x80x4096xf32>
    %1657 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_19 : tensor<4096xf32>) outs(%1656 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1658 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1657, %1654 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1655 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %1659 = tensor.empty() : tensor<4096x4096xf32>
    %1660 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_206 : tensor<4096x4096xf32>) outs(%1659 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1661 = "tosa.reshape"(%1658) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1662 = tensor.empty() : tensor<80x4096xf32>
    %1663 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1662 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %1664 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1661, %1660 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1663 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %1665 = "tosa.reshape"(%1664) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1666 = tensor.empty() : tensor<4096x4096xf32>
    %1667 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_208 : tensor<4096x4096xf32>) outs(%1666 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1668 = "tosa.reshape"(%1658) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1669 = tensor.empty() : tensor<80x4096xf32>
    %1670 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1669 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %1671 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1668, %1667 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1670 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %1672 = "tosa.reshape"(%1671) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1673 = tensor.empty() : tensor<4096x4096xf32>
    %1674 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_210 : tensor<4096x4096xf32>) outs(%1673 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1675 = "tosa.reshape"(%1658) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1676 = tensor.empty() : tensor<80x4096xf32>
    %1677 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1676 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %1678 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1675, %1674 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1677 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %1679 = "tosa.reshape"(%1678) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1680 = "tosa.reshape"(%1665) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1681 = tensor.empty() : tensor<1x32x80x128xf32>
    %1682 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1680 : tensor<1x80x32x128xf32>) outs(%1681 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1683 = "tosa.reshape"(%1672) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1684 = tensor.empty() : tensor<1x32x80x128xf32>
    %1685 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1683 : tensor<1x80x32x128xf32>) outs(%1684 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1686 = "tosa.reshape"(%1679) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1687 = tensor.empty() : tensor<1x32x80x128xf32>
    %1688 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1686 : tensor<1x80x32x128xf32>) outs(%1687 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1117 = tensor.extract_slice %expanded_556[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1118 = tensor.extract_slice %extracted_slice_1117[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1119 = tensor.extract_slice %extracted_slice_1118[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1120 = tensor.extract_slice %expanded_558[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1121 = tensor.extract_slice %extracted_slice_1120[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1122 = tensor.extract_slice %extracted_slice_1121[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %1689 = tensor.empty() : tensor<1x80x128xf32>
    %1690 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1119 : tensor<1x1x80x128xf32>) outs(%1689 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %1691 = tensor.empty() : tensor<80x128xf32>
    %1692 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%1690 : tensor<1x80x128xf32>) outs(%1691 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %1693 = tensor.empty() : tensor<1x80x128xf32>
    %1694 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1122 : tensor<1x1x80x128xf32>) outs(%1693 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %1695 = tensor.empty() : tensor<80x128xf32>
    %1696 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%1694 : tensor<1x80x128xf32>) outs(%1695 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %1697 = tensor.empty() : tensor<1x80x128xf32>
    %1698 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%1697 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %1692[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %1699 = "tosa.reshape"(%1698) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %1700 = tensor.empty() : tensor<1x80x128xf32>
    %1701 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%1700 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %1696[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %1702 = "tosa.reshape"(%1701) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %1703 = tensor.empty() : tensor<1x32x80x128xf32>
    %1704 = tensor.empty() : tensor<1x32x80x128xf32>
    %1705 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1699 : tensor<1x1x80x128xf32>) outs(%1704 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1706 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1682, %1705 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1703 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1123 = tensor.extract_slice %1682[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1124 = tensor.extract_slice %1682[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %1707 = tensor.empty() : tensor<1x32x80x64xf32>
    %1708 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1124 : tensor<1x32x80x64xf32>) outs(%1707 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %1709 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1125 = tensor.insert_slice %1708 into %1709[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1126 = tensor.insert_slice %extracted_slice_1123 into %inserted_slice_1125[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %1710 = tensor.empty() : tensor<1x32x80x128xf32>
    %1711 = tensor.empty() : tensor<1x32x80x128xf32>
    %1712 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1702 : tensor<1x1x80x128xf32>) outs(%1711 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1713 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1126, %1712 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1710 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %1714 = "tosa.add"(%1706, %1713) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1715 = tensor.empty() : tensor<1x32x80x128xf32>
    %1716 = tensor.empty() : tensor<1x32x80x128xf32>
    %1717 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1699 : tensor<1x1x80x128xf32>) outs(%1716 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1718 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1685, %1717 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1715 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1127 = tensor.extract_slice %1685[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1128 = tensor.extract_slice %1685[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %1719 = tensor.empty() : tensor<1x32x80x64xf32>
    %1720 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1128 : tensor<1x32x80x64xf32>) outs(%1719 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %1721 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1129 = tensor.insert_slice %1720 into %1721[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1130 = tensor.insert_slice %extracted_slice_1127 into %inserted_slice_1129[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %1722 = tensor.empty() : tensor<1x32x80x128xf32>
    %1723 = tensor.empty() : tensor<1x32x80x128xf32>
    %1724 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1702 : tensor<1x1x80x128xf32>) outs(%1723 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1725 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1130, %1724 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1722 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %1726 = "tosa.add"(%1718, %1725) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1727 = tensor.empty() : tensor<1x32x128x80xf32>
    %1728 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1726 : tensor<1x32x80x128xf32>) outs(%1727 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %1729 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1131 = tensor.extract_slice %1714[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1132 = tensor.insert_slice %extracted_slice_1131 into %1729[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %1730 = "tosa.reshape"(%inserted_slice_1132) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %1731 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1133 = tensor.extract_slice %1728[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1134 = tensor.insert_slice %extracted_slice_1133 into %1731[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %1732 = "tosa.reshape"(%inserted_slice_1134) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %1733 = tensor.empty() : tensor<32x80x80xf32>
    %1734 = linalg.batch_matmul ins(%1730, %1732 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%1733 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %1735 = "tosa.reshape"(%1734) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1135 = arith.constant 11.3137083 : f32
    %1736 = tensor.empty() : tensor<1x32x80x80xf32>
    %1737 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1735 : tensor<1x32x80x80xf32>) outs(%1736 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.divf %in, %cst_1135 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %1738 = "tosa.add"(%1737, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %1739 = tensor.empty() : tensor<1x32x80x1xf32>
    %1740 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1739 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %1741 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1738 : tensor<1x32x80x80xf32>) outs(%1739 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.maxf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %1742 = tensor.empty() : tensor<1x32x80x80xf32>
    %1743 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1738, %1741 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%1742 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.subf %in, %in_1777 : f32
      %5231 = math.exp %5230 : f32
      linalg.yield %5231 : f32
    } -> tensor<1x32x80x80xf32>
    %1744 = tensor.empty() : tensor<1x32x80x1xf32>
    %1745 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1744 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %1746 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1743 : tensor<1x32x80x80xf32>) outs(%1745 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.addf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %1747 = tensor.empty() : tensor<1x32x80x80xf32>
    %1748 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1743, %1746 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%1747 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.divf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %1749 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1136 = tensor.extract_slice %1748[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1137 = tensor.insert_slice %extracted_slice_1136 into %1749[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %1750 = "tosa.reshape"(%inserted_slice_1137) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %1751 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1138 = tensor.extract_slice %1688[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1139 = tensor.insert_slice %extracted_slice_1138 into %1751[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %1752 = "tosa.reshape"(%inserted_slice_1139) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %1753 = tensor.empty() : tensor<32x80x128xf32>
    %1754 = linalg.batch_matmul ins(%1750, %1752 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%1753 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %1755 = "tosa.reshape"(%1754) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1756 = tensor.empty() : tensor<1x80x32x128xf32>
    %1757 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1755 : tensor<1x32x80x128xf32>) outs(%1756 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1140 = tensor.extract_slice %1757[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %1758 = "tosa.reshape"(%extracted_slice_1140) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %1759 = tensor.empty() : tensor<4096x4096xf32>
    %1760 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_212 : tensor<4096x4096xf32>) outs(%1759 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1761 = "tosa.reshape"(%1758) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1762 = tensor.empty() : tensor<80x4096xf32>
    %1763 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1762 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %1764 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1761, %1760 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1763 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %1765 = "tosa.reshape"(%1764) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1766 = "tosa.add"(%1644, %1765) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %1767 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1141 = arith.constant 2 : i32
    %1768 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1766 : tensor<1x80x4096xf32>) outs(%1767 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1141 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1142 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %1769 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1768 : tensor<1x80x4096xf32>) outs(%cst_1142 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1143 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1770 = "tosa.add"(%1769, %cst_1143) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %1771 = tensor.empty() : tensor<1x80x1xf32>
    %1772 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1770 : tensor<1x80x1xf32>) outs(%1771 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %1773 = tensor.empty() : tensor<1x80x4096xf32>
    %1774 = tensor.empty() : tensor<1x80x4096xf32>
    %1775 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1772 : tensor<1x80x1xf32>) outs(%1774 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1776 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1766, %1775 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1773 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %1777 = tensor.empty() : tensor<1x80x4096xf32>
    %1778 = tensor.empty() : tensor<1x80x4096xf32>
    %1779 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_20 : tensor<4096xf32>) outs(%1778 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1780 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1779, %1776 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1777 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %1781 = tensor.empty() : tensor<4096x11008xf32>
    %1782 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_214 : tensor<11008x4096xf32>) outs(%1781 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1783 = "tosa.reshape"(%1780) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1784 = tensor.empty() : tensor<80x11008xf32>
    %1785 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1784 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %1786 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1783, %1782 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%1785 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %1787 = "tosa.reshape"(%1786) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %1788 = tensor.empty() : tensor<1x80x11008xf32>
    %1789 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1787 : tensor<1x80x11008xf32>) outs(%1788 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      %5231 = math.exp %5230 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5232 = arith.addf %cst_1777, %5231 : f32
      %5233 = arith.divf %in, %5232 : f32
      linalg.yield %5233 : f32
    } -> tensor<1x80x11008xf32>
    %1790 = tensor.empty() : tensor<4096x11008xf32>
    %1791 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_216 : tensor<11008x4096xf32>) outs(%1790 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1792 = "tosa.reshape"(%1780) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1793 = tensor.empty() : tensor<80x11008xf32>
    %1794 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1793 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %1795 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1792, %1791 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%1794 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %1796 = "tosa.reshape"(%1795) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %1797 = tensor.empty() : tensor<1x80x11008xf32>
    %1798 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1789, %1796 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%1797 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x11008xf32>
    %1799 = tensor.empty() : tensor<11008x4096xf32>
    %1800 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_218 : tensor<4096x11008xf32>) outs(%1799 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %1801 = "tosa.reshape"(%1798) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %1802 = tensor.empty() : tensor<80x4096xf32>
    %1803 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1802 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %1804 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1801, %1800 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%1803 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %1805 = "tosa.reshape"(%1804) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1806 = "tosa.add"(%1766, %1805) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %1807 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1144 = arith.constant 2 : i32
    %1808 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1806 : tensor<1x80x4096xf32>) outs(%1807 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1144 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1145 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %1809 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1808 : tensor<1x80x4096xf32>) outs(%cst_1145 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1146 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1810 = "tosa.add"(%1809, %cst_1146) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %1811 = tensor.empty() : tensor<1x80x1xf32>
    %1812 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1810 : tensor<1x80x1xf32>) outs(%1811 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %1813 = tensor.empty() : tensor<1x80x4096xf32>
    %1814 = tensor.empty() : tensor<1x80x4096xf32>
    %1815 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1812 : tensor<1x80x1xf32>) outs(%1814 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1816 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1806, %1815 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1813 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %1817 = tensor.empty() : tensor<1x80x4096xf32>
    %1818 = tensor.empty() : tensor<1x80x4096xf32>
    %1819 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_21 : tensor<4096xf32>) outs(%1818 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1820 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1819, %1816 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1817 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %1821 = tensor.empty() : tensor<4096x4096xf32>
    %1822 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_220 : tensor<4096x4096xf32>) outs(%1821 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1823 = "tosa.reshape"(%1820) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1824 = tensor.empty() : tensor<80x4096xf32>
    %1825 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1824 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %1826 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1823, %1822 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1825 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %1827 = "tosa.reshape"(%1826) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1828 = tensor.empty() : tensor<4096x4096xf32>
    %1829 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_222 : tensor<4096x4096xf32>) outs(%1828 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1830 = "tosa.reshape"(%1820) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1831 = tensor.empty() : tensor<80x4096xf32>
    %1832 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1831 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %1833 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1830, %1829 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1832 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %1834 = "tosa.reshape"(%1833) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1835 = tensor.empty() : tensor<4096x4096xf32>
    %1836 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_224 : tensor<4096x4096xf32>) outs(%1835 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1837 = "tosa.reshape"(%1820) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1838 = tensor.empty() : tensor<80x4096xf32>
    %1839 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1838 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %1840 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1837, %1836 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1839 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %1841 = "tosa.reshape"(%1840) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1842 = "tosa.reshape"(%1827) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1843 = tensor.empty() : tensor<1x32x80x128xf32>
    %1844 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1842 : tensor<1x80x32x128xf32>) outs(%1843 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1845 = "tosa.reshape"(%1834) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1846 = tensor.empty() : tensor<1x32x80x128xf32>
    %1847 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1845 : tensor<1x80x32x128xf32>) outs(%1846 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1848 = "tosa.reshape"(%1841) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1849 = tensor.empty() : tensor<1x32x80x128xf32>
    %1850 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1848 : tensor<1x80x32x128xf32>) outs(%1849 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1147 = tensor.extract_slice %expanded_560[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1148 = tensor.extract_slice %extracted_slice_1147[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1149 = tensor.extract_slice %extracted_slice_1148[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1150 = tensor.extract_slice %expanded_562[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1151 = tensor.extract_slice %extracted_slice_1150[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1152 = tensor.extract_slice %extracted_slice_1151[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %1851 = tensor.empty() : tensor<1x80x128xf32>
    %1852 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1149 : tensor<1x1x80x128xf32>) outs(%1851 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %1853 = tensor.empty() : tensor<80x128xf32>
    %1854 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%1852 : tensor<1x80x128xf32>) outs(%1853 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %1855 = tensor.empty() : tensor<1x80x128xf32>
    %1856 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1152 : tensor<1x1x80x128xf32>) outs(%1855 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %1857 = tensor.empty() : tensor<80x128xf32>
    %1858 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%1856 : tensor<1x80x128xf32>) outs(%1857 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %1859 = tensor.empty() : tensor<1x80x128xf32>
    %1860 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%1859 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %1854[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %1861 = "tosa.reshape"(%1860) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %1862 = tensor.empty() : tensor<1x80x128xf32>
    %1863 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%1862 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %1858[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %1864 = "tosa.reshape"(%1863) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %1865 = tensor.empty() : tensor<1x32x80x128xf32>
    %1866 = tensor.empty() : tensor<1x32x80x128xf32>
    %1867 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1861 : tensor<1x1x80x128xf32>) outs(%1866 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1868 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1844, %1867 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1865 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1153 = tensor.extract_slice %1844[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1154 = tensor.extract_slice %1844[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %1869 = tensor.empty() : tensor<1x32x80x64xf32>
    %1870 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1154 : tensor<1x32x80x64xf32>) outs(%1869 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %1871 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1155 = tensor.insert_slice %1870 into %1871[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1156 = tensor.insert_slice %extracted_slice_1153 into %inserted_slice_1155[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %1872 = tensor.empty() : tensor<1x32x80x128xf32>
    %1873 = tensor.empty() : tensor<1x32x80x128xf32>
    %1874 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1864 : tensor<1x1x80x128xf32>) outs(%1873 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1875 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1156, %1874 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1872 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %1876 = "tosa.add"(%1868, %1875) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1877 = tensor.empty() : tensor<1x32x80x128xf32>
    %1878 = tensor.empty() : tensor<1x32x80x128xf32>
    %1879 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1861 : tensor<1x1x80x128xf32>) outs(%1878 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1880 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1847, %1879 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1877 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1157 = tensor.extract_slice %1847[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1158 = tensor.extract_slice %1847[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %1881 = tensor.empty() : tensor<1x32x80x64xf32>
    %1882 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1158 : tensor<1x32x80x64xf32>) outs(%1881 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %1883 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1159 = tensor.insert_slice %1882 into %1883[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1160 = tensor.insert_slice %extracted_slice_1157 into %inserted_slice_1159[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %1884 = tensor.empty() : tensor<1x32x80x128xf32>
    %1885 = tensor.empty() : tensor<1x32x80x128xf32>
    %1886 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1864 : tensor<1x1x80x128xf32>) outs(%1885 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1887 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1160, %1886 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1884 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %1888 = "tosa.add"(%1880, %1887) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1889 = tensor.empty() : tensor<1x32x128x80xf32>
    %1890 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1888 : tensor<1x32x80x128xf32>) outs(%1889 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %1891 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1161 = tensor.extract_slice %1876[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1162 = tensor.insert_slice %extracted_slice_1161 into %1891[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %1892 = "tosa.reshape"(%inserted_slice_1162) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %1893 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1163 = tensor.extract_slice %1890[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1164 = tensor.insert_slice %extracted_slice_1163 into %1893[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %1894 = "tosa.reshape"(%inserted_slice_1164) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %1895 = tensor.empty() : tensor<32x80x80xf32>
    %1896 = linalg.batch_matmul ins(%1892, %1894 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%1895 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %1897 = "tosa.reshape"(%1896) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1165 = arith.constant 11.3137083 : f32
    %1898 = tensor.empty() : tensor<1x32x80x80xf32>
    %1899 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1897 : tensor<1x32x80x80xf32>) outs(%1898 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.divf %in, %cst_1165 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %1900 = "tosa.add"(%1899, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %1901 = tensor.empty() : tensor<1x32x80x1xf32>
    %1902 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1901 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %1903 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1900 : tensor<1x32x80x80xf32>) outs(%1901 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.maxf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %1904 = tensor.empty() : tensor<1x32x80x80xf32>
    %1905 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1900, %1903 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%1904 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.subf %in, %in_1777 : f32
      %5231 = math.exp %5230 : f32
      linalg.yield %5231 : f32
    } -> tensor<1x32x80x80xf32>
    %1906 = tensor.empty() : tensor<1x32x80x1xf32>
    %1907 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1906 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %1908 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1905 : tensor<1x32x80x80xf32>) outs(%1907 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.addf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %1909 = tensor.empty() : tensor<1x32x80x80xf32>
    %1910 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1905, %1908 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%1909 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.divf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %1911 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1166 = tensor.extract_slice %1910[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1167 = tensor.insert_slice %extracted_slice_1166 into %1911[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %1912 = "tosa.reshape"(%inserted_slice_1167) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %1913 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1168 = tensor.extract_slice %1850[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1169 = tensor.insert_slice %extracted_slice_1168 into %1913[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %1914 = "tosa.reshape"(%inserted_slice_1169) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %1915 = tensor.empty() : tensor<32x80x128xf32>
    %1916 = linalg.batch_matmul ins(%1912, %1914 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%1915 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %1917 = "tosa.reshape"(%1916) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1918 = tensor.empty() : tensor<1x80x32x128xf32>
    %1919 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1917 : tensor<1x32x80x128xf32>) outs(%1918 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1170 = tensor.extract_slice %1919[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %1920 = "tosa.reshape"(%extracted_slice_1170) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %1921 = tensor.empty() : tensor<4096x4096xf32>
    %1922 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_226 : tensor<4096x4096xf32>) outs(%1921 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1923 = "tosa.reshape"(%1920) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1924 = tensor.empty() : tensor<80x4096xf32>
    %1925 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1924 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %1926 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1923, %1922 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1925 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %1927 = "tosa.reshape"(%1926) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1928 = "tosa.add"(%1806, %1927) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %1929 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1171 = arith.constant 2 : i32
    %1930 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1928 : tensor<1x80x4096xf32>) outs(%1929 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1171 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1172 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %1931 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1930 : tensor<1x80x4096xf32>) outs(%cst_1172 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1173 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1932 = "tosa.add"(%1931, %cst_1173) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %1933 = tensor.empty() : tensor<1x80x1xf32>
    %1934 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1932 : tensor<1x80x1xf32>) outs(%1933 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %1935 = tensor.empty() : tensor<1x80x4096xf32>
    %1936 = tensor.empty() : tensor<1x80x4096xf32>
    %1937 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1934 : tensor<1x80x1xf32>) outs(%1936 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1938 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1928, %1937 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1935 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %1939 = tensor.empty() : tensor<1x80x4096xf32>
    %1940 = tensor.empty() : tensor<1x80x4096xf32>
    %1941 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_22 : tensor<4096xf32>) outs(%1940 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1942 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1941, %1938 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1939 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %1943 = tensor.empty() : tensor<4096x11008xf32>
    %1944 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_228 : tensor<11008x4096xf32>) outs(%1943 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1945 = "tosa.reshape"(%1942) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1946 = tensor.empty() : tensor<80x11008xf32>
    %1947 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1946 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %1948 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1945, %1944 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%1947 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %1949 = "tosa.reshape"(%1948) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %1950 = tensor.empty() : tensor<1x80x11008xf32>
    %1951 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1949 : tensor<1x80x11008xf32>) outs(%1950 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      %5231 = math.exp %5230 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5232 = arith.addf %cst_1777, %5231 : f32
      %5233 = arith.divf %in, %5232 : f32
      linalg.yield %5233 : f32
    } -> tensor<1x80x11008xf32>
    %1952 = tensor.empty() : tensor<4096x11008xf32>
    %1953 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_230 : tensor<11008x4096xf32>) outs(%1952 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1954 = "tosa.reshape"(%1942) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1955 = tensor.empty() : tensor<80x11008xf32>
    %1956 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1955 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %1957 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1954, %1953 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%1956 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %1958 = "tosa.reshape"(%1957) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %1959 = tensor.empty() : tensor<1x80x11008xf32>
    %1960 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1951, %1958 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%1959 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x11008xf32>
    %1961 = tensor.empty() : tensor<11008x4096xf32>
    %1962 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_232 : tensor<4096x11008xf32>) outs(%1961 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %1963 = "tosa.reshape"(%1960) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %1964 = tensor.empty() : tensor<80x4096xf32>
    %1965 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1964 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %1966 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1963, %1962 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%1965 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %1967 = "tosa.reshape"(%1966) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1968 = "tosa.add"(%1928, %1967) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %1969 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1174 = arith.constant 2 : i32
    %1970 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1968 : tensor<1x80x4096xf32>) outs(%1969 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1174 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1175 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %1971 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1970 : tensor<1x80x4096xf32>) outs(%cst_1175 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1176 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1972 = "tosa.add"(%1971, %cst_1176) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %1973 = tensor.empty() : tensor<1x80x1xf32>
    %1974 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1972 : tensor<1x80x1xf32>) outs(%1973 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %1975 = tensor.empty() : tensor<1x80x4096xf32>
    %1976 = tensor.empty() : tensor<1x80x4096xf32>
    %1977 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1974 : tensor<1x80x1xf32>) outs(%1976 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1978 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1968, %1977 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1975 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %1979 = tensor.empty() : tensor<1x80x4096xf32>
    %1980 = tensor.empty() : tensor<1x80x4096xf32>
    %1981 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_23 : tensor<4096xf32>) outs(%1980 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1982 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1981, %1978 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1979 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %1983 = tensor.empty() : tensor<4096x4096xf32>
    %1984 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_234 : tensor<4096x4096xf32>) outs(%1983 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1985 = "tosa.reshape"(%1982) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1986 = tensor.empty() : tensor<80x4096xf32>
    %1987 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1986 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %1988 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1985, %1984 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1987 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %1989 = "tosa.reshape"(%1988) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1990 = tensor.empty() : tensor<4096x4096xf32>
    %1991 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_236 : tensor<4096x4096xf32>) outs(%1990 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1992 = "tosa.reshape"(%1982) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1993 = tensor.empty() : tensor<80x4096xf32>
    %1994 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1993 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %1995 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1992, %1991 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1994 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %1996 = "tosa.reshape"(%1995) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1997 = tensor.empty() : tensor<4096x4096xf32>
    %1998 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_238 : tensor<4096x4096xf32>) outs(%1997 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1999 = "tosa.reshape"(%1982) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2000 = tensor.empty() : tensor<80x4096xf32>
    %2001 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2000 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %2002 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1999, %1998 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2001 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %2003 = "tosa.reshape"(%2002) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2004 = "tosa.reshape"(%1989) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2005 = tensor.empty() : tensor<1x32x80x128xf32>
    %2006 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2004 : tensor<1x80x32x128xf32>) outs(%2005 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2007 = "tosa.reshape"(%1996) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2008 = tensor.empty() : tensor<1x32x80x128xf32>
    %2009 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2007 : tensor<1x80x32x128xf32>) outs(%2008 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2010 = "tosa.reshape"(%2003) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2011 = tensor.empty() : tensor<1x32x80x128xf32>
    %2012 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2010 : tensor<1x80x32x128xf32>) outs(%2011 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1177 = tensor.extract_slice %expanded_564[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1178 = tensor.extract_slice %extracted_slice_1177[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1179 = tensor.extract_slice %extracted_slice_1178[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1180 = tensor.extract_slice %expanded_566[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1181 = tensor.extract_slice %extracted_slice_1180[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1182 = tensor.extract_slice %extracted_slice_1181[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %2013 = tensor.empty() : tensor<1x80x128xf32>
    %2014 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1179 : tensor<1x1x80x128xf32>) outs(%2013 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %2015 = tensor.empty() : tensor<80x128xf32>
    %2016 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%2014 : tensor<1x80x128xf32>) outs(%2015 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %2017 = tensor.empty() : tensor<1x80x128xf32>
    %2018 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1182 : tensor<1x1x80x128xf32>) outs(%2017 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %2019 = tensor.empty() : tensor<80x128xf32>
    %2020 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%2018 : tensor<1x80x128xf32>) outs(%2019 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %2021 = tensor.empty() : tensor<1x80x128xf32>
    %2022 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%2021 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %2016[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %2023 = "tosa.reshape"(%2022) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %2024 = tensor.empty() : tensor<1x80x128xf32>
    %2025 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%2024 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %2020[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %2026 = "tosa.reshape"(%2025) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %2027 = tensor.empty() : tensor<1x32x80x128xf32>
    %2028 = tensor.empty() : tensor<1x32x80x128xf32>
    %2029 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2023 : tensor<1x1x80x128xf32>) outs(%2028 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2030 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2006, %2029 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2027 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1183 = tensor.extract_slice %2006[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1184 = tensor.extract_slice %2006[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %2031 = tensor.empty() : tensor<1x32x80x64xf32>
    %2032 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1184 : tensor<1x32x80x64xf32>) outs(%2031 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %2033 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1185 = tensor.insert_slice %2032 into %2033[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1186 = tensor.insert_slice %extracted_slice_1183 into %inserted_slice_1185[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %2034 = tensor.empty() : tensor<1x32x80x128xf32>
    %2035 = tensor.empty() : tensor<1x32x80x128xf32>
    %2036 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2026 : tensor<1x1x80x128xf32>) outs(%2035 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2037 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1186, %2036 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2034 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %2038 = "tosa.add"(%2030, %2037) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2039 = tensor.empty() : tensor<1x32x80x128xf32>
    %2040 = tensor.empty() : tensor<1x32x80x128xf32>
    %2041 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2023 : tensor<1x1x80x128xf32>) outs(%2040 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2042 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2009, %2041 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2039 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1187 = tensor.extract_slice %2009[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1188 = tensor.extract_slice %2009[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %2043 = tensor.empty() : tensor<1x32x80x64xf32>
    %2044 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1188 : tensor<1x32x80x64xf32>) outs(%2043 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %2045 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1189 = tensor.insert_slice %2044 into %2045[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1190 = tensor.insert_slice %extracted_slice_1187 into %inserted_slice_1189[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %2046 = tensor.empty() : tensor<1x32x80x128xf32>
    %2047 = tensor.empty() : tensor<1x32x80x128xf32>
    %2048 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2026 : tensor<1x1x80x128xf32>) outs(%2047 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2049 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1190, %2048 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2046 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %2050 = "tosa.add"(%2042, %2049) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2051 = tensor.empty() : tensor<1x32x128x80xf32>
    %2052 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2050 : tensor<1x32x80x128xf32>) outs(%2051 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %2053 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1191 = tensor.extract_slice %2038[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1192 = tensor.insert_slice %extracted_slice_1191 into %2053[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %2054 = "tosa.reshape"(%inserted_slice_1192) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %2055 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1193 = tensor.extract_slice %2052[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1194 = tensor.insert_slice %extracted_slice_1193 into %2055[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %2056 = "tosa.reshape"(%inserted_slice_1194) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %2057 = tensor.empty() : tensor<32x80x80xf32>
    %2058 = linalg.batch_matmul ins(%2054, %2056 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%2057 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %2059 = "tosa.reshape"(%2058) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1195 = arith.constant 11.3137083 : f32
    %2060 = tensor.empty() : tensor<1x32x80x80xf32>
    %2061 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2059 : tensor<1x32x80x80xf32>) outs(%2060 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.divf %in, %cst_1195 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %2062 = "tosa.add"(%2061, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %2063 = tensor.empty() : tensor<1x32x80x1xf32>
    %2064 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2063 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %2065 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2062 : tensor<1x32x80x80xf32>) outs(%2063 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.maxf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %2066 = tensor.empty() : tensor<1x32x80x80xf32>
    %2067 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2062, %2065 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%2066 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.subf %in, %in_1777 : f32
      %5231 = math.exp %5230 : f32
      linalg.yield %5231 : f32
    } -> tensor<1x32x80x80xf32>
    %2068 = tensor.empty() : tensor<1x32x80x1xf32>
    %2069 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2068 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %2070 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2067 : tensor<1x32x80x80xf32>) outs(%2069 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.addf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %2071 = tensor.empty() : tensor<1x32x80x80xf32>
    %2072 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2067, %2070 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%2071 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.divf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %2073 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1196 = tensor.extract_slice %2072[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1197 = tensor.insert_slice %extracted_slice_1196 into %2073[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %2074 = "tosa.reshape"(%inserted_slice_1197) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %2075 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1198 = tensor.extract_slice %2012[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1199 = tensor.insert_slice %extracted_slice_1198 into %2075[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %2076 = "tosa.reshape"(%inserted_slice_1199) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %2077 = tensor.empty() : tensor<32x80x128xf32>
    %2078 = linalg.batch_matmul ins(%2074, %2076 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%2077 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %2079 = "tosa.reshape"(%2078) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2080 = tensor.empty() : tensor<1x80x32x128xf32>
    %2081 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2079 : tensor<1x32x80x128xf32>) outs(%2080 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1200 = tensor.extract_slice %2081[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %2082 = "tosa.reshape"(%extracted_slice_1200) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %2083 = tensor.empty() : tensor<4096x4096xf32>
    %2084 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_240 : tensor<4096x4096xf32>) outs(%2083 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2085 = "tosa.reshape"(%2082) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2086 = tensor.empty() : tensor<80x4096xf32>
    %2087 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2086 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %2088 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2085, %2084 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2087 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %2089 = "tosa.reshape"(%2088) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2090 = "tosa.add"(%1968, %2089) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %2091 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1201 = arith.constant 2 : i32
    %2092 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2090 : tensor<1x80x4096xf32>) outs(%2091 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1201 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1202 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %2093 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2092 : tensor<1x80x4096xf32>) outs(%cst_1202 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1203 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2094 = "tosa.add"(%2093, %cst_1203) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %2095 = tensor.empty() : tensor<1x80x1xf32>
    %2096 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2094 : tensor<1x80x1xf32>) outs(%2095 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %2097 = tensor.empty() : tensor<1x80x4096xf32>
    %2098 = tensor.empty() : tensor<1x80x4096xf32>
    %2099 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2096 : tensor<1x80x1xf32>) outs(%2098 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2100 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2090, %2099 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2097 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %2101 = tensor.empty() : tensor<1x80x4096xf32>
    %2102 = tensor.empty() : tensor<1x80x4096xf32>
    %2103 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_24 : tensor<4096xf32>) outs(%2102 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2104 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2103, %2100 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2101 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %2105 = tensor.empty() : tensor<4096x11008xf32>
    %2106 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_242 : tensor<11008x4096xf32>) outs(%2105 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2107 = "tosa.reshape"(%2104) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2108 = tensor.empty() : tensor<80x11008xf32>
    %2109 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2108 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %2110 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2107, %2106 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%2109 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %2111 = "tosa.reshape"(%2110) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %2112 = tensor.empty() : tensor<1x80x11008xf32>
    %2113 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2111 : tensor<1x80x11008xf32>) outs(%2112 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      %5231 = math.exp %5230 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5232 = arith.addf %cst_1777, %5231 : f32
      %5233 = arith.divf %in, %5232 : f32
      linalg.yield %5233 : f32
    } -> tensor<1x80x11008xf32>
    %2114 = tensor.empty() : tensor<4096x11008xf32>
    %2115 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_244 : tensor<11008x4096xf32>) outs(%2114 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2116 = "tosa.reshape"(%2104) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2117 = tensor.empty() : tensor<80x11008xf32>
    %2118 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2117 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %2119 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2116, %2115 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%2118 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %2120 = "tosa.reshape"(%2119) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %2121 = tensor.empty() : tensor<1x80x11008xf32>
    %2122 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2113, %2120 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%2121 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x11008xf32>
    %2123 = tensor.empty() : tensor<11008x4096xf32>
    %2124 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_246 : tensor<4096x11008xf32>) outs(%2123 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %2125 = "tosa.reshape"(%2122) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %2126 = tensor.empty() : tensor<80x4096xf32>
    %2127 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2126 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %2128 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2125, %2124 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%2127 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %2129 = "tosa.reshape"(%2128) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2130 = "tosa.add"(%2090, %2129) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %2131 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1204 = arith.constant 2 : i32
    %2132 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2130 : tensor<1x80x4096xf32>) outs(%2131 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1204 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1205 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %2133 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2132 : tensor<1x80x4096xf32>) outs(%cst_1205 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1206 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2134 = "tosa.add"(%2133, %cst_1206) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %2135 = tensor.empty() : tensor<1x80x1xf32>
    %2136 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2134 : tensor<1x80x1xf32>) outs(%2135 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %2137 = tensor.empty() : tensor<1x80x4096xf32>
    %2138 = tensor.empty() : tensor<1x80x4096xf32>
    %2139 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2136 : tensor<1x80x1xf32>) outs(%2138 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2140 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2130, %2139 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2137 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %2141 = tensor.empty() : tensor<1x80x4096xf32>
    %2142 = tensor.empty() : tensor<1x80x4096xf32>
    %2143 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_25 : tensor<4096xf32>) outs(%2142 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2144 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2143, %2140 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2141 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %2145 = tensor.empty() : tensor<4096x4096xf32>
    %2146 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_248 : tensor<4096x4096xf32>) outs(%2145 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2147 = "tosa.reshape"(%2144) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2148 = tensor.empty() : tensor<80x4096xf32>
    %2149 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2148 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %2150 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2147, %2146 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2149 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %2151 = "tosa.reshape"(%2150) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2152 = tensor.empty() : tensor<4096x4096xf32>
    %2153 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_250 : tensor<4096x4096xf32>) outs(%2152 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2154 = "tosa.reshape"(%2144) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2155 = tensor.empty() : tensor<80x4096xf32>
    %2156 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2155 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %2157 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2154, %2153 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2156 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %2158 = "tosa.reshape"(%2157) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2159 = tensor.empty() : tensor<4096x4096xf32>
    %2160 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_252 : tensor<4096x4096xf32>) outs(%2159 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2161 = "tosa.reshape"(%2144) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2162 = tensor.empty() : tensor<80x4096xf32>
    %2163 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2162 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %2164 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2161, %2160 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2163 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %2165 = "tosa.reshape"(%2164) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2166 = "tosa.reshape"(%2151) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2167 = tensor.empty() : tensor<1x32x80x128xf32>
    %2168 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2166 : tensor<1x80x32x128xf32>) outs(%2167 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2169 = "tosa.reshape"(%2158) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2170 = tensor.empty() : tensor<1x32x80x128xf32>
    %2171 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2169 : tensor<1x80x32x128xf32>) outs(%2170 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2172 = "tosa.reshape"(%2165) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2173 = tensor.empty() : tensor<1x32x80x128xf32>
    %2174 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2172 : tensor<1x80x32x128xf32>) outs(%2173 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1207 = tensor.extract_slice %expanded_568[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1208 = tensor.extract_slice %extracted_slice_1207[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1209 = tensor.extract_slice %extracted_slice_1208[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1210 = tensor.extract_slice %expanded_570[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1211 = tensor.extract_slice %extracted_slice_1210[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1212 = tensor.extract_slice %extracted_slice_1211[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %2175 = tensor.empty() : tensor<1x80x128xf32>
    %2176 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1209 : tensor<1x1x80x128xf32>) outs(%2175 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %2177 = tensor.empty() : tensor<80x128xf32>
    %2178 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%2176 : tensor<1x80x128xf32>) outs(%2177 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %2179 = tensor.empty() : tensor<1x80x128xf32>
    %2180 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1212 : tensor<1x1x80x128xf32>) outs(%2179 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %2181 = tensor.empty() : tensor<80x128xf32>
    %2182 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%2180 : tensor<1x80x128xf32>) outs(%2181 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %2183 = tensor.empty() : tensor<1x80x128xf32>
    %2184 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%2183 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %2178[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %2185 = "tosa.reshape"(%2184) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %2186 = tensor.empty() : tensor<1x80x128xf32>
    %2187 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%2186 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %2182[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %2188 = "tosa.reshape"(%2187) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %2189 = tensor.empty() : tensor<1x32x80x128xf32>
    %2190 = tensor.empty() : tensor<1x32x80x128xf32>
    %2191 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2185 : tensor<1x1x80x128xf32>) outs(%2190 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2192 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2168, %2191 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2189 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1213 = tensor.extract_slice %2168[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1214 = tensor.extract_slice %2168[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %2193 = tensor.empty() : tensor<1x32x80x64xf32>
    %2194 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1214 : tensor<1x32x80x64xf32>) outs(%2193 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %2195 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1215 = tensor.insert_slice %2194 into %2195[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1216 = tensor.insert_slice %extracted_slice_1213 into %inserted_slice_1215[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %2196 = tensor.empty() : tensor<1x32x80x128xf32>
    %2197 = tensor.empty() : tensor<1x32x80x128xf32>
    %2198 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2188 : tensor<1x1x80x128xf32>) outs(%2197 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2199 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1216, %2198 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2196 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %2200 = "tosa.add"(%2192, %2199) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2201 = tensor.empty() : tensor<1x32x80x128xf32>
    %2202 = tensor.empty() : tensor<1x32x80x128xf32>
    %2203 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2185 : tensor<1x1x80x128xf32>) outs(%2202 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2204 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2171, %2203 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2201 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1217 = tensor.extract_slice %2171[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1218 = tensor.extract_slice %2171[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %2205 = tensor.empty() : tensor<1x32x80x64xf32>
    %2206 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1218 : tensor<1x32x80x64xf32>) outs(%2205 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %2207 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1219 = tensor.insert_slice %2206 into %2207[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1220 = tensor.insert_slice %extracted_slice_1217 into %inserted_slice_1219[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %2208 = tensor.empty() : tensor<1x32x80x128xf32>
    %2209 = tensor.empty() : tensor<1x32x80x128xf32>
    %2210 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2188 : tensor<1x1x80x128xf32>) outs(%2209 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2211 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1220, %2210 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2208 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %2212 = "tosa.add"(%2204, %2211) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2213 = tensor.empty() : tensor<1x32x128x80xf32>
    %2214 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2212 : tensor<1x32x80x128xf32>) outs(%2213 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %2215 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1221 = tensor.extract_slice %2200[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1222 = tensor.insert_slice %extracted_slice_1221 into %2215[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %2216 = "tosa.reshape"(%inserted_slice_1222) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %2217 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1223 = tensor.extract_slice %2214[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1224 = tensor.insert_slice %extracted_slice_1223 into %2217[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %2218 = "tosa.reshape"(%inserted_slice_1224) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %2219 = tensor.empty() : tensor<32x80x80xf32>
    %2220 = linalg.batch_matmul ins(%2216, %2218 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%2219 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %2221 = "tosa.reshape"(%2220) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1225 = arith.constant 11.3137083 : f32
    %2222 = tensor.empty() : tensor<1x32x80x80xf32>
    %2223 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2221 : tensor<1x32x80x80xf32>) outs(%2222 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.divf %in, %cst_1225 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %2224 = "tosa.add"(%2223, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %2225 = tensor.empty() : tensor<1x32x80x1xf32>
    %2226 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2225 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %2227 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2224 : tensor<1x32x80x80xf32>) outs(%2225 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.maxf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %2228 = tensor.empty() : tensor<1x32x80x80xf32>
    %2229 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2224, %2227 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%2228 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.subf %in, %in_1777 : f32
      %5231 = math.exp %5230 : f32
      linalg.yield %5231 : f32
    } -> tensor<1x32x80x80xf32>
    %2230 = tensor.empty() : tensor<1x32x80x1xf32>
    %2231 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2230 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %2232 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2229 : tensor<1x32x80x80xf32>) outs(%2231 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.addf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %2233 = tensor.empty() : tensor<1x32x80x80xf32>
    %2234 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2229, %2232 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%2233 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.divf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %2235 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1226 = tensor.extract_slice %2234[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1227 = tensor.insert_slice %extracted_slice_1226 into %2235[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %2236 = "tosa.reshape"(%inserted_slice_1227) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %2237 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1228 = tensor.extract_slice %2174[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1229 = tensor.insert_slice %extracted_slice_1228 into %2237[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %2238 = "tosa.reshape"(%inserted_slice_1229) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %2239 = tensor.empty() : tensor<32x80x128xf32>
    %2240 = linalg.batch_matmul ins(%2236, %2238 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%2239 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %2241 = "tosa.reshape"(%2240) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2242 = tensor.empty() : tensor<1x80x32x128xf32>
    %2243 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2241 : tensor<1x32x80x128xf32>) outs(%2242 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1230 = tensor.extract_slice %2243[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %2244 = "tosa.reshape"(%extracted_slice_1230) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %2245 = tensor.empty() : tensor<4096x4096xf32>
    %2246 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_254 : tensor<4096x4096xf32>) outs(%2245 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2247 = "tosa.reshape"(%2244) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2248 = tensor.empty() : tensor<80x4096xf32>
    %2249 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2248 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %2250 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2247, %2246 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2249 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %2251 = "tosa.reshape"(%2250) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2252 = "tosa.add"(%2130, %2251) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %2253 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1231 = arith.constant 2 : i32
    %2254 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2252 : tensor<1x80x4096xf32>) outs(%2253 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1231 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1232 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %2255 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2254 : tensor<1x80x4096xf32>) outs(%cst_1232 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1233 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2256 = "tosa.add"(%2255, %cst_1233) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %2257 = tensor.empty() : tensor<1x80x1xf32>
    %2258 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2256 : tensor<1x80x1xf32>) outs(%2257 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %2259 = tensor.empty() : tensor<1x80x4096xf32>
    %2260 = tensor.empty() : tensor<1x80x4096xf32>
    %2261 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2258 : tensor<1x80x1xf32>) outs(%2260 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2262 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2252, %2261 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2259 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %2263 = tensor.empty() : tensor<1x80x4096xf32>
    %2264 = tensor.empty() : tensor<1x80x4096xf32>
    %2265 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_26 : tensor<4096xf32>) outs(%2264 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2266 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2265, %2262 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2263 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %2267 = tensor.empty() : tensor<4096x11008xf32>
    %2268 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_256 : tensor<11008x4096xf32>) outs(%2267 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2269 = "tosa.reshape"(%2266) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2270 = tensor.empty() : tensor<80x11008xf32>
    %2271 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2270 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %2272 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2269, %2268 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%2271 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %2273 = "tosa.reshape"(%2272) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %2274 = tensor.empty() : tensor<1x80x11008xf32>
    %2275 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2273 : tensor<1x80x11008xf32>) outs(%2274 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      %5231 = math.exp %5230 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5232 = arith.addf %cst_1777, %5231 : f32
      %5233 = arith.divf %in, %5232 : f32
      linalg.yield %5233 : f32
    } -> tensor<1x80x11008xf32>
    %2276 = tensor.empty() : tensor<4096x11008xf32>
    %2277 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_258 : tensor<11008x4096xf32>) outs(%2276 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2278 = "tosa.reshape"(%2266) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2279 = tensor.empty() : tensor<80x11008xf32>
    %2280 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2279 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %2281 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2278, %2277 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%2280 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %2282 = "tosa.reshape"(%2281) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %2283 = tensor.empty() : tensor<1x80x11008xf32>
    %2284 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2275, %2282 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%2283 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x11008xf32>
    %2285 = tensor.empty() : tensor<11008x4096xf32>
    %2286 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_260 : tensor<4096x11008xf32>) outs(%2285 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %2287 = "tosa.reshape"(%2284) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %2288 = tensor.empty() : tensor<80x4096xf32>
    %2289 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2288 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %2290 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2287, %2286 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%2289 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %2291 = "tosa.reshape"(%2290) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2292 = "tosa.add"(%2252, %2291) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %2293 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1234 = arith.constant 2 : i32
    %2294 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2292 : tensor<1x80x4096xf32>) outs(%2293 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1234 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1235 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %2295 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2294 : tensor<1x80x4096xf32>) outs(%cst_1235 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1236 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2296 = "tosa.add"(%2295, %cst_1236) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %2297 = tensor.empty() : tensor<1x80x1xf32>
    %2298 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2296 : tensor<1x80x1xf32>) outs(%2297 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %2299 = tensor.empty() : tensor<1x80x4096xf32>
    %2300 = tensor.empty() : tensor<1x80x4096xf32>
    %2301 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2298 : tensor<1x80x1xf32>) outs(%2300 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2302 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2292, %2301 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2299 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %2303 = tensor.empty() : tensor<1x80x4096xf32>
    %2304 = tensor.empty() : tensor<1x80x4096xf32>
    %2305 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_27 : tensor<4096xf32>) outs(%2304 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2306 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2305, %2302 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2303 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %2307 = tensor.empty() : tensor<4096x4096xf32>
    %2308 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_262 : tensor<4096x4096xf32>) outs(%2307 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2309 = "tosa.reshape"(%2306) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2310 = tensor.empty() : tensor<80x4096xf32>
    %2311 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2310 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %2312 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2309, %2308 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2311 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %2313 = "tosa.reshape"(%2312) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2314 = tensor.empty() : tensor<4096x4096xf32>
    %2315 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_264 : tensor<4096x4096xf32>) outs(%2314 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2316 = "tosa.reshape"(%2306) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2317 = tensor.empty() : tensor<80x4096xf32>
    %2318 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2317 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %2319 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2316, %2315 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2318 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %2320 = "tosa.reshape"(%2319) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2321 = tensor.empty() : tensor<4096x4096xf32>
    %2322 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_266 : tensor<4096x4096xf32>) outs(%2321 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2323 = "tosa.reshape"(%2306) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2324 = tensor.empty() : tensor<80x4096xf32>
    %2325 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2324 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %2326 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2323, %2322 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2325 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %2327 = "tosa.reshape"(%2326) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2328 = "tosa.reshape"(%2313) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2329 = tensor.empty() : tensor<1x32x80x128xf32>
    %2330 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2328 : tensor<1x80x32x128xf32>) outs(%2329 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2331 = "tosa.reshape"(%2320) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2332 = tensor.empty() : tensor<1x32x80x128xf32>
    %2333 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2331 : tensor<1x80x32x128xf32>) outs(%2332 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2334 = "tosa.reshape"(%2327) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2335 = tensor.empty() : tensor<1x32x80x128xf32>
    %2336 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2334 : tensor<1x80x32x128xf32>) outs(%2335 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1237 = tensor.extract_slice %expanded_572[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1238 = tensor.extract_slice %extracted_slice_1237[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1239 = tensor.extract_slice %extracted_slice_1238[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1240 = tensor.extract_slice %expanded_574[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1241 = tensor.extract_slice %extracted_slice_1240[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1242 = tensor.extract_slice %extracted_slice_1241[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %2337 = tensor.empty() : tensor<1x80x128xf32>
    %2338 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1239 : tensor<1x1x80x128xf32>) outs(%2337 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %2339 = tensor.empty() : tensor<80x128xf32>
    %2340 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%2338 : tensor<1x80x128xf32>) outs(%2339 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %2341 = tensor.empty() : tensor<1x80x128xf32>
    %2342 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1242 : tensor<1x1x80x128xf32>) outs(%2341 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %2343 = tensor.empty() : tensor<80x128xf32>
    %2344 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%2342 : tensor<1x80x128xf32>) outs(%2343 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %2345 = tensor.empty() : tensor<1x80x128xf32>
    %2346 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%2345 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %2340[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %2347 = "tosa.reshape"(%2346) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %2348 = tensor.empty() : tensor<1x80x128xf32>
    %2349 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%2348 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %2344[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %2350 = "tosa.reshape"(%2349) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %2351 = tensor.empty() : tensor<1x32x80x128xf32>
    %2352 = tensor.empty() : tensor<1x32x80x128xf32>
    %2353 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2347 : tensor<1x1x80x128xf32>) outs(%2352 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2354 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2330, %2353 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2351 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1243 = tensor.extract_slice %2330[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1244 = tensor.extract_slice %2330[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %2355 = tensor.empty() : tensor<1x32x80x64xf32>
    %2356 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1244 : tensor<1x32x80x64xf32>) outs(%2355 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %2357 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1245 = tensor.insert_slice %2356 into %2357[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1246 = tensor.insert_slice %extracted_slice_1243 into %inserted_slice_1245[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %2358 = tensor.empty() : tensor<1x32x80x128xf32>
    %2359 = tensor.empty() : tensor<1x32x80x128xf32>
    %2360 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2350 : tensor<1x1x80x128xf32>) outs(%2359 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2361 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1246, %2360 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2358 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %2362 = "tosa.add"(%2354, %2361) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2363 = tensor.empty() : tensor<1x32x80x128xf32>
    %2364 = tensor.empty() : tensor<1x32x80x128xf32>
    %2365 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2347 : tensor<1x1x80x128xf32>) outs(%2364 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2366 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2333, %2365 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2363 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1247 = tensor.extract_slice %2333[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1248 = tensor.extract_slice %2333[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %2367 = tensor.empty() : tensor<1x32x80x64xf32>
    %2368 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1248 : tensor<1x32x80x64xf32>) outs(%2367 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %2369 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1249 = tensor.insert_slice %2368 into %2369[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1250 = tensor.insert_slice %extracted_slice_1247 into %inserted_slice_1249[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %2370 = tensor.empty() : tensor<1x32x80x128xf32>
    %2371 = tensor.empty() : tensor<1x32x80x128xf32>
    %2372 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2350 : tensor<1x1x80x128xf32>) outs(%2371 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2373 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1250, %2372 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2370 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %2374 = "tosa.add"(%2366, %2373) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2375 = tensor.empty() : tensor<1x32x128x80xf32>
    %2376 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2374 : tensor<1x32x80x128xf32>) outs(%2375 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %2377 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1251 = tensor.extract_slice %2362[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1252 = tensor.insert_slice %extracted_slice_1251 into %2377[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %2378 = "tosa.reshape"(%inserted_slice_1252) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %2379 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1253 = tensor.extract_slice %2376[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1254 = tensor.insert_slice %extracted_slice_1253 into %2379[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %2380 = "tosa.reshape"(%inserted_slice_1254) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %2381 = tensor.empty() : tensor<32x80x80xf32>
    %2382 = linalg.batch_matmul ins(%2378, %2380 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%2381 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %2383 = "tosa.reshape"(%2382) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1255 = arith.constant 11.3137083 : f32
    %2384 = tensor.empty() : tensor<1x32x80x80xf32>
    %2385 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2383 : tensor<1x32x80x80xf32>) outs(%2384 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.divf %in, %cst_1255 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %2386 = "tosa.add"(%2385, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %2387 = tensor.empty() : tensor<1x32x80x1xf32>
    %2388 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2387 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %2389 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2386 : tensor<1x32x80x80xf32>) outs(%2387 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.maxf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %2390 = tensor.empty() : tensor<1x32x80x80xf32>
    %2391 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2386, %2389 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%2390 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.subf %in, %in_1777 : f32
      %5231 = math.exp %5230 : f32
      linalg.yield %5231 : f32
    } -> tensor<1x32x80x80xf32>
    %2392 = tensor.empty() : tensor<1x32x80x1xf32>
    %2393 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2392 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %2394 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2391 : tensor<1x32x80x80xf32>) outs(%2393 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.addf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %2395 = tensor.empty() : tensor<1x32x80x80xf32>
    %2396 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2391, %2394 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%2395 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.divf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %2397 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1256 = tensor.extract_slice %2396[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1257 = tensor.insert_slice %extracted_slice_1256 into %2397[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %2398 = "tosa.reshape"(%inserted_slice_1257) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %2399 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1258 = tensor.extract_slice %2336[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1259 = tensor.insert_slice %extracted_slice_1258 into %2399[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %2400 = "tosa.reshape"(%inserted_slice_1259) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %2401 = tensor.empty() : tensor<32x80x128xf32>
    %2402 = linalg.batch_matmul ins(%2398, %2400 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%2401 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %2403 = "tosa.reshape"(%2402) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2404 = tensor.empty() : tensor<1x80x32x128xf32>
    %2405 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2403 : tensor<1x32x80x128xf32>) outs(%2404 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1260 = tensor.extract_slice %2405[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %2406 = "tosa.reshape"(%extracted_slice_1260) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %2407 = tensor.empty() : tensor<4096x4096xf32>
    %2408 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_268 : tensor<4096x4096xf32>) outs(%2407 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2409 = "tosa.reshape"(%2406) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2410 = tensor.empty() : tensor<80x4096xf32>
    %2411 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2410 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %2412 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2409, %2408 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2411 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %2413 = "tosa.reshape"(%2412) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2414 = "tosa.add"(%2292, %2413) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %2415 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1261 = arith.constant 2 : i32
    %2416 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2414 : tensor<1x80x4096xf32>) outs(%2415 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1261 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1262 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %2417 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2416 : tensor<1x80x4096xf32>) outs(%cst_1262 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1263 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2418 = "tosa.add"(%2417, %cst_1263) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %2419 = tensor.empty() : tensor<1x80x1xf32>
    %2420 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2418 : tensor<1x80x1xf32>) outs(%2419 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %2421 = tensor.empty() : tensor<1x80x4096xf32>
    %2422 = tensor.empty() : tensor<1x80x4096xf32>
    %2423 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2420 : tensor<1x80x1xf32>) outs(%2422 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2424 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2414, %2423 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2421 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %2425 = tensor.empty() : tensor<1x80x4096xf32>
    %2426 = tensor.empty() : tensor<1x80x4096xf32>
    %2427 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_28 : tensor<4096xf32>) outs(%2426 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2428 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2427, %2424 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2425 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %2429 = tensor.empty() : tensor<4096x11008xf32>
    %2430 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_270 : tensor<11008x4096xf32>) outs(%2429 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2431 = "tosa.reshape"(%2428) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2432 = tensor.empty() : tensor<80x11008xf32>
    %2433 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2432 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %2434 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2431, %2430 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%2433 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %2435 = "tosa.reshape"(%2434) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %2436 = tensor.empty() : tensor<1x80x11008xf32>
    %2437 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2435 : tensor<1x80x11008xf32>) outs(%2436 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      %5231 = math.exp %5230 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5232 = arith.addf %cst_1777, %5231 : f32
      %5233 = arith.divf %in, %5232 : f32
      linalg.yield %5233 : f32
    } -> tensor<1x80x11008xf32>
    %2438 = tensor.empty() : tensor<4096x11008xf32>
    %2439 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_272 : tensor<11008x4096xf32>) outs(%2438 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2440 = "tosa.reshape"(%2428) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2441 = tensor.empty() : tensor<80x11008xf32>
    %2442 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2441 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %2443 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2440, %2439 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%2442 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %2444 = "tosa.reshape"(%2443) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %2445 = tensor.empty() : tensor<1x80x11008xf32>
    %2446 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2437, %2444 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%2445 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x11008xf32>
    %2447 = tensor.empty() : tensor<11008x4096xf32>
    %2448 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_274 : tensor<4096x11008xf32>) outs(%2447 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %2449 = "tosa.reshape"(%2446) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %2450 = tensor.empty() : tensor<80x4096xf32>
    %2451 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2450 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %2452 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2449, %2448 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%2451 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %2453 = "tosa.reshape"(%2452) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2454 = "tosa.add"(%2414, %2453) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %2455 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1264 = arith.constant 2 : i32
    %2456 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2454 : tensor<1x80x4096xf32>) outs(%2455 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1264 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1265 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %2457 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2456 : tensor<1x80x4096xf32>) outs(%cst_1265 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1266 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2458 = "tosa.add"(%2457, %cst_1266) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %2459 = tensor.empty() : tensor<1x80x1xf32>
    %2460 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2458 : tensor<1x80x1xf32>) outs(%2459 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %2461 = tensor.empty() : tensor<1x80x4096xf32>
    %2462 = tensor.empty() : tensor<1x80x4096xf32>
    %2463 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2460 : tensor<1x80x1xf32>) outs(%2462 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2464 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2454, %2463 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2461 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %2465 = tensor.empty() : tensor<1x80x4096xf32>
    %2466 = tensor.empty() : tensor<1x80x4096xf32>
    %2467 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_29 : tensor<4096xf32>) outs(%2466 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2468 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2467, %2464 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2465 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %2469 = tensor.empty() : tensor<4096x4096xf32>
    %2470 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_276 : tensor<4096x4096xf32>) outs(%2469 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2471 = "tosa.reshape"(%2468) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2472 = tensor.empty() : tensor<80x4096xf32>
    %2473 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2472 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %2474 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2471, %2470 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2473 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %2475 = "tosa.reshape"(%2474) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2476 = tensor.empty() : tensor<4096x4096xf32>
    %2477 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_278 : tensor<4096x4096xf32>) outs(%2476 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2478 = "tosa.reshape"(%2468) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2479 = tensor.empty() : tensor<80x4096xf32>
    %2480 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2479 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %2481 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2478, %2477 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2480 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %2482 = "tosa.reshape"(%2481) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2483 = tensor.empty() : tensor<4096x4096xf32>
    %2484 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_280 : tensor<4096x4096xf32>) outs(%2483 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2485 = "tosa.reshape"(%2468) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2486 = tensor.empty() : tensor<80x4096xf32>
    %2487 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2486 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %2488 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2485, %2484 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2487 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %2489 = "tosa.reshape"(%2488) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2490 = "tosa.reshape"(%2475) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2491 = tensor.empty() : tensor<1x32x80x128xf32>
    %2492 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2490 : tensor<1x80x32x128xf32>) outs(%2491 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2493 = "tosa.reshape"(%2482) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2494 = tensor.empty() : tensor<1x32x80x128xf32>
    %2495 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2493 : tensor<1x80x32x128xf32>) outs(%2494 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2496 = "tosa.reshape"(%2489) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2497 = tensor.empty() : tensor<1x32x80x128xf32>
    %2498 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2496 : tensor<1x80x32x128xf32>) outs(%2497 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1267 = tensor.extract_slice %expanded_576[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1268 = tensor.extract_slice %extracted_slice_1267[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1269 = tensor.extract_slice %extracted_slice_1268[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1270 = tensor.extract_slice %expanded_578[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1271 = tensor.extract_slice %extracted_slice_1270[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1272 = tensor.extract_slice %extracted_slice_1271[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %2499 = tensor.empty() : tensor<1x80x128xf32>
    %2500 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1269 : tensor<1x1x80x128xf32>) outs(%2499 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %2501 = tensor.empty() : tensor<80x128xf32>
    %2502 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%2500 : tensor<1x80x128xf32>) outs(%2501 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %2503 = tensor.empty() : tensor<1x80x128xf32>
    %2504 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1272 : tensor<1x1x80x128xf32>) outs(%2503 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %2505 = tensor.empty() : tensor<80x128xf32>
    %2506 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%2504 : tensor<1x80x128xf32>) outs(%2505 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %2507 = tensor.empty() : tensor<1x80x128xf32>
    %2508 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%2507 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %2502[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %2509 = "tosa.reshape"(%2508) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %2510 = tensor.empty() : tensor<1x80x128xf32>
    %2511 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%2510 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %2506[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %2512 = "tosa.reshape"(%2511) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %2513 = tensor.empty() : tensor<1x32x80x128xf32>
    %2514 = tensor.empty() : tensor<1x32x80x128xf32>
    %2515 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2509 : tensor<1x1x80x128xf32>) outs(%2514 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2516 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2492, %2515 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2513 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1273 = tensor.extract_slice %2492[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1274 = tensor.extract_slice %2492[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %2517 = tensor.empty() : tensor<1x32x80x64xf32>
    %2518 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1274 : tensor<1x32x80x64xf32>) outs(%2517 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %2519 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1275 = tensor.insert_slice %2518 into %2519[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1276 = tensor.insert_slice %extracted_slice_1273 into %inserted_slice_1275[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %2520 = tensor.empty() : tensor<1x32x80x128xf32>
    %2521 = tensor.empty() : tensor<1x32x80x128xf32>
    %2522 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2512 : tensor<1x1x80x128xf32>) outs(%2521 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2523 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1276, %2522 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2520 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %2524 = "tosa.add"(%2516, %2523) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2525 = tensor.empty() : tensor<1x32x80x128xf32>
    %2526 = tensor.empty() : tensor<1x32x80x128xf32>
    %2527 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2509 : tensor<1x1x80x128xf32>) outs(%2526 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2528 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2495, %2527 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2525 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1277 = tensor.extract_slice %2495[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1278 = tensor.extract_slice %2495[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %2529 = tensor.empty() : tensor<1x32x80x64xf32>
    %2530 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1278 : tensor<1x32x80x64xf32>) outs(%2529 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %2531 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1279 = tensor.insert_slice %2530 into %2531[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1280 = tensor.insert_slice %extracted_slice_1277 into %inserted_slice_1279[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %2532 = tensor.empty() : tensor<1x32x80x128xf32>
    %2533 = tensor.empty() : tensor<1x32x80x128xf32>
    %2534 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2512 : tensor<1x1x80x128xf32>) outs(%2533 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2535 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1280, %2534 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2532 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %2536 = "tosa.add"(%2528, %2535) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2537 = tensor.empty() : tensor<1x32x128x80xf32>
    %2538 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2536 : tensor<1x32x80x128xf32>) outs(%2537 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %2539 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1281 = tensor.extract_slice %2524[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1282 = tensor.insert_slice %extracted_slice_1281 into %2539[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %2540 = "tosa.reshape"(%inserted_slice_1282) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %2541 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1283 = tensor.extract_slice %2538[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1284 = tensor.insert_slice %extracted_slice_1283 into %2541[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %2542 = "tosa.reshape"(%inserted_slice_1284) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %2543 = tensor.empty() : tensor<32x80x80xf32>
    %2544 = linalg.batch_matmul ins(%2540, %2542 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%2543 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %2545 = "tosa.reshape"(%2544) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1285 = arith.constant 11.3137083 : f32
    %2546 = tensor.empty() : tensor<1x32x80x80xf32>
    %2547 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2545 : tensor<1x32x80x80xf32>) outs(%2546 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.divf %in, %cst_1285 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %2548 = "tosa.add"(%2547, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %2549 = tensor.empty() : tensor<1x32x80x1xf32>
    %2550 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2549 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %2551 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2548 : tensor<1x32x80x80xf32>) outs(%2549 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.maxf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %2552 = tensor.empty() : tensor<1x32x80x80xf32>
    %2553 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2548, %2551 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%2552 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.subf %in, %in_1777 : f32
      %5231 = math.exp %5230 : f32
      linalg.yield %5231 : f32
    } -> tensor<1x32x80x80xf32>
    %2554 = tensor.empty() : tensor<1x32x80x1xf32>
    %2555 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2554 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %2556 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2553 : tensor<1x32x80x80xf32>) outs(%2555 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.addf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %2557 = tensor.empty() : tensor<1x32x80x80xf32>
    %2558 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2553, %2556 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%2557 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.divf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %2559 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1286 = tensor.extract_slice %2558[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1287 = tensor.insert_slice %extracted_slice_1286 into %2559[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %2560 = "tosa.reshape"(%inserted_slice_1287) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %2561 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1288 = tensor.extract_slice %2498[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1289 = tensor.insert_slice %extracted_slice_1288 into %2561[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %2562 = "tosa.reshape"(%inserted_slice_1289) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %2563 = tensor.empty() : tensor<32x80x128xf32>
    %2564 = linalg.batch_matmul ins(%2560, %2562 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%2563 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %2565 = "tosa.reshape"(%2564) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2566 = tensor.empty() : tensor<1x80x32x128xf32>
    %2567 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2565 : tensor<1x32x80x128xf32>) outs(%2566 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1290 = tensor.extract_slice %2567[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %2568 = "tosa.reshape"(%extracted_slice_1290) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %2569 = tensor.empty() : tensor<4096x4096xf32>
    %2570 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_282 : tensor<4096x4096xf32>) outs(%2569 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2571 = "tosa.reshape"(%2568) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2572 = tensor.empty() : tensor<80x4096xf32>
    %2573 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2572 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %2574 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2571, %2570 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2573 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %2575 = "tosa.reshape"(%2574) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2576 = "tosa.add"(%2454, %2575) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %2577 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1291 = arith.constant 2 : i32
    %2578 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2576 : tensor<1x80x4096xf32>) outs(%2577 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1291 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1292 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %2579 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2578 : tensor<1x80x4096xf32>) outs(%cst_1292 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1293 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2580 = "tosa.add"(%2579, %cst_1293) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %2581 = tensor.empty() : tensor<1x80x1xf32>
    %2582 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2580 : tensor<1x80x1xf32>) outs(%2581 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %2583 = tensor.empty() : tensor<1x80x4096xf32>
    %2584 = tensor.empty() : tensor<1x80x4096xf32>
    %2585 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2582 : tensor<1x80x1xf32>) outs(%2584 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2586 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2576, %2585 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2583 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %2587 = tensor.empty() : tensor<1x80x4096xf32>
    %2588 = tensor.empty() : tensor<1x80x4096xf32>
    %2589 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_30 : tensor<4096xf32>) outs(%2588 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2590 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2589, %2586 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2587 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %2591 = tensor.empty() : tensor<4096x11008xf32>
    %2592 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_284 : tensor<11008x4096xf32>) outs(%2591 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2593 = "tosa.reshape"(%2590) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2594 = tensor.empty() : tensor<80x11008xf32>
    %2595 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2594 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %2596 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2593, %2592 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%2595 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %2597 = "tosa.reshape"(%2596) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %2598 = tensor.empty() : tensor<1x80x11008xf32>
    %2599 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2597 : tensor<1x80x11008xf32>) outs(%2598 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      %5231 = math.exp %5230 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5232 = arith.addf %cst_1777, %5231 : f32
      %5233 = arith.divf %in, %5232 : f32
      linalg.yield %5233 : f32
    } -> tensor<1x80x11008xf32>
    %2600 = tensor.empty() : tensor<4096x11008xf32>
    %2601 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_286 : tensor<11008x4096xf32>) outs(%2600 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2602 = "tosa.reshape"(%2590) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2603 = tensor.empty() : tensor<80x11008xf32>
    %2604 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2603 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %2605 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2602, %2601 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%2604 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %2606 = "tosa.reshape"(%2605) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %2607 = tensor.empty() : tensor<1x80x11008xf32>
    %2608 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2599, %2606 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%2607 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x11008xf32>
    %2609 = tensor.empty() : tensor<11008x4096xf32>
    %2610 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_288 : tensor<4096x11008xf32>) outs(%2609 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %2611 = "tosa.reshape"(%2608) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %2612 = tensor.empty() : tensor<80x4096xf32>
    %2613 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2612 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %2614 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2611, %2610 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%2613 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %2615 = "tosa.reshape"(%2614) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2616 = "tosa.add"(%2576, %2615) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %2617 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1294 = arith.constant 2 : i32
    %2618 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2616 : tensor<1x80x4096xf32>) outs(%2617 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1294 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1295 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %2619 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2618 : tensor<1x80x4096xf32>) outs(%cst_1295 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1296 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2620 = "tosa.add"(%2619, %cst_1296) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %2621 = tensor.empty() : tensor<1x80x1xf32>
    %2622 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2620 : tensor<1x80x1xf32>) outs(%2621 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %2623 = tensor.empty() : tensor<1x80x4096xf32>
    %2624 = tensor.empty() : tensor<1x80x4096xf32>
    %2625 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2622 : tensor<1x80x1xf32>) outs(%2624 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2626 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2616, %2625 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2623 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %2627 = tensor.empty() : tensor<1x80x4096xf32>
    %2628 = tensor.empty() : tensor<1x80x4096xf32>
    %2629 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_31 : tensor<4096xf32>) outs(%2628 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2630 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2629, %2626 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2627 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %2631 = tensor.empty() : tensor<4096x4096xf32>
    %2632 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_290 : tensor<4096x4096xf32>) outs(%2631 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2633 = "tosa.reshape"(%2630) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2634 = tensor.empty() : tensor<80x4096xf32>
    %2635 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2634 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %2636 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2633, %2632 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2635 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %2637 = "tosa.reshape"(%2636) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2638 = tensor.empty() : tensor<4096x4096xf32>
    %2639 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_292 : tensor<4096x4096xf32>) outs(%2638 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2640 = "tosa.reshape"(%2630) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2641 = tensor.empty() : tensor<80x4096xf32>
    %2642 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2641 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %2643 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2640, %2639 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2642 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %2644 = "tosa.reshape"(%2643) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2645 = tensor.empty() : tensor<4096x4096xf32>
    %2646 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_294 : tensor<4096x4096xf32>) outs(%2645 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2647 = "tosa.reshape"(%2630) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2648 = tensor.empty() : tensor<80x4096xf32>
    %2649 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2648 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %2650 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2647, %2646 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2649 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %2651 = "tosa.reshape"(%2650) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2652 = "tosa.reshape"(%2637) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2653 = tensor.empty() : tensor<1x32x80x128xf32>
    %2654 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2652 : tensor<1x80x32x128xf32>) outs(%2653 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2655 = "tosa.reshape"(%2644) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2656 = tensor.empty() : tensor<1x32x80x128xf32>
    %2657 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2655 : tensor<1x80x32x128xf32>) outs(%2656 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2658 = "tosa.reshape"(%2651) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2659 = tensor.empty() : tensor<1x32x80x128xf32>
    %2660 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2658 : tensor<1x80x32x128xf32>) outs(%2659 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1297 = tensor.extract_slice %expanded_580[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1298 = tensor.extract_slice %extracted_slice_1297[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1299 = tensor.extract_slice %extracted_slice_1298[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1300 = tensor.extract_slice %expanded_582[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1301 = tensor.extract_slice %extracted_slice_1300[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1302 = tensor.extract_slice %extracted_slice_1301[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %2661 = tensor.empty() : tensor<1x80x128xf32>
    %2662 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1299 : tensor<1x1x80x128xf32>) outs(%2661 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %2663 = tensor.empty() : tensor<80x128xf32>
    %2664 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%2662 : tensor<1x80x128xf32>) outs(%2663 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %2665 = tensor.empty() : tensor<1x80x128xf32>
    %2666 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1302 : tensor<1x1x80x128xf32>) outs(%2665 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %2667 = tensor.empty() : tensor<80x128xf32>
    %2668 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%2666 : tensor<1x80x128xf32>) outs(%2667 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %2669 = tensor.empty() : tensor<1x80x128xf32>
    %2670 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%2669 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %2664[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %2671 = "tosa.reshape"(%2670) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %2672 = tensor.empty() : tensor<1x80x128xf32>
    %2673 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%2672 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %2668[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %2674 = "tosa.reshape"(%2673) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %2675 = tensor.empty() : tensor<1x32x80x128xf32>
    %2676 = tensor.empty() : tensor<1x32x80x128xf32>
    %2677 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2671 : tensor<1x1x80x128xf32>) outs(%2676 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2678 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2654, %2677 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2675 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1303 = tensor.extract_slice %2654[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1304 = tensor.extract_slice %2654[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %2679 = tensor.empty() : tensor<1x32x80x64xf32>
    %2680 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1304 : tensor<1x32x80x64xf32>) outs(%2679 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %2681 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1305 = tensor.insert_slice %2680 into %2681[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1306 = tensor.insert_slice %extracted_slice_1303 into %inserted_slice_1305[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %2682 = tensor.empty() : tensor<1x32x80x128xf32>
    %2683 = tensor.empty() : tensor<1x32x80x128xf32>
    %2684 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2674 : tensor<1x1x80x128xf32>) outs(%2683 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2685 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1306, %2684 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2682 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %2686 = "tosa.add"(%2678, %2685) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2687 = tensor.empty() : tensor<1x32x80x128xf32>
    %2688 = tensor.empty() : tensor<1x32x80x128xf32>
    %2689 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2671 : tensor<1x1x80x128xf32>) outs(%2688 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2690 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2657, %2689 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2687 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1307 = tensor.extract_slice %2657[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1308 = tensor.extract_slice %2657[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %2691 = tensor.empty() : tensor<1x32x80x64xf32>
    %2692 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1308 : tensor<1x32x80x64xf32>) outs(%2691 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %2693 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1309 = tensor.insert_slice %2692 into %2693[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1310 = tensor.insert_slice %extracted_slice_1307 into %inserted_slice_1309[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %2694 = tensor.empty() : tensor<1x32x80x128xf32>
    %2695 = tensor.empty() : tensor<1x32x80x128xf32>
    %2696 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2674 : tensor<1x1x80x128xf32>) outs(%2695 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2697 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1310, %2696 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2694 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %2698 = "tosa.add"(%2690, %2697) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2699 = tensor.empty() : tensor<1x32x128x80xf32>
    %2700 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2698 : tensor<1x32x80x128xf32>) outs(%2699 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %2701 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1311 = tensor.extract_slice %2686[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1312 = tensor.insert_slice %extracted_slice_1311 into %2701[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %2702 = "tosa.reshape"(%inserted_slice_1312) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %2703 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1313 = tensor.extract_slice %2700[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1314 = tensor.insert_slice %extracted_slice_1313 into %2703[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %2704 = "tosa.reshape"(%inserted_slice_1314) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %2705 = tensor.empty() : tensor<32x80x80xf32>
    %2706 = linalg.batch_matmul ins(%2702, %2704 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%2705 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %2707 = "tosa.reshape"(%2706) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1315 = arith.constant 11.3137083 : f32
    %2708 = tensor.empty() : tensor<1x32x80x80xf32>
    %2709 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2707 : tensor<1x32x80x80xf32>) outs(%2708 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.divf %in, %cst_1315 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %2710 = "tosa.add"(%2709, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %2711 = tensor.empty() : tensor<1x32x80x1xf32>
    %2712 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2711 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %2713 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2710 : tensor<1x32x80x80xf32>) outs(%2711 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.maxf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %2714 = tensor.empty() : tensor<1x32x80x80xf32>
    %2715 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2710, %2713 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%2714 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.subf %in, %in_1777 : f32
      %5231 = math.exp %5230 : f32
      linalg.yield %5231 : f32
    } -> tensor<1x32x80x80xf32>
    %2716 = tensor.empty() : tensor<1x32x80x1xf32>
    %2717 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2716 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %2718 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2715 : tensor<1x32x80x80xf32>) outs(%2717 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.addf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %2719 = tensor.empty() : tensor<1x32x80x80xf32>
    %2720 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2715, %2718 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%2719 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.divf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %2721 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1316 = tensor.extract_slice %2720[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1317 = tensor.insert_slice %extracted_slice_1316 into %2721[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %2722 = "tosa.reshape"(%inserted_slice_1317) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %2723 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1318 = tensor.extract_slice %2660[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1319 = tensor.insert_slice %extracted_slice_1318 into %2723[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %2724 = "tosa.reshape"(%inserted_slice_1319) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %2725 = tensor.empty() : tensor<32x80x128xf32>
    %2726 = linalg.batch_matmul ins(%2722, %2724 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%2725 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %2727 = "tosa.reshape"(%2726) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2728 = tensor.empty() : tensor<1x80x32x128xf32>
    %2729 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2727 : tensor<1x32x80x128xf32>) outs(%2728 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1320 = tensor.extract_slice %2729[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %2730 = "tosa.reshape"(%extracted_slice_1320) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %2731 = tensor.empty() : tensor<4096x4096xf32>
    %2732 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_296 : tensor<4096x4096xf32>) outs(%2731 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2733 = "tosa.reshape"(%2730) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2734 = tensor.empty() : tensor<80x4096xf32>
    %2735 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2734 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %2736 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2733, %2732 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2735 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %2737 = "tosa.reshape"(%2736) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2738 = "tosa.add"(%2616, %2737) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %2739 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1321 = arith.constant 2 : i32
    %2740 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2738 : tensor<1x80x4096xf32>) outs(%2739 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1321 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1322 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %2741 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2740 : tensor<1x80x4096xf32>) outs(%cst_1322 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1323 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2742 = "tosa.add"(%2741, %cst_1323) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %2743 = tensor.empty() : tensor<1x80x1xf32>
    %2744 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2742 : tensor<1x80x1xf32>) outs(%2743 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %2745 = tensor.empty() : tensor<1x80x4096xf32>
    %2746 = tensor.empty() : tensor<1x80x4096xf32>
    %2747 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2744 : tensor<1x80x1xf32>) outs(%2746 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2748 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2738, %2747 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2745 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %2749 = tensor.empty() : tensor<1x80x4096xf32>
    %2750 = tensor.empty() : tensor<1x80x4096xf32>
    %2751 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_32 : tensor<4096xf32>) outs(%2750 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2752 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2751, %2748 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2749 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %2753 = tensor.empty() : tensor<4096x11008xf32>
    %2754 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_298 : tensor<11008x4096xf32>) outs(%2753 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2755 = "tosa.reshape"(%2752) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2756 = tensor.empty() : tensor<80x11008xf32>
    %2757 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2756 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %2758 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2755, %2754 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%2757 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %2759 = "tosa.reshape"(%2758) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %2760 = tensor.empty() : tensor<1x80x11008xf32>
    %2761 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2759 : tensor<1x80x11008xf32>) outs(%2760 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      %5231 = math.exp %5230 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5232 = arith.addf %cst_1777, %5231 : f32
      %5233 = arith.divf %in, %5232 : f32
      linalg.yield %5233 : f32
    } -> tensor<1x80x11008xf32>
    %2762 = tensor.empty() : tensor<4096x11008xf32>
    %2763 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_300 : tensor<11008x4096xf32>) outs(%2762 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2764 = "tosa.reshape"(%2752) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2765 = tensor.empty() : tensor<80x11008xf32>
    %2766 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2765 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %2767 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2764, %2763 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%2766 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %2768 = "tosa.reshape"(%2767) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %2769 = tensor.empty() : tensor<1x80x11008xf32>
    %2770 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2761, %2768 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%2769 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x11008xf32>
    %2771 = tensor.empty() : tensor<11008x4096xf32>
    %2772 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_302 : tensor<4096x11008xf32>) outs(%2771 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %2773 = "tosa.reshape"(%2770) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %2774 = tensor.empty() : tensor<80x4096xf32>
    %2775 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2774 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %2776 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2773, %2772 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%2775 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %2777 = "tosa.reshape"(%2776) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2778 = "tosa.add"(%2738, %2777) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %2779 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1324 = arith.constant 2 : i32
    %2780 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2778 : tensor<1x80x4096xf32>) outs(%2779 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1324 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1325 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %2781 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2780 : tensor<1x80x4096xf32>) outs(%cst_1325 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1326 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2782 = "tosa.add"(%2781, %cst_1326) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %2783 = tensor.empty() : tensor<1x80x1xf32>
    %2784 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2782 : tensor<1x80x1xf32>) outs(%2783 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %2785 = tensor.empty() : tensor<1x80x4096xf32>
    %2786 = tensor.empty() : tensor<1x80x4096xf32>
    %2787 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2784 : tensor<1x80x1xf32>) outs(%2786 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2788 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2778, %2787 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2785 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %2789 = tensor.empty() : tensor<1x80x4096xf32>
    %2790 = tensor.empty() : tensor<1x80x4096xf32>
    %2791 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_33 : tensor<4096xf32>) outs(%2790 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2792 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2791, %2788 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2789 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %2793 = tensor.empty() : tensor<4096x4096xf32>
    %2794 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_304 : tensor<4096x4096xf32>) outs(%2793 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2795 = "tosa.reshape"(%2792) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2796 = tensor.empty() : tensor<80x4096xf32>
    %2797 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2796 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %2798 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2795, %2794 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2797 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %2799 = "tosa.reshape"(%2798) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2800 = tensor.empty() : tensor<4096x4096xf32>
    %2801 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_306 : tensor<4096x4096xf32>) outs(%2800 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2802 = "tosa.reshape"(%2792) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2803 = tensor.empty() : tensor<80x4096xf32>
    %2804 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2803 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %2805 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2802, %2801 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2804 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %2806 = "tosa.reshape"(%2805) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2807 = tensor.empty() : tensor<4096x4096xf32>
    %2808 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_308 : tensor<4096x4096xf32>) outs(%2807 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2809 = "tosa.reshape"(%2792) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2810 = tensor.empty() : tensor<80x4096xf32>
    %2811 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2810 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %2812 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2809, %2808 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2811 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %2813 = "tosa.reshape"(%2812) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2814 = "tosa.reshape"(%2799) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2815 = tensor.empty() : tensor<1x32x80x128xf32>
    %2816 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2814 : tensor<1x80x32x128xf32>) outs(%2815 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2817 = "tosa.reshape"(%2806) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2818 = tensor.empty() : tensor<1x32x80x128xf32>
    %2819 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2817 : tensor<1x80x32x128xf32>) outs(%2818 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2820 = "tosa.reshape"(%2813) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2821 = tensor.empty() : tensor<1x32x80x128xf32>
    %2822 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2820 : tensor<1x80x32x128xf32>) outs(%2821 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1327 = tensor.extract_slice %expanded_584[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1328 = tensor.extract_slice %extracted_slice_1327[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1329 = tensor.extract_slice %extracted_slice_1328[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1330 = tensor.extract_slice %expanded_586[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1331 = tensor.extract_slice %extracted_slice_1330[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1332 = tensor.extract_slice %extracted_slice_1331[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %2823 = tensor.empty() : tensor<1x80x128xf32>
    %2824 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1329 : tensor<1x1x80x128xf32>) outs(%2823 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %2825 = tensor.empty() : tensor<80x128xf32>
    %2826 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%2824 : tensor<1x80x128xf32>) outs(%2825 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %2827 = tensor.empty() : tensor<1x80x128xf32>
    %2828 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1332 : tensor<1x1x80x128xf32>) outs(%2827 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %2829 = tensor.empty() : tensor<80x128xf32>
    %2830 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%2828 : tensor<1x80x128xf32>) outs(%2829 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %2831 = tensor.empty() : tensor<1x80x128xf32>
    %2832 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%2831 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %2826[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %2833 = "tosa.reshape"(%2832) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %2834 = tensor.empty() : tensor<1x80x128xf32>
    %2835 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%2834 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %2830[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %2836 = "tosa.reshape"(%2835) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %2837 = tensor.empty() : tensor<1x32x80x128xf32>
    %2838 = tensor.empty() : tensor<1x32x80x128xf32>
    %2839 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2833 : tensor<1x1x80x128xf32>) outs(%2838 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2840 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2816, %2839 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2837 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1333 = tensor.extract_slice %2816[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1334 = tensor.extract_slice %2816[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %2841 = tensor.empty() : tensor<1x32x80x64xf32>
    %2842 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1334 : tensor<1x32x80x64xf32>) outs(%2841 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %2843 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1335 = tensor.insert_slice %2842 into %2843[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1336 = tensor.insert_slice %extracted_slice_1333 into %inserted_slice_1335[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %2844 = tensor.empty() : tensor<1x32x80x128xf32>
    %2845 = tensor.empty() : tensor<1x32x80x128xf32>
    %2846 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2836 : tensor<1x1x80x128xf32>) outs(%2845 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2847 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1336, %2846 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2844 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %2848 = "tosa.add"(%2840, %2847) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2849 = tensor.empty() : tensor<1x32x80x128xf32>
    %2850 = tensor.empty() : tensor<1x32x80x128xf32>
    %2851 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2833 : tensor<1x1x80x128xf32>) outs(%2850 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2852 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2819, %2851 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2849 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1337 = tensor.extract_slice %2819[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1338 = tensor.extract_slice %2819[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %2853 = tensor.empty() : tensor<1x32x80x64xf32>
    %2854 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1338 : tensor<1x32x80x64xf32>) outs(%2853 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %2855 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1339 = tensor.insert_slice %2854 into %2855[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1340 = tensor.insert_slice %extracted_slice_1337 into %inserted_slice_1339[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %2856 = tensor.empty() : tensor<1x32x80x128xf32>
    %2857 = tensor.empty() : tensor<1x32x80x128xf32>
    %2858 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2836 : tensor<1x1x80x128xf32>) outs(%2857 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2859 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1340, %2858 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2856 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %2860 = "tosa.add"(%2852, %2859) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2861 = tensor.empty() : tensor<1x32x128x80xf32>
    %2862 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2860 : tensor<1x32x80x128xf32>) outs(%2861 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %2863 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1341 = tensor.extract_slice %2848[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1342 = tensor.insert_slice %extracted_slice_1341 into %2863[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %2864 = "tosa.reshape"(%inserted_slice_1342) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %2865 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1343 = tensor.extract_slice %2862[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1344 = tensor.insert_slice %extracted_slice_1343 into %2865[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %2866 = "tosa.reshape"(%inserted_slice_1344) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %2867 = tensor.empty() : tensor<32x80x80xf32>
    %2868 = linalg.batch_matmul ins(%2864, %2866 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%2867 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %2869 = "tosa.reshape"(%2868) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1345 = arith.constant 11.3137083 : f32
    %2870 = tensor.empty() : tensor<1x32x80x80xf32>
    %2871 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2869 : tensor<1x32x80x80xf32>) outs(%2870 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.divf %in, %cst_1345 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %2872 = "tosa.add"(%2871, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %2873 = tensor.empty() : tensor<1x32x80x1xf32>
    %2874 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2873 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %2875 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2872 : tensor<1x32x80x80xf32>) outs(%2873 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.maxf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %2876 = tensor.empty() : tensor<1x32x80x80xf32>
    %2877 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2872, %2875 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%2876 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.subf %in, %in_1777 : f32
      %5231 = math.exp %5230 : f32
      linalg.yield %5231 : f32
    } -> tensor<1x32x80x80xf32>
    %2878 = tensor.empty() : tensor<1x32x80x1xf32>
    %2879 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2878 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %2880 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2877 : tensor<1x32x80x80xf32>) outs(%2879 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.addf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %2881 = tensor.empty() : tensor<1x32x80x80xf32>
    %2882 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2877, %2880 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%2881 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.divf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %2883 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1346 = tensor.extract_slice %2882[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1347 = tensor.insert_slice %extracted_slice_1346 into %2883[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %2884 = "tosa.reshape"(%inserted_slice_1347) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %2885 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1348 = tensor.extract_slice %2822[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1349 = tensor.insert_slice %extracted_slice_1348 into %2885[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %2886 = "tosa.reshape"(%inserted_slice_1349) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %2887 = tensor.empty() : tensor<32x80x128xf32>
    %2888 = linalg.batch_matmul ins(%2884, %2886 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%2887 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %2889 = "tosa.reshape"(%2888) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2890 = tensor.empty() : tensor<1x80x32x128xf32>
    %2891 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2889 : tensor<1x32x80x128xf32>) outs(%2890 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1350 = tensor.extract_slice %2891[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %2892 = "tosa.reshape"(%extracted_slice_1350) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %2893 = tensor.empty() : tensor<4096x4096xf32>
    %2894 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_310 : tensor<4096x4096xf32>) outs(%2893 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2895 = "tosa.reshape"(%2892) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2896 = tensor.empty() : tensor<80x4096xf32>
    %2897 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2896 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %2898 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2895, %2894 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2897 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %2899 = "tosa.reshape"(%2898) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2900 = "tosa.add"(%2778, %2899) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %2901 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1351 = arith.constant 2 : i32
    %2902 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2900 : tensor<1x80x4096xf32>) outs(%2901 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1351 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1352 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %2903 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2902 : tensor<1x80x4096xf32>) outs(%cst_1352 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1353 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2904 = "tosa.add"(%2903, %cst_1353) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %2905 = tensor.empty() : tensor<1x80x1xf32>
    %2906 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2904 : tensor<1x80x1xf32>) outs(%2905 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %2907 = tensor.empty() : tensor<1x80x4096xf32>
    %2908 = tensor.empty() : tensor<1x80x4096xf32>
    %2909 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2906 : tensor<1x80x1xf32>) outs(%2908 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2910 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2900, %2909 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2907 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %2911 = tensor.empty() : tensor<1x80x4096xf32>
    %2912 = tensor.empty() : tensor<1x80x4096xf32>
    %2913 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_34 : tensor<4096xf32>) outs(%2912 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2914 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2913, %2910 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2911 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %2915 = tensor.empty() : tensor<4096x11008xf32>
    %2916 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_312 : tensor<11008x4096xf32>) outs(%2915 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2917 = "tosa.reshape"(%2914) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2918 = tensor.empty() : tensor<80x11008xf32>
    %2919 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2918 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %2920 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2917, %2916 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%2919 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %2921 = "tosa.reshape"(%2920) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %2922 = tensor.empty() : tensor<1x80x11008xf32>
    %2923 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2921 : tensor<1x80x11008xf32>) outs(%2922 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      %5231 = math.exp %5230 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5232 = arith.addf %cst_1777, %5231 : f32
      %5233 = arith.divf %in, %5232 : f32
      linalg.yield %5233 : f32
    } -> tensor<1x80x11008xf32>
    %2924 = tensor.empty() : tensor<4096x11008xf32>
    %2925 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_314 : tensor<11008x4096xf32>) outs(%2924 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2926 = "tosa.reshape"(%2914) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2927 = tensor.empty() : tensor<80x11008xf32>
    %2928 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2927 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %2929 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2926, %2925 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%2928 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %2930 = "tosa.reshape"(%2929) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %2931 = tensor.empty() : tensor<1x80x11008xf32>
    %2932 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2923, %2930 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%2931 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x11008xf32>
    %2933 = tensor.empty() : tensor<11008x4096xf32>
    %2934 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_316 : tensor<4096x11008xf32>) outs(%2933 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %2935 = "tosa.reshape"(%2932) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %2936 = tensor.empty() : tensor<80x4096xf32>
    %2937 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2936 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %2938 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2935, %2934 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%2937 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %2939 = "tosa.reshape"(%2938) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2940 = "tosa.add"(%2900, %2939) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %2941 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1354 = arith.constant 2 : i32
    %2942 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2940 : tensor<1x80x4096xf32>) outs(%2941 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1354 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1355 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %2943 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2942 : tensor<1x80x4096xf32>) outs(%cst_1355 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1356 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2944 = "tosa.add"(%2943, %cst_1356) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %2945 = tensor.empty() : tensor<1x80x1xf32>
    %2946 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2944 : tensor<1x80x1xf32>) outs(%2945 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %2947 = tensor.empty() : tensor<1x80x4096xf32>
    %2948 = tensor.empty() : tensor<1x80x4096xf32>
    %2949 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2946 : tensor<1x80x1xf32>) outs(%2948 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2950 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2940, %2949 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2947 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %2951 = tensor.empty() : tensor<1x80x4096xf32>
    %2952 = tensor.empty() : tensor<1x80x4096xf32>
    %2953 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_35 : tensor<4096xf32>) outs(%2952 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2954 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2953, %2950 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2951 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %2955 = tensor.empty() : tensor<4096x4096xf32>
    %2956 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_318 : tensor<4096x4096xf32>) outs(%2955 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2957 = "tosa.reshape"(%2954) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2958 = tensor.empty() : tensor<80x4096xf32>
    %2959 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2958 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %2960 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2957, %2956 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2959 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %2961 = "tosa.reshape"(%2960) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2962 = tensor.empty() : tensor<4096x4096xf32>
    %2963 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_320 : tensor<4096x4096xf32>) outs(%2962 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2964 = "tosa.reshape"(%2954) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2965 = tensor.empty() : tensor<80x4096xf32>
    %2966 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2965 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %2967 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2964, %2963 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2966 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %2968 = "tosa.reshape"(%2967) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2969 = tensor.empty() : tensor<4096x4096xf32>
    %2970 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_322 : tensor<4096x4096xf32>) outs(%2969 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2971 = "tosa.reshape"(%2954) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2972 = tensor.empty() : tensor<80x4096xf32>
    %2973 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2972 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %2974 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2971, %2970 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2973 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %2975 = "tosa.reshape"(%2974) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2976 = "tosa.reshape"(%2961) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2977 = tensor.empty() : tensor<1x32x80x128xf32>
    %2978 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2976 : tensor<1x80x32x128xf32>) outs(%2977 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2979 = "tosa.reshape"(%2968) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2980 = tensor.empty() : tensor<1x32x80x128xf32>
    %2981 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2979 : tensor<1x80x32x128xf32>) outs(%2980 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2982 = "tosa.reshape"(%2975) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2983 = tensor.empty() : tensor<1x32x80x128xf32>
    %2984 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2982 : tensor<1x80x32x128xf32>) outs(%2983 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1357 = tensor.extract_slice %expanded_588[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1358 = tensor.extract_slice %extracted_slice_1357[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1359 = tensor.extract_slice %extracted_slice_1358[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1360 = tensor.extract_slice %expanded_590[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1361 = tensor.extract_slice %extracted_slice_1360[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1362 = tensor.extract_slice %extracted_slice_1361[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %2985 = tensor.empty() : tensor<1x80x128xf32>
    %2986 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1359 : tensor<1x1x80x128xf32>) outs(%2985 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %2987 = tensor.empty() : tensor<80x128xf32>
    %2988 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%2986 : tensor<1x80x128xf32>) outs(%2987 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %2989 = tensor.empty() : tensor<1x80x128xf32>
    %2990 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1362 : tensor<1x1x80x128xf32>) outs(%2989 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %2991 = tensor.empty() : tensor<80x128xf32>
    %2992 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%2990 : tensor<1x80x128xf32>) outs(%2991 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %2993 = tensor.empty() : tensor<1x80x128xf32>
    %2994 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%2993 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %2988[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %2995 = "tosa.reshape"(%2994) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %2996 = tensor.empty() : tensor<1x80x128xf32>
    %2997 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%2996 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %2992[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %2998 = "tosa.reshape"(%2997) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %2999 = tensor.empty() : tensor<1x32x80x128xf32>
    %3000 = tensor.empty() : tensor<1x32x80x128xf32>
    %3001 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2995 : tensor<1x1x80x128xf32>) outs(%3000 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3002 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2978, %3001 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2999 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1363 = tensor.extract_slice %2978[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1364 = tensor.extract_slice %2978[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %3003 = tensor.empty() : tensor<1x32x80x64xf32>
    %3004 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1364 : tensor<1x32x80x64xf32>) outs(%3003 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %3005 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1365 = tensor.insert_slice %3004 into %3005[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1366 = tensor.insert_slice %extracted_slice_1363 into %inserted_slice_1365[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %3006 = tensor.empty() : tensor<1x32x80x128xf32>
    %3007 = tensor.empty() : tensor<1x32x80x128xf32>
    %3008 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2998 : tensor<1x1x80x128xf32>) outs(%3007 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3009 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1366, %3008 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3006 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %3010 = "tosa.add"(%3002, %3009) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3011 = tensor.empty() : tensor<1x32x80x128xf32>
    %3012 = tensor.empty() : tensor<1x32x80x128xf32>
    %3013 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2995 : tensor<1x1x80x128xf32>) outs(%3012 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3014 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2981, %3013 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3011 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1367 = tensor.extract_slice %2981[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1368 = tensor.extract_slice %2981[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %3015 = tensor.empty() : tensor<1x32x80x64xf32>
    %3016 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1368 : tensor<1x32x80x64xf32>) outs(%3015 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %3017 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1369 = tensor.insert_slice %3016 into %3017[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1370 = tensor.insert_slice %extracted_slice_1367 into %inserted_slice_1369[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %3018 = tensor.empty() : tensor<1x32x80x128xf32>
    %3019 = tensor.empty() : tensor<1x32x80x128xf32>
    %3020 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2998 : tensor<1x1x80x128xf32>) outs(%3019 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3021 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1370, %3020 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3018 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %3022 = "tosa.add"(%3014, %3021) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3023 = tensor.empty() : tensor<1x32x128x80xf32>
    %3024 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3022 : tensor<1x32x80x128xf32>) outs(%3023 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %3025 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1371 = tensor.extract_slice %3010[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1372 = tensor.insert_slice %extracted_slice_1371 into %3025[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %3026 = "tosa.reshape"(%inserted_slice_1372) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %3027 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1373 = tensor.extract_slice %3024[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1374 = tensor.insert_slice %extracted_slice_1373 into %3027[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %3028 = "tosa.reshape"(%inserted_slice_1374) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %3029 = tensor.empty() : tensor<32x80x80xf32>
    %3030 = linalg.batch_matmul ins(%3026, %3028 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%3029 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %3031 = "tosa.reshape"(%3030) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1375 = arith.constant 11.3137083 : f32
    %3032 = tensor.empty() : tensor<1x32x80x80xf32>
    %3033 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3031 : tensor<1x32x80x80xf32>) outs(%3032 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.divf %in, %cst_1375 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %3034 = "tosa.add"(%3033, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %3035 = tensor.empty() : tensor<1x32x80x1xf32>
    %3036 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3035 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %3037 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3034 : tensor<1x32x80x80xf32>) outs(%3035 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.maxf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %3038 = tensor.empty() : tensor<1x32x80x80xf32>
    %3039 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3034, %3037 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%3038 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.subf %in, %in_1777 : f32
      %5231 = math.exp %5230 : f32
      linalg.yield %5231 : f32
    } -> tensor<1x32x80x80xf32>
    %3040 = tensor.empty() : tensor<1x32x80x1xf32>
    %3041 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3040 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %3042 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3039 : tensor<1x32x80x80xf32>) outs(%3041 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.addf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %3043 = tensor.empty() : tensor<1x32x80x80xf32>
    %3044 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3039, %3042 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%3043 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.divf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %3045 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1376 = tensor.extract_slice %3044[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1377 = tensor.insert_slice %extracted_slice_1376 into %3045[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %3046 = "tosa.reshape"(%inserted_slice_1377) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %3047 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1378 = tensor.extract_slice %2984[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1379 = tensor.insert_slice %extracted_slice_1378 into %3047[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %3048 = "tosa.reshape"(%inserted_slice_1379) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %3049 = tensor.empty() : tensor<32x80x128xf32>
    %3050 = linalg.batch_matmul ins(%3046, %3048 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%3049 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %3051 = "tosa.reshape"(%3050) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3052 = tensor.empty() : tensor<1x80x32x128xf32>
    %3053 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3051 : tensor<1x32x80x128xf32>) outs(%3052 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1380 = tensor.extract_slice %3053[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %3054 = "tosa.reshape"(%extracted_slice_1380) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %3055 = tensor.empty() : tensor<4096x4096xf32>
    %3056 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_324 : tensor<4096x4096xf32>) outs(%3055 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3057 = "tosa.reshape"(%3054) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3058 = tensor.empty() : tensor<80x4096xf32>
    %3059 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3058 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %3060 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3057, %3056 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%3059 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %3061 = "tosa.reshape"(%3060) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3062 = "tosa.add"(%2940, %3061) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %3063 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1381 = arith.constant 2 : i32
    %3064 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3062 : tensor<1x80x4096xf32>) outs(%3063 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1381 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1382 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %3065 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%3064 : tensor<1x80x4096xf32>) outs(%cst_1382 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1383 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %3066 = "tosa.add"(%3065, %cst_1383) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %3067 = tensor.empty() : tensor<1x80x1xf32>
    %3068 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3066 : tensor<1x80x1xf32>) outs(%3067 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %3069 = tensor.empty() : tensor<1x80x4096xf32>
    %3070 = tensor.empty() : tensor<1x80x4096xf32>
    %3071 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3068 : tensor<1x80x1xf32>) outs(%3070 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3072 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3062, %3071 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3069 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %3073 = tensor.empty() : tensor<1x80x4096xf32>
    %3074 = tensor.empty() : tensor<1x80x4096xf32>
    %3075 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_36 : tensor<4096xf32>) outs(%3074 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3076 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3075, %3072 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3073 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %3077 = tensor.empty() : tensor<4096x11008xf32>
    %3078 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_326 : tensor<11008x4096xf32>) outs(%3077 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3079 = "tosa.reshape"(%3076) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3080 = tensor.empty() : tensor<80x11008xf32>
    %3081 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3080 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %3082 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3079, %3078 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%3081 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %3083 = "tosa.reshape"(%3082) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %3084 = tensor.empty() : tensor<1x80x11008xf32>
    %3085 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3083 : tensor<1x80x11008xf32>) outs(%3084 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      %5231 = math.exp %5230 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5232 = arith.addf %cst_1777, %5231 : f32
      %5233 = arith.divf %in, %5232 : f32
      linalg.yield %5233 : f32
    } -> tensor<1x80x11008xf32>
    %3086 = tensor.empty() : tensor<4096x11008xf32>
    %3087 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_328 : tensor<11008x4096xf32>) outs(%3086 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3088 = "tosa.reshape"(%3076) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3089 = tensor.empty() : tensor<80x11008xf32>
    %3090 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3089 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %3091 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3088, %3087 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%3090 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %3092 = "tosa.reshape"(%3091) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %3093 = tensor.empty() : tensor<1x80x11008xf32>
    %3094 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3085, %3092 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%3093 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x11008xf32>
    %3095 = tensor.empty() : tensor<11008x4096xf32>
    %3096 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_330 : tensor<4096x11008xf32>) outs(%3095 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %3097 = "tosa.reshape"(%3094) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %3098 = tensor.empty() : tensor<80x4096xf32>
    %3099 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3098 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %3100 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3097, %3096 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%3099 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %3101 = "tosa.reshape"(%3100) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3102 = "tosa.add"(%3062, %3101) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %3103 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1384 = arith.constant 2 : i32
    %3104 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3102 : tensor<1x80x4096xf32>) outs(%3103 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1384 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1385 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %3105 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%3104 : tensor<1x80x4096xf32>) outs(%cst_1385 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1386 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %3106 = "tosa.add"(%3105, %cst_1386) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %3107 = tensor.empty() : tensor<1x80x1xf32>
    %3108 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3106 : tensor<1x80x1xf32>) outs(%3107 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %3109 = tensor.empty() : tensor<1x80x4096xf32>
    %3110 = tensor.empty() : tensor<1x80x4096xf32>
    %3111 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3108 : tensor<1x80x1xf32>) outs(%3110 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3112 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3102, %3111 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3109 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %3113 = tensor.empty() : tensor<1x80x4096xf32>
    %3114 = tensor.empty() : tensor<1x80x4096xf32>
    %3115 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_37 : tensor<4096xf32>) outs(%3114 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3116 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3115, %3112 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3113 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %3117 = tensor.empty() : tensor<4096x4096xf32>
    %3118 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_332 : tensor<4096x4096xf32>) outs(%3117 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3119 = "tosa.reshape"(%3116) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3120 = tensor.empty() : tensor<80x4096xf32>
    %3121 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3120 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %3122 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3119, %3118 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%3121 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %3123 = "tosa.reshape"(%3122) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3124 = tensor.empty() : tensor<4096x4096xf32>
    %3125 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_334 : tensor<4096x4096xf32>) outs(%3124 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3126 = "tosa.reshape"(%3116) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3127 = tensor.empty() : tensor<80x4096xf32>
    %3128 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3127 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %3129 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3126, %3125 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%3128 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %3130 = "tosa.reshape"(%3129) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3131 = tensor.empty() : tensor<4096x4096xf32>
    %3132 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_336 : tensor<4096x4096xf32>) outs(%3131 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3133 = "tosa.reshape"(%3116) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3134 = tensor.empty() : tensor<80x4096xf32>
    %3135 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3134 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %3136 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3133, %3132 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%3135 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %3137 = "tosa.reshape"(%3136) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3138 = "tosa.reshape"(%3123) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3139 = tensor.empty() : tensor<1x32x80x128xf32>
    %3140 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3138 : tensor<1x80x32x128xf32>) outs(%3139 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3141 = "tosa.reshape"(%3130) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3142 = tensor.empty() : tensor<1x32x80x128xf32>
    %3143 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3141 : tensor<1x80x32x128xf32>) outs(%3142 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3144 = "tosa.reshape"(%3137) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3145 = tensor.empty() : tensor<1x32x80x128xf32>
    %3146 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3144 : tensor<1x80x32x128xf32>) outs(%3145 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1387 = tensor.extract_slice %expanded_592[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1388 = tensor.extract_slice %extracted_slice_1387[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1389 = tensor.extract_slice %extracted_slice_1388[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1390 = tensor.extract_slice %expanded_594[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1391 = tensor.extract_slice %extracted_slice_1390[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1392 = tensor.extract_slice %extracted_slice_1391[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %3147 = tensor.empty() : tensor<1x80x128xf32>
    %3148 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1389 : tensor<1x1x80x128xf32>) outs(%3147 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %3149 = tensor.empty() : tensor<80x128xf32>
    %3150 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%3148 : tensor<1x80x128xf32>) outs(%3149 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %3151 = tensor.empty() : tensor<1x80x128xf32>
    %3152 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1392 : tensor<1x1x80x128xf32>) outs(%3151 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %3153 = tensor.empty() : tensor<80x128xf32>
    %3154 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%3152 : tensor<1x80x128xf32>) outs(%3153 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %3155 = tensor.empty() : tensor<1x80x128xf32>
    %3156 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%3155 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %3150[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %3157 = "tosa.reshape"(%3156) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %3158 = tensor.empty() : tensor<1x80x128xf32>
    %3159 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%3158 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %3154[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %3160 = "tosa.reshape"(%3159) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %3161 = tensor.empty() : tensor<1x32x80x128xf32>
    %3162 = tensor.empty() : tensor<1x32x80x128xf32>
    %3163 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3157 : tensor<1x1x80x128xf32>) outs(%3162 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3164 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3140, %3163 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3161 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1393 = tensor.extract_slice %3140[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1394 = tensor.extract_slice %3140[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %3165 = tensor.empty() : tensor<1x32x80x64xf32>
    %3166 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1394 : tensor<1x32x80x64xf32>) outs(%3165 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %3167 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1395 = tensor.insert_slice %3166 into %3167[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1396 = tensor.insert_slice %extracted_slice_1393 into %inserted_slice_1395[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %3168 = tensor.empty() : tensor<1x32x80x128xf32>
    %3169 = tensor.empty() : tensor<1x32x80x128xf32>
    %3170 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3160 : tensor<1x1x80x128xf32>) outs(%3169 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3171 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1396, %3170 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3168 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %3172 = "tosa.add"(%3164, %3171) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3173 = tensor.empty() : tensor<1x32x80x128xf32>
    %3174 = tensor.empty() : tensor<1x32x80x128xf32>
    %3175 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3157 : tensor<1x1x80x128xf32>) outs(%3174 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3176 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3143, %3175 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3173 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1397 = tensor.extract_slice %3143[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1398 = tensor.extract_slice %3143[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %3177 = tensor.empty() : tensor<1x32x80x64xf32>
    %3178 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1398 : tensor<1x32x80x64xf32>) outs(%3177 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %3179 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1399 = tensor.insert_slice %3178 into %3179[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1400 = tensor.insert_slice %extracted_slice_1397 into %inserted_slice_1399[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %3180 = tensor.empty() : tensor<1x32x80x128xf32>
    %3181 = tensor.empty() : tensor<1x32x80x128xf32>
    %3182 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3160 : tensor<1x1x80x128xf32>) outs(%3181 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3183 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1400, %3182 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3180 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %3184 = "tosa.add"(%3176, %3183) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3185 = tensor.empty() : tensor<1x32x128x80xf32>
    %3186 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3184 : tensor<1x32x80x128xf32>) outs(%3185 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %3187 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1401 = tensor.extract_slice %3172[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1402 = tensor.insert_slice %extracted_slice_1401 into %3187[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %3188 = "tosa.reshape"(%inserted_slice_1402) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %3189 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1403 = tensor.extract_slice %3186[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1404 = tensor.insert_slice %extracted_slice_1403 into %3189[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %3190 = "tosa.reshape"(%inserted_slice_1404) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %3191 = tensor.empty() : tensor<32x80x80xf32>
    %3192 = linalg.batch_matmul ins(%3188, %3190 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%3191 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %3193 = "tosa.reshape"(%3192) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1405 = arith.constant 11.3137083 : f32
    %3194 = tensor.empty() : tensor<1x32x80x80xf32>
    %3195 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3193 : tensor<1x32x80x80xf32>) outs(%3194 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.divf %in, %cst_1405 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %3196 = "tosa.add"(%3195, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %3197 = tensor.empty() : tensor<1x32x80x1xf32>
    %3198 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3197 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %3199 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3196 : tensor<1x32x80x80xf32>) outs(%3197 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.maxf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %3200 = tensor.empty() : tensor<1x32x80x80xf32>
    %3201 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3196, %3199 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%3200 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.subf %in, %in_1777 : f32
      %5231 = math.exp %5230 : f32
      linalg.yield %5231 : f32
    } -> tensor<1x32x80x80xf32>
    %3202 = tensor.empty() : tensor<1x32x80x1xf32>
    %3203 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3202 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %3204 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3201 : tensor<1x32x80x80xf32>) outs(%3203 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.addf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %3205 = tensor.empty() : tensor<1x32x80x80xf32>
    %3206 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3201, %3204 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%3205 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.divf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %3207 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1406 = tensor.extract_slice %3206[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1407 = tensor.insert_slice %extracted_slice_1406 into %3207[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %3208 = "tosa.reshape"(%inserted_slice_1407) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %3209 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1408 = tensor.extract_slice %3146[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1409 = tensor.insert_slice %extracted_slice_1408 into %3209[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %3210 = "tosa.reshape"(%inserted_slice_1409) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %3211 = tensor.empty() : tensor<32x80x128xf32>
    %3212 = linalg.batch_matmul ins(%3208, %3210 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%3211 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %3213 = "tosa.reshape"(%3212) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3214 = tensor.empty() : tensor<1x80x32x128xf32>
    %3215 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3213 : tensor<1x32x80x128xf32>) outs(%3214 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1410 = tensor.extract_slice %3215[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %3216 = "tosa.reshape"(%extracted_slice_1410) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %3217 = tensor.empty() : tensor<4096x4096xf32>
    %3218 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_338 : tensor<4096x4096xf32>) outs(%3217 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3219 = "tosa.reshape"(%3216) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3220 = tensor.empty() : tensor<80x4096xf32>
    %3221 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3220 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %3222 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3219, %3218 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%3221 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %3223 = "tosa.reshape"(%3222) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3224 = "tosa.add"(%3102, %3223) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %3225 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1411 = arith.constant 2 : i32
    %3226 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3224 : tensor<1x80x4096xf32>) outs(%3225 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1411 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1412 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %3227 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%3226 : tensor<1x80x4096xf32>) outs(%cst_1412 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1413 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %3228 = "tosa.add"(%3227, %cst_1413) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %3229 = tensor.empty() : tensor<1x80x1xf32>
    %3230 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3228 : tensor<1x80x1xf32>) outs(%3229 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %3231 = tensor.empty() : tensor<1x80x4096xf32>
    %3232 = tensor.empty() : tensor<1x80x4096xf32>
    %3233 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3230 : tensor<1x80x1xf32>) outs(%3232 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3234 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3224, %3233 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3231 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %3235 = tensor.empty() : tensor<1x80x4096xf32>
    %3236 = tensor.empty() : tensor<1x80x4096xf32>
    %3237 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_38 : tensor<4096xf32>) outs(%3236 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3238 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3237, %3234 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3235 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %3239 = tensor.empty() : tensor<4096x11008xf32>
    %3240 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_340 : tensor<11008x4096xf32>) outs(%3239 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3241 = "tosa.reshape"(%3238) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3242 = tensor.empty() : tensor<80x11008xf32>
    %3243 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3242 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %3244 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3241, %3240 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%3243 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %3245 = "tosa.reshape"(%3244) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %3246 = tensor.empty() : tensor<1x80x11008xf32>
    %3247 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3245 : tensor<1x80x11008xf32>) outs(%3246 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      %5231 = math.exp %5230 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5232 = arith.addf %cst_1777, %5231 : f32
      %5233 = arith.divf %in, %5232 : f32
      linalg.yield %5233 : f32
    } -> tensor<1x80x11008xf32>
    %3248 = tensor.empty() : tensor<4096x11008xf32>
    %3249 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_342 : tensor<11008x4096xf32>) outs(%3248 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3250 = "tosa.reshape"(%3238) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3251 = tensor.empty() : tensor<80x11008xf32>
    %3252 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3251 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %3253 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3250, %3249 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%3252 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %3254 = "tosa.reshape"(%3253) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %3255 = tensor.empty() : tensor<1x80x11008xf32>
    %3256 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3247, %3254 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%3255 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x11008xf32>
    %3257 = tensor.empty() : tensor<11008x4096xf32>
    %3258 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_344 : tensor<4096x11008xf32>) outs(%3257 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %3259 = "tosa.reshape"(%3256) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %3260 = tensor.empty() : tensor<80x4096xf32>
    %3261 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3260 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %3262 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3259, %3258 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%3261 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %3263 = "tosa.reshape"(%3262) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3264 = "tosa.add"(%3224, %3263) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %3265 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1414 = arith.constant 2 : i32
    %3266 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3264 : tensor<1x80x4096xf32>) outs(%3265 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1414 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1415 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %3267 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%3266 : tensor<1x80x4096xf32>) outs(%cst_1415 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1416 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %3268 = "tosa.add"(%3267, %cst_1416) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %3269 = tensor.empty() : tensor<1x80x1xf32>
    %3270 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3268 : tensor<1x80x1xf32>) outs(%3269 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %3271 = tensor.empty() : tensor<1x80x4096xf32>
    %3272 = tensor.empty() : tensor<1x80x4096xf32>
    %3273 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3270 : tensor<1x80x1xf32>) outs(%3272 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3274 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3264, %3273 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3271 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %3275 = tensor.empty() : tensor<1x80x4096xf32>
    %3276 = tensor.empty() : tensor<1x80x4096xf32>
    %3277 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_39 : tensor<4096xf32>) outs(%3276 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3278 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3277, %3274 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3275 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %3279 = tensor.empty() : tensor<4096x4096xf32>
    %3280 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_346 : tensor<4096x4096xf32>) outs(%3279 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3281 = "tosa.reshape"(%3278) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3282 = tensor.empty() : tensor<80x4096xf32>
    %3283 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3282 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %3284 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3281, %3280 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%3283 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %3285 = "tosa.reshape"(%3284) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3286 = tensor.empty() : tensor<4096x4096xf32>
    %3287 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_348 : tensor<4096x4096xf32>) outs(%3286 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3288 = "tosa.reshape"(%3278) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3289 = tensor.empty() : tensor<80x4096xf32>
    %3290 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3289 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %3291 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3288, %3287 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%3290 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %3292 = "tosa.reshape"(%3291) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3293 = tensor.empty() : tensor<4096x4096xf32>
    %3294 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_350 : tensor<4096x4096xf32>) outs(%3293 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3295 = "tosa.reshape"(%3278) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3296 = tensor.empty() : tensor<80x4096xf32>
    %3297 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3296 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %3298 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3295, %3294 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%3297 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %3299 = "tosa.reshape"(%3298) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3300 = "tosa.reshape"(%3285) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3301 = tensor.empty() : tensor<1x32x80x128xf32>
    %3302 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3300 : tensor<1x80x32x128xf32>) outs(%3301 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3303 = "tosa.reshape"(%3292) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3304 = tensor.empty() : tensor<1x32x80x128xf32>
    %3305 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3303 : tensor<1x80x32x128xf32>) outs(%3304 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3306 = "tosa.reshape"(%3299) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3307 = tensor.empty() : tensor<1x32x80x128xf32>
    %3308 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3306 : tensor<1x80x32x128xf32>) outs(%3307 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1417 = tensor.extract_slice %expanded_596[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1418 = tensor.extract_slice %extracted_slice_1417[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1419 = tensor.extract_slice %extracted_slice_1418[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1420 = tensor.extract_slice %expanded_598[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1421 = tensor.extract_slice %extracted_slice_1420[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1422 = tensor.extract_slice %extracted_slice_1421[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %3309 = tensor.empty() : tensor<1x80x128xf32>
    %3310 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1419 : tensor<1x1x80x128xf32>) outs(%3309 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %3311 = tensor.empty() : tensor<80x128xf32>
    %3312 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%3310 : tensor<1x80x128xf32>) outs(%3311 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %3313 = tensor.empty() : tensor<1x80x128xf32>
    %3314 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1422 : tensor<1x1x80x128xf32>) outs(%3313 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %3315 = tensor.empty() : tensor<80x128xf32>
    %3316 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%3314 : tensor<1x80x128xf32>) outs(%3315 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %3317 = tensor.empty() : tensor<1x80x128xf32>
    %3318 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%3317 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %3312[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %3319 = "tosa.reshape"(%3318) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %3320 = tensor.empty() : tensor<1x80x128xf32>
    %3321 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%3320 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %3316[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %3322 = "tosa.reshape"(%3321) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %3323 = tensor.empty() : tensor<1x32x80x128xf32>
    %3324 = tensor.empty() : tensor<1x32x80x128xf32>
    %3325 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3319 : tensor<1x1x80x128xf32>) outs(%3324 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3326 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3302, %3325 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3323 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1423 = tensor.extract_slice %3302[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1424 = tensor.extract_slice %3302[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %3327 = tensor.empty() : tensor<1x32x80x64xf32>
    %3328 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1424 : tensor<1x32x80x64xf32>) outs(%3327 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %3329 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1425 = tensor.insert_slice %3328 into %3329[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1426 = tensor.insert_slice %extracted_slice_1423 into %inserted_slice_1425[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %3330 = tensor.empty() : tensor<1x32x80x128xf32>
    %3331 = tensor.empty() : tensor<1x32x80x128xf32>
    %3332 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3322 : tensor<1x1x80x128xf32>) outs(%3331 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3333 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1426, %3332 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3330 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %3334 = "tosa.add"(%3326, %3333) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3335 = tensor.empty() : tensor<1x32x80x128xf32>
    %3336 = tensor.empty() : tensor<1x32x80x128xf32>
    %3337 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3319 : tensor<1x1x80x128xf32>) outs(%3336 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3338 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3305, %3337 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3335 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1427 = tensor.extract_slice %3305[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1428 = tensor.extract_slice %3305[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %3339 = tensor.empty() : tensor<1x32x80x64xf32>
    %3340 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1428 : tensor<1x32x80x64xf32>) outs(%3339 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %3341 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1429 = tensor.insert_slice %3340 into %3341[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1430 = tensor.insert_slice %extracted_slice_1427 into %inserted_slice_1429[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %3342 = tensor.empty() : tensor<1x32x80x128xf32>
    %3343 = tensor.empty() : tensor<1x32x80x128xf32>
    %3344 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3322 : tensor<1x1x80x128xf32>) outs(%3343 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3345 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1430, %3344 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3342 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %3346 = "tosa.add"(%3338, %3345) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3347 = tensor.empty() : tensor<1x32x128x80xf32>
    %3348 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3346 : tensor<1x32x80x128xf32>) outs(%3347 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %3349 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1431 = tensor.extract_slice %3334[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1432 = tensor.insert_slice %extracted_slice_1431 into %3349[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %3350 = "tosa.reshape"(%inserted_slice_1432) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %3351 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1433 = tensor.extract_slice %3348[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1434 = tensor.insert_slice %extracted_slice_1433 into %3351[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %3352 = "tosa.reshape"(%inserted_slice_1434) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %3353 = tensor.empty() : tensor<32x80x80xf32>
    %3354 = linalg.batch_matmul ins(%3350, %3352 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%3353 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %3355 = "tosa.reshape"(%3354) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1435 = arith.constant 11.3137083 : f32
    %3356 = tensor.empty() : tensor<1x32x80x80xf32>
    %3357 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3355 : tensor<1x32x80x80xf32>) outs(%3356 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.divf %in, %cst_1435 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %3358 = "tosa.add"(%3357, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %3359 = tensor.empty() : tensor<1x32x80x1xf32>
    %3360 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3359 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %3361 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3358 : tensor<1x32x80x80xf32>) outs(%3359 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.maxf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %3362 = tensor.empty() : tensor<1x32x80x80xf32>
    %3363 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3358, %3361 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%3362 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.subf %in, %in_1777 : f32
      %5231 = math.exp %5230 : f32
      linalg.yield %5231 : f32
    } -> tensor<1x32x80x80xf32>
    %3364 = tensor.empty() : tensor<1x32x80x1xf32>
    %3365 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3364 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %3366 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3363 : tensor<1x32x80x80xf32>) outs(%3365 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.addf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %3367 = tensor.empty() : tensor<1x32x80x80xf32>
    %3368 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3363, %3366 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%3367 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.divf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %3369 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1436 = tensor.extract_slice %3368[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1437 = tensor.insert_slice %extracted_slice_1436 into %3369[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %3370 = "tosa.reshape"(%inserted_slice_1437) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %3371 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1438 = tensor.extract_slice %3308[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1439 = tensor.insert_slice %extracted_slice_1438 into %3371[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %3372 = "tosa.reshape"(%inserted_slice_1439) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %3373 = tensor.empty() : tensor<32x80x128xf32>
    %3374 = linalg.batch_matmul ins(%3370, %3372 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%3373 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %3375 = "tosa.reshape"(%3374) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3376 = tensor.empty() : tensor<1x80x32x128xf32>
    %3377 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3375 : tensor<1x32x80x128xf32>) outs(%3376 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1440 = tensor.extract_slice %3377[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %3378 = "tosa.reshape"(%extracted_slice_1440) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %3379 = tensor.empty() : tensor<4096x4096xf32>
    %3380 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_352 : tensor<4096x4096xf32>) outs(%3379 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3381 = "tosa.reshape"(%3378) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3382 = tensor.empty() : tensor<80x4096xf32>
    %3383 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3382 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %3384 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3381, %3380 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%3383 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %3385 = "tosa.reshape"(%3384) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3386 = "tosa.add"(%3264, %3385) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %3387 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1441 = arith.constant 2 : i32
    %3388 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3386 : tensor<1x80x4096xf32>) outs(%3387 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1441 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1442 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %3389 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%3388 : tensor<1x80x4096xf32>) outs(%cst_1442 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1443 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %3390 = "tosa.add"(%3389, %cst_1443) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %3391 = tensor.empty() : tensor<1x80x1xf32>
    %3392 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3390 : tensor<1x80x1xf32>) outs(%3391 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %3393 = tensor.empty() : tensor<1x80x4096xf32>
    %3394 = tensor.empty() : tensor<1x80x4096xf32>
    %3395 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3392 : tensor<1x80x1xf32>) outs(%3394 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3396 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3386, %3395 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3393 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %3397 = tensor.empty() : tensor<1x80x4096xf32>
    %3398 = tensor.empty() : tensor<1x80x4096xf32>
    %3399 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_40 : tensor<4096xf32>) outs(%3398 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3400 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3399, %3396 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3397 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %3401 = tensor.empty() : tensor<4096x11008xf32>
    %3402 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_354 : tensor<11008x4096xf32>) outs(%3401 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3403 = "tosa.reshape"(%3400) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3404 = tensor.empty() : tensor<80x11008xf32>
    %3405 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3404 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %3406 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3403, %3402 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%3405 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %3407 = "tosa.reshape"(%3406) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %3408 = tensor.empty() : tensor<1x80x11008xf32>
    %3409 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3407 : tensor<1x80x11008xf32>) outs(%3408 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      %5231 = math.exp %5230 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5232 = arith.addf %cst_1777, %5231 : f32
      %5233 = arith.divf %in, %5232 : f32
      linalg.yield %5233 : f32
    } -> tensor<1x80x11008xf32>
    %3410 = tensor.empty() : tensor<4096x11008xf32>
    %3411 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_356 : tensor<11008x4096xf32>) outs(%3410 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3412 = "tosa.reshape"(%3400) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3413 = tensor.empty() : tensor<80x11008xf32>
    %3414 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3413 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %3415 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3412, %3411 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%3414 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %3416 = "tosa.reshape"(%3415) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %3417 = tensor.empty() : tensor<1x80x11008xf32>
    %3418 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3409, %3416 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%3417 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x11008xf32>
    %3419 = tensor.empty() : tensor<11008x4096xf32>
    %3420 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_358 : tensor<4096x11008xf32>) outs(%3419 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %3421 = "tosa.reshape"(%3418) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %3422 = tensor.empty() : tensor<80x4096xf32>
    %3423 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3422 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %3424 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3421, %3420 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%3423 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %3425 = "tosa.reshape"(%3424) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3426 = "tosa.add"(%3386, %3425) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %3427 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1444 = arith.constant 2 : i32
    %3428 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3426 : tensor<1x80x4096xf32>) outs(%3427 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1444 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1445 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %3429 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%3428 : tensor<1x80x4096xf32>) outs(%cst_1445 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1446 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %3430 = "tosa.add"(%3429, %cst_1446) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %3431 = tensor.empty() : tensor<1x80x1xf32>
    %3432 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3430 : tensor<1x80x1xf32>) outs(%3431 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %3433 = tensor.empty() : tensor<1x80x4096xf32>
    %3434 = tensor.empty() : tensor<1x80x4096xf32>
    %3435 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3432 : tensor<1x80x1xf32>) outs(%3434 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3436 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3426, %3435 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3433 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %3437 = tensor.empty() : tensor<1x80x4096xf32>
    %3438 = tensor.empty() : tensor<1x80x4096xf32>
    %3439 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_41 : tensor<4096xf32>) outs(%3438 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3440 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3439, %3436 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3437 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %3441 = tensor.empty() : tensor<4096x4096xf32>
    %3442 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_360 : tensor<4096x4096xf32>) outs(%3441 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3443 = "tosa.reshape"(%3440) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3444 = tensor.empty() : tensor<80x4096xf32>
    %3445 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3444 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %3446 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3443, %3442 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%3445 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %3447 = "tosa.reshape"(%3446) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3448 = tensor.empty() : tensor<4096x4096xf32>
    %3449 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_362 : tensor<4096x4096xf32>) outs(%3448 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3450 = "tosa.reshape"(%3440) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3451 = tensor.empty() : tensor<80x4096xf32>
    %3452 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3451 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %3453 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3450, %3449 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%3452 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %3454 = "tosa.reshape"(%3453) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3455 = tensor.empty() : tensor<4096x4096xf32>
    %3456 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_364 : tensor<4096x4096xf32>) outs(%3455 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3457 = "tosa.reshape"(%3440) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3458 = tensor.empty() : tensor<80x4096xf32>
    %3459 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3458 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %3460 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3457, %3456 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%3459 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %3461 = "tosa.reshape"(%3460) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3462 = "tosa.reshape"(%3447) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3463 = tensor.empty() : tensor<1x32x80x128xf32>
    %3464 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3462 : tensor<1x80x32x128xf32>) outs(%3463 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3465 = "tosa.reshape"(%3454) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3466 = tensor.empty() : tensor<1x32x80x128xf32>
    %3467 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3465 : tensor<1x80x32x128xf32>) outs(%3466 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3468 = "tosa.reshape"(%3461) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3469 = tensor.empty() : tensor<1x32x80x128xf32>
    %3470 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3468 : tensor<1x80x32x128xf32>) outs(%3469 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1447 = tensor.extract_slice %expanded_600[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1448 = tensor.extract_slice %extracted_slice_1447[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1449 = tensor.extract_slice %extracted_slice_1448[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1450 = tensor.extract_slice %expanded_602[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1451 = tensor.extract_slice %extracted_slice_1450[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1452 = tensor.extract_slice %extracted_slice_1451[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %3471 = tensor.empty() : tensor<1x80x128xf32>
    %3472 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1449 : tensor<1x1x80x128xf32>) outs(%3471 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %3473 = tensor.empty() : tensor<80x128xf32>
    %3474 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%3472 : tensor<1x80x128xf32>) outs(%3473 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %3475 = tensor.empty() : tensor<1x80x128xf32>
    %3476 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1452 : tensor<1x1x80x128xf32>) outs(%3475 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %3477 = tensor.empty() : tensor<80x128xf32>
    %3478 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%3476 : tensor<1x80x128xf32>) outs(%3477 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %3479 = tensor.empty() : tensor<1x80x128xf32>
    %3480 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%3479 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %3474[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %3481 = "tosa.reshape"(%3480) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %3482 = tensor.empty() : tensor<1x80x128xf32>
    %3483 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%3482 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %3478[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %3484 = "tosa.reshape"(%3483) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %3485 = tensor.empty() : tensor<1x32x80x128xf32>
    %3486 = tensor.empty() : tensor<1x32x80x128xf32>
    %3487 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3481 : tensor<1x1x80x128xf32>) outs(%3486 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3488 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3464, %3487 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3485 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1453 = tensor.extract_slice %3464[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1454 = tensor.extract_slice %3464[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %3489 = tensor.empty() : tensor<1x32x80x64xf32>
    %3490 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1454 : tensor<1x32x80x64xf32>) outs(%3489 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %3491 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1455 = tensor.insert_slice %3490 into %3491[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1456 = tensor.insert_slice %extracted_slice_1453 into %inserted_slice_1455[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %3492 = tensor.empty() : tensor<1x32x80x128xf32>
    %3493 = tensor.empty() : tensor<1x32x80x128xf32>
    %3494 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3484 : tensor<1x1x80x128xf32>) outs(%3493 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3495 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1456, %3494 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3492 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %3496 = "tosa.add"(%3488, %3495) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3497 = tensor.empty() : tensor<1x32x80x128xf32>
    %3498 = tensor.empty() : tensor<1x32x80x128xf32>
    %3499 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3481 : tensor<1x1x80x128xf32>) outs(%3498 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3500 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3467, %3499 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3497 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1457 = tensor.extract_slice %3467[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1458 = tensor.extract_slice %3467[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %3501 = tensor.empty() : tensor<1x32x80x64xf32>
    %3502 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1458 : tensor<1x32x80x64xf32>) outs(%3501 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %3503 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1459 = tensor.insert_slice %3502 into %3503[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1460 = tensor.insert_slice %extracted_slice_1457 into %inserted_slice_1459[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %3504 = tensor.empty() : tensor<1x32x80x128xf32>
    %3505 = tensor.empty() : tensor<1x32x80x128xf32>
    %3506 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3484 : tensor<1x1x80x128xf32>) outs(%3505 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3507 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1460, %3506 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3504 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %3508 = "tosa.add"(%3500, %3507) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3509 = tensor.empty() : tensor<1x32x128x80xf32>
    %3510 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3508 : tensor<1x32x80x128xf32>) outs(%3509 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %3511 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1461 = tensor.extract_slice %3496[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1462 = tensor.insert_slice %extracted_slice_1461 into %3511[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %3512 = "tosa.reshape"(%inserted_slice_1462) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %3513 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1463 = tensor.extract_slice %3510[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1464 = tensor.insert_slice %extracted_slice_1463 into %3513[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %3514 = "tosa.reshape"(%inserted_slice_1464) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %3515 = tensor.empty() : tensor<32x80x80xf32>
    %3516 = linalg.batch_matmul ins(%3512, %3514 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%3515 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %3517 = "tosa.reshape"(%3516) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1465 = arith.constant 11.3137083 : f32
    %3518 = tensor.empty() : tensor<1x32x80x80xf32>
    %3519 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3517 : tensor<1x32x80x80xf32>) outs(%3518 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.divf %in, %cst_1465 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %3520 = "tosa.add"(%3519, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %3521 = tensor.empty() : tensor<1x32x80x1xf32>
    %3522 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3521 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %3523 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3520 : tensor<1x32x80x80xf32>) outs(%3521 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.maxf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %3524 = tensor.empty() : tensor<1x32x80x80xf32>
    %3525 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3520, %3523 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%3524 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.subf %in, %in_1777 : f32
      %5231 = math.exp %5230 : f32
      linalg.yield %5231 : f32
    } -> tensor<1x32x80x80xf32>
    %3526 = tensor.empty() : tensor<1x32x80x1xf32>
    %3527 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3526 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %3528 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3525 : tensor<1x32x80x80xf32>) outs(%3527 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.addf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %3529 = tensor.empty() : tensor<1x32x80x80xf32>
    %3530 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3525, %3528 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%3529 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.divf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %3531 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1466 = tensor.extract_slice %3530[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1467 = tensor.insert_slice %extracted_slice_1466 into %3531[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %3532 = "tosa.reshape"(%inserted_slice_1467) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %3533 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1468 = tensor.extract_slice %3470[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1469 = tensor.insert_slice %extracted_slice_1468 into %3533[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %3534 = "tosa.reshape"(%inserted_slice_1469) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %3535 = tensor.empty() : tensor<32x80x128xf32>
    %3536 = linalg.batch_matmul ins(%3532, %3534 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%3535 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %3537 = "tosa.reshape"(%3536) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3538 = tensor.empty() : tensor<1x80x32x128xf32>
    %3539 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3537 : tensor<1x32x80x128xf32>) outs(%3538 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1470 = tensor.extract_slice %3539[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %3540 = "tosa.reshape"(%extracted_slice_1470) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %3541 = tensor.empty() : tensor<4096x4096xf32>
    %3542 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_366 : tensor<4096x4096xf32>) outs(%3541 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3543 = "tosa.reshape"(%3540) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3544 = tensor.empty() : tensor<80x4096xf32>
    %3545 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3544 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %3546 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3543, %3542 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%3545 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %3547 = "tosa.reshape"(%3546) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3548 = "tosa.add"(%3426, %3547) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %3549 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1471 = arith.constant 2 : i32
    %3550 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3548 : tensor<1x80x4096xf32>) outs(%3549 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1471 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1472 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %3551 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%3550 : tensor<1x80x4096xf32>) outs(%cst_1472 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1473 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %3552 = "tosa.add"(%3551, %cst_1473) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %3553 = tensor.empty() : tensor<1x80x1xf32>
    %3554 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3552 : tensor<1x80x1xf32>) outs(%3553 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %3555 = tensor.empty() : tensor<1x80x4096xf32>
    %3556 = tensor.empty() : tensor<1x80x4096xf32>
    %3557 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3554 : tensor<1x80x1xf32>) outs(%3556 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3558 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3548, %3557 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3555 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %3559 = tensor.empty() : tensor<1x80x4096xf32>
    %3560 = tensor.empty() : tensor<1x80x4096xf32>
    %3561 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_42 : tensor<4096xf32>) outs(%3560 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3562 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3561, %3558 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3559 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %3563 = tensor.empty() : tensor<4096x11008xf32>
    %3564 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_368 : tensor<11008x4096xf32>) outs(%3563 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3565 = "tosa.reshape"(%3562) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3566 = tensor.empty() : tensor<80x11008xf32>
    %3567 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3566 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %3568 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3565, %3564 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%3567 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %3569 = "tosa.reshape"(%3568) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %3570 = tensor.empty() : tensor<1x80x11008xf32>
    %3571 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3569 : tensor<1x80x11008xf32>) outs(%3570 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      %5231 = math.exp %5230 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5232 = arith.addf %cst_1777, %5231 : f32
      %5233 = arith.divf %in, %5232 : f32
      linalg.yield %5233 : f32
    } -> tensor<1x80x11008xf32>
    %3572 = tensor.empty() : tensor<4096x11008xf32>
    %3573 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_370 : tensor<11008x4096xf32>) outs(%3572 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3574 = "tosa.reshape"(%3562) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3575 = tensor.empty() : tensor<80x11008xf32>
    %3576 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3575 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %3577 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3574, %3573 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%3576 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %3578 = "tosa.reshape"(%3577) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %3579 = tensor.empty() : tensor<1x80x11008xf32>
    %3580 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3571, %3578 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%3579 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x11008xf32>
    %3581 = tensor.empty() : tensor<11008x4096xf32>
    %3582 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_372 : tensor<4096x11008xf32>) outs(%3581 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %3583 = "tosa.reshape"(%3580) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %3584 = tensor.empty() : tensor<80x4096xf32>
    %3585 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3584 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %3586 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3583, %3582 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%3585 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %3587 = "tosa.reshape"(%3586) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3588 = "tosa.add"(%3548, %3587) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %3589 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1474 = arith.constant 2 : i32
    %3590 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3588 : tensor<1x80x4096xf32>) outs(%3589 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1474 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1475 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %3591 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%3590 : tensor<1x80x4096xf32>) outs(%cst_1475 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1476 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %3592 = "tosa.add"(%3591, %cst_1476) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %3593 = tensor.empty() : tensor<1x80x1xf32>
    %3594 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3592 : tensor<1x80x1xf32>) outs(%3593 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %3595 = tensor.empty() : tensor<1x80x4096xf32>
    %3596 = tensor.empty() : tensor<1x80x4096xf32>
    %3597 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3594 : tensor<1x80x1xf32>) outs(%3596 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3598 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3588, %3597 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3595 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %3599 = tensor.empty() : tensor<1x80x4096xf32>
    %3600 = tensor.empty() : tensor<1x80x4096xf32>
    %3601 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_43 : tensor<4096xf32>) outs(%3600 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3602 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3601, %3598 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3599 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %3603 = tensor.empty() : tensor<4096x4096xf32>
    %3604 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_374 : tensor<4096x4096xf32>) outs(%3603 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3605 = "tosa.reshape"(%3602) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3606 = tensor.empty() : tensor<80x4096xf32>
    %3607 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3606 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %3608 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3605, %3604 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%3607 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %3609 = "tosa.reshape"(%3608) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3610 = tensor.empty() : tensor<4096x4096xf32>
    %3611 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_376 : tensor<4096x4096xf32>) outs(%3610 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3612 = "tosa.reshape"(%3602) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3613 = tensor.empty() : tensor<80x4096xf32>
    %3614 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3613 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %3615 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3612, %3611 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%3614 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %3616 = "tosa.reshape"(%3615) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3617 = tensor.empty() : tensor<4096x4096xf32>
    %3618 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_378 : tensor<4096x4096xf32>) outs(%3617 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3619 = "tosa.reshape"(%3602) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3620 = tensor.empty() : tensor<80x4096xf32>
    %3621 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3620 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %3622 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3619, %3618 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%3621 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %3623 = "tosa.reshape"(%3622) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3624 = "tosa.reshape"(%3609) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3625 = tensor.empty() : tensor<1x32x80x128xf32>
    %3626 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3624 : tensor<1x80x32x128xf32>) outs(%3625 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3627 = "tosa.reshape"(%3616) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3628 = tensor.empty() : tensor<1x32x80x128xf32>
    %3629 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3627 : tensor<1x80x32x128xf32>) outs(%3628 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3630 = "tosa.reshape"(%3623) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3631 = tensor.empty() : tensor<1x32x80x128xf32>
    %3632 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3630 : tensor<1x80x32x128xf32>) outs(%3631 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1477 = tensor.extract_slice %expanded_604[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1478 = tensor.extract_slice %extracted_slice_1477[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1479 = tensor.extract_slice %extracted_slice_1478[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1480 = tensor.extract_slice %expanded_606[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1481 = tensor.extract_slice %extracted_slice_1480[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1482 = tensor.extract_slice %extracted_slice_1481[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %3633 = tensor.empty() : tensor<1x80x128xf32>
    %3634 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1479 : tensor<1x1x80x128xf32>) outs(%3633 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %3635 = tensor.empty() : tensor<80x128xf32>
    %3636 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%3634 : tensor<1x80x128xf32>) outs(%3635 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %3637 = tensor.empty() : tensor<1x80x128xf32>
    %3638 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1482 : tensor<1x1x80x128xf32>) outs(%3637 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %3639 = tensor.empty() : tensor<80x128xf32>
    %3640 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%3638 : tensor<1x80x128xf32>) outs(%3639 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %3641 = tensor.empty() : tensor<1x80x128xf32>
    %3642 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%3641 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %3636[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %3643 = "tosa.reshape"(%3642) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %3644 = tensor.empty() : tensor<1x80x128xf32>
    %3645 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%3644 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %3640[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %3646 = "tosa.reshape"(%3645) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %3647 = tensor.empty() : tensor<1x32x80x128xf32>
    %3648 = tensor.empty() : tensor<1x32x80x128xf32>
    %3649 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3643 : tensor<1x1x80x128xf32>) outs(%3648 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3650 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3626, %3649 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3647 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1483 = tensor.extract_slice %3626[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1484 = tensor.extract_slice %3626[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %3651 = tensor.empty() : tensor<1x32x80x64xf32>
    %3652 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1484 : tensor<1x32x80x64xf32>) outs(%3651 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %3653 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1485 = tensor.insert_slice %3652 into %3653[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1486 = tensor.insert_slice %extracted_slice_1483 into %inserted_slice_1485[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %3654 = tensor.empty() : tensor<1x32x80x128xf32>
    %3655 = tensor.empty() : tensor<1x32x80x128xf32>
    %3656 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3646 : tensor<1x1x80x128xf32>) outs(%3655 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3657 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1486, %3656 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3654 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %3658 = "tosa.add"(%3650, %3657) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3659 = tensor.empty() : tensor<1x32x80x128xf32>
    %3660 = tensor.empty() : tensor<1x32x80x128xf32>
    %3661 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3643 : tensor<1x1x80x128xf32>) outs(%3660 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3662 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3629, %3661 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3659 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1487 = tensor.extract_slice %3629[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1488 = tensor.extract_slice %3629[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %3663 = tensor.empty() : tensor<1x32x80x64xf32>
    %3664 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1488 : tensor<1x32x80x64xf32>) outs(%3663 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %3665 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1489 = tensor.insert_slice %3664 into %3665[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1490 = tensor.insert_slice %extracted_slice_1487 into %inserted_slice_1489[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %3666 = tensor.empty() : tensor<1x32x80x128xf32>
    %3667 = tensor.empty() : tensor<1x32x80x128xf32>
    %3668 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3646 : tensor<1x1x80x128xf32>) outs(%3667 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3669 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1490, %3668 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3666 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %3670 = "tosa.add"(%3662, %3669) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3671 = tensor.empty() : tensor<1x32x128x80xf32>
    %3672 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3670 : tensor<1x32x80x128xf32>) outs(%3671 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %3673 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1491 = tensor.extract_slice %3658[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1492 = tensor.insert_slice %extracted_slice_1491 into %3673[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %3674 = "tosa.reshape"(%inserted_slice_1492) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %3675 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1493 = tensor.extract_slice %3672[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1494 = tensor.insert_slice %extracted_slice_1493 into %3675[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %3676 = "tosa.reshape"(%inserted_slice_1494) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %3677 = tensor.empty() : tensor<32x80x80xf32>
    %3678 = linalg.batch_matmul ins(%3674, %3676 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%3677 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %3679 = "tosa.reshape"(%3678) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1495 = arith.constant 11.3137083 : f32
    %3680 = tensor.empty() : tensor<1x32x80x80xf32>
    %3681 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3679 : tensor<1x32x80x80xf32>) outs(%3680 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.divf %in, %cst_1495 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %3682 = "tosa.add"(%3681, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %3683 = tensor.empty() : tensor<1x32x80x1xf32>
    %3684 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3683 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %3685 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3682 : tensor<1x32x80x80xf32>) outs(%3683 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.maxf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %3686 = tensor.empty() : tensor<1x32x80x80xf32>
    %3687 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3682, %3685 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%3686 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.subf %in, %in_1777 : f32
      %5231 = math.exp %5230 : f32
      linalg.yield %5231 : f32
    } -> tensor<1x32x80x80xf32>
    %3688 = tensor.empty() : tensor<1x32x80x1xf32>
    %3689 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3688 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %3690 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3687 : tensor<1x32x80x80xf32>) outs(%3689 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.addf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %3691 = tensor.empty() : tensor<1x32x80x80xf32>
    %3692 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3687, %3690 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%3691 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.divf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %3693 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1496 = tensor.extract_slice %3692[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1497 = tensor.insert_slice %extracted_slice_1496 into %3693[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %3694 = "tosa.reshape"(%inserted_slice_1497) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %3695 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1498 = tensor.extract_slice %3632[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1499 = tensor.insert_slice %extracted_slice_1498 into %3695[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %3696 = "tosa.reshape"(%inserted_slice_1499) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %3697 = tensor.empty() : tensor<32x80x128xf32>
    %3698 = linalg.batch_matmul ins(%3694, %3696 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%3697 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %3699 = "tosa.reshape"(%3698) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3700 = tensor.empty() : tensor<1x80x32x128xf32>
    %3701 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3699 : tensor<1x32x80x128xf32>) outs(%3700 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1500 = tensor.extract_slice %3701[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %3702 = "tosa.reshape"(%extracted_slice_1500) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %3703 = tensor.empty() : tensor<4096x4096xf32>
    %3704 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_380 : tensor<4096x4096xf32>) outs(%3703 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3705 = "tosa.reshape"(%3702) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3706 = tensor.empty() : tensor<80x4096xf32>
    %3707 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3706 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %3708 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3705, %3704 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%3707 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %3709 = "tosa.reshape"(%3708) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3710 = "tosa.add"(%3588, %3709) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %3711 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1501 = arith.constant 2 : i32
    %3712 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3710 : tensor<1x80x4096xf32>) outs(%3711 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1501 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1502 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %3713 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%3712 : tensor<1x80x4096xf32>) outs(%cst_1502 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1503 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %3714 = "tosa.add"(%3713, %cst_1503) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %3715 = tensor.empty() : tensor<1x80x1xf32>
    %3716 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3714 : tensor<1x80x1xf32>) outs(%3715 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %3717 = tensor.empty() : tensor<1x80x4096xf32>
    %3718 = tensor.empty() : tensor<1x80x4096xf32>
    %3719 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3716 : tensor<1x80x1xf32>) outs(%3718 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3720 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3710, %3719 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3717 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %3721 = tensor.empty() : tensor<1x80x4096xf32>
    %3722 = tensor.empty() : tensor<1x80x4096xf32>
    %3723 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_44 : tensor<4096xf32>) outs(%3722 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3724 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3723, %3720 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3721 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %3725 = tensor.empty() : tensor<4096x11008xf32>
    %3726 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_382 : tensor<11008x4096xf32>) outs(%3725 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3727 = "tosa.reshape"(%3724) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3728 = tensor.empty() : tensor<80x11008xf32>
    %3729 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3728 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %3730 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3727, %3726 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%3729 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %3731 = "tosa.reshape"(%3730) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %3732 = tensor.empty() : tensor<1x80x11008xf32>
    %3733 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3731 : tensor<1x80x11008xf32>) outs(%3732 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      %5231 = math.exp %5230 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5232 = arith.addf %cst_1777, %5231 : f32
      %5233 = arith.divf %in, %5232 : f32
      linalg.yield %5233 : f32
    } -> tensor<1x80x11008xf32>
    %3734 = tensor.empty() : tensor<4096x11008xf32>
    %3735 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_384 : tensor<11008x4096xf32>) outs(%3734 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3736 = "tosa.reshape"(%3724) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3737 = tensor.empty() : tensor<80x11008xf32>
    %3738 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3737 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %3739 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3736, %3735 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%3738 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %3740 = "tosa.reshape"(%3739) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %3741 = tensor.empty() : tensor<1x80x11008xf32>
    %3742 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3733, %3740 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%3741 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x11008xf32>
    %3743 = tensor.empty() : tensor<11008x4096xf32>
    %3744 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_386 : tensor<4096x11008xf32>) outs(%3743 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %3745 = "tosa.reshape"(%3742) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %3746 = tensor.empty() : tensor<80x4096xf32>
    %3747 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3746 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %3748 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3745, %3744 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%3747 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %3749 = "tosa.reshape"(%3748) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3750 = "tosa.add"(%3710, %3749) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %3751 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1504 = arith.constant 2 : i32
    %3752 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3750 : tensor<1x80x4096xf32>) outs(%3751 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1504 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1505 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %3753 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%3752 : tensor<1x80x4096xf32>) outs(%cst_1505 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1506 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %3754 = "tosa.add"(%3753, %cst_1506) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %3755 = tensor.empty() : tensor<1x80x1xf32>
    %3756 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3754 : tensor<1x80x1xf32>) outs(%3755 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %3757 = tensor.empty() : tensor<1x80x4096xf32>
    %3758 = tensor.empty() : tensor<1x80x4096xf32>
    %3759 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3756 : tensor<1x80x1xf32>) outs(%3758 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3760 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3750, %3759 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3757 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %3761 = tensor.empty() : tensor<1x80x4096xf32>
    %3762 = tensor.empty() : tensor<1x80x4096xf32>
    %3763 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_45 : tensor<4096xf32>) outs(%3762 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3764 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3763, %3760 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3761 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %3765 = tensor.empty() : tensor<4096x4096xf32>
    %3766 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_388 : tensor<4096x4096xf32>) outs(%3765 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3767 = "tosa.reshape"(%3764) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3768 = tensor.empty() : tensor<80x4096xf32>
    %3769 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3768 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %3770 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3767, %3766 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%3769 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %3771 = "tosa.reshape"(%3770) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3772 = tensor.empty() : tensor<4096x4096xf32>
    %3773 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_390 : tensor<4096x4096xf32>) outs(%3772 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3774 = "tosa.reshape"(%3764) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3775 = tensor.empty() : tensor<80x4096xf32>
    %3776 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3775 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %3777 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3774, %3773 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%3776 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %3778 = "tosa.reshape"(%3777) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3779 = tensor.empty() : tensor<4096x4096xf32>
    %3780 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_392 : tensor<4096x4096xf32>) outs(%3779 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3781 = "tosa.reshape"(%3764) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3782 = tensor.empty() : tensor<80x4096xf32>
    %3783 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3782 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %3784 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3781, %3780 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%3783 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %3785 = "tosa.reshape"(%3784) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3786 = "tosa.reshape"(%3771) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3787 = tensor.empty() : tensor<1x32x80x128xf32>
    %3788 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3786 : tensor<1x80x32x128xf32>) outs(%3787 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3789 = "tosa.reshape"(%3778) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3790 = tensor.empty() : tensor<1x32x80x128xf32>
    %3791 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3789 : tensor<1x80x32x128xf32>) outs(%3790 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3792 = "tosa.reshape"(%3785) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3793 = tensor.empty() : tensor<1x32x80x128xf32>
    %3794 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3792 : tensor<1x80x32x128xf32>) outs(%3793 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1507 = tensor.extract_slice %expanded_608[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1508 = tensor.extract_slice %extracted_slice_1507[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1509 = tensor.extract_slice %extracted_slice_1508[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1510 = tensor.extract_slice %expanded_610[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1511 = tensor.extract_slice %extracted_slice_1510[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1512 = tensor.extract_slice %extracted_slice_1511[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %3795 = tensor.empty() : tensor<1x80x128xf32>
    %3796 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1509 : tensor<1x1x80x128xf32>) outs(%3795 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %3797 = tensor.empty() : tensor<80x128xf32>
    %3798 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%3796 : tensor<1x80x128xf32>) outs(%3797 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %3799 = tensor.empty() : tensor<1x80x128xf32>
    %3800 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1512 : tensor<1x1x80x128xf32>) outs(%3799 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %3801 = tensor.empty() : tensor<80x128xf32>
    %3802 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%3800 : tensor<1x80x128xf32>) outs(%3801 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %3803 = tensor.empty() : tensor<1x80x128xf32>
    %3804 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%3803 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %3798[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %3805 = "tosa.reshape"(%3804) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %3806 = tensor.empty() : tensor<1x80x128xf32>
    %3807 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%3806 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %3802[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %3808 = "tosa.reshape"(%3807) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %3809 = tensor.empty() : tensor<1x32x80x128xf32>
    %3810 = tensor.empty() : tensor<1x32x80x128xf32>
    %3811 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3805 : tensor<1x1x80x128xf32>) outs(%3810 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3812 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3788, %3811 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3809 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1513 = tensor.extract_slice %3788[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1514 = tensor.extract_slice %3788[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %3813 = tensor.empty() : tensor<1x32x80x64xf32>
    %3814 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1514 : tensor<1x32x80x64xf32>) outs(%3813 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %3815 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1515 = tensor.insert_slice %3814 into %3815[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1516 = tensor.insert_slice %extracted_slice_1513 into %inserted_slice_1515[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %3816 = tensor.empty() : tensor<1x32x80x128xf32>
    %3817 = tensor.empty() : tensor<1x32x80x128xf32>
    %3818 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3808 : tensor<1x1x80x128xf32>) outs(%3817 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3819 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1516, %3818 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3816 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %3820 = "tosa.add"(%3812, %3819) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3821 = tensor.empty() : tensor<1x32x80x128xf32>
    %3822 = tensor.empty() : tensor<1x32x80x128xf32>
    %3823 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3805 : tensor<1x1x80x128xf32>) outs(%3822 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3824 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3791, %3823 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3821 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1517 = tensor.extract_slice %3791[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1518 = tensor.extract_slice %3791[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %3825 = tensor.empty() : tensor<1x32x80x64xf32>
    %3826 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1518 : tensor<1x32x80x64xf32>) outs(%3825 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %3827 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1519 = tensor.insert_slice %3826 into %3827[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1520 = tensor.insert_slice %extracted_slice_1517 into %inserted_slice_1519[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %3828 = tensor.empty() : tensor<1x32x80x128xf32>
    %3829 = tensor.empty() : tensor<1x32x80x128xf32>
    %3830 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3808 : tensor<1x1x80x128xf32>) outs(%3829 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3831 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1520, %3830 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3828 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %3832 = "tosa.add"(%3824, %3831) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3833 = tensor.empty() : tensor<1x32x128x80xf32>
    %3834 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3832 : tensor<1x32x80x128xf32>) outs(%3833 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %3835 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1521 = tensor.extract_slice %3820[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1522 = tensor.insert_slice %extracted_slice_1521 into %3835[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %3836 = "tosa.reshape"(%inserted_slice_1522) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %3837 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1523 = tensor.extract_slice %3834[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1524 = tensor.insert_slice %extracted_slice_1523 into %3837[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %3838 = "tosa.reshape"(%inserted_slice_1524) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %3839 = tensor.empty() : tensor<32x80x80xf32>
    %3840 = linalg.batch_matmul ins(%3836, %3838 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%3839 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %3841 = "tosa.reshape"(%3840) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1525 = arith.constant 11.3137083 : f32
    %3842 = tensor.empty() : tensor<1x32x80x80xf32>
    %3843 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3841 : tensor<1x32x80x80xf32>) outs(%3842 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.divf %in, %cst_1525 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %3844 = "tosa.add"(%3843, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %3845 = tensor.empty() : tensor<1x32x80x1xf32>
    %3846 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3845 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %3847 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3844 : tensor<1x32x80x80xf32>) outs(%3845 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.maxf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %3848 = tensor.empty() : tensor<1x32x80x80xf32>
    %3849 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3844, %3847 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%3848 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.subf %in, %in_1777 : f32
      %5231 = math.exp %5230 : f32
      linalg.yield %5231 : f32
    } -> tensor<1x32x80x80xf32>
    %3850 = tensor.empty() : tensor<1x32x80x1xf32>
    %3851 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3850 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %3852 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3849 : tensor<1x32x80x80xf32>) outs(%3851 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.addf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %3853 = tensor.empty() : tensor<1x32x80x80xf32>
    %3854 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3849, %3852 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%3853 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.divf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %3855 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1526 = tensor.extract_slice %3854[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1527 = tensor.insert_slice %extracted_slice_1526 into %3855[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %3856 = "tosa.reshape"(%inserted_slice_1527) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %3857 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1528 = tensor.extract_slice %3794[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1529 = tensor.insert_slice %extracted_slice_1528 into %3857[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %3858 = "tosa.reshape"(%inserted_slice_1529) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %3859 = tensor.empty() : tensor<32x80x128xf32>
    %3860 = linalg.batch_matmul ins(%3856, %3858 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%3859 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %3861 = "tosa.reshape"(%3860) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3862 = tensor.empty() : tensor<1x80x32x128xf32>
    %3863 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3861 : tensor<1x32x80x128xf32>) outs(%3862 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1530 = tensor.extract_slice %3863[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %3864 = "tosa.reshape"(%extracted_slice_1530) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %3865 = tensor.empty() : tensor<4096x4096xf32>
    %3866 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_394 : tensor<4096x4096xf32>) outs(%3865 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3867 = "tosa.reshape"(%3864) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3868 = tensor.empty() : tensor<80x4096xf32>
    %3869 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3868 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %3870 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3867, %3866 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%3869 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %3871 = "tosa.reshape"(%3870) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3872 = "tosa.add"(%3750, %3871) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %3873 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1531 = arith.constant 2 : i32
    %3874 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3872 : tensor<1x80x4096xf32>) outs(%3873 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1531 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1532 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %3875 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%3874 : tensor<1x80x4096xf32>) outs(%cst_1532 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1533 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %3876 = "tosa.add"(%3875, %cst_1533) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %3877 = tensor.empty() : tensor<1x80x1xf32>
    %3878 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3876 : tensor<1x80x1xf32>) outs(%3877 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %3879 = tensor.empty() : tensor<1x80x4096xf32>
    %3880 = tensor.empty() : tensor<1x80x4096xf32>
    %3881 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3878 : tensor<1x80x1xf32>) outs(%3880 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3882 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3872, %3881 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3879 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %3883 = tensor.empty() : tensor<1x80x4096xf32>
    %3884 = tensor.empty() : tensor<1x80x4096xf32>
    %3885 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_46 : tensor<4096xf32>) outs(%3884 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3886 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3885, %3882 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3883 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %3887 = tensor.empty() : tensor<4096x11008xf32>
    %3888 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_396 : tensor<11008x4096xf32>) outs(%3887 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3889 = "tosa.reshape"(%3886) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3890 = tensor.empty() : tensor<80x11008xf32>
    %3891 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3890 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %3892 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3889, %3888 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%3891 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %3893 = "tosa.reshape"(%3892) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %3894 = tensor.empty() : tensor<1x80x11008xf32>
    %3895 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3893 : tensor<1x80x11008xf32>) outs(%3894 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      %5231 = math.exp %5230 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5232 = arith.addf %cst_1777, %5231 : f32
      %5233 = arith.divf %in, %5232 : f32
      linalg.yield %5233 : f32
    } -> tensor<1x80x11008xf32>
    %3896 = tensor.empty() : tensor<4096x11008xf32>
    %3897 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_398 : tensor<11008x4096xf32>) outs(%3896 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3898 = "tosa.reshape"(%3886) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3899 = tensor.empty() : tensor<80x11008xf32>
    %3900 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3899 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %3901 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3898, %3897 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%3900 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %3902 = "tosa.reshape"(%3901) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %3903 = tensor.empty() : tensor<1x80x11008xf32>
    %3904 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3895, %3902 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%3903 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x11008xf32>
    %3905 = tensor.empty() : tensor<11008x4096xf32>
    %3906 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_400 : tensor<4096x11008xf32>) outs(%3905 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %3907 = "tosa.reshape"(%3904) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %3908 = tensor.empty() : tensor<80x4096xf32>
    %3909 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3908 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %3910 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3907, %3906 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%3909 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %3911 = "tosa.reshape"(%3910) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3912 = "tosa.add"(%3872, %3911) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %3913 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1534 = arith.constant 2 : i32
    %3914 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3912 : tensor<1x80x4096xf32>) outs(%3913 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1534 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1535 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %3915 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%3914 : tensor<1x80x4096xf32>) outs(%cst_1535 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1536 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %3916 = "tosa.add"(%3915, %cst_1536) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %3917 = tensor.empty() : tensor<1x80x1xf32>
    %3918 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3916 : tensor<1x80x1xf32>) outs(%3917 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %3919 = tensor.empty() : tensor<1x80x4096xf32>
    %3920 = tensor.empty() : tensor<1x80x4096xf32>
    %3921 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3918 : tensor<1x80x1xf32>) outs(%3920 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3922 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3912, %3921 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3919 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %3923 = tensor.empty() : tensor<1x80x4096xf32>
    %3924 = tensor.empty() : tensor<1x80x4096xf32>
    %3925 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_47 : tensor<4096xf32>) outs(%3924 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3926 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3925, %3922 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3923 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %3927 = tensor.empty() : tensor<4096x4096xf32>
    %3928 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_402 : tensor<4096x4096xf32>) outs(%3927 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3929 = "tosa.reshape"(%3926) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3930 = tensor.empty() : tensor<80x4096xf32>
    %3931 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3930 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %3932 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3929, %3928 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%3931 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %3933 = "tosa.reshape"(%3932) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3934 = tensor.empty() : tensor<4096x4096xf32>
    %3935 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_404 : tensor<4096x4096xf32>) outs(%3934 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3936 = "tosa.reshape"(%3926) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3937 = tensor.empty() : tensor<80x4096xf32>
    %3938 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3937 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %3939 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3936, %3935 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%3938 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %3940 = "tosa.reshape"(%3939) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3941 = tensor.empty() : tensor<4096x4096xf32>
    %3942 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_406 : tensor<4096x4096xf32>) outs(%3941 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3943 = "tosa.reshape"(%3926) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3944 = tensor.empty() : tensor<80x4096xf32>
    %3945 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3944 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %3946 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3943, %3942 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%3945 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %3947 = "tosa.reshape"(%3946) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3948 = "tosa.reshape"(%3933) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3949 = tensor.empty() : tensor<1x32x80x128xf32>
    %3950 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3948 : tensor<1x80x32x128xf32>) outs(%3949 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3951 = "tosa.reshape"(%3940) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3952 = tensor.empty() : tensor<1x32x80x128xf32>
    %3953 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3951 : tensor<1x80x32x128xf32>) outs(%3952 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3954 = "tosa.reshape"(%3947) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3955 = tensor.empty() : tensor<1x32x80x128xf32>
    %3956 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3954 : tensor<1x80x32x128xf32>) outs(%3955 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1537 = tensor.extract_slice %expanded_612[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1538 = tensor.extract_slice %extracted_slice_1537[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1539 = tensor.extract_slice %extracted_slice_1538[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1540 = tensor.extract_slice %expanded_614[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1541 = tensor.extract_slice %extracted_slice_1540[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1542 = tensor.extract_slice %extracted_slice_1541[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %3957 = tensor.empty() : tensor<1x80x128xf32>
    %3958 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1539 : tensor<1x1x80x128xf32>) outs(%3957 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %3959 = tensor.empty() : tensor<80x128xf32>
    %3960 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%3958 : tensor<1x80x128xf32>) outs(%3959 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %3961 = tensor.empty() : tensor<1x80x128xf32>
    %3962 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1542 : tensor<1x1x80x128xf32>) outs(%3961 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %3963 = tensor.empty() : tensor<80x128xf32>
    %3964 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%3962 : tensor<1x80x128xf32>) outs(%3963 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %3965 = tensor.empty() : tensor<1x80x128xf32>
    %3966 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%3965 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %3960[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %3967 = "tosa.reshape"(%3966) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %3968 = tensor.empty() : tensor<1x80x128xf32>
    %3969 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%3968 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %3964[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %3970 = "tosa.reshape"(%3969) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %3971 = tensor.empty() : tensor<1x32x80x128xf32>
    %3972 = tensor.empty() : tensor<1x32x80x128xf32>
    %3973 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3967 : tensor<1x1x80x128xf32>) outs(%3972 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3974 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3950, %3973 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3971 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1543 = tensor.extract_slice %3950[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1544 = tensor.extract_slice %3950[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %3975 = tensor.empty() : tensor<1x32x80x64xf32>
    %3976 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1544 : tensor<1x32x80x64xf32>) outs(%3975 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %3977 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1545 = tensor.insert_slice %3976 into %3977[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1546 = tensor.insert_slice %extracted_slice_1543 into %inserted_slice_1545[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %3978 = tensor.empty() : tensor<1x32x80x128xf32>
    %3979 = tensor.empty() : tensor<1x32x80x128xf32>
    %3980 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3970 : tensor<1x1x80x128xf32>) outs(%3979 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3981 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1546, %3980 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3978 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %3982 = "tosa.add"(%3974, %3981) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3983 = tensor.empty() : tensor<1x32x80x128xf32>
    %3984 = tensor.empty() : tensor<1x32x80x128xf32>
    %3985 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3967 : tensor<1x1x80x128xf32>) outs(%3984 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3986 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3953, %3985 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3983 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1547 = tensor.extract_slice %3953[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1548 = tensor.extract_slice %3953[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %3987 = tensor.empty() : tensor<1x32x80x64xf32>
    %3988 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1548 : tensor<1x32x80x64xf32>) outs(%3987 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %3989 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1549 = tensor.insert_slice %3988 into %3989[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1550 = tensor.insert_slice %extracted_slice_1547 into %inserted_slice_1549[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %3990 = tensor.empty() : tensor<1x32x80x128xf32>
    %3991 = tensor.empty() : tensor<1x32x80x128xf32>
    %3992 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3970 : tensor<1x1x80x128xf32>) outs(%3991 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3993 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1550, %3992 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3990 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %3994 = "tosa.add"(%3986, %3993) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3995 = tensor.empty() : tensor<1x32x128x80xf32>
    %3996 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3994 : tensor<1x32x80x128xf32>) outs(%3995 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %3997 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1551 = tensor.extract_slice %3982[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1552 = tensor.insert_slice %extracted_slice_1551 into %3997[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %3998 = "tosa.reshape"(%inserted_slice_1552) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %3999 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1553 = tensor.extract_slice %3996[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1554 = tensor.insert_slice %extracted_slice_1553 into %3999[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %4000 = "tosa.reshape"(%inserted_slice_1554) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %4001 = tensor.empty() : tensor<32x80x80xf32>
    %4002 = linalg.batch_matmul ins(%3998, %4000 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%4001 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %4003 = "tosa.reshape"(%4002) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1555 = arith.constant 11.3137083 : f32
    %4004 = tensor.empty() : tensor<1x32x80x80xf32>
    %4005 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4003 : tensor<1x32x80x80xf32>) outs(%4004 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.divf %in, %cst_1555 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %4006 = "tosa.add"(%4005, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %4007 = tensor.empty() : tensor<1x32x80x1xf32>
    %4008 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4007 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %4009 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4006 : tensor<1x32x80x80xf32>) outs(%4007 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.maxf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %4010 = tensor.empty() : tensor<1x32x80x80xf32>
    %4011 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4006, %4009 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%4010 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.subf %in, %in_1777 : f32
      %5231 = math.exp %5230 : f32
      linalg.yield %5231 : f32
    } -> tensor<1x32x80x80xf32>
    %4012 = tensor.empty() : tensor<1x32x80x1xf32>
    %4013 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4012 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %4014 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4011 : tensor<1x32x80x80xf32>) outs(%4013 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.addf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %4015 = tensor.empty() : tensor<1x32x80x80xf32>
    %4016 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4011, %4014 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%4015 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.divf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %4017 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1556 = tensor.extract_slice %4016[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1557 = tensor.insert_slice %extracted_slice_1556 into %4017[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %4018 = "tosa.reshape"(%inserted_slice_1557) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %4019 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1558 = tensor.extract_slice %3956[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1559 = tensor.insert_slice %extracted_slice_1558 into %4019[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %4020 = "tosa.reshape"(%inserted_slice_1559) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %4021 = tensor.empty() : tensor<32x80x128xf32>
    %4022 = linalg.batch_matmul ins(%4018, %4020 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%4021 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %4023 = "tosa.reshape"(%4022) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4024 = tensor.empty() : tensor<1x80x32x128xf32>
    %4025 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4023 : tensor<1x32x80x128xf32>) outs(%4024 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1560 = tensor.extract_slice %4025[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %4026 = "tosa.reshape"(%extracted_slice_1560) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %4027 = tensor.empty() : tensor<4096x4096xf32>
    %4028 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_408 : tensor<4096x4096xf32>) outs(%4027 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4029 = "tosa.reshape"(%4026) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4030 = tensor.empty() : tensor<80x4096xf32>
    %4031 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4030 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %4032 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4029, %4028 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%4031 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %4033 = "tosa.reshape"(%4032) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4034 = "tosa.add"(%3912, %4033) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %4035 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1561 = arith.constant 2 : i32
    %4036 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4034 : tensor<1x80x4096xf32>) outs(%4035 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1561 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1562 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %4037 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4036 : tensor<1x80x4096xf32>) outs(%cst_1562 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1563 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4038 = "tosa.add"(%4037, %cst_1563) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %4039 = tensor.empty() : tensor<1x80x1xf32>
    %4040 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4038 : tensor<1x80x1xf32>) outs(%4039 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %4041 = tensor.empty() : tensor<1x80x4096xf32>
    %4042 = tensor.empty() : tensor<1x80x4096xf32>
    %4043 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4040 : tensor<1x80x1xf32>) outs(%4042 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4044 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4034, %4043 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4041 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %4045 = tensor.empty() : tensor<1x80x4096xf32>
    %4046 = tensor.empty() : tensor<1x80x4096xf32>
    %4047 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_48 : tensor<4096xf32>) outs(%4046 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4048 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4047, %4044 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4045 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %4049 = tensor.empty() : tensor<4096x11008xf32>
    %4050 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_410 : tensor<11008x4096xf32>) outs(%4049 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4051 = "tosa.reshape"(%4048) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4052 = tensor.empty() : tensor<80x11008xf32>
    %4053 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4052 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %4054 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4051, %4050 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%4053 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %4055 = "tosa.reshape"(%4054) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %4056 = tensor.empty() : tensor<1x80x11008xf32>
    %4057 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4055 : tensor<1x80x11008xf32>) outs(%4056 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      %5231 = math.exp %5230 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5232 = arith.addf %cst_1777, %5231 : f32
      %5233 = arith.divf %in, %5232 : f32
      linalg.yield %5233 : f32
    } -> tensor<1x80x11008xf32>
    %4058 = tensor.empty() : tensor<4096x11008xf32>
    %4059 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_412 : tensor<11008x4096xf32>) outs(%4058 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4060 = "tosa.reshape"(%4048) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4061 = tensor.empty() : tensor<80x11008xf32>
    %4062 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4061 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %4063 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4060, %4059 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%4062 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %4064 = "tosa.reshape"(%4063) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %4065 = tensor.empty() : tensor<1x80x11008xf32>
    %4066 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4057, %4064 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%4065 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x11008xf32>
    %4067 = tensor.empty() : tensor<11008x4096xf32>
    %4068 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_414 : tensor<4096x11008xf32>) outs(%4067 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %4069 = "tosa.reshape"(%4066) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %4070 = tensor.empty() : tensor<80x4096xf32>
    %4071 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4070 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %4072 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4069, %4068 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%4071 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %4073 = "tosa.reshape"(%4072) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4074 = "tosa.add"(%4034, %4073) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %4075 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1564 = arith.constant 2 : i32
    %4076 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4074 : tensor<1x80x4096xf32>) outs(%4075 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1564 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1565 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %4077 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4076 : tensor<1x80x4096xf32>) outs(%cst_1565 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1566 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4078 = "tosa.add"(%4077, %cst_1566) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %4079 = tensor.empty() : tensor<1x80x1xf32>
    %4080 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4078 : tensor<1x80x1xf32>) outs(%4079 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %4081 = tensor.empty() : tensor<1x80x4096xf32>
    %4082 = tensor.empty() : tensor<1x80x4096xf32>
    %4083 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4080 : tensor<1x80x1xf32>) outs(%4082 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4084 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4074, %4083 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4081 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %4085 = tensor.empty() : tensor<1x80x4096xf32>
    %4086 = tensor.empty() : tensor<1x80x4096xf32>
    %4087 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_49 : tensor<4096xf32>) outs(%4086 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4088 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4087, %4084 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4085 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %4089 = tensor.empty() : tensor<4096x4096xf32>
    %4090 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_416 : tensor<4096x4096xf32>) outs(%4089 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4091 = "tosa.reshape"(%4088) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4092 = tensor.empty() : tensor<80x4096xf32>
    %4093 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4092 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %4094 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4091, %4090 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%4093 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %4095 = "tosa.reshape"(%4094) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4096 = tensor.empty() : tensor<4096x4096xf32>
    %4097 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_418 : tensor<4096x4096xf32>) outs(%4096 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4098 = "tosa.reshape"(%4088) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4099 = tensor.empty() : tensor<80x4096xf32>
    %4100 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4099 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %4101 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4098, %4097 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%4100 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %4102 = "tosa.reshape"(%4101) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4103 = tensor.empty() : tensor<4096x4096xf32>
    %4104 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_420 : tensor<4096x4096xf32>) outs(%4103 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4105 = "tosa.reshape"(%4088) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4106 = tensor.empty() : tensor<80x4096xf32>
    %4107 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4106 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %4108 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4105, %4104 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%4107 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %4109 = "tosa.reshape"(%4108) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4110 = "tosa.reshape"(%4095) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4111 = tensor.empty() : tensor<1x32x80x128xf32>
    %4112 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4110 : tensor<1x80x32x128xf32>) outs(%4111 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4113 = "tosa.reshape"(%4102) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4114 = tensor.empty() : tensor<1x32x80x128xf32>
    %4115 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4113 : tensor<1x80x32x128xf32>) outs(%4114 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4116 = "tosa.reshape"(%4109) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4117 = tensor.empty() : tensor<1x32x80x128xf32>
    %4118 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4116 : tensor<1x80x32x128xf32>) outs(%4117 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1567 = tensor.extract_slice %expanded_616[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1568 = tensor.extract_slice %extracted_slice_1567[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1569 = tensor.extract_slice %extracted_slice_1568[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1570 = tensor.extract_slice %expanded_618[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1571 = tensor.extract_slice %extracted_slice_1570[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1572 = tensor.extract_slice %extracted_slice_1571[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %4119 = tensor.empty() : tensor<1x80x128xf32>
    %4120 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1569 : tensor<1x1x80x128xf32>) outs(%4119 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %4121 = tensor.empty() : tensor<80x128xf32>
    %4122 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%4120 : tensor<1x80x128xf32>) outs(%4121 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %4123 = tensor.empty() : tensor<1x80x128xf32>
    %4124 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1572 : tensor<1x1x80x128xf32>) outs(%4123 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %4125 = tensor.empty() : tensor<80x128xf32>
    %4126 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%4124 : tensor<1x80x128xf32>) outs(%4125 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %4127 = tensor.empty() : tensor<1x80x128xf32>
    %4128 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%4127 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %4122[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %4129 = "tosa.reshape"(%4128) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %4130 = tensor.empty() : tensor<1x80x128xf32>
    %4131 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%4130 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %4126[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %4132 = "tosa.reshape"(%4131) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %4133 = tensor.empty() : tensor<1x32x80x128xf32>
    %4134 = tensor.empty() : tensor<1x32x80x128xf32>
    %4135 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4129 : tensor<1x1x80x128xf32>) outs(%4134 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4136 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4112, %4135 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4133 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1573 = tensor.extract_slice %4112[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1574 = tensor.extract_slice %4112[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %4137 = tensor.empty() : tensor<1x32x80x64xf32>
    %4138 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1574 : tensor<1x32x80x64xf32>) outs(%4137 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %4139 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1575 = tensor.insert_slice %4138 into %4139[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1576 = tensor.insert_slice %extracted_slice_1573 into %inserted_slice_1575[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %4140 = tensor.empty() : tensor<1x32x80x128xf32>
    %4141 = tensor.empty() : tensor<1x32x80x128xf32>
    %4142 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4132 : tensor<1x1x80x128xf32>) outs(%4141 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4143 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1576, %4142 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4140 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %4144 = "tosa.add"(%4136, %4143) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4145 = tensor.empty() : tensor<1x32x80x128xf32>
    %4146 = tensor.empty() : tensor<1x32x80x128xf32>
    %4147 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4129 : tensor<1x1x80x128xf32>) outs(%4146 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4148 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4115, %4147 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4145 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1577 = tensor.extract_slice %4115[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1578 = tensor.extract_slice %4115[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %4149 = tensor.empty() : tensor<1x32x80x64xf32>
    %4150 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1578 : tensor<1x32x80x64xf32>) outs(%4149 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %4151 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1579 = tensor.insert_slice %4150 into %4151[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1580 = tensor.insert_slice %extracted_slice_1577 into %inserted_slice_1579[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %4152 = tensor.empty() : tensor<1x32x80x128xf32>
    %4153 = tensor.empty() : tensor<1x32x80x128xf32>
    %4154 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4132 : tensor<1x1x80x128xf32>) outs(%4153 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4155 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1580, %4154 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4152 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %4156 = "tosa.add"(%4148, %4155) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4157 = tensor.empty() : tensor<1x32x128x80xf32>
    %4158 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4156 : tensor<1x32x80x128xf32>) outs(%4157 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %4159 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1581 = tensor.extract_slice %4144[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1582 = tensor.insert_slice %extracted_slice_1581 into %4159[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %4160 = "tosa.reshape"(%inserted_slice_1582) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %4161 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1583 = tensor.extract_slice %4158[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1584 = tensor.insert_slice %extracted_slice_1583 into %4161[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %4162 = "tosa.reshape"(%inserted_slice_1584) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %4163 = tensor.empty() : tensor<32x80x80xf32>
    %4164 = linalg.batch_matmul ins(%4160, %4162 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%4163 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %4165 = "tosa.reshape"(%4164) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1585 = arith.constant 11.3137083 : f32
    %4166 = tensor.empty() : tensor<1x32x80x80xf32>
    %4167 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4165 : tensor<1x32x80x80xf32>) outs(%4166 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.divf %in, %cst_1585 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %4168 = "tosa.add"(%4167, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %4169 = tensor.empty() : tensor<1x32x80x1xf32>
    %4170 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4169 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %4171 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4168 : tensor<1x32x80x80xf32>) outs(%4169 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.maxf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %4172 = tensor.empty() : tensor<1x32x80x80xf32>
    %4173 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4168, %4171 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%4172 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.subf %in, %in_1777 : f32
      %5231 = math.exp %5230 : f32
      linalg.yield %5231 : f32
    } -> tensor<1x32x80x80xf32>
    %4174 = tensor.empty() : tensor<1x32x80x1xf32>
    %4175 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4174 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %4176 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4173 : tensor<1x32x80x80xf32>) outs(%4175 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.addf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %4177 = tensor.empty() : tensor<1x32x80x80xf32>
    %4178 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4173, %4176 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%4177 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.divf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %4179 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1586 = tensor.extract_slice %4178[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1587 = tensor.insert_slice %extracted_slice_1586 into %4179[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %4180 = "tosa.reshape"(%inserted_slice_1587) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %4181 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1588 = tensor.extract_slice %4118[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1589 = tensor.insert_slice %extracted_slice_1588 into %4181[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %4182 = "tosa.reshape"(%inserted_slice_1589) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %4183 = tensor.empty() : tensor<32x80x128xf32>
    %4184 = linalg.batch_matmul ins(%4180, %4182 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%4183 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %4185 = "tosa.reshape"(%4184) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4186 = tensor.empty() : tensor<1x80x32x128xf32>
    %4187 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4185 : tensor<1x32x80x128xf32>) outs(%4186 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1590 = tensor.extract_slice %4187[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %4188 = "tosa.reshape"(%extracted_slice_1590) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %4189 = tensor.empty() : tensor<4096x4096xf32>
    %4190 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_422 : tensor<4096x4096xf32>) outs(%4189 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4191 = "tosa.reshape"(%4188) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4192 = tensor.empty() : tensor<80x4096xf32>
    %4193 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4192 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %4194 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4191, %4190 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%4193 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %4195 = "tosa.reshape"(%4194) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4196 = "tosa.add"(%4074, %4195) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %4197 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1591 = arith.constant 2 : i32
    %4198 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4196 : tensor<1x80x4096xf32>) outs(%4197 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1591 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1592 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %4199 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4198 : tensor<1x80x4096xf32>) outs(%cst_1592 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1593 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4200 = "tosa.add"(%4199, %cst_1593) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %4201 = tensor.empty() : tensor<1x80x1xf32>
    %4202 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4200 : tensor<1x80x1xf32>) outs(%4201 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %4203 = tensor.empty() : tensor<1x80x4096xf32>
    %4204 = tensor.empty() : tensor<1x80x4096xf32>
    %4205 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4202 : tensor<1x80x1xf32>) outs(%4204 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4206 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4196, %4205 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4203 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %4207 = tensor.empty() : tensor<1x80x4096xf32>
    %4208 = tensor.empty() : tensor<1x80x4096xf32>
    %4209 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_50 : tensor<4096xf32>) outs(%4208 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4210 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4209, %4206 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4207 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %4211 = tensor.empty() : tensor<4096x11008xf32>
    %4212 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_424 : tensor<11008x4096xf32>) outs(%4211 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4213 = "tosa.reshape"(%4210) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4214 = tensor.empty() : tensor<80x11008xf32>
    %4215 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4214 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %4216 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4213, %4212 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%4215 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %4217 = "tosa.reshape"(%4216) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %4218 = tensor.empty() : tensor<1x80x11008xf32>
    %4219 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4217 : tensor<1x80x11008xf32>) outs(%4218 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      %5231 = math.exp %5230 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5232 = arith.addf %cst_1777, %5231 : f32
      %5233 = arith.divf %in, %5232 : f32
      linalg.yield %5233 : f32
    } -> tensor<1x80x11008xf32>
    %4220 = tensor.empty() : tensor<4096x11008xf32>
    %4221 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_426 : tensor<11008x4096xf32>) outs(%4220 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4222 = "tosa.reshape"(%4210) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4223 = tensor.empty() : tensor<80x11008xf32>
    %4224 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4223 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %4225 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4222, %4221 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%4224 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %4226 = "tosa.reshape"(%4225) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %4227 = tensor.empty() : tensor<1x80x11008xf32>
    %4228 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4219, %4226 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%4227 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x11008xf32>
    %4229 = tensor.empty() : tensor<11008x4096xf32>
    %4230 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_428 : tensor<4096x11008xf32>) outs(%4229 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %4231 = "tosa.reshape"(%4228) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %4232 = tensor.empty() : tensor<80x4096xf32>
    %4233 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4232 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %4234 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4231, %4230 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%4233 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %4235 = "tosa.reshape"(%4234) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4236 = "tosa.add"(%4196, %4235) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %4237 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1594 = arith.constant 2 : i32
    %4238 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4236 : tensor<1x80x4096xf32>) outs(%4237 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1594 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1595 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %4239 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4238 : tensor<1x80x4096xf32>) outs(%cst_1595 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1596 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4240 = "tosa.add"(%4239, %cst_1596) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %4241 = tensor.empty() : tensor<1x80x1xf32>
    %4242 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4240 : tensor<1x80x1xf32>) outs(%4241 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %4243 = tensor.empty() : tensor<1x80x4096xf32>
    %4244 = tensor.empty() : tensor<1x80x4096xf32>
    %4245 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4242 : tensor<1x80x1xf32>) outs(%4244 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4246 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4236, %4245 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4243 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %4247 = tensor.empty() : tensor<1x80x4096xf32>
    %4248 = tensor.empty() : tensor<1x80x4096xf32>
    %4249 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_51 : tensor<4096xf32>) outs(%4248 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4250 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4249, %4246 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4247 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %4251 = tensor.empty() : tensor<4096x4096xf32>
    %4252 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_430 : tensor<4096x4096xf32>) outs(%4251 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4253 = "tosa.reshape"(%4250) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4254 = tensor.empty() : tensor<80x4096xf32>
    %4255 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4254 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %4256 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4253, %4252 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%4255 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %4257 = "tosa.reshape"(%4256) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4258 = tensor.empty() : tensor<4096x4096xf32>
    %4259 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_432 : tensor<4096x4096xf32>) outs(%4258 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4260 = "tosa.reshape"(%4250) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4261 = tensor.empty() : tensor<80x4096xf32>
    %4262 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4261 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %4263 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4260, %4259 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%4262 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %4264 = "tosa.reshape"(%4263) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4265 = tensor.empty() : tensor<4096x4096xf32>
    %4266 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_434 : tensor<4096x4096xf32>) outs(%4265 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4267 = "tosa.reshape"(%4250) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4268 = tensor.empty() : tensor<80x4096xf32>
    %4269 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4268 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %4270 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4267, %4266 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%4269 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %4271 = "tosa.reshape"(%4270) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4272 = "tosa.reshape"(%4257) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4273 = tensor.empty() : tensor<1x32x80x128xf32>
    %4274 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4272 : tensor<1x80x32x128xf32>) outs(%4273 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4275 = "tosa.reshape"(%4264) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4276 = tensor.empty() : tensor<1x32x80x128xf32>
    %4277 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4275 : tensor<1x80x32x128xf32>) outs(%4276 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4278 = "tosa.reshape"(%4271) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4279 = tensor.empty() : tensor<1x32x80x128xf32>
    %4280 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4278 : tensor<1x80x32x128xf32>) outs(%4279 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1597 = tensor.extract_slice %expanded_620[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1598 = tensor.extract_slice %extracted_slice_1597[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1599 = tensor.extract_slice %extracted_slice_1598[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1600 = tensor.extract_slice %expanded_622[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1601 = tensor.extract_slice %extracted_slice_1600[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1602 = tensor.extract_slice %extracted_slice_1601[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %4281 = tensor.empty() : tensor<1x80x128xf32>
    %4282 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1599 : tensor<1x1x80x128xf32>) outs(%4281 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %4283 = tensor.empty() : tensor<80x128xf32>
    %4284 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%4282 : tensor<1x80x128xf32>) outs(%4283 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %4285 = tensor.empty() : tensor<1x80x128xf32>
    %4286 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1602 : tensor<1x1x80x128xf32>) outs(%4285 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %4287 = tensor.empty() : tensor<80x128xf32>
    %4288 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%4286 : tensor<1x80x128xf32>) outs(%4287 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %4289 = tensor.empty() : tensor<1x80x128xf32>
    %4290 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%4289 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %4284[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %4291 = "tosa.reshape"(%4290) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %4292 = tensor.empty() : tensor<1x80x128xf32>
    %4293 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%4292 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %4288[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %4294 = "tosa.reshape"(%4293) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %4295 = tensor.empty() : tensor<1x32x80x128xf32>
    %4296 = tensor.empty() : tensor<1x32x80x128xf32>
    %4297 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4291 : tensor<1x1x80x128xf32>) outs(%4296 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4298 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4274, %4297 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4295 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1603 = tensor.extract_slice %4274[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1604 = tensor.extract_slice %4274[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %4299 = tensor.empty() : tensor<1x32x80x64xf32>
    %4300 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1604 : tensor<1x32x80x64xf32>) outs(%4299 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %4301 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1605 = tensor.insert_slice %4300 into %4301[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1606 = tensor.insert_slice %extracted_slice_1603 into %inserted_slice_1605[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %4302 = tensor.empty() : tensor<1x32x80x128xf32>
    %4303 = tensor.empty() : tensor<1x32x80x128xf32>
    %4304 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4294 : tensor<1x1x80x128xf32>) outs(%4303 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4305 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1606, %4304 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4302 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %4306 = "tosa.add"(%4298, %4305) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4307 = tensor.empty() : tensor<1x32x80x128xf32>
    %4308 = tensor.empty() : tensor<1x32x80x128xf32>
    %4309 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4291 : tensor<1x1x80x128xf32>) outs(%4308 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4310 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4277, %4309 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4307 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1607 = tensor.extract_slice %4277[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1608 = tensor.extract_slice %4277[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %4311 = tensor.empty() : tensor<1x32x80x64xf32>
    %4312 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1608 : tensor<1x32x80x64xf32>) outs(%4311 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %4313 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1609 = tensor.insert_slice %4312 into %4313[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1610 = tensor.insert_slice %extracted_slice_1607 into %inserted_slice_1609[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %4314 = tensor.empty() : tensor<1x32x80x128xf32>
    %4315 = tensor.empty() : tensor<1x32x80x128xf32>
    %4316 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4294 : tensor<1x1x80x128xf32>) outs(%4315 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4317 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1610, %4316 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4314 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %4318 = "tosa.add"(%4310, %4317) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4319 = tensor.empty() : tensor<1x32x128x80xf32>
    %4320 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4318 : tensor<1x32x80x128xf32>) outs(%4319 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %4321 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1611 = tensor.extract_slice %4306[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1612 = tensor.insert_slice %extracted_slice_1611 into %4321[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %4322 = "tosa.reshape"(%inserted_slice_1612) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %4323 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1613 = tensor.extract_slice %4320[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1614 = tensor.insert_slice %extracted_slice_1613 into %4323[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %4324 = "tosa.reshape"(%inserted_slice_1614) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %4325 = tensor.empty() : tensor<32x80x80xf32>
    %4326 = linalg.batch_matmul ins(%4322, %4324 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%4325 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %4327 = "tosa.reshape"(%4326) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1615 = arith.constant 11.3137083 : f32
    %4328 = tensor.empty() : tensor<1x32x80x80xf32>
    %4329 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4327 : tensor<1x32x80x80xf32>) outs(%4328 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.divf %in, %cst_1615 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %4330 = "tosa.add"(%4329, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %4331 = tensor.empty() : tensor<1x32x80x1xf32>
    %4332 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4331 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %4333 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4330 : tensor<1x32x80x80xf32>) outs(%4331 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.maxf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %4334 = tensor.empty() : tensor<1x32x80x80xf32>
    %4335 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4330, %4333 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%4334 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.subf %in, %in_1777 : f32
      %5231 = math.exp %5230 : f32
      linalg.yield %5231 : f32
    } -> tensor<1x32x80x80xf32>
    %4336 = tensor.empty() : tensor<1x32x80x1xf32>
    %4337 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4336 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %4338 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4335 : tensor<1x32x80x80xf32>) outs(%4337 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.addf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %4339 = tensor.empty() : tensor<1x32x80x80xf32>
    %4340 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4335, %4338 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%4339 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.divf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %4341 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1616 = tensor.extract_slice %4340[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1617 = tensor.insert_slice %extracted_slice_1616 into %4341[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %4342 = "tosa.reshape"(%inserted_slice_1617) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %4343 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1618 = tensor.extract_slice %4280[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1619 = tensor.insert_slice %extracted_slice_1618 into %4343[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %4344 = "tosa.reshape"(%inserted_slice_1619) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %4345 = tensor.empty() : tensor<32x80x128xf32>
    %4346 = linalg.batch_matmul ins(%4342, %4344 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%4345 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %4347 = "tosa.reshape"(%4346) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4348 = tensor.empty() : tensor<1x80x32x128xf32>
    %4349 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4347 : tensor<1x32x80x128xf32>) outs(%4348 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1620 = tensor.extract_slice %4349[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %4350 = "tosa.reshape"(%extracted_slice_1620) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %4351 = tensor.empty() : tensor<4096x4096xf32>
    %4352 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_436 : tensor<4096x4096xf32>) outs(%4351 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4353 = "tosa.reshape"(%4350) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4354 = tensor.empty() : tensor<80x4096xf32>
    %4355 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4354 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %4356 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4353, %4352 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%4355 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %4357 = "tosa.reshape"(%4356) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4358 = "tosa.add"(%4236, %4357) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %4359 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1621 = arith.constant 2 : i32
    %4360 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4358 : tensor<1x80x4096xf32>) outs(%4359 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1621 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1622 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %4361 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4360 : tensor<1x80x4096xf32>) outs(%cst_1622 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1623 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4362 = "tosa.add"(%4361, %cst_1623) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %4363 = tensor.empty() : tensor<1x80x1xf32>
    %4364 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4362 : tensor<1x80x1xf32>) outs(%4363 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %4365 = tensor.empty() : tensor<1x80x4096xf32>
    %4366 = tensor.empty() : tensor<1x80x4096xf32>
    %4367 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4364 : tensor<1x80x1xf32>) outs(%4366 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4368 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4358, %4367 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4365 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %4369 = tensor.empty() : tensor<1x80x4096xf32>
    %4370 = tensor.empty() : tensor<1x80x4096xf32>
    %4371 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_52 : tensor<4096xf32>) outs(%4370 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4372 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4371, %4368 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4369 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %4373 = tensor.empty() : tensor<4096x11008xf32>
    %4374 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_438 : tensor<11008x4096xf32>) outs(%4373 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4375 = "tosa.reshape"(%4372) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4376 = tensor.empty() : tensor<80x11008xf32>
    %4377 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4376 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %4378 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4375, %4374 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%4377 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %4379 = "tosa.reshape"(%4378) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %4380 = tensor.empty() : tensor<1x80x11008xf32>
    %4381 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4379 : tensor<1x80x11008xf32>) outs(%4380 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      %5231 = math.exp %5230 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5232 = arith.addf %cst_1777, %5231 : f32
      %5233 = arith.divf %in, %5232 : f32
      linalg.yield %5233 : f32
    } -> tensor<1x80x11008xf32>
    %4382 = tensor.empty() : tensor<4096x11008xf32>
    %4383 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_440 : tensor<11008x4096xf32>) outs(%4382 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4384 = "tosa.reshape"(%4372) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4385 = tensor.empty() : tensor<80x11008xf32>
    %4386 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4385 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %4387 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4384, %4383 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%4386 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %4388 = "tosa.reshape"(%4387) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %4389 = tensor.empty() : tensor<1x80x11008xf32>
    %4390 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4381, %4388 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%4389 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x11008xf32>
    %4391 = tensor.empty() : tensor<11008x4096xf32>
    %4392 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_442 : tensor<4096x11008xf32>) outs(%4391 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %4393 = "tosa.reshape"(%4390) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %4394 = tensor.empty() : tensor<80x4096xf32>
    %4395 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4394 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %4396 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4393, %4392 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%4395 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %4397 = "tosa.reshape"(%4396) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4398 = "tosa.add"(%4358, %4397) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %4399 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1624 = arith.constant 2 : i32
    %4400 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4398 : tensor<1x80x4096xf32>) outs(%4399 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1624 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1625 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %4401 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4400 : tensor<1x80x4096xf32>) outs(%cst_1625 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1626 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4402 = "tosa.add"(%4401, %cst_1626) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %4403 = tensor.empty() : tensor<1x80x1xf32>
    %4404 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4402 : tensor<1x80x1xf32>) outs(%4403 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %4405 = tensor.empty() : tensor<1x80x4096xf32>
    %4406 = tensor.empty() : tensor<1x80x4096xf32>
    %4407 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4404 : tensor<1x80x1xf32>) outs(%4406 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4408 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4398, %4407 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4405 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %4409 = tensor.empty() : tensor<1x80x4096xf32>
    %4410 = tensor.empty() : tensor<1x80x4096xf32>
    %4411 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_53 : tensor<4096xf32>) outs(%4410 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4412 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4411, %4408 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4409 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %4413 = tensor.empty() : tensor<4096x4096xf32>
    %4414 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_444 : tensor<4096x4096xf32>) outs(%4413 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4415 = "tosa.reshape"(%4412) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4416 = tensor.empty() : tensor<80x4096xf32>
    %4417 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4416 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %4418 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4415, %4414 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%4417 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %4419 = "tosa.reshape"(%4418) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4420 = tensor.empty() : tensor<4096x4096xf32>
    %4421 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_446 : tensor<4096x4096xf32>) outs(%4420 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4422 = "tosa.reshape"(%4412) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4423 = tensor.empty() : tensor<80x4096xf32>
    %4424 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4423 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %4425 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4422, %4421 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%4424 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %4426 = "tosa.reshape"(%4425) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4427 = tensor.empty() : tensor<4096x4096xf32>
    %4428 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_448 : tensor<4096x4096xf32>) outs(%4427 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4429 = "tosa.reshape"(%4412) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4430 = tensor.empty() : tensor<80x4096xf32>
    %4431 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4430 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %4432 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4429, %4428 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%4431 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %4433 = "tosa.reshape"(%4432) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4434 = "tosa.reshape"(%4419) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4435 = tensor.empty() : tensor<1x32x80x128xf32>
    %4436 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4434 : tensor<1x80x32x128xf32>) outs(%4435 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4437 = "tosa.reshape"(%4426) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4438 = tensor.empty() : tensor<1x32x80x128xf32>
    %4439 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4437 : tensor<1x80x32x128xf32>) outs(%4438 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4440 = "tosa.reshape"(%4433) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4441 = tensor.empty() : tensor<1x32x80x128xf32>
    %4442 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4440 : tensor<1x80x32x128xf32>) outs(%4441 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1627 = tensor.extract_slice %expanded_624[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1628 = tensor.extract_slice %extracted_slice_1627[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1629 = tensor.extract_slice %extracted_slice_1628[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1630 = tensor.extract_slice %expanded_626[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1631 = tensor.extract_slice %extracted_slice_1630[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1632 = tensor.extract_slice %extracted_slice_1631[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %4443 = tensor.empty() : tensor<1x80x128xf32>
    %4444 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1629 : tensor<1x1x80x128xf32>) outs(%4443 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %4445 = tensor.empty() : tensor<80x128xf32>
    %4446 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%4444 : tensor<1x80x128xf32>) outs(%4445 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %4447 = tensor.empty() : tensor<1x80x128xf32>
    %4448 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1632 : tensor<1x1x80x128xf32>) outs(%4447 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %4449 = tensor.empty() : tensor<80x128xf32>
    %4450 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%4448 : tensor<1x80x128xf32>) outs(%4449 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %4451 = tensor.empty() : tensor<1x80x128xf32>
    %4452 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%4451 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %4446[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %4453 = "tosa.reshape"(%4452) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %4454 = tensor.empty() : tensor<1x80x128xf32>
    %4455 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%4454 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %4450[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %4456 = "tosa.reshape"(%4455) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %4457 = tensor.empty() : tensor<1x32x80x128xf32>
    %4458 = tensor.empty() : tensor<1x32x80x128xf32>
    %4459 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4453 : tensor<1x1x80x128xf32>) outs(%4458 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4460 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4436, %4459 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4457 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1633 = tensor.extract_slice %4436[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1634 = tensor.extract_slice %4436[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %4461 = tensor.empty() : tensor<1x32x80x64xf32>
    %4462 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1634 : tensor<1x32x80x64xf32>) outs(%4461 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %4463 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1635 = tensor.insert_slice %4462 into %4463[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1636 = tensor.insert_slice %extracted_slice_1633 into %inserted_slice_1635[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %4464 = tensor.empty() : tensor<1x32x80x128xf32>
    %4465 = tensor.empty() : tensor<1x32x80x128xf32>
    %4466 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4456 : tensor<1x1x80x128xf32>) outs(%4465 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4467 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1636, %4466 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4464 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %4468 = "tosa.add"(%4460, %4467) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4469 = tensor.empty() : tensor<1x32x80x128xf32>
    %4470 = tensor.empty() : tensor<1x32x80x128xf32>
    %4471 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4453 : tensor<1x1x80x128xf32>) outs(%4470 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4472 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4439, %4471 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4469 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1637 = tensor.extract_slice %4439[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1638 = tensor.extract_slice %4439[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %4473 = tensor.empty() : tensor<1x32x80x64xf32>
    %4474 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1638 : tensor<1x32x80x64xf32>) outs(%4473 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %4475 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1639 = tensor.insert_slice %4474 into %4475[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1640 = tensor.insert_slice %extracted_slice_1637 into %inserted_slice_1639[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %4476 = tensor.empty() : tensor<1x32x80x128xf32>
    %4477 = tensor.empty() : tensor<1x32x80x128xf32>
    %4478 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4456 : tensor<1x1x80x128xf32>) outs(%4477 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4479 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1640, %4478 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4476 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %4480 = "tosa.add"(%4472, %4479) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4481 = tensor.empty() : tensor<1x32x128x80xf32>
    %4482 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4480 : tensor<1x32x80x128xf32>) outs(%4481 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %4483 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1641 = tensor.extract_slice %4468[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1642 = tensor.insert_slice %extracted_slice_1641 into %4483[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %4484 = "tosa.reshape"(%inserted_slice_1642) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %4485 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1643 = tensor.extract_slice %4482[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1644 = tensor.insert_slice %extracted_slice_1643 into %4485[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %4486 = "tosa.reshape"(%inserted_slice_1644) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %4487 = tensor.empty() : tensor<32x80x80xf32>
    %4488 = linalg.batch_matmul ins(%4484, %4486 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%4487 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %4489 = "tosa.reshape"(%4488) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1645 = arith.constant 11.3137083 : f32
    %4490 = tensor.empty() : tensor<1x32x80x80xf32>
    %4491 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4489 : tensor<1x32x80x80xf32>) outs(%4490 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.divf %in, %cst_1645 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %4492 = "tosa.add"(%4491, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %4493 = tensor.empty() : tensor<1x32x80x1xf32>
    %4494 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4493 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %4495 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4492 : tensor<1x32x80x80xf32>) outs(%4493 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.maxf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %4496 = tensor.empty() : tensor<1x32x80x80xf32>
    %4497 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4492, %4495 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%4496 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.subf %in, %in_1777 : f32
      %5231 = math.exp %5230 : f32
      linalg.yield %5231 : f32
    } -> tensor<1x32x80x80xf32>
    %4498 = tensor.empty() : tensor<1x32x80x1xf32>
    %4499 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4498 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %4500 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4497 : tensor<1x32x80x80xf32>) outs(%4499 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.addf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %4501 = tensor.empty() : tensor<1x32x80x80xf32>
    %4502 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4497, %4500 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%4501 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.divf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %4503 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1646 = tensor.extract_slice %4502[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1647 = tensor.insert_slice %extracted_slice_1646 into %4503[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %4504 = "tosa.reshape"(%inserted_slice_1647) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %4505 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1648 = tensor.extract_slice %4442[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1649 = tensor.insert_slice %extracted_slice_1648 into %4505[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %4506 = "tosa.reshape"(%inserted_slice_1649) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %4507 = tensor.empty() : tensor<32x80x128xf32>
    %4508 = linalg.batch_matmul ins(%4504, %4506 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%4507 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %4509 = "tosa.reshape"(%4508) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4510 = tensor.empty() : tensor<1x80x32x128xf32>
    %4511 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4509 : tensor<1x32x80x128xf32>) outs(%4510 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1650 = tensor.extract_slice %4511[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %4512 = "tosa.reshape"(%extracted_slice_1650) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %4513 = tensor.empty() : tensor<4096x4096xf32>
    %4514 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_450 : tensor<4096x4096xf32>) outs(%4513 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4515 = "tosa.reshape"(%4512) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4516 = tensor.empty() : tensor<80x4096xf32>
    %4517 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4516 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %4518 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4515, %4514 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%4517 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %4519 = "tosa.reshape"(%4518) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4520 = "tosa.add"(%4398, %4519) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %4521 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1651 = arith.constant 2 : i32
    %4522 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4520 : tensor<1x80x4096xf32>) outs(%4521 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1651 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1652 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %4523 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4522 : tensor<1x80x4096xf32>) outs(%cst_1652 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1653 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4524 = "tosa.add"(%4523, %cst_1653) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %4525 = tensor.empty() : tensor<1x80x1xf32>
    %4526 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4524 : tensor<1x80x1xf32>) outs(%4525 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %4527 = tensor.empty() : tensor<1x80x4096xf32>
    %4528 = tensor.empty() : tensor<1x80x4096xf32>
    %4529 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4526 : tensor<1x80x1xf32>) outs(%4528 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4530 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4520, %4529 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4527 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %4531 = tensor.empty() : tensor<1x80x4096xf32>
    %4532 = tensor.empty() : tensor<1x80x4096xf32>
    %4533 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_54 : tensor<4096xf32>) outs(%4532 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4534 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4533, %4530 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4531 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %4535 = tensor.empty() : tensor<4096x11008xf32>
    %4536 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_452 : tensor<11008x4096xf32>) outs(%4535 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4537 = "tosa.reshape"(%4534) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4538 = tensor.empty() : tensor<80x11008xf32>
    %4539 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4538 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %4540 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4537, %4536 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%4539 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %4541 = "tosa.reshape"(%4540) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %4542 = tensor.empty() : tensor<1x80x11008xf32>
    %4543 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4541 : tensor<1x80x11008xf32>) outs(%4542 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      %5231 = math.exp %5230 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5232 = arith.addf %cst_1777, %5231 : f32
      %5233 = arith.divf %in, %5232 : f32
      linalg.yield %5233 : f32
    } -> tensor<1x80x11008xf32>
    %4544 = tensor.empty() : tensor<4096x11008xf32>
    %4545 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_454 : tensor<11008x4096xf32>) outs(%4544 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4546 = "tosa.reshape"(%4534) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4547 = tensor.empty() : tensor<80x11008xf32>
    %4548 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4547 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %4549 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4546, %4545 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%4548 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %4550 = "tosa.reshape"(%4549) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %4551 = tensor.empty() : tensor<1x80x11008xf32>
    %4552 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4543, %4550 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%4551 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x11008xf32>
    %4553 = tensor.empty() : tensor<11008x4096xf32>
    %4554 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_456 : tensor<4096x11008xf32>) outs(%4553 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %4555 = "tosa.reshape"(%4552) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %4556 = tensor.empty() : tensor<80x4096xf32>
    %4557 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4556 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %4558 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4555, %4554 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%4557 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %4559 = "tosa.reshape"(%4558) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4560 = "tosa.add"(%4520, %4559) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %4561 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1654 = arith.constant 2 : i32
    %4562 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4560 : tensor<1x80x4096xf32>) outs(%4561 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1654 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1655 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %4563 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4562 : tensor<1x80x4096xf32>) outs(%cst_1655 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1656 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4564 = "tosa.add"(%4563, %cst_1656) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %4565 = tensor.empty() : tensor<1x80x1xf32>
    %4566 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4564 : tensor<1x80x1xf32>) outs(%4565 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %4567 = tensor.empty() : tensor<1x80x4096xf32>
    %4568 = tensor.empty() : tensor<1x80x4096xf32>
    %4569 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4566 : tensor<1x80x1xf32>) outs(%4568 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4570 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4560, %4569 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4567 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %4571 = tensor.empty() : tensor<1x80x4096xf32>
    %4572 = tensor.empty() : tensor<1x80x4096xf32>
    %4573 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_55 : tensor<4096xf32>) outs(%4572 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4574 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4573, %4570 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4571 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %4575 = tensor.empty() : tensor<4096x4096xf32>
    %4576 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_458 : tensor<4096x4096xf32>) outs(%4575 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4577 = "tosa.reshape"(%4574) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4578 = tensor.empty() : tensor<80x4096xf32>
    %4579 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4578 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %4580 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4577, %4576 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%4579 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %4581 = "tosa.reshape"(%4580) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4582 = tensor.empty() : tensor<4096x4096xf32>
    %4583 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_460 : tensor<4096x4096xf32>) outs(%4582 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4584 = "tosa.reshape"(%4574) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4585 = tensor.empty() : tensor<80x4096xf32>
    %4586 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4585 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %4587 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4584, %4583 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%4586 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %4588 = "tosa.reshape"(%4587) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4589 = tensor.empty() : tensor<4096x4096xf32>
    %4590 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_462 : tensor<4096x4096xf32>) outs(%4589 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4591 = "tosa.reshape"(%4574) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4592 = tensor.empty() : tensor<80x4096xf32>
    %4593 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4592 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %4594 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4591, %4590 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%4593 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %4595 = "tosa.reshape"(%4594) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4596 = "tosa.reshape"(%4581) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4597 = tensor.empty() : tensor<1x32x80x128xf32>
    %4598 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4596 : tensor<1x80x32x128xf32>) outs(%4597 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4599 = "tosa.reshape"(%4588) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4600 = tensor.empty() : tensor<1x32x80x128xf32>
    %4601 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4599 : tensor<1x80x32x128xf32>) outs(%4600 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4602 = "tosa.reshape"(%4595) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4603 = tensor.empty() : tensor<1x32x80x128xf32>
    %4604 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4602 : tensor<1x80x32x128xf32>) outs(%4603 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1657 = tensor.extract_slice %expanded_628[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1658 = tensor.extract_slice %extracted_slice_1657[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1659 = tensor.extract_slice %extracted_slice_1658[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1660 = tensor.extract_slice %expanded_630[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1661 = tensor.extract_slice %extracted_slice_1660[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1662 = tensor.extract_slice %extracted_slice_1661[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %4605 = tensor.empty() : tensor<1x80x128xf32>
    %4606 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1659 : tensor<1x1x80x128xf32>) outs(%4605 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %4607 = tensor.empty() : tensor<80x128xf32>
    %4608 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%4606 : tensor<1x80x128xf32>) outs(%4607 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %4609 = tensor.empty() : tensor<1x80x128xf32>
    %4610 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1662 : tensor<1x1x80x128xf32>) outs(%4609 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %4611 = tensor.empty() : tensor<80x128xf32>
    %4612 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%4610 : tensor<1x80x128xf32>) outs(%4611 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %4613 = tensor.empty() : tensor<1x80x128xf32>
    %4614 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%4613 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %4608[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %4615 = "tosa.reshape"(%4614) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %4616 = tensor.empty() : tensor<1x80x128xf32>
    %4617 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%4616 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %4612[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %4618 = "tosa.reshape"(%4617) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %4619 = tensor.empty() : tensor<1x32x80x128xf32>
    %4620 = tensor.empty() : tensor<1x32x80x128xf32>
    %4621 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4615 : tensor<1x1x80x128xf32>) outs(%4620 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4622 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4598, %4621 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4619 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1663 = tensor.extract_slice %4598[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1664 = tensor.extract_slice %4598[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %4623 = tensor.empty() : tensor<1x32x80x64xf32>
    %4624 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1664 : tensor<1x32x80x64xf32>) outs(%4623 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %4625 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1665 = tensor.insert_slice %4624 into %4625[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1666 = tensor.insert_slice %extracted_slice_1663 into %inserted_slice_1665[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %4626 = tensor.empty() : tensor<1x32x80x128xf32>
    %4627 = tensor.empty() : tensor<1x32x80x128xf32>
    %4628 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4618 : tensor<1x1x80x128xf32>) outs(%4627 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4629 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1666, %4628 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4626 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %4630 = "tosa.add"(%4622, %4629) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4631 = tensor.empty() : tensor<1x32x80x128xf32>
    %4632 = tensor.empty() : tensor<1x32x80x128xf32>
    %4633 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4615 : tensor<1x1x80x128xf32>) outs(%4632 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4634 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4601, %4633 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4631 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1667 = tensor.extract_slice %4601[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1668 = tensor.extract_slice %4601[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %4635 = tensor.empty() : tensor<1x32x80x64xf32>
    %4636 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1668 : tensor<1x32x80x64xf32>) outs(%4635 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %4637 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1669 = tensor.insert_slice %4636 into %4637[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1670 = tensor.insert_slice %extracted_slice_1667 into %inserted_slice_1669[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %4638 = tensor.empty() : tensor<1x32x80x128xf32>
    %4639 = tensor.empty() : tensor<1x32x80x128xf32>
    %4640 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4618 : tensor<1x1x80x128xf32>) outs(%4639 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4641 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1670, %4640 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4638 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %4642 = "tosa.add"(%4634, %4641) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4643 = tensor.empty() : tensor<1x32x128x80xf32>
    %4644 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4642 : tensor<1x32x80x128xf32>) outs(%4643 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %4645 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1671 = tensor.extract_slice %4630[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1672 = tensor.insert_slice %extracted_slice_1671 into %4645[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %4646 = "tosa.reshape"(%inserted_slice_1672) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %4647 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1673 = tensor.extract_slice %4644[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1674 = tensor.insert_slice %extracted_slice_1673 into %4647[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %4648 = "tosa.reshape"(%inserted_slice_1674) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %4649 = tensor.empty() : tensor<32x80x80xf32>
    %4650 = linalg.batch_matmul ins(%4646, %4648 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%4649 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %4651 = "tosa.reshape"(%4650) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1675 = arith.constant 11.3137083 : f32
    %4652 = tensor.empty() : tensor<1x32x80x80xf32>
    %4653 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4651 : tensor<1x32x80x80xf32>) outs(%4652 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.divf %in, %cst_1675 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %4654 = "tosa.add"(%4653, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %4655 = tensor.empty() : tensor<1x32x80x1xf32>
    %4656 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4655 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %4657 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4654 : tensor<1x32x80x80xf32>) outs(%4655 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.maxf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %4658 = tensor.empty() : tensor<1x32x80x80xf32>
    %4659 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4654, %4657 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%4658 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.subf %in, %in_1777 : f32
      %5231 = math.exp %5230 : f32
      linalg.yield %5231 : f32
    } -> tensor<1x32x80x80xf32>
    %4660 = tensor.empty() : tensor<1x32x80x1xf32>
    %4661 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4660 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %4662 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4659 : tensor<1x32x80x80xf32>) outs(%4661 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.addf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %4663 = tensor.empty() : tensor<1x32x80x80xf32>
    %4664 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4659, %4662 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%4663 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.divf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %4665 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1676 = tensor.extract_slice %4664[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1677 = tensor.insert_slice %extracted_slice_1676 into %4665[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %4666 = "tosa.reshape"(%inserted_slice_1677) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %4667 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1678 = tensor.extract_slice %4604[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1679 = tensor.insert_slice %extracted_slice_1678 into %4667[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %4668 = "tosa.reshape"(%inserted_slice_1679) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %4669 = tensor.empty() : tensor<32x80x128xf32>
    %4670 = linalg.batch_matmul ins(%4666, %4668 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%4669 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %4671 = "tosa.reshape"(%4670) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4672 = tensor.empty() : tensor<1x80x32x128xf32>
    %4673 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4671 : tensor<1x32x80x128xf32>) outs(%4672 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1680 = tensor.extract_slice %4673[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %4674 = "tosa.reshape"(%extracted_slice_1680) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %4675 = tensor.empty() : tensor<4096x4096xf32>
    %4676 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_464 : tensor<4096x4096xf32>) outs(%4675 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4677 = "tosa.reshape"(%4674) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4678 = tensor.empty() : tensor<80x4096xf32>
    %4679 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4678 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %4680 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4677, %4676 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%4679 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %4681 = "tosa.reshape"(%4680) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4682 = "tosa.add"(%4560, %4681) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %4683 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1681 = arith.constant 2 : i32
    %4684 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4682 : tensor<1x80x4096xf32>) outs(%4683 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1681 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1682 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %4685 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4684 : tensor<1x80x4096xf32>) outs(%cst_1682 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1683 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4686 = "tosa.add"(%4685, %cst_1683) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %4687 = tensor.empty() : tensor<1x80x1xf32>
    %4688 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4686 : tensor<1x80x1xf32>) outs(%4687 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %4689 = tensor.empty() : tensor<1x80x4096xf32>
    %4690 = tensor.empty() : tensor<1x80x4096xf32>
    %4691 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4688 : tensor<1x80x1xf32>) outs(%4690 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4692 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4682, %4691 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4689 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %4693 = tensor.empty() : tensor<1x80x4096xf32>
    %4694 = tensor.empty() : tensor<1x80x4096xf32>
    %4695 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_56 : tensor<4096xf32>) outs(%4694 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4696 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4695, %4692 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4693 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %4697 = tensor.empty() : tensor<4096x11008xf32>
    %4698 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_466 : tensor<11008x4096xf32>) outs(%4697 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4699 = "tosa.reshape"(%4696) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4700 = tensor.empty() : tensor<80x11008xf32>
    %4701 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4700 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %4702 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4699, %4698 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%4701 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %4703 = "tosa.reshape"(%4702) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %4704 = tensor.empty() : tensor<1x80x11008xf32>
    %4705 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4703 : tensor<1x80x11008xf32>) outs(%4704 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      %5231 = math.exp %5230 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5232 = arith.addf %cst_1777, %5231 : f32
      %5233 = arith.divf %in, %5232 : f32
      linalg.yield %5233 : f32
    } -> tensor<1x80x11008xf32>
    %4706 = tensor.empty() : tensor<4096x11008xf32>
    %4707 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_468 : tensor<11008x4096xf32>) outs(%4706 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4708 = "tosa.reshape"(%4696) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4709 = tensor.empty() : tensor<80x11008xf32>
    %4710 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4709 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %4711 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4708, %4707 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%4710 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %4712 = "tosa.reshape"(%4711) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %4713 = tensor.empty() : tensor<1x80x11008xf32>
    %4714 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4705, %4712 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%4713 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x11008xf32>
    %4715 = tensor.empty() : tensor<11008x4096xf32>
    %4716 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_470 : tensor<4096x11008xf32>) outs(%4715 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %4717 = "tosa.reshape"(%4714) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %4718 = tensor.empty() : tensor<80x4096xf32>
    %4719 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4718 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %4720 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4717, %4716 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%4719 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %4721 = "tosa.reshape"(%4720) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4722 = "tosa.add"(%4682, %4721) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %4723 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1684 = arith.constant 2 : i32
    %4724 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4722 : tensor<1x80x4096xf32>) outs(%4723 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1684 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1685 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %4725 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4724 : tensor<1x80x4096xf32>) outs(%cst_1685 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1686 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4726 = "tosa.add"(%4725, %cst_1686) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %4727 = tensor.empty() : tensor<1x80x1xf32>
    %4728 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4726 : tensor<1x80x1xf32>) outs(%4727 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %4729 = tensor.empty() : tensor<1x80x4096xf32>
    %4730 = tensor.empty() : tensor<1x80x4096xf32>
    %4731 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4728 : tensor<1x80x1xf32>) outs(%4730 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4732 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4722, %4731 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4729 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %4733 = tensor.empty() : tensor<1x80x4096xf32>
    %4734 = tensor.empty() : tensor<1x80x4096xf32>
    %4735 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_57 : tensor<4096xf32>) outs(%4734 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4736 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4735, %4732 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4733 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %4737 = tensor.empty() : tensor<4096x4096xf32>
    %4738 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_472 : tensor<4096x4096xf32>) outs(%4737 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4739 = "tosa.reshape"(%4736) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4740 = tensor.empty() : tensor<80x4096xf32>
    %4741 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4740 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %4742 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4739, %4738 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%4741 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %4743 = "tosa.reshape"(%4742) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4744 = tensor.empty() : tensor<4096x4096xf32>
    %4745 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_474 : tensor<4096x4096xf32>) outs(%4744 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4746 = "tosa.reshape"(%4736) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4747 = tensor.empty() : tensor<80x4096xf32>
    %4748 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4747 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %4749 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4746, %4745 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%4748 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %4750 = "tosa.reshape"(%4749) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4751 = tensor.empty() : tensor<4096x4096xf32>
    %4752 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_476 : tensor<4096x4096xf32>) outs(%4751 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4753 = "tosa.reshape"(%4736) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4754 = tensor.empty() : tensor<80x4096xf32>
    %4755 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4754 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %4756 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4753, %4752 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%4755 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %4757 = "tosa.reshape"(%4756) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4758 = "tosa.reshape"(%4743) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4759 = tensor.empty() : tensor<1x32x80x128xf32>
    %4760 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4758 : tensor<1x80x32x128xf32>) outs(%4759 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4761 = "tosa.reshape"(%4750) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4762 = tensor.empty() : tensor<1x32x80x128xf32>
    %4763 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4761 : tensor<1x80x32x128xf32>) outs(%4762 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4764 = "tosa.reshape"(%4757) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4765 = tensor.empty() : tensor<1x32x80x128xf32>
    %4766 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4764 : tensor<1x80x32x128xf32>) outs(%4765 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1687 = tensor.extract_slice %expanded_632[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1688 = tensor.extract_slice %extracted_slice_1687[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1689 = tensor.extract_slice %extracted_slice_1688[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1690 = tensor.extract_slice %expanded_634[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1691 = tensor.extract_slice %extracted_slice_1690[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1692 = tensor.extract_slice %extracted_slice_1691[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %4767 = tensor.empty() : tensor<1x80x128xf32>
    %4768 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1689 : tensor<1x1x80x128xf32>) outs(%4767 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %4769 = tensor.empty() : tensor<80x128xf32>
    %4770 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%4768 : tensor<1x80x128xf32>) outs(%4769 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %4771 = tensor.empty() : tensor<1x80x128xf32>
    %4772 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1692 : tensor<1x1x80x128xf32>) outs(%4771 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %4773 = tensor.empty() : tensor<80x128xf32>
    %4774 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%4772 : tensor<1x80x128xf32>) outs(%4773 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %4775 = tensor.empty() : tensor<1x80x128xf32>
    %4776 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%4775 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %4770[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %4777 = "tosa.reshape"(%4776) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %4778 = tensor.empty() : tensor<1x80x128xf32>
    %4779 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%4778 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %4774[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %4780 = "tosa.reshape"(%4779) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %4781 = tensor.empty() : tensor<1x32x80x128xf32>
    %4782 = tensor.empty() : tensor<1x32x80x128xf32>
    %4783 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4777 : tensor<1x1x80x128xf32>) outs(%4782 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4784 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4760, %4783 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4781 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1693 = tensor.extract_slice %4760[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1694 = tensor.extract_slice %4760[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %4785 = tensor.empty() : tensor<1x32x80x64xf32>
    %4786 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1694 : tensor<1x32x80x64xf32>) outs(%4785 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %4787 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1695 = tensor.insert_slice %4786 into %4787[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1696 = tensor.insert_slice %extracted_slice_1693 into %inserted_slice_1695[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %4788 = tensor.empty() : tensor<1x32x80x128xf32>
    %4789 = tensor.empty() : tensor<1x32x80x128xf32>
    %4790 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4780 : tensor<1x1x80x128xf32>) outs(%4789 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4791 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1696, %4790 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4788 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %4792 = "tosa.add"(%4784, %4791) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4793 = tensor.empty() : tensor<1x32x80x128xf32>
    %4794 = tensor.empty() : tensor<1x32x80x128xf32>
    %4795 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4777 : tensor<1x1x80x128xf32>) outs(%4794 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4796 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4763, %4795 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4793 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1697 = tensor.extract_slice %4763[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1698 = tensor.extract_slice %4763[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %4797 = tensor.empty() : tensor<1x32x80x64xf32>
    %4798 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1698 : tensor<1x32x80x64xf32>) outs(%4797 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %4799 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1699 = tensor.insert_slice %4798 into %4799[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1700 = tensor.insert_slice %extracted_slice_1697 into %inserted_slice_1699[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %4800 = tensor.empty() : tensor<1x32x80x128xf32>
    %4801 = tensor.empty() : tensor<1x32x80x128xf32>
    %4802 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4780 : tensor<1x1x80x128xf32>) outs(%4801 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4803 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1700, %4802 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4800 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %4804 = "tosa.add"(%4796, %4803) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4805 = tensor.empty() : tensor<1x32x128x80xf32>
    %4806 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4804 : tensor<1x32x80x128xf32>) outs(%4805 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %4807 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1701 = tensor.extract_slice %4792[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1702 = tensor.insert_slice %extracted_slice_1701 into %4807[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %4808 = "tosa.reshape"(%inserted_slice_1702) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %4809 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1703 = tensor.extract_slice %4806[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1704 = tensor.insert_slice %extracted_slice_1703 into %4809[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %4810 = "tosa.reshape"(%inserted_slice_1704) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %4811 = tensor.empty() : tensor<32x80x80xf32>
    %4812 = linalg.batch_matmul ins(%4808, %4810 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%4811 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %4813 = "tosa.reshape"(%4812) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1705 = arith.constant 11.3137083 : f32
    %4814 = tensor.empty() : tensor<1x32x80x80xf32>
    %4815 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4813 : tensor<1x32x80x80xf32>) outs(%4814 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.divf %in, %cst_1705 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %4816 = "tosa.add"(%4815, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %4817 = tensor.empty() : tensor<1x32x80x1xf32>
    %4818 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4817 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %4819 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4816 : tensor<1x32x80x80xf32>) outs(%4817 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.maxf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %4820 = tensor.empty() : tensor<1x32x80x80xf32>
    %4821 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4816, %4819 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%4820 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.subf %in, %in_1777 : f32
      %5231 = math.exp %5230 : f32
      linalg.yield %5231 : f32
    } -> tensor<1x32x80x80xf32>
    %4822 = tensor.empty() : tensor<1x32x80x1xf32>
    %4823 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4822 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %4824 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4821 : tensor<1x32x80x80xf32>) outs(%4823 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.addf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %4825 = tensor.empty() : tensor<1x32x80x80xf32>
    %4826 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4821, %4824 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%4825 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.divf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %4827 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1706 = tensor.extract_slice %4826[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1707 = tensor.insert_slice %extracted_slice_1706 into %4827[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %4828 = "tosa.reshape"(%inserted_slice_1707) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %4829 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1708 = tensor.extract_slice %4766[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1709 = tensor.insert_slice %extracted_slice_1708 into %4829[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %4830 = "tosa.reshape"(%inserted_slice_1709) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %4831 = tensor.empty() : tensor<32x80x128xf32>
    %4832 = linalg.batch_matmul ins(%4828, %4830 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%4831 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %4833 = "tosa.reshape"(%4832) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4834 = tensor.empty() : tensor<1x80x32x128xf32>
    %4835 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4833 : tensor<1x32x80x128xf32>) outs(%4834 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1710 = tensor.extract_slice %4835[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %4836 = "tosa.reshape"(%extracted_slice_1710) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %4837 = tensor.empty() : tensor<4096x4096xf32>
    %4838 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_478 : tensor<4096x4096xf32>) outs(%4837 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4839 = "tosa.reshape"(%4836) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4840 = tensor.empty() : tensor<80x4096xf32>
    %4841 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4840 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %4842 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4839, %4838 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%4841 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %4843 = "tosa.reshape"(%4842) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4844 = "tosa.add"(%4722, %4843) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %4845 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1711 = arith.constant 2 : i32
    %4846 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4844 : tensor<1x80x4096xf32>) outs(%4845 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1711 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1712 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %4847 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4846 : tensor<1x80x4096xf32>) outs(%cst_1712 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1713 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4848 = "tosa.add"(%4847, %cst_1713) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %4849 = tensor.empty() : tensor<1x80x1xf32>
    %4850 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4848 : tensor<1x80x1xf32>) outs(%4849 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %4851 = tensor.empty() : tensor<1x80x4096xf32>
    %4852 = tensor.empty() : tensor<1x80x4096xf32>
    %4853 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4850 : tensor<1x80x1xf32>) outs(%4852 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4854 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4844, %4853 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4851 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %4855 = tensor.empty() : tensor<1x80x4096xf32>
    %4856 = tensor.empty() : tensor<1x80x4096xf32>
    %4857 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_58 : tensor<4096xf32>) outs(%4856 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4858 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4857, %4854 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4855 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %4859 = tensor.empty() : tensor<4096x11008xf32>
    %4860 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_480 : tensor<11008x4096xf32>) outs(%4859 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4861 = "tosa.reshape"(%4858) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4862 = tensor.empty() : tensor<80x11008xf32>
    %4863 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4862 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %4864 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4861, %4860 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%4863 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %4865 = "tosa.reshape"(%4864) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %4866 = tensor.empty() : tensor<1x80x11008xf32>
    %4867 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4865 : tensor<1x80x11008xf32>) outs(%4866 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      %5231 = math.exp %5230 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5232 = arith.addf %cst_1777, %5231 : f32
      %5233 = arith.divf %in, %5232 : f32
      linalg.yield %5233 : f32
    } -> tensor<1x80x11008xf32>
    %4868 = tensor.empty() : tensor<4096x11008xf32>
    %4869 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_482 : tensor<11008x4096xf32>) outs(%4868 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4870 = "tosa.reshape"(%4858) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4871 = tensor.empty() : tensor<80x11008xf32>
    %4872 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4871 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %4873 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4870, %4869 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%4872 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %4874 = "tosa.reshape"(%4873) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %4875 = tensor.empty() : tensor<1x80x11008xf32>
    %4876 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4867, %4874 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%4875 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x11008xf32>
    %4877 = tensor.empty() : tensor<11008x4096xf32>
    %4878 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_484 : tensor<4096x11008xf32>) outs(%4877 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %4879 = "tosa.reshape"(%4876) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %4880 = tensor.empty() : tensor<80x4096xf32>
    %4881 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4880 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %4882 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4879, %4878 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%4881 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %4883 = "tosa.reshape"(%4882) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4884 = "tosa.add"(%4844, %4883) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %4885 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1714 = arith.constant 2 : i32
    %4886 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4884 : tensor<1x80x4096xf32>) outs(%4885 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1714 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1715 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %4887 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4886 : tensor<1x80x4096xf32>) outs(%cst_1715 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1716 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4888 = "tosa.add"(%4887, %cst_1716) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %4889 = tensor.empty() : tensor<1x80x1xf32>
    %4890 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4888 : tensor<1x80x1xf32>) outs(%4889 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %4891 = tensor.empty() : tensor<1x80x4096xf32>
    %4892 = tensor.empty() : tensor<1x80x4096xf32>
    %4893 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4890 : tensor<1x80x1xf32>) outs(%4892 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4894 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4884, %4893 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4891 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %4895 = tensor.empty() : tensor<1x80x4096xf32>
    %4896 = tensor.empty() : tensor<1x80x4096xf32>
    %4897 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_59 : tensor<4096xf32>) outs(%4896 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4898 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4897, %4894 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4895 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %4899 = tensor.empty() : tensor<4096x4096xf32>
    %4900 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_486 : tensor<4096x4096xf32>) outs(%4899 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4901 = "tosa.reshape"(%4898) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4902 = tensor.empty() : tensor<80x4096xf32>
    %4903 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4902 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %4904 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4901, %4900 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%4903 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %4905 = "tosa.reshape"(%4904) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4906 = tensor.empty() : tensor<4096x4096xf32>
    %4907 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_488 : tensor<4096x4096xf32>) outs(%4906 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4908 = "tosa.reshape"(%4898) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4909 = tensor.empty() : tensor<80x4096xf32>
    %4910 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4909 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %4911 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4908, %4907 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%4910 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %4912 = "tosa.reshape"(%4911) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4913 = tensor.empty() : tensor<4096x4096xf32>
    %4914 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_490 : tensor<4096x4096xf32>) outs(%4913 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4915 = "tosa.reshape"(%4898) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4916 = tensor.empty() : tensor<80x4096xf32>
    %4917 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4916 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %4918 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4915, %4914 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%4917 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %4919 = "tosa.reshape"(%4918) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4920 = "tosa.reshape"(%4905) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4921 = tensor.empty() : tensor<1x32x80x128xf32>
    %4922 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4920 : tensor<1x80x32x128xf32>) outs(%4921 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4923 = "tosa.reshape"(%4912) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4924 = tensor.empty() : tensor<1x32x80x128xf32>
    %4925 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4923 : tensor<1x80x32x128xf32>) outs(%4924 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4926 = "tosa.reshape"(%4919) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4927 = tensor.empty() : tensor<1x32x80x128xf32>
    %4928 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4926 : tensor<1x80x32x128xf32>) outs(%4927 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1717 = tensor.extract_slice %expanded_636[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1718 = tensor.extract_slice %extracted_slice_1717[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1719 = tensor.extract_slice %extracted_slice_1718[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1720 = tensor.extract_slice %expanded_638[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1721 = tensor.extract_slice %extracted_slice_1720[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1722 = tensor.extract_slice %extracted_slice_1721[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %4929 = tensor.empty() : tensor<1x80x128xf32>
    %4930 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1719 : tensor<1x1x80x128xf32>) outs(%4929 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %4931 = tensor.empty() : tensor<80x128xf32>
    %4932 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%4930 : tensor<1x80x128xf32>) outs(%4931 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %4933 = tensor.empty() : tensor<1x80x128xf32>
    %4934 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1722 : tensor<1x1x80x128xf32>) outs(%4933 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %4935 = tensor.empty() : tensor<80x128xf32>
    %4936 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%4934 : tensor<1x80x128xf32>) outs(%4935 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %4937 = tensor.empty() : tensor<1x80x128xf32>
    %4938 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%4937 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %4932[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %4939 = "tosa.reshape"(%4938) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %4940 = tensor.empty() : tensor<1x80x128xf32>
    %4941 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%4940 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %4936[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %4942 = "tosa.reshape"(%4941) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %4943 = tensor.empty() : tensor<1x32x80x128xf32>
    %4944 = tensor.empty() : tensor<1x32x80x128xf32>
    %4945 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4939 : tensor<1x1x80x128xf32>) outs(%4944 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4946 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4922, %4945 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4943 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1723 = tensor.extract_slice %4922[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1724 = tensor.extract_slice %4922[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %4947 = tensor.empty() : tensor<1x32x80x64xf32>
    %4948 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1724 : tensor<1x32x80x64xf32>) outs(%4947 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %4949 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1725 = tensor.insert_slice %4948 into %4949[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1726 = tensor.insert_slice %extracted_slice_1723 into %inserted_slice_1725[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %4950 = tensor.empty() : tensor<1x32x80x128xf32>
    %4951 = tensor.empty() : tensor<1x32x80x128xf32>
    %4952 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4942 : tensor<1x1x80x128xf32>) outs(%4951 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4953 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1726, %4952 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4950 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %4954 = "tosa.add"(%4946, %4953) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4955 = tensor.empty() : tensor<1x32x80x128xf32>
    %4956 = tensor.empty() : tensor<1x32x80x128xf32>
    %4957 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4939 : tensor<1x1x80x128xf32>) outs(%4956 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4958 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4925, %4957 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4955 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1727 = tensor.extract_slice %4925[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1728 = tensor.extract_slice %4925[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %4959 = tensor.empty() : tensor<1x32x80x64xf32>
    %4960 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1728 : tensor<1x32x80x64xf32>) outs(%4959 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %4961 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1729 = tensor.insert_slice %4960 into %4961[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1730 = tensor.insert_slice %extracted_slice_1727 into %inserted_slice_1729[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %4962 = tensor.empty() : tensor<1x32x80x128xf32>
    %4963 = tensor.empty() : tensor<1x32x80x128xf32>
    %4964 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4942 : tensor<1x1x80x128xf32>) outs(%4963 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4965 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1730, %4964 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4962 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %4966 = "tosa.add"(%4958, %4965) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4967 = tensor.empty() : tensor<1x32x128x80xf32>
    %4968 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4966 : tensor<1x32x80x128xf32>) outs(%4967 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %4969 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1731 = tensor.extract_slice %4954[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1732 = tensor.insert_slice %extracted_slice_1731 into %4969[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %4970 = "tosa.reshape"(%inserted_slice_1732) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %4971 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1733 = tensor.extract_slice %4968[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1734 = tensor.insert_slice %extracted_slice_1733 into %4971[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %4972 = "tosa.reshape"(%inserted_slice_1734) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %4973 = tensor.empty() : tensor<32x80x80xf32>
    %4974 = linalg.batch_matmul ins(%4970, %4972 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%4973 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %4975 = "tosa.reshape"(%4974) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1735 = arith.constant 11.3137083 : f32
    %4976 = tensor.empty() : tensor<1x32x80x80xf32>
    %4977 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4975 : tensor<1x32x80x80xf32>) outs(%4976 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.divf %in, %cst_1735 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %4978 = "tosa.add"(%4977, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %4979 = tensor.empty() : tensor<1x32x80x1xf32>
    %4980 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4979 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %4981 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4978 : tensor<1x32x80x80xf32>) outs(%4979 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.maxf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %4982 = tensor.empty() : tensor<1x32x80x80xf32>
    %4983 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4978, %4981 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%4982 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.subf %in, %in_1777 : f32
      %5231 = math.exp %5230 : f32
      linalg.yield %5231 : f32
    } -> tensor<1x32x80x80xf32>
    %4984 = tensor.empty() : tensor<1x32x80x1xf32>
    %4985 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4984 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %4986 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4983 : tensor<1x32x80x80xf32>) outs(%4985 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.addf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %4987 = tensor.empty() : tensor<1x32x80x80xf32>
    %4988 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4983, %4986 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%4987 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.divf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %4989 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1736 = tensor.extract_slice %4988[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1737 = tensor.insert_slice %extracted_slice_1736 into %4989[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %4990 = "tosa.reshape"(%inserted_slice_1737) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %4991 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1738 = tensor.extract_slice %4928[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1739 = tensor.insert_slice %extracted_slice_1738 into %4991[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %4992 = "tosa.reshape"(%inserted_slice_1739) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %4993 = tensor.empty() : tensor<32x80x128xf32>
    %4994 = linalg.batch_matmul ins(%4990, %4992 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%4993 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %4995 = "tosa.reshape"(%4994) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4996 = tensor.empty() : tensor<1x80x32x128xf32>
    %4997 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4995 : tensor<1x32x80x128xf32>) outs(%4996 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1740 = tensor.extract_slice %4997[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %4998 = "tosa.reshape"(%extracted_slice_1740) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %4999 = tensor.empty() : tensor<4096x4096xf32>
    %5000 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_492 : tensor<4096x4096xf32>) outs(%4999 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %5001 = "tosa.reshape"(%4998) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %5002 = tensor.empty() : tensor<80x4096xf32>
    %5003 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%5002 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %5004 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%5001, %5000 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%5003 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %5005 = "tosa.reshape"(%5004) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %5006 = "tosa.add"(%4884, %5005) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %5007 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1741 = arith.constant 2 : i32
    %5008 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%5006 : tensor<1x80x4096xf32>) outs(%5007 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1741 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1742 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %5009 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%5008 : tensor<1x80x4096xf32>) outs(%cst_1742 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1743 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %5010 = "tosa.add"(%5009, %cst_1743) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %5011 = tensor.empty() : tensor<1x80x1xf32>
    %5012 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%5010 : tensor<1x80x1xf32>) outs(%5011 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %5013 = tensor.empty() : tensor<1x80x4096xf32>
    %5014 = tensor.empty() : tensor<1x80x4096xf32>
    %5015 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%5012 : tensor<1x80x1xf32>) outs(%5014 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %5016 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%5006, %5015 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%5013 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %5017 = tensor.empty() : tensor<1x80x4096xf32>
    %5018 = tensor.empty() : tensor<1x80x4096xf32>
    %5019 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_60 : tensor<4096xf32>) outs(%5018 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %5020 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%5019, %5016 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%5017 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %5021 = tensor.empty() : tensor<4096x11008xf32>
    %5022 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_494 : tensor<11008x4096xf32>) outs(%5021 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %5023 = "tosa.reshape"(%5020) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %5024 = tensor.empty() : tensor<80x11008xf32>
    %5025 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%5024 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %5026 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%5023, %5022 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%5025 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %5027 = "tosa.reshape"(%5026) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %5028 = tensor.empty() : tensor<1x80x11008xf32>
    %5029 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%5027 : tensor<1x80x11008xf32>) outs(%5028 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      %5231 = math.exp %5230 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5232 = arith.addf %cst_1777, %5231 : f32
      %5233 = arith.divf %in, %5232 : f32
      linalg.yield %5233 : f32
    } -> tensor<1x80x11008xf32>
    %5030 = tensor.empty() : tensor<4096x11008xf32>
    %5031 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_496 : tensor<11008x4096xf32>) outs(%5030 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %5032 = "tosa.reshape"(%5020) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %5033 = tensor.empty() : tensor<80x11008xf32>
    %5034 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%5033 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %5035 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%5032, %5031 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%5034 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %5036 = "tosa.reshape"(%5035) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %5037 = tensor.empty() : tensor<1x80x11008xf32>
    %5038 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%5029, %5036 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%5037 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x11008xf32>
    %5039 = tensor.empty() : tensor<11008x4096xf32>
    %5040 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_498 : tensor<4096x11008xf32>) outs(%5039 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %5041 = "tosa.reshape"(%5038) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %5042 = tensor.empty() : tensor<80x4096xf32>
    %5043 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%5042 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %5044 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%5041, %5040 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%5043 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %5045 = "tosa.reshape"(%5044) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %5046 = "tosa.add"(%5006, %5045) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %5047 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1744 = arith.constant 2 : i32
    %5048 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%5046 : tensor<1x80x4096xf32>) outs(%5047 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1744 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1745 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %5049 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%5048 : tensor<1x80x4096xf32>) outs(%cst_1745 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1746 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %5050 = "tosa.add"(%5049, %cst_1746) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %5051 = tensor.empty() : tensor<1x80x1xf32>
    %5052 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%5050 : tensor<1x80x1xf32>) outs(%5051 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %5053 = tensor.empty() : tensor<1x80x4096xf32>
    %5054 = tensor.empty() : tensor<1x80x4096xf32>
    %5055 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%5052 : tensor<1x80x1xf32>) outs(%5054 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %5056 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%5046, %5055 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%5053 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %5057 = tensor.empty() : tensor<1x80x4096xf32>
    %5058 = tensor.empty() : tensor<1x80x4096xf32>
    %5059 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_61 : tensor<4096xf32>) outs(%5058 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %5060 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%5059, %5056 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%5057 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %5061 = tensor.empty() : tensor<4096x4096xf32>
    %5062 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_500 : tensor<4096x4096xf32>) outs(%5061 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %5063 = "tosa.reshape"(%5060) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %5064 = tensor.empty() : tensor<80x4096xf32>
    %5065 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%5064 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %5066 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%5063, %5062 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%5065 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %5067 = "tosa.reshape"(%5066) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %5068 = tensor.empty() : tensor<4096x4096xf32>
    %5069 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_502 : tensor<4096x4096xf32>) outs(%5068 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %5070 = "tosa.reshape"(%5060) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %5071 = tensor.empty() : tensor<80x4096xf32>
    %5072 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%5071 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %5073 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%5070, %5069 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%5072 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %5074 = "tosa.reshape"(%5073) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %5075 = tensor.empty() : tensor<4096x4096xf32>
    %5076 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_504 : tensor<4096x4096xf32>) outs(%5075 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %5077 = "tosa.reshape"(%5060) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %5078 = tensor.empty() : tensor<80x4096xf32>
    %5079 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%5078 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %5080 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%5077, %5076 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%5079 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %5081 = "tosa.reshape"(%5080) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %5082 = "tosa.reshape"(%5067) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %5083 = tensor.empty() : tensor<1x32x80x128xf32>
    %5084 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%5082 : tensor<1x80x32x128xf32>) outs(%5083 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %5085 = "tosa.reshape"(%5074) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %5086 = tensor.empty() : tensor<1x32x80x128xf32>
    %5087 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%5085 : tensor<1x80x32x128xf32>) outs(%5086 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %5088 = "tosa.reshape"(%5081) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %5089 = tensor.empty() : tensor<1x32x80x128xf32>
    %5090 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%5088 : tensor<1x80x32x128xf32>) outs(%5089 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1747 = tensor.extract_slice %expanded_640[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1748 = tensor.extract_slice %extracted_slice_1747[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1749 = tensor.extract_slice %extracted_slice_1748[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1750 = tensor.extract_slice %expanded_642[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1751 = tensor.extract_slice %extracted_slice_1750[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1752 = tensor.extract_slice %extracted_slice_1751[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %5091 = tensor.empty() : tensor<1x80x128xf32>
    %5092 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1749 : tensor<1x1x80x128xf32>) outs(%5091 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %5093 = tensor.empty() : tensor<80x128xf32>
    %5094 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%5092 : tensor<1x80x128xf32>) outs(%5093 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %5095 = tensor.empty() : tensor<1x80x128xf32>
    %5096 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1752 : tensor<1x1x80x128xf32>) outs(%5095 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %5097 = tensor.empty() : tensor<80x128xf32>
    %5098 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%5096 : tensor<1x80x128xf32>) outs(%5097 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %5099 = tensor.empty() : tensor<1x80x128xf32>
    %5100 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%5099 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %5094[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %5101 = "tosa.reshape"(%5100) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %5102 = tensor.empty() : tensor<1x80x128xf32>
    %5103 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%5102 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5230 = arith.index_cast %in : i64 to index
      %5231 = linalg.index 2 : index
      %extracted = tensor.extract %5098[%5230, %5231] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %5104 = "tosa.reshape"(%5103) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %5105 = tensor.empty() : tensor<1x32x80x128xf32>
    %5106 = tensor.empty() : tensor<1x32x80x128xf32>
    %5107 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%5101 : tensor<1x1x80x128xf32>) outs(%5106 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %5108 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%5084, %5107 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%5105 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1753 = tensor.extract_slice %5084[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1754 = tensor.extract_slice %5084[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %5109 = tensor.empty() : tensor<1x32x80x64xf32>
    %5110 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1754 : tensor<1x32x80x64xf32>) outs(%5109 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %5111 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1755 = tensor.insert_slice %5110 into %5111[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1756 = tensor.insert_slice %extracted_slice_1753 into %inserted_slice_1755[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %5112 = tensor.empty() : tensor<1x32x80x128xf32>
    %5113 = tensor.empty() : tensor<1x32x80x128xf32>
    %5114 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%5104 : tensor<1x1x80x128xf32>) outs(%5113 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %5115 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1756, %5114 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%5112 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %5116 = "tosa.add"(%5108, %5115) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %5117 = tensor.empty() : tensor<1x32x80x128xf32>
    %5118 = tensor.empty() : tensor<1x32x80x128xf32>
    %5119 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%5101 : tensor<1x1x80x128xf32>) outs(%5118 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %5120 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%5087, %5119 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%5117 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1757 = tensor.extract_slice %5087[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1758 = tensor.extract_slice %5087[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %5121 = tensor.empty() : tensor<1x32x80x64xf32>
    %5122 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1758 : tensor<1x32x80x64xf32>) outs(%5121 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x64xf32>
    %5123 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1759 = tensor.insert_slice %5122 into %5123[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1760 = tensor.insert_slice %extracted_slice_1757 into %inserted_slice_1759[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %5124 = tensor.empty() : tensor<1x32x80x128xf32>
    %5125 = tensor.empty() : tensor<1x32x80x128xf32>
    %5126 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%5104 : tensor<1x1x80x128xf32>) outs(%5125 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %5127 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1760, %5126 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%5124 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x128xf32>
    %5128 = "tosa.add"(%5120, %5127) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %5129 = tensor.empty() : tensor<1x32x128x80xf32>
    %5130 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%5128 : tensor<1x32x80x128xf32>) outs(%5129 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %5131 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1761 = tensor.extract_slice %5116[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1762 = tensor.insert_slice %extracted_slice_1761 into %5131[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %5132 = "tosa.reshape"(%inserted_slice_1762) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %5133 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1763 = tensor.extract_slice %5130[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1764 = tensor.insert_slice %extracted_slice_1763 into %5133[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %5134 = "tosa.reshape"(%inserted_slice_1764) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %5135 = tensor.empty() : tensor<32x80x80xf32>
    %5136 = linalg.batch_matmul ins(%5132, %5134 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%5135 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %5137 = "tosa.reshape"(%5136) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1765 = arith.constant 11.3137083 : f32
    %5138 = tensor.empty() : tensor<1x32x80x80xf32>
    %5139 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%5137 : tensor<1x32x80x80xf32>) outs(%5138 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.divf %in, %cst_1765 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %5140 = "tosa.add"(%5139, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %5141 = tensor.empty() : tensor<1x32x80x1xf32>
    %5142 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%5141 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %5143 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%5140 : tensor<1x32x80x80xf32>) outs(%5141 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.maxf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %5144 = tensor.empty() : tensor<1x32x80x80xf32>
    %5145 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%5140, %5143 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%5144 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.subf %in, %in_1777 : f32
      %5231 = math.exp %5230 : f32
      linalg.yield %5231 : f32
    } -> tensor<1x32x80x80xf32>
    %5146 = tensor.empty() : tensor<1x32x80x1xf32>
    %5147 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%5146 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %5148 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%5145 : tensor<1x32x80x80xf32>) outs(%5147 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.addf %in, %out : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x1xf32>
    %5149 = tensor.empty() : tensor<1x32x80x80xf32>
    %5150 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%5145, %5148 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%5149 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.divf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x32x80x80xf32>
    %5151 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1766 = tensor.extract_slice %5150[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1767 = tensor.insert_slice %extracted_slice_1766 into %5151[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %5152 = "tosa.reshape"(%inserted_slice_1767) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %5153 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1768 = tensor.extract_slice %5090[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1769 = tensor.insert_slice %extracted_slice_1768 into %5153[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %5154 = "tosa.reshape"(%inserted_slice_1769) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %5155 = tensor.empty() : tensor<32x80x128xf32>
    %5156 = linalg.batch_matmul ins(%5152, %5154 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%5155 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %5157 = "tosa.reshape"(%5156) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %5158 = tensor.empty() : tensor<1x80x32x128xf32>
    %5159 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%5157 : tensor<1x32x80x128xf32>) outs(%5158 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1770 = tensor.extract_slice %5159[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %5160 = "tosa.reshape"(%extracted_slice_1770) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %5161 = tensor.empty() : tensor<4096x4096xf32>
    %5162 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_506 : tensor<4096x4096xf32>) outs(%5161 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %5163 = "tosa.reshape"(%5160) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %5164 = tensor.empty() : tensor<80x4096xf32>
    %5165 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%5164 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %5166 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%5163, %5162 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%5165 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %5167 = "tosa.reshape"(%5166) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %5168 = "tosa.add"(%5046, %5167) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %5169 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1771 = arith.constant 2 : i32
    %5170 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%5168 : tensor<1x80x4096xf32>) outs(%5169 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1771 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1772 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %5171 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%5170 : tensor<1x80x4096xf32>) outs(%cst_1772 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1773 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %5172 = "tosa.add"(%5171, %cst_1773) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %5173 = tensor.empty() : tensor<1x80x1xf32>
    %5174 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%5172 : tensor<1x80x1xf32>) outs(%5173 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %5175 = tensor.empty() : tensor<1x80x4096xf32>
    %5176 = tensor.empty() : tensor<1x80x4096xf32>
    %5177 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%5174 : tensor<1x80x1xf32>) outs(%5176 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %5178 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%5168, %5177 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%5175 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %5179 = tensor.empty() : tensor<1x80x4096xf32>
    %5180 = tensor.empty() : tensor<1x80x4096xf32>
    %5181 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_62 : tensor<4096xf32>) outs(%5180 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %5182 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%5181, %5178 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%5179 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %5183 = tensor.empty() : tensor<4096x11008xf32>
    %5184 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_508 : tensor<11008x4096xf32>) outs(%5183 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %5185 = "tosa.reshape"(%5182) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %5186 = tensor.empty() : tensor<80x11008xf32>
    %5187 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%5186 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %5188 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%5185, %5184 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%5187 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %5189 = "tosa.reshape"(%5188) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %5190 = tensor.empty() : tensor<1x80x11008xf32>
    %5191 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%5189 : tensor<1x80x11008xf32>) outs(%5190 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = arith.negf %in : f32
      %5231 = math.exp %5230 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5232 = arith.addf %cst_1777, %5231 : f32
      %5233 = arith.divf %in, %5232 : f32
      linalg.yield %5233 : f32
    } -> tensor<1x80x11008xf32>
    %5192 = tensor.empty() : tensor<4096x11008xf32>
    %5193 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_510 : tensor<11008x4096xf32>) outs(%5192 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %5194 = "tosa.reshape"(%5182) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %5195 = tensor.empty() : tensor<80x11008xf32>
    %5196 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%5195 : tensor<80x11008xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x11008xf32>
    %5197 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%5194, %5193 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%5196 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x11008xf32>
    %5198 = "tosa.reshape"(%5197) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %5199 = tensor.empty() : tensor<1x80x11008xf32>
    %5200 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%5191, %5198 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%5199 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x11008xf32>
    %5201 = tensor.empty() : tensor<11008x4096xf32>
    %5202 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_512 : tensor<4096x11008xf32>) outs(%5201 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %5203 = "tosa.reshape"(%5200) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %5204 = tensor.empty() : tensor<80x4096xf32>
    %5205 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%5204 : tensor<80x4096xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x4096xf32>
    %5206 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%5203, %5202 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%5205 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x4096xf32>
    %5207 = "tosa.reshape"(%5206) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %5208 = "tosa.add"(%5168, %5207) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %5209 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1774 = arith.constant 2 : i32
    %5210 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%5208 : tensor<1x80x4096xf32>) outs(%5209 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.fpowi %in, %c2_i32_1774 : f32, i32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1775 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %5211 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%5210 : tensor<1x80x4096xf32>) outs(%cst_1775 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5230 = arith.divf %in, %cst_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<1x80x1xf32>
    %cst_1776 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %5212 = "tosa.add"(%5211, %cst_1776) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %5213 = tensor.empty() : tensor<1x80x1xf32>
    %5214 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%5212 : tensor<1x80x1xf32>) outs(%5213 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5230 = math.rsqrt %in : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x1xf32>
    %5215 = tensor.empty() : tensor<1x80x4096xf32>
    %5216 = tensor.empty() : tensor<1x80x4096xf32>
    %5217 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%5214 : tensor<1x80x1xf32>) outs(%5216 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %5218 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%5208, %5217 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%5215 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %5219 = tensor.empty() : tensor<1x80x4096xf32>
    %5220 = tensor.empty() : tensor<1x80x4096xf32>
    %5221 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_63 : tensor<4096xf32>) outs(%5220 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %5222 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%5221, %5218 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%5219 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5230 : f32
    } -> tensor<1x80x4096xf32>
    %5223 = tensor.empty() : tensor<4096x32000xf32>
    %5224 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_514 : tensor<32000x4096xf32>) outs(%5223 : tensor<4096x32000xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x32000xf32>
    %5225 = "tosa.reshape"(%5222) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %5226 = tensor.empty() : tensor<80x32000xf32>
    %5227 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%5226 : tensor<80x32000xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<80x32000xf32>
    %5228 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%5225, %5224 : tensor<80x4096xf32>, tensor<4096x32000xf32>) outs(%5227 : tensor<80x32000xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5230 = arith.mulf %in, %in_1777 : f32
      %5231 = arith.addf %5230, %out : f32
      linalg.yield %5231 : f32
    } -> tensor<80x32000xf32>
    %5229 = "tosa.reshape"(%5228) {new_shape = array<i64: 1, 80, 32000>} : (tensor<80x32000xf32>) -> tensor<1x80x32000xf32>
    return %5229 : tensor<1x80x32000xf32>
  }
}
