#map = affine_map<(d0, d1, d2) -> (d0, d1)>
#map1 = affine_map<(d0, d1, d2) -> (d0, d1, d2)>
#map2 = affine_map<(d0, d1, d2) -> (d1)>
#map3 = affine_map<(d0, d1, d2) -> (d0, d2)>
#map4 = affine_map<(d0, d1) -> (d0, d1)>
#map5 = affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>
#map6 = affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>
#map7 = affine_map<(d0, d1, d2, d3) -> (d0, d1, d3)>
#map8 = affine_map<(d0, d1, d2) -> (d2)>
#map9 = affine_map<(d0, d1) -> (d1, d0)>
#map10 = affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>
#map11 = affine_map<(d0, d1, d2) -> (d0, 0, d1, d2)>
#map12 = affine_map<(d0, d1) -> (0, d0, d1)>
#map13 = affine_map<(d0, d1, d2, d3, d4) -> (d0, d4, d2, d3)>
#map14 = affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>
#map15 = affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>
#map16 = affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>
module {
  func.func @forward(%arg0: tensor<6755192832xf32>, %arg1: tensor<1x80xi64>) -> tensor<1x80x32000xf32> {
    %extracted_slice = tensor.extract_slice %arg0[0] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_0 = tensor.extract_slice %arg0[4096] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_1 = tensor.extract_slice %arg0[8192] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_2 = tensor.extract_slice %arg0[12288] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_3 = tensor.extract_slice %arg0[16384] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_4 = tensor.extract_slice %arg0[20480] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_5 = tensor.extract_slice %arg0[24576] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_6 = tensor.extract_slice %arg0[28672] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_7 = tensor.extract_slice %arg0[32768] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_8 = tensor.extract_slice %arg0[36864] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_9 = tensor.extract_slice %arg0[40960] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_10 = tensor.extract_slice %arg0[45056] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_11 = tensor.extract_slice %arg0[49152] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_12 = tensor.extract_slice %arg0[53248] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_13 = tensor.extract_slice %arg0[57344] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_14 = tensor.extract_slice %arg0[61440] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_15 = tensor.extract_slice %arg0[65536] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_16 = tensor.extract_slice %arg0[69632] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_17 = tensor.extract_slice %arg0[73728] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_18 = tensor.extract_slice %arg0[77824] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_19 = tensor.extract_slice %arg0[81920] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_20 = tensor.extract_slice %arg0[86016] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_21 = tensor.extract_slice %arg0[90112] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_22 = tensor.extract_slice %arg0[94208] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_23 = tensor.extract_slice %arg0[98304] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_24 = tensor.extract_slice %arg0[102400] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_25 = tensor.extract_slice %arg0[106496] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_26 = tensor.extract_slice %arg0[110592] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_27 = tensor.extract_slice %arg0[114688] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_28 = tensor.extract_slice %arg0[118784] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_29 = tensor.extract_slice %arg0[122880] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_30 = tensor.extract_slice %arg0[126976] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_31 = tensor.extract_slice %arg0[131072] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_32 = tensor.extract_slice %arg0[135168] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_33 = tensor.extract_slice %arg0[139264] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_34 = tensor.extract_slice %arg0[143360] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_35 = tensor.extract_slice %arg0[147456] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_36 = tensor.extract_slice %arg0[151552] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_37 = tensor.extract_slice %arg0[155648] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_38 = tensor.extract_slice %arg0[159744] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_39 = tensor.extract_slice %arg0[163840] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_40 = tensor.extract_slice %arg0[167936] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_41 = tensor.extract_slice %arg0[172032] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_42 = tensor.extract_slice %arg0[176128] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_43 = tensor.extract_slice %arg0[180224] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_44 = tensor.extract_slice %arg0[184320] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_45 = tensor.extract_slice %arg0[188416] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_46 = tensor.extract_slice %arg0[192512] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_47 = tensor.extract_slice %arg0[196608] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_48 = tensor.extract_slice %arg0[200704] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_49 = tensor.extract_slice %arg0[204800] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_50 = tensor.extract_slice %arg0[208896] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_51 = tensor.extract_slice %arg0[212992] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_52 = tensor.extract_slice %arg0[217088] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_53 = tensor.extract_slice %arg0[221184] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_54 = tensor.extract_slice %arg0[225280] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_55 = tensor.extract_slice %arg0[229376] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_56 = tensor.extract_slice %arg0[233472] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_57 = tensor.extract_slice %arg0[237568] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_58 = tensor.extract_slice %arg0[241664] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_59 = tensor.extract_slice %arg0[245760] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_60 = tensor.extract_slice %arg0[249856] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_61 = tensor.extract_slice %arg0[253952] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_62 = tensor.extract_slice %arg0[258048] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_63 = tensor.extract_slice %arg0[262144] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_64 = tensor.extract_slice %arg0[266240] [131072000] [1] : tensor<6755192832xf32> to tensor<131072000xf32>
    %expanded = tensor.expand_shape %extracted_slice_64 [[0, 1]] : tensor<131072000xf32> into tensor<32000x4096xf32>
    %extracted_slice_65 = tensor.extract_slice %arg0[131338240] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_66 = tensor.expand_shape %extracted_slice_65 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_67 = tensor.extract_slice %arg0[148115456] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_68 = tensor.expand_shape %extracted_slice_67 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_69 = tensor.extract_slice %arg0[164892672] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_70 = tensor.expand_shape %extracted_slice_69 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_71 = tensor.extract_slice %arg0[181669888] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_72 = tensor.expand_shape %extracted_slice_71 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_73 = tensor.extract_slice %arg0[198447104] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_74 = tensor.expand_shape %extracted_slice_73 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_75 = tensor.extract_slice %arg0[243535872] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_76 = tensor.expand_shape %extracted_slice_75 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_77 = tensor.extract_slice %arg0[288624640] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_78 = tensor.expand_shape %extracted_slice_77 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_79 = tensor.extract_slice %arg0[333713408] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_80 = tensor.expand_shape %extracted_slice_79 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_81 = tensor.extract_slice %arg0[350490624] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_82 = tensor.expand_shape %extracted_slice_81 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_83 = tensor.extract_slice %arg0[367267840] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_84 = tensor.expand_shape %extracted_slice_83 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_85 = tensor.extract_slice %arg0[384045056] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_86 = tensor.expand_shape %extracted_slice_85 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_87 = tensor.extract_slice %arg0[400822272] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_88 = tensor.expand_shape %extracted_slice_87 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_89 = tensor.extract_slice %arg0[445911040] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_90 = tensor.expand_shape %extracted_slice_89 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_91 = tensor.extract_slice %arg0[490999808] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_92 = tensor.expand_shape %extracted_slice_91 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_93 = tensor.extract_slice %arg0[536088576] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_94 = tensor.expand_shape %extracted_slice_93 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_95 = tensor.extract_slice %arg0[552865792] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_96 = tensor.expand_shape %extracted_slice_95 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_97 = tensor.extract_slice %arg0[569643008] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_98 = tensor.expand_shape %extracted_slice_97 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_99 = tensor.extract_slice %arg0[586420224] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_100 = tensor.expand_shape %extracted_slice_99 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_101 = tensor.extract_slice %arg0[603197440] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_102 = tensor.expand_shape %extracted_slice_101 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_103 = tensor.extract_slice %arg0[648286208] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_104 = tensor.expand_shape %extracted_slice_103 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_105 = tensor.extract_slice %arg0[693374976] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_106 = tensor.expand_shape %extracted_slice_105 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_107 = tensor.extract_slice %arg0[738463744] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_108 = tensor.expand_shape %extracted_slice_107 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_109 = tensor.extract_slice %arg0[755240960] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_110 = tensor.expand_shape %extracted_slice_109 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_111 = tensor.extract_slice %arg0[772018176] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_112 = tensor.expand_shape %extracted_slice_111 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_113 = tensor.extract_slice %arg0[788795392] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_114 = tensor.expand_shape %extracted_slice_113 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_115 = tensor.extract_slice %arg0[805572608] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_116 = tensor.expand_shape %extracted_slice_115 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_117 = tensor.extract_slice %arg0[850661376] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_118 = tensor.expand_shape %extracted_slice_117 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_119 = tensor.extract_slice %arg0[895750144] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_120 = tensor.expand_shape %extracted_slice_119 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_121 = tensor.extract_slice %arg0[940838912] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_122 = tensor.expand_shape %extracted_slice_121 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_123 = tensor.extract_slice %arg0[957616128] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_124 = tensor.expand_shape %extracted_slice_123 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_125 = tensor.extract_slice %arg0[974393344] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_126 = tensor.expand_shape %extracted_slice_125 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_127 = tensor.extract_slice %arg0[991170560] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_128 = tensor.expand_shape %extracted_slice_127 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_129 = tensor.extract_slice %arg0[1007947776] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_130 = tensor.expand_shape %extracted_slice_129 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_131 = tensor.extract_slice %arg0[1053036544] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_132 = tensor.expand_shape %extracted_slice_131 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_133 = tensor.extract_slice %arg0[1098125312] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_134 = tensor.expand_shape %extracted_slice_133 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_135 = tensor.extract_slice %arg0[1143214080] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_136 = tensor.expand_shape %extracted_slice_135 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_137 = tensor.extract_slice %arg0[1159991296] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_138 = tensor.expand_shape %extracted_slice_137 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_139 = tensor.extract_slice %arg0[1176768512] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_140 = tensor.expand_shape %extracted_slice_139 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_141 = tensor.extract_slice %arg0[1193545728] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_142 = tensor.expand_shape %extracted_slice_141 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_143 = tensor.extract_slice %arg0[1210322944] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_144 = tensor.expand_shape %extracted_slice_143 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_145 = tensor.extract_slice %arg0[1255411712] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_146 = tensor.expand_shape %extracted_slice_145 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_147 = tensor.extract_slice %arg0[1300500480] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_148 = tensor.expand_shape %extracted_slice_147 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_149 = tensor.extract_slice %arg0[1345589248] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_150 = tensor.expand_shape %extracted_slice_149 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_151 = tensor.extract_slice %arg0[1362366464] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_152 = tensor.expand_shape %extracted_slice_151 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_153 = tensor.extract_slice %arg0[1379143680] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_154 = tensor.expand_shape %extracted_slice_153 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_155 = tensor.extract_slice %arg0[1395920896] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_156 = tensor.expand_shape %extracted_slice_155 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_157 = tensor.extract_slice %arg0[1412698112] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_158 = tensor.expand_shape %extracted_slice_157 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_159 = tensor.extract_slice %arg0[1457786880] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_160 = tensor.expand_shape %extracted_slice_159 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_161 = tensor.extract_slice %arg0[1502875648] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_162 = tensor.expand_shape %extracted_slice_161 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_163 = tensor.extract_slice %arg0[1547964416] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_164 = tensor.expand_shape %extracted_slice_163 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_165 = tensor.extract_slice %arg0[1564741632] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_166 = tensor.expand_shape %extracted_slice_165 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_167 = tensor.extract_slice %arg0[1581518848] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_168 = tensor.expand_shape %extracted_slice_167 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_169 = tensor.extract_slice %arg0[1598296064] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_170 = tensor.expand_shape %extracted_slice_169 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_171 = tensor.extract_slice %arg0[1615073280] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_172 = tensor.expand_shape %extracted_slice_171 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_173 = tensor.extract_slice %arg0[1660162048] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_174 = tensor.expand_shape %extracted_slice_173 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_175 = tensor.extract_slice %arg0[1705250816] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_176 = tensor.expand_shape %extracted_slice_175 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_177 = tensor.extract_slice %arg0[1750339584] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_178 = tensor.expand_shape %extracted_slice_177 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_179 = tensor.extract_slice %arg0[1767116800] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_180 = tensor.expand_shape %extracted_slice_179 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_181 = tensor.extract_slice %arg0[1783894016] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_182 = tensor.expand_shape %extracted_slice_181 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_183 = tensor.extract_slice %arg0[1800671232] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_184 = tensor.expand_shape %extracted_slice_183 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_185 = tensor.extract_slice %arg0[1817448448] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_186 = tensor.expand_shape %extracted_slice_185 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_187 = tensor.extract_slice %arg0[1862537216] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_188 = tensor.expand_shape %extracted_slice_187 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_189 = tensor.extract_slice %arg0[1907625984] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_190 = tensor.expand_shape %extracted_slice_189 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_191 = tensor.extract_slice %arg0[1952714752] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_192 = tensor.expand_shape %extracted_slice_191 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_193 = tensor.extract_slice %arg0[1969491968] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_194 = tensor.expand_shape %extracted_slice_193 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_195 = tensor.extract_slice %arg0[1986269184] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_196 = tensor.expand_shape %extracted_slice_195 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_197 = tensor.extract_slice %arg0[2003046400] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_198 = tensor.expand_shape %extracted_slice_197 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_199 = tensor.extract_slice %arg0[2019823616] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_200 = tensor.expand_shape %extracted_slice_199 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_201 = tensor.extract_slice %arg0[2064912384] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_202 = tensor.expand_shape %extracted_slice_201 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_203 = tensor.extract_slice %arg0[2110001152] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_204 = tensor.expand_shape %extracted_slice_203 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_205 = tensor.extract_slice %arg0[2155089920] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_206 = tensor.expand_shape %extracted_slice_205 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_207 = tensor.extract_slice %arg0[2171867136] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_208 = tensor.expand_shape %extracted_slice_207 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_209 = tensor.extract_slice %arg0[2188644352] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_210 = tensor.expand_shape %extracted_slice_209 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_211 = tensor.extract_slice %arg0[2205421568] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_212 = tensor.expand_shape %extracted_slice_211 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_213 = tensor.extract_slice %arg0[2222198784] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_214 = tensor.expand_shape %extracted_slice_213 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_215 = tensor.extract_slice %arg0[2267287552] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_216 = tensor.expand_shape %extracted_slice_215 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_217 = tensor.extract_slice %arg0[2312376320] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_218 = tensor.expand_shape %extracted_slice_217 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_219 = tensor.extract_slice %arg0[2357465088] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_220 = tensor.expand_shape %extracted_slice_219 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_221 = tensor.extract_slice %arg0[2374242304] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_222 = tensor.expand_shape %extracted_slice_221 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_223 = tensor.extract_slice %arg0[2391019520] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_224 = tensor.expand_shape %extracted_slice_223 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_225 = tensor.extract_slice %arg0[2407796736] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_226 = tensor.expand_shape %extracted_slice_225 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_227 = tensor.extract_slice %arg0[2424573952] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_228 = tensor.expand_shape %extracted_slice_227 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_229 = tensor.extract_slice %arg0[2469662720] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_230 = tensor.expand_shape %extracted_slice_229 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_231 = tensor.extract_slice %arg0[2514751488] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_232 = tensor.expand_shape %extracted_slice_231 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_233 = tensor.extract_slice %arg0[2559840256] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_234 = tensor.expand_shape %extracted_slice_233 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_235 = tensor.extract_slice %arg0[2576617472] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_236 = tensor.expand_shape %extracted_slice_235 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_237 = tensor.extract_slice %arg0[2593394688] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_238 = tensor.expand_shape %extracted_slice_237 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_239 = tensor.extract_slice %arg0[2610171904] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_240 = tensor.expand_shape %extracted_slice_239 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_241 = tensor.extract_slice %arg0[2626949120] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_242 = tensor.expand_shape %extracted_slice_241 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_243 = tensor.extract_slice %arg0[2672037888] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_244 = tensor.expand_shape %extracted_slice_243 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_245 = tensor.extract_slice %arg0[2717126656] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_246 = tensor.expand_shape %extracted_slice_245 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_247 = tensor.extract_slice %arg0[2762215424] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_248 = tensor.expand_shape %extracted_slice_247 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_249 = tensor.extract_slice %arg0[2778992640] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_250 = tensor.expand_shape %extracted_slice_249 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_251 = tensor.extract_slice %arg0[2795769856] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_252 = tensor.expand_shape %extracted_slice_251 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_253 = tensor.extract_slice %arg0[2812547072] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_254 = tensor.expand_shape %extracted_slice_253 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_255 = tensor.extract_slice %arg0[2829324288] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_256 = tensor.expand_shape %extracted_slice_255 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_257 = tensor.extract_slice %arg0[2874413056] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_258 = tensor.expand_shape %extracted_slice_257 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_259 = tensor.extract_slice %arg0[2919501824] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_260 = tensor.expand_shape %extracted_slice_259 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_261 = tensor.extract_slice %arg0[2964590592] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_262 = tensor.expand_shape %extracted_slice_261 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_263 = tensor.extract_slice %arg0[2981367808] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_264 = tensor.expand_shape %extracted_slice_263 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_265 = tensor.extract_slice %arg0[2998145024] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_266 = tensor.expand_shape %extracted_slice_265 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_267 = tensor.extract_slice %arg0[3014922240] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_268 = tensor.expand_shape %extracted_slice_267 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_269 = tensor.extract_slice %arg0[3031699456] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_270 = tensor.expand_shape %extracted_slice_269 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_271 = tensor.extract_slice %arg0[3076788224] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_272 = tensor.expand_shape %extracted_slice_271 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_273 = tensor.extract_slice %arg0[3121876992] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_274 = tensor.expand_shape %extracted_slice_273 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_275 = tensor.extract_slice %arg0[3166965760] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_276 = tensor.expand_shape %extracted_slice_275 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_277 = tensor.extract_slice %arg0[3183742976] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_278 = tensor.expand_shape %extracted_slice_277 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_279 = tensor.extract_slice %arg0[3200520192] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_280 = tensor.expand_shape %extracted_slice_279 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_281 = tensor.extract_slice %arg0[3217297408] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_282 = tensor.expand_shape %extracted_slice_281 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_283 = tensor.extract_slice %arg0[3234074624] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_284 = tensor.expand_shape %extracted_slice_283 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_285 = tensor.extract_slice %arg0[3279163392] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_286 = tensor.expand_shape %extracted_slice_285 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_287 = tensor.extract_slice %arg0[3324252160] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_288 = tensor.expand_shape %extracted_slice_287 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_289 = tensor.extract_slice %arg0[3369340928] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_290 = tensor.expand_shape %extracted_slice_289 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_291 = tensor.extract_slice %arg0[3386118144] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_292 = tensor.expand_shape %extracted_slice_291 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_293 = tensor.extract_slice %arg0[3402895360] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_294 = tensor.expand_shape %extracted_slice_293 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_295 = tensor.extract_slice %arg0[3419672576] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_296 = tensor.expand_shape %extracted_slice_295 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_297 = tensor.extract_slice %arg0[3436449792] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_298 = tensor.expand_shape %extracted_slice_297 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_299 = tensor.extract_slice %arg0[3481538560] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_300 = tensor.expand_shape %extracted_slice_299 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_301 = tensor.extract_slice %arg0[3526627328] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_302 = tensor.expand_shape %extracted_slice_301 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_303 = tensor.extract_slice %arg0[3571716096] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_304 = tensor.expand_shape %extracted_slice_303 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_305 = tensor.extract_slice %arg0[3588493312] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_306 = tensor.expand_shape %extracted_slice_305 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_307 = tensor.extract_slice %arg0[3605270528] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_308 = tensor.expand_shape %extracted_slice_307 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_309 = tensor.extract_slice %arg0[3622047744] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_310 = tensor.expand_shape %extracted_slice_309 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_311 = tensor.extract_slice %arg0[3638824960] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_312 = tensor.expand_shape %extracted_slice_311 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_313 = tensor.extract_slice %arg0[3683913728] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_314 = tensor.expand_shape %extracted_slice_313 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_315 = tensor.extract_slice %arg0[3729002496] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_316 = tensor.expand_shape %extracted_slice_315 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_317 = tensor.extract_slice %arg0[3774091264] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_318 = tensor.expand_shape %extracted_slice_317 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_319 = tensor.extract_slice %arg0[3790868480] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_320 = tensor.expand_shape %extracted_slice_319 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_321 = tensor.extract_slice %arg0[3807645696] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_322 = tensor.expand_shape %extracted_slice_321 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_323 = tensor.extract_slice %arg0[3824422912] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_324 = tensor.expand_shape %extracted_slice_323 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_325 = tensor.extract_slice %arg0[3841200128] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_326 = tensor.expand_shape %extracted_slice_325 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_327 = tensor.extract_slice %arg0[3886288896] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_328 = tensor.expand_shape %extracted_slice_327 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_329 = tensor.extract_slice %arg0[3931377664] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_330 = tensor.expand_shape %extracted_slice_329 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_331 = tensor.extract_slice %arg0[3976466432] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_332 = tensor.expand_shape %extracted_slice_331 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_333 = tensor.extract_slice %arg0[3993243648] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_334 = tensor.expand_shape %extracted_slice_333 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_335 = tensor.extract_slice %arg0[4010020864] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_336 = tensor.expand_shape %extracted_slice_335 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_337 = tensor.extract_slice %arg0[4026798080] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_338 = tensor.expand_shape %extracted_slice_337 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_339 = tensor.extract_slice %arg0[4043575296] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_340 = tensor.expand_shape %extracted_slice_339 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_341 = tensor.extract_slice %arg0[4088664064] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_342 = tensor.expand_shape %extracted_slice_341 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_343 = tensor.extract_slice %arg0[4133752832] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_344 = tensor.expand_shape %extracted_slice_343 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_345 = tensor.extract_slice %arg0[4178841600] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_346 = tensor.expand_shape %extracted_slice_345 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_347 = tensor.extract_slice %arg0[4195618816] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_348 = tensor.expand_shape %extracted_slice_347 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_349 = tensor.extract_slice %arg0[4212396032] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_350 = tensor.expand_shape %extracted_slice_349 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_351 = tensor.extract_slice %arg0[4229173248] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_352 = tensor.expand_shape %extracted_slice_351 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_353 = tensor.extract_slice %arg0[4245950464] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_354 = tensor.expand_shape %extracted_slice_353 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_355 = tensor.extract_slice %arg0[4291039232] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_356 = tensor.expand_shape %extracted_slice_355 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_357 = tensor.extract_slice %arg0[4336128000] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_358 = tensor.expand_shape %extracted_slice_357 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_359 = tensor.extract_slice %arg0[4381216768] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_360 = tensor.expand_shape %extracted_slice_359 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_361 = tensor.extract_slice %arg0[4397993984] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_362 = tensor.expand_shape %extracted_slice_361 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_363 = tensor.extract_slice %arg0[4414771200] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_364 = tensor.expand_shape %extracted_slice_363 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_365 = tensor.extract_slice %arg0[4431548416] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_366 = tensor.expand_shape %extracted_slice_365 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_367 = tensor.extract_slice %arg0[4448325632] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_368 = tensor.expand_shape %extracted_slice_367 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_369 = tensor.extract_slice %arg0[4493414400] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_370 = tensor.expand_shape %extracted_slice_369 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_371 = tensor.extract_slice %arg0[4538503168] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_372 = tensor.expand_shape %extracted_slice_371 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_373 = tensor.extract_slice %arg0[4583591936] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_374 = tensor.expand_shape %extracted_slice_373 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_375 = tensor.extract_slice %arg0[4600369152] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_376 = tensor.expand_shape %extracted_slice_375 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_377 = tensor.extract_slice %arg0[4617146368] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_378 = tensor.expand_shape %extracted_slice_377 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_379 = tensor.extract_slice %arg0[4633923584] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_380 = tensor.expand_shape %extracted_slice_379 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_381 = tensor.extract_slice %arg0[4650700800] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_382 = tensor.expand_shape %extracted_slice_381 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_383 = tensor.extract_slice %arg0[4695789568] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_384 = tensor.expand_shape %extracted_slice_383 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_385 = tensor.extract_slice %arg0[4740878336] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_386 = tensor.expand_shape %extracted_slice_385 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_387 = tensor.extract_slice %arg0[4785967104] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_388 = tensor.expand_shape %extracted_slice_387 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_389 = tensor.extract_slice %arg0[4802744320] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_390 = tensor.expand_shape %extracted_slice_389 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_391 = tensor.extract_slice %arg0[4819521536] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_392 = tensor.expand_shape %extracted_slice_391 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_393 = tensor.extract_slice %arg0[4836298752] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_394 = tensor.expand_shape %extracted_slice_393 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_395 = tensor.extract_slice %arg0[4853075968] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_396 = tensor.expand_shape %extracted_slice_395 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_397 = tensor.extract_slice %arg0[4898164736] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_398 = tensor.expand_shape %extracted_slice_397 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_399 = tensor.extract_slice %arg0[4943253504] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_400 = tensor.expand_shape %extracted_slice_399 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_401 = tensor.extract_slice %arg0[4988342272] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_402 = tensor.expand_shape %extracted_slice_401 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_403 = tensor.extract_slice %arg0[5005119488] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_404 = tensor.expand_shape %extracted_slice_403 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_405 = tensor.extract_slice %arg0[5021896704] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_406 = tensor.expand_shape %extracted_slice_405 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_407 = tensor.extract_slice %arg0[5038673920] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_408 = tensor.expand_shape %extracted_slice_407 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_409 = tensor.extract_slice %arg0[5055451136] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_410 = tensor.expand_shape %extracted_slice_409 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_411 = tensor.extract_slice %arg0[5100539904] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_412 = tensor.expand_shape %extracted_slice_411 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_413 = tensor.extract_slice %arg0[5145628672] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_414 = tensor.expand_shape %extracted_slice_413 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_415 = tensor.extract_slice %arg0[5190717440] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_416 = tensor.expand_shape %extracted_slice_415 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_417 = tensor.extract_slice %arg0[5207494656] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_418 = tensor.expand_shape %extracted_slice_417 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_419 = tensor.extract_slice %arg0[5224271872] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_420 = tensor.expand_shape %extracted_slice_419 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_421 = tensor.extract_slice %arg0[5241049088] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_422 = tensor.expand_shape %extracted_slice_421 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_423 = tensor.extract_slice %arg0[5257826304] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_424 = tensor.expand_shape %extracted_slice_423 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_425 = tensor.extract_slice %arg0[5302915072] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_426 = tensor.expand_shape %extracted_slice_425 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_427 = tensor.extract_slice %arg0[5348003840] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_428 = tensor.expand_shape %extracted_slice_427 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_429 = tensor.extract_slice %arg0[5393092608] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_430 = tensor.expand_shape %extracted_slice_429 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_431 = tensor.extract_slice %arg0[5409869824] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_432 = tensor.expand_shape %extracted_slice_431 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_433 = tensor.extract_slice %arg0[5426647040] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_434 = tensor.expand_shape %extracted_slice_433 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_435 = tensor.extract_slice %arg0[5443424256] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_436 = tensor.expand_shape %extracted_slice_435 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_437 = tensor.extract_slice %arg0[5460201472] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_438 = tensor.expand_shape %extracted_slice_437 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_439 = tensor.extract_slice %arg0[5505290240] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_440 = tensor.expand_shape %extracted_slice_439 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_441 = tensor.extract_slice %arg0[5550379008] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_442 = tensor.expand_shape %extracted_slice_441 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_443 = tensor.extract_slice %arg0[5595467776] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_444 = tensor.expand_shape %extracted_slice_443 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_445 = tensor.extract_slice %arg0[5612244992] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_446 = tensor.expand_shape %extracted_slice_445 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_447 = tensor.extract_slice %arg0[5629022208] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_448 = tensor.expand_shape %extracted_slice_447 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_449 = tensor.extract_slice %arg0[5645799424] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_450 = tensor.expand_shape %extracted_slice_449 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_451 = tensor.extract_slice %arg0[5662576640] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_452 = tensor.expand_shape %extracted_slice_451 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_453 = tensor.extract_slice %arg0[5707665408] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_454 = tensor.expand_shape %extracted_slice_453 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_455 = tensor.extract_slice %arg0[5752754176] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_456 = tensor.expand_shape %extracted_slice_455 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_457 = tensor.extract_slice %arg0[5797842944] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_458 = tensor.expand_shape %extracted_slice_457 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_459 = tensor.extract_slice %arg0[5814620160] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_460 = tensor.expand_shape %extracted_slice_459 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_461 = tensor.extract_slice %arg0[5831397376] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_462 = tensor.expand_shape %extracted_slice_461 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_463 = tensor.extract_slice %arg0[5848174592] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_464 = tensor.expand_shape %extracted_slice_463 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_465 = tensor.extract_slice %arg0[5864951808] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_466 = tensor.expand_shape %extracted_slice_465 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_467 = tensor.extract_slice %arg0[5910040576] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_468 = tensor.expand_shape %extracted_slice_467 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_469 = tensor.extract_slice %arg0[5955129344] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_470 = tensor.expand_shape %extracted_slice_469 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_471 = tensor.extract_slice %arg0[6000218112] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_472 = tensor.expand_shape %extracted_slice_471 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_473 = tensor.extract_slice %arg0[6016995328] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_474 = tensor.expand_shape %extracted_slice_473 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_475 = tensor.extract_slice %arg0[6033772544] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_476 = tensor.expand_shape %extracted_slice_475 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_477 = tensor.extract_slice %arg0[6050549760] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_478 = tensor.expand_shape %extracted_slice_477 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_479 = tensor.extract_slice %arg0[6067326976] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_480 = tensor.expand_shape %extracted_slice_479 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_481 = tensor.extract_slice %arg0[6112415744] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_482 = tensor.expand_shape %extracted_slice_481 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_483 = tensor.extract_slice %arg0[6157504512] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_484 = tensor.expand_shape %extracted_slice_483 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_485 = tensor.extract_slice %arg0[6202593280] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_486 = tensor.expand_shape %extracted_slice_485 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_487 = tensor.extract_slice %arg0[6219370496] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_488 = tensor.expand_shape %extracted_slice_487 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_489 = tensor.extract_slice %arg0[6236147712] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_490 = tensor.expand_shape %extracted_slice_489 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_491 = tensor.extract_slice %arg0[6252924928] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_492 = tensor.expand_shape %extracted_slice_491 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_493 = tensor.extract_slice %arg0[6269702144] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_494 = tensor.expand_shape %extracted_slice_493 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_495 = tensor.extract_slice %arg0[6314790912] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_496 = tensor.expand_shape %extracted_slice_495 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_497 = tensor.extract_slice %arg0[6359879680] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_498 = tensor.expand_shape %extracted_slice_497 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_499 = tensor.extract_slice %arg0[6404968448] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_500 = tensor.expand_shape %extracted_slice_499 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_501 = tensor.extract_slice %arg0[6421745664] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_502 = tensor.expand_shape %extracted_slice_501 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_503 = tensor.extract_slice %arg0[6438522880] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_504 = tensor.expand_shape %extracted_slice_503 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_505 = tensor.extract_slice %arg0[6455300096] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_506 = tensor.expand_shape %extracted_slice_505 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_507 = tensor.extract_slice %arg0[6472077312] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_508 = tensor.expand_shape %extracted_slice_507 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_509 = tensor.extract_slice %arg0[6517166080] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_510 = tensor.expand_shape %extracted_slice_509 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_511 = tensor.extract_slice %arg0[6562254848] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_512 = tensor.expand_shape %extracted_slice_511 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_513 = tensor.extract_slice %arg0[6607343616] [131072000] [1] : tensor<6755192832xf32> to tensor<131072000xf32>
    %expanded_514 = tensor.expand_shape %extracted_slice_513 [[0, 1]] : tensor<131072000xf32> into tensor<32000x4096xf32>
    %extracted_slice_515 = tensor.extract_slice %arg0[6738415616] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_516 = tensor.expand_shape %extracted_slice_515 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_517 = tensor.extract_slice %arg0[6738677760] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_518 = tensor.expand_shape %extracted_slice_517 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_519 = tensor.extract_slice %arg0[6738939904] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_520 = tensor.expand_shape %extracted_slice_519 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_521 = tensor.extract_slice %arg0[6739202048] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_522 = tensor.expand_shape %extracted_slice_521 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_523 = tensor.extract_slice %arg0[6739464192] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_524 = tensor.expand_shape %extracted_slice_523 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_525 = tensor.extract_slice %arg0[6739726336] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_526 = tensor.expand_shape %extracted_slice_525 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_527 = tensor.extract_slice %arg0[6739988480] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_528 = tensor.expand_shape %extracted_slice_527 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_529 = tensor.extract_slice %arg0[6740250624] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_530 = tensor.expand_shape %extracted_slice_529 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_531 = tensor.extract_slice %arg0[6740512768] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_532 = tensor.expand_shape %extracted_slice_531 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_533 = tensor.extract_slice %arg0[6740774912] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_534 = tensor.expand_shape %extracted_slice_533 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_535 = tensor.extract_slice %arg0[6741037056] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_536 = tensor.expand_shape %extracted_slice_535 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_537 = tensor.extract_slice %arg0[6741299200] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_538 = tensor.expand_shape %extracted_slice_537 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_539 = tensor.extract_slice %arg0[6741561344] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_540 = tensor.expand_shape %extracted_slice_539 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_541 = tensor.extract_slice %arg0[6741823488] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_542 = tensor.expand_shape %extracted_slice_541 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_543 = tensor.extract_slice %arg0[6742085632] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_544 = tensor.expand_shape %extracted_slice_543 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_545 = tensor.extract_slice %arg0[6742347776] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_546 = tensor.expand_shape %extracted_slice_545 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_547 = tensor.extract_slice %arg0[6742609920] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_548 = tensor.expand_shape %extracted_slice_547 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_549 = tensor.extract_slice %arg0[6742872064] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_550 = tensor.expand_shape %extracted_slice_549 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_551 = tensor.extract_slice %arg0[6743134208] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_552 = tensor.expand_shape %extracted_slice_551 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_553 = tensor.extract_slice %arg0[6743396352] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_554 = tensor.expand_shape %extracted_slice_553 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_555 = tensor.extract_slice %arg0[6743658496] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_556 = tensor.expand_shape %extracted_slice_555 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_557 = tensor.extract_slice %arg0[6743920640] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_558 = tensor.expand_shape %extracted_slice_557 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_559 = tensor.extract_slice %arg0[6744182784] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_560 = tensor.expand_shape %extracted_slice_559 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_561 = tensor.extract_slice %arg0[6744444928] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_562 = tensor.expand_shape %extracted_slice_561 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_563 = tensor.extract_slice %arg0[6744707072] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_564 = tensor.expand_shape %extracted_slice_563 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_565 = tensor.extract_slice %arg0[6744969216] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_566 = tensor.expand_shape %extracted_slice_565 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_567 = tensor.extract_slice %arg0[6745231360] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_568 = tensor.expand_shape %extracted_slice_567 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_569 = tensor.extract_slice %arg0[6745493504] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_570 = tensor.expand_shape %extracted_slice_569 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_571 = tensor.extract_slice %arg0[6745755648] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_572 = tensor.expand_shape %extracted_slice_571 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_573 = tensor.extract_slice %arg0[6746017792] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_574 = tensor.expand_shape %extracted_slice_573 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_575 = tensor.extract_slice %arg0[6746279936] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_576 = tensor.expand_shape %extracted_slice_575 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_577 = tensor.extract_slice %arg0[6746542080] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_578 = tensor.expand_shape %extracted_slice_577 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_579 = tensor.extract_slice %arg0[6746804224] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_580 = tensor.expand_shape %extracted_slice_579 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_581 = tensor.extract_slice %arg0[6747066368] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_582 = tensor.expand_shape %extracted_slice_581 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_583 = tensor.extract_slice %arg0[6747328512] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_584 = tensor.expand_shape %extracted_slice_583 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_585 = tensor.extract_slice %arg0[6747590656] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_586 = tensor.expand_shape %extracted_slice_585 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_587 = tensor.extract_slice %arg0[6747852800] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_588 = tensor.expand_shape %extracted_slice_587 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_589 = tensor.extract_slice %arg0[6748114944] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_590 = tensor.expand_shape %extracted_slice_589 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_591 = tensor.extract_slice %arg0[6748377088] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_592 = tensor.expand_shape %extracted_slice_591 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_593 = tensor.extract_slice %arg0[6748639232] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_594 = tensor.expand_shape %extracted_slice_593 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_595 = tensor.extract_slice %arg0[6748901376] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_596 = tensor.expand_shape %extracted_slice_595 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_597 = tensor.extract_slice %arg0[6749163520] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_598 = tensor.expand_shape %extracted_slice_597 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_599 = tensor.extract_slice %arg0[6749425664] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_600 = tensor.expand_shape %extracted_slice_599 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_601 = tensor.extract_slice %arg0[6749687808] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_602 = tensor.expand_shape %extracted_slice_601 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_603 = tensor.extract_slice %arg0[6749949952] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_604 = tensor.expand_shape %extracted_slice_603 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_605 = tensor.extract_slice %arg0[6750212096] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_606 = tensor.expand_shape %extracted_slice_605 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_607 = tensor.extract_slice %arg0[6750474240] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_608 = tensor.expand_shape %extracted_slice_607 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_609 = tensor.extract_slice %arg0[6750736384] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_610 = tensor.expand_shape %extracted_slice_609 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_611 = tensor.extract_slice %arg0[6750998528] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_612 = tensor.expand_shape %extracted_slice_611 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_613 = tensor.extract_slice %arg0[6751260672] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_614 = tensor.expand_shape %extracted_slice_613 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_615 = tensor.extract_slice %arg0[6751522816] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_616 = tensor.expand_shape %extracted_slice_615 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_617 = tensor.extract_slice %arg0[6751784960] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_618 = tensor.expand_shape %extracted_slice_617 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_619 = tensor.extract_slice %arg0[6752047104] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_620 = tensor.expand_shape %extracted_slice_619 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_621 = tensor.extract_slice %arg0[6752309248] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_622 = tensor.expand_shape %extracted_slice_621 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_623 = tensor.extract_slice %arg0[6752571392] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_624 = tensor.expand_shape %extracted_slice_623 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_625 = tensor.extract_slice %arg0[6752833536] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_626 = tensor.expand_shape %extracted_slice_625 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_627 = tensor.extract_slice %arg0[6753095680] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_628 = tensor.expand_shape %extracted_slice_627 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_629 = tensor.extract_slice %arg0[6753357824] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_630 = tensor.expand_shape %extracted_slice_629 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_631 = tensor.extract_slice %arg0[6753619968] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_632 = tensor.expand_shape %extracted_slice_631 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_633 = tensor.extract_slice %arg0[6753882112] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_634 = tensor.expand_shape %extracted_slice_633 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_635 = tensor.extract_slice %arg0[6754144256] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_636 = tensor.expand_shape %extracted_slice_635 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_637 = tensor.extract_slice %arg0[6754406400] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_638 = tensor.expand_shape %extracted_slice_637 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_639 = tensor.extract_slice %arg0[6754668544] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_640 = tensor.expand_shape %extracted_slice_639 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_641 = tensor.extract_slice %arg0[6754930688] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_642 = tensor.expand_shape %extracted_slice_641 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %cst = arith.constant dense<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]> : tensor<80xi64>
    %0 = "tosa.reshape"(%cst) {new_shape = array<i64: 1, 80>} : (tensor<80xi64>) -> tensor<1x80xi64>
    %1 = "tosa.reshape"(%0) {new_shape = array<i64: 1, 80>} : (tensor<1x80xi64>) -> tensor<1x80xi64>
    %2 = tensor.empty() : tensor<1x80x4096xf32>
    %3 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg1 : tensor<1x80xi64>) outs(%2 : tensor<1x80x4096xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %expanded[%5005, %5006] : tensor<32000x4096xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x4096xf32>
    %cst_643 = arith.constant dense<true> : tensor<1x80xi1>
    %cst_644 = arith.constant dense<-3.40282347E+38> : tensor<80x80xf32>
    %cst_645 = arith.constant dense<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]> : tensor<80xi64>
    %cst_646 = arith.constant dense<1> : tensor<i64>
    %4 = "tosa.add"(%cst_645, %cst_646) : (tensor<80xi64>, tensor<i64>) -> tensor<80xi64>
    %5 = "tosa.reshape"(%4) {new_shape = array<i64: 80, 1>} : (tensor<80xi64>) -> tensor<80x1xi64>
    %6 = tensor.empty() : tensor<80x80xi1>
    %7 = linalg.generic {indexing_maps = [#map2, #map3, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%cst_645, %5 : tensor<80xi64>, tensor<80x1xi64>) outs(%6 : tensor<80x80xi1>) {
    ^bb0(%in: i64, %in_1777: i64, %out: i1):
      %5005 = arith.cmpi slt, %in, %in_1777 : i64
      linalg.yield %5005 : i1
    } -> tensor<80x80xi1>
    %cst_647 = arith.constant 0.000000e+00 : f32
    %8 = tensor.empty() : tensor<80x80xf32>
    %9 = linalg.generic {indexing_maps = [#map4, #map4, #map4], iterator_types = ["parallel", "parallel"]} ins(%cst_644, %7 : tensor<80x80xf32>, tensor<80x80xi1>) outs(%8 : tensor<80x80xf32>) {
    ^bb0(%in: f32, %in_1777: i1, %out: f32):
      %5005 = arith.select %in_1777, %cst_647, %in : f32
      linalg.yield %5005 : f32
    } -> tensor<80x80xf32>
    %extracted_slice_648 = tensor.extract_slice %cst_643[0, 0] [1, 80] [1, 1] : tensor<1x80xi1> to tensor<1x80xi1>
    %10 = "tosa.reshape"(%extracted_slice_648) {new_shape = array<i64: 1, 1, 80>} : (tensor<1x80xi1>) -> tensor<1x1x80xi1>
    %11 = "tosa.reshape"(%10) {new_shape = array<i64: 1, 1, 1, 80>} : (tensor<1x1x80xi1>) -> tensor<1x1x1x80xi1>
    %extracted_slice_649 = tensor.extract_slice %11[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %12 = tensor.empty() : tensor<1x1x80x80xi1>
    %extracted_slice_650 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice = tensor.insert_slice %extracted_slice_650 into %12[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_651 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_652 = tensor.insert_slice %extracted_slice_651 into %inserted_slice[0, 0, 1, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_653 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_654 = tensor.insert_slice %extracted_slice_653 into %inserted_slice_652[0, 0, 2, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_655 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_656 = tensor.insert_slice %extracted_slice_655 into %inserted_slice_654[0, 0, 3, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_657 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_658 = tensor.insert_slice %extracted_slice_657 into %inserted_slice_656[0, 0, 4, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_659 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_660 = tensor.insert_slice %extracted_slice_659 into %inserted_slice_658[0, 0, 5, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_661 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_662 = tensor.insert_slice %extracted_slice_661 into %inserted_slice_660[0, 0, 6, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_663 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_664 = tensor.insert_slice %extracted_slice_663 into %inserted_slice_662[0, 0, 7, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_665 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_666 = tensor.insert_slice %extracted_slice_665 into %inserted_slice_664[0, 0, 8, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_667 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_668 = tensor.insert_slice %extracted_slice_667 into %inserted_slice_666[0, 0, 9, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_669 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_670 = tensor.insert_slice %extracted_slice_669 into %inserted_slice_668[0, 0, 10, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_671 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_672 = tensor.insert_slice %extracted_slice_671 into %inserted_slice_670[0, 0, 11, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_673 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_674 = tensor.insert_slice %extracted_slice_673 into %inserted_slice_672[0, 0, 12, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_675 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_676 = tensor.insert_slice %extracted_slice_675 into %inserted_slice_674[0, 0, 13, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_677 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_678 = tensor.insert_slice %extracted_slice_677 into %inserted_slice_676[0, 0, 14, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_679 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_680 = tensor.insert_slice %extracted_slice_679 into %inserted_slice_678[0, 0, 15, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_681 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_682 = tensor.insert_slice %extracted_slice_681 into %inserted_slice_680[0, 0, 16, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_683 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_684 = tensor.insert_slice %extracted_slice_683 into %inserted_slice_682[0, 0, 17, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_685 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_686 = tensor.insert_slice %extracted_slice_685 into %inserted_slice_684[0, 0, 18, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_687 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_688 = tensor.insert_slice %extracted_slice_687 into %inserted_slice_686[0, 0, 19, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_689 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_690 = tensor.insert_slice %extracted_slice_689 into %inserted_slice_688[0, 0, 20, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_691 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_692 = tensor.insert_slice %extracted_slice_691 into %inserted_slice_690[0, 0, 21, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_693 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_694 = tensor.insert_slice %extracted_slice_693 into %inserted_slice_692[0, 0, 22, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_695 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_696 = tensor.insert_slice %extracted_slice_695 into %inserted_slice_694[0, 0, 23, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_697 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_698 = tensor.insert_slice %extracted_slice_697 into %inserted_slice_696[0, 0, 24, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_699 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_700 = tensor.insert_slice %extracted_slice_699 into %inserted_slice_698[0, 0, 25, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_701 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_702 = tensor.insert_slice %extracted_slice_701 into %inserted_slice_700[0, 0, 26, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_703 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_704 = tensor.insert_slice %extracted_slice_703 into %inserted_slice_702[0, 0, 27, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_705 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_706 = tensor.insert_slice %extracted_slice_705 into %inserted_slice_704[0, 0, 28, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_707 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_708 = tensor.insert_slice %extracted_slice_707 into %inserted_slice_706[0, 0, 29, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_709 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_710 = tensor.insert_slice %extracted_slice_709 into %inserted_slice_708[0, 0, 30, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_711 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_712 = tensor.insert_slice %extracted_slice_711 into %inserted_slice_710[0, 0, 31, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_713 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_714 = tensor.insert_slice %extracted_slice_713 into %inserted_slice_712[0, 0, 32, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_715 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_716 = tensor.insert_slice %extracted_slice_715 into %inserted_slice_714[0, 0, 33, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_717 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_718 = tensor.insert_slice %extracted_slice_717 into %inserted_slice_716[0, 0, 34, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_719 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_720 = tensor.insert_slice %extracted_slice_719 into %inserted_slice_718[0, 0, 35, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_721 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_722 = tensor.insert_slice %extracted_slice_721 into %inserted_slice_720[0, 0, 36, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_723 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_724 = tensor.insert_slice %extracted_slice_723 into %inserted_slice_722[0, 0, 37, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_725 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_726 = tensor.insert_slice %extracted_slice_725 into %inserted_slice_724[0, 0, 38, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_727 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_728 = tensor.insert_slice %extracted_slice_727 into %inserted_slice_726[0, 0, 39, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_729 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_730 = tensor.insert_slice %extracted_slice_729 into %inserted_slice_728[0, 0, 40, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_731 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_732 = tensor.insert_slice %extracted_slice_731 into %inserted_slice_730[0, 0, 41, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_733 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_734 = tensor.insert_slice %extracted_slice_733 into %inserted_slice_732[0, 0, 42, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_735 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_736 = tensor.insert_slice %extracted_slice_735 into %inserted_slice_734[0, 0, 43, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_737 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_738 = tensor.insert_slice %extracted_slice_737 into %inserted_slice_736[0, 0, 44, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_739 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_740 = tensor.insert_slice %extracted_slice_739 into %inserted_slice_738[0, 0, 45, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_741 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_742 = tensor.insert_slice %extracted_slice_741 into %inserted_slice_740[0, 0, 46, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_743 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_744 = tensor.insert_slice %extracted_slice_743 into %inserted_slice_742[0, 0, 47, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_745 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_746 = tensor.insert_slice %extracted_slice_745 into %inserted_slice_744[0, 0, 48, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_747 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_748 = tensor.insert_slice %extracted_slice_747 into %inserted_slice_746[0, 0, 49, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_749 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_750 = tensor.insert_slice %extracted_slice_749 into %inserted_slice_748[0, 0, 50, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_751 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_752 = tensor.insert_slice %extracted_slice_751 into %inserted_slice_750[0, 0, 51, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_753 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_754 = tensor.insert_slice %extracted_slice_753 into %inserted_slice_752[0, 0, 52, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_755 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_756 = tensor.insert_slice %extracted_slice_755 into %inserted_slice_754[0, 0, 53, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_757 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_758 = tensor.insert_slice %extracted_slice_757 into %inserted_slice_756[0, 0, 54, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_759 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_760 = tensor.insert_slice %extracted_slice_759 into %inserted_slice_758[0, 0, 55, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_761 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_762 = tensor.insert_slice %extracted_slice_761 into %inserted_slice_760[0, 0, 56, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_763 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_764 = tensor.insert_slice %extracted_slice_763 into %inserted_slice_762[0, 0, 57, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_765 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_766 = tensor.insert_slice %extracted_slice_765 into %inserted_slice_764[0, 0, 58, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_767 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_768 = tensor.insert_slice %extracted_slice_767 into %inserted_slice_766[0, 0, 59, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_769 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_770 = tensor.insert_slice %extracted_slice_769 into %inserted_slice_768[0, 0, 60, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_771 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_772 = tensor.insert_slice %extracted_slice_771 into %inserted_slice_770[0, 0, 61, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_773 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_774 = tensor.insert_slice %extracted_slice_773 into %inserted_slice_772[0, 0, 62, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_775 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_776 = tensor.insert_slice %extracted_slice_775 into %inserted_slice_774[0, 0, 63, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_777 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_778 = tensor.insert_slice %extracted_slice_777 into %inserted_slice_776[0, 0, 64, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_779 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_780 = tensor.insert_slice %extracted_slice_779 into %inserted_slice_778[0, 0, 65, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_781 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_782 = tensor.insert_slice %extracted_slice_781 into %inserted_slice_780[0, 0, 66, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_783 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_784 = tensor.insert_slice %extracted_slice_783 into %inserted_slice_782[0, 0, 67, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_785 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_786 = tensor.insert_slice %extracted_slice_785 into %inserted_slice_784[0, 0, 68, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_787 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_788 = tensor.insert_slice %extracted_slice_787 into %inserted_slice_786[0, 0, 69, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_789 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_790 = tensor.insert_slice %extracted_slice_789 into %inserted_slice_788[0, 0, 70, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_791 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_792 = tensor.insert_slice %extracted_slice_791 into %inserted_slice_790[0, 0, 71, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_793 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_794 = tensor.insert_slice %extracted_slice_793 into %inserted_slice_792[0, 0, 72, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_795 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_796 = tensor.insert_slice %extracted_slice_795 into %inserted_slice_794[0, 0, 73, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_797 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_798 = tensor.insert_slice %extracted_slice_797 into %inserted_slice_796[0, 0, 74, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_799 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_800 = tensor.insert_slice %extracted_slice_799 into %inserted_slice_798[0, 0, 75, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_801 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_802 = tensor.insert_slice %extracted_slice_801 into %inserted_slice_800[0, 0, 76, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_803 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_804 = tensor.insert_slice %extracted_slice_803 into %inserted_slice_802[0, 0, 77, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_805 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_806 = tensor.insert_slice %extracted_slice_805 into %inserted_slice_804[0, 0, 78, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_807 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_808 = tensor.insert_slice %extracted_slice_807 into %inserted_slice_806[0, 0, 79, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %13 = tensor.empty() : tensor<1x1x80x80xf32>
    %14 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_808 : tensor<1x1x80x80xi1>) outs(%13 : tensor<1x1x80x80xf32>) {
    ^bb0(%in: i1, %out: f32):
      %5005 = arith.extui %in : i1 to i32
      %5006 = arith.sitofp %5005 : i32 to f32
      linalg.yield %5006 : f32
    } -> tensor<1x1x80x80xf32>
    %cst_809 = arith.constant 1.000000e+00 : f32
    %15 = tensor.empty() : tensor<1x1x80x80xf32>
    %16 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%14 : tensor<1x1x80x80xf32>) outs(%15 : tensor<1x1x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.subf %cst_809, %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x1x80x80xf32>
    %17 = tensor.empty() : tensor<1x1x80x80xi1>
    %18 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%16 : tensor<1x1x80x80xf32>) outs(%17 : tensor<1x1x80x80xi1>) {
    ^bb0(%in: f32, %out: i1):
      %5005 = arith.fptosi %in : f32 to i32
      %5006 = arith.trunci %5005 : i32 to i1
      linalg.yield %5006 : i1
    } -> tensor<1x1x80x80xi1>
    %cst_810 = arith.constant -3.40282347E+38 : f32
    %19 = tensor.empty() : tensor<1x1x80x80xf32>
    %20 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%16, %18 : tensor<1x1x80x80xf32>, tensor<1x1x80x80xi1>) outs(%19 : tensor<1x1x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: i1, %out: f32):
      %5005 = arith.select %in_1777, %cst_810, %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x1x80x80xf32>
    %21 = "tosa.reshape"(%9) {new_shape = array<i64: 1, 80, 80>} : (tensor<80x80xf32>) -> tensor<1x80x80xf32>
    %22 = "tosa.reshape"(%21) {new_shape = array<i64: 1, 1, 80, 80>} : (tensor<1x80x80xf32>) -> tensor<1x1x80x80xf32>
    %extracted_slice_811 = tensor.extract_slice %22[0, 0, 0, 0] [1, 1, 80, 80] [1, 1, 1, 1] : tensor<1x1x80x80xf32> to tensor<1x1x80x80xf32>
    %extracted_slice_812 = tensor.extract_slice %extracted_slice_811[0, 0, 0, 0] [1, 1, 80, 80] [1, 1, 1, 1] : tensor<1x1x80x80xf32> to tensor<1x1x80x80xf32>
    %23 = tensor.empty() : tensor<1x1x80x80xf32>
    %extracted_slice_813 = tensor.extract_slice %extracted_slice_812[0, 0, 0, 0] [1, 1, 80, 80] [1, 1, 1, 1] : tensor<1x1x80x80xf32> to tensor<1x1x80x80xf32>
    %inserted_slice_814 = tensor.insert_slice %extracted_slice_813 into %23[0, 0, 0, 0] [1, 1, 80, 80] [1, 1, 1, 1] : tensor<1x1x80x80xf32> into tensor<1x1x80x80xf32>
    %24 = "tosa.add"(%20, %inserted_slice_814) : (tensor<1x1x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x1x80x80xf32>
    %25 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32 = arith.constant 2 : i32
    %26 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3 : tensor<1x80x4096xf32>) outs(%25 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_815 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %27 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%26 : tensor<1x80x4096xf32>) outs(%cst_815 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_816 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %28 = "tosa.add"(%27, %cst_816) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %29 = tensor.empty() : tensor<1x80x1xf32>
    %30 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%28 : tensor<1x80x1xf32>) outs(%29 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %31 = tensor.empty() : tensor<1x80x4096xf32>
    %32 = tensor.empty() : tensor<1x80x4096xf32>
    %33 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%30 : tensor<1x80x1xf32>) outs(%32 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %34 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3, %33 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%31 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %35 = tensor.empty() : tensor<1x80x4096xf32>
    %36 = tensor.empty() : tensor<1x80x4096xf32>
    %37 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice : tensor<4096xf32>) outs(%36 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %38 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%37, %34 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%35 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %39 = tensor.empty() : tensor<4096x4096xf32>
    %40 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_66 : tensor<4096x4096xf32>) outs(%39 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %41 = "tosa.reshape"(%38) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %42 = tensor.empty() : tensor<80x4096xf32>
    %43 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%41, %40 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%42 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %44 = "tosa.reshape"(%43) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %45 = tensor.empty() : tensor<4096x4096xf32>
    %46 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_68 : tensor<4096x4096xf32>) outs(%45 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %47 = "tosa.reshape"(%38) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %48 = tensor.empty() : tensor<80x4096xf32>
    %49 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%47, %46 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%48 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %50 = "tosa.reshape"(%49) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %51 = tensor.empty() : tensor<4096x4096xf32>
    %52 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_70 : tensor<4096x4096xf32>) outs(%51 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %53 = "tosa.reshape"(%38) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %54 = tensor.empty() : tensor<80x4096xf32>
    %55 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%53, %52 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%54 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %56 = "tosa.reshape"(%55) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %57 = "tosa.reshape"(%44) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %58 = tensor.empty() : tensor<1x32x80x128xf32>
    %59 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%57 : tensor<1x80x32x128xf32>) outs(%58 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %60 = "tosa.reshape"(%50) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %61 = tensor.empty() : tensor<1x32x80x128xf32>
    %62 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%60 : tensor<1x80x32x128xf32>) outs(%61 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %63 = "tosa.reshape"(%56) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %64 = tensor.empty() : tensor<1x32x80x128xf32>
    %65 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%63 : tensor<1x80x32x128xf32>) outs(%64 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_817 = tensor.extract_slice %expanded_516[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_818 = tensor.extract_slice %extracted_slice_817[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_819 = tensor.extract_slice %extracted_slice_818[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_820 = tensor.extract_slice %expanded_518[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_821 = tensor.extract_slice %extracted_slice_820[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_822 = tensor.extract_slice %extracted_slice_821[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %66 = tensor.empty() : tensor<1x80x128xf32>
    %67 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_819 : tensor<1x1x80x128xf32>) outs(%66 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %68 = tensor.empty() : tensor<80x128xf32>
    %69 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%67 : tensor<1x80x128xf32>) outs(%68 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %70 = tensor.empty() : tensor<1x80x128xf32>
    %71 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_822 : tensor<1x1x80x128xf32>) outs(%70 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %72 = tensor.empty() : tensor<80x128xf32>
    %73 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%71 : tensor<1x80x128xf32>) outs(%72 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %74 = tensor.empty() : tensor<1x80x128xf32>
    %75 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%74 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %69[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %76 = "tosa.reshape"(%75) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %77 = tensor.empty() : tensor<1x80x128xf32>
    %78 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%77 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %73[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %79 = "tosa.reshape"(%78) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %80 = tensor.empty() : tensor<1x32x80x128xf32>
    %81 = tensor.empty() : tensor<1x32x80x128xf32>
    %82 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%76 : tensor<1x1x80x128xf32>) outs(%81 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %83 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%59, %82 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%80 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_823 = tensor.extract_slice %59[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_824 = tensor.extract_slice %59[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %84 = tensor.empty() : tensor<1x32x80x64xf32>
    %85 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_824 : tensor<1x32x80x64xf32>) outs(%84 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %86 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_825 = tensor.insert_slice %85 into %86[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_826 = tensor.insert_slice %extracted_slice_823 into %inserted_slice_825[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %87 = tensor.empty() : tensor<1x32x80x128xf32>
    %88 = tensor.empty() : tensor<1x32x80x128xf32>
    %89 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%79 : tensor<1x1x80x128xf32>) outs(%88 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %90 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_826, %89 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%87 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %91 = "tosa.add"(%83, %90) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %92 = tensor.empty() : tensor<1x32x80x128xf32>
    %93 = tensor.empty() : tensor<1x32x80x128xf32>
    %94 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%76 : tensor<1x1x80x128xf32>) outs(%93 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %95 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%62, %94 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%92 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_827 = tensor.extract_slice %62[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_828 = tensor.extract_slice %62[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %96 = tensor.empty() : tensor<1x32x80x64xf32>
    %97 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_828 : tensor<1x32x80x64xf32>) outs(%96 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %98 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_829 = tensor.insert_slice %97 into %98[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_830 = tensor.insert_slice %extracted_slice_827 into %inserted_slice_829[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %99 = tensor.empty() : tensor<1x32x80x128xf32>
    %100 = tensor.empty() : tensor<1x32x80x128xf32>
    %101 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%79 : tensor<1x1x80x128xf32>) outs(%100 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %102 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_830, %101 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%99 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %103 = "tosa.add"(%95, %102) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %104 = tensor.empty() : tensor<1x32x128x80xf32>
    %105 = linalg.generic {indexing_maps = [#map15, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%103 : tensor<1x32x80x128xf32>) outs(%104 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %106 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_831 = tensor.extract_slice %91[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_832 = tensor.insert_slice %extracted_slice_831 into %106[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %107 = "tosa.reshape"(%inserted_slice_832) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %108 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_833 = tensor.extract_slice %105[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_834 = tensor.insert_slice %extracted_slice_833 into %108[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %109 = "tosa.reshape"(%inserted_slice_834) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %110 = tensor.empty() : tensor<32x80x80xf32>
    %111 = linalg.batch_matmul ins(%107, %109 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%110 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %112 = "tosa.reshape"(%111) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_835 = arith.constant 11.3137083 : f32
    %113 = tensor.empty() : tensor<1x32x80x80xf32>
    %114 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%112 : tensor<1x32x80x80xf32>) outs(%113 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.divf %in, %cst_835 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %115 = "tosa.add"(%114, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %116 = tensor.empty() : tensor<1x32x80x1xf32>
    %117 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%116 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %118 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%115 : tensor<1x32x80x80xf32>) outs(%116 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.maxf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %119 = tensor.empty() : tensor<1x32x80x80xf32>
    %120 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%115, %118 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%119 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.subf %in, %in_1777 : f32
      %5006 = math.exp %5005 : f32
      linalg.yield %5006 : f32
    } -> tensor<1x32x80x80xf32>
    %121 = tensor.empty() : tensor<1x32x80x1xf32>
    %122 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%121 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %123 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%120 : tensor<1x32x80x80xf32>) outs(%122 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.addf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %124 = tensor.empty() : tensor<1x32x80x80xf32>
    %125 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%120, %123 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%124 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.divf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %126 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_836 = tensor.extract_slice %125[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_837 = tensor.insert_slice %extracted_slice_836 into %126[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %127 = "tosa.reshape"(%inserted_slice_837) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %128 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_838 = tensor.extract_slice %65[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_839 = tensor.insert_slice %extracted_slice_838 into %128[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %129 = "tosa.reshape"(%inserted_slice_839) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %130 = tensor.empty() : tensor<32x80x128xf32>
    %131 = linalg.batch_matmul ins(%127, %129 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%130 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %132 = "tosa.reshape"(%131) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %133 = tensor.empty() : tensor<1x80x32x128xf32>
    %134 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%132 : tensor<1x32x80x128xf32>) outs(%133 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_840 = tensor.extract_slice %134[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %135 = "tosa.reshape"(%extracted_slice_840) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %136 = tensor.empty() : tensor<4096x4096xf32>
    %137 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_72 : tensor<4096x4096xf32>) outs(%136 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %138 = "tosa.reshape"(%135) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %139 = tensor.empty() : tensor<80x4096xf32>
    %140 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%138, %137 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%139 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %141 = "tosa.reshape"(%140) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %142 = "tosa.add"(%3, %141) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %143 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_841 = arith.constant 2 : i32
    %144 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%142 : tensor<1x80x4096xf32>) outs(%143 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_841 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_842 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %145 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%144 : tensor<1x80x4096xf32>) outs(%cst_842 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_843 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %146 = "tosa.add"(%145, %cst_843) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %147 = tensor.empty() : tensor<1x80x1xf32>
    %148 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%146 : tensor<1x80x1xf32>) outs(%147 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %149 = tensor.empty() : tensor<1x80x4096xf32>
    %150 = tensor.empty() : tensor<1x80x4096xf32>
    %151 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%148 : tensor<1x80x1xf32>) outs(%150 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %152 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%142, %151 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%149 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %153 = tensor.empty() : tensor<1x80x4096xf32>
    %154 = tensor.empty() : tensor<1x80x4096xf32>
    %155 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_0 : tensor<4096xf32>) outs(%154 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %156 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%155, %152 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%153 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %157 = tensor.empty() : tensor<4096x11008xf32>
    %158 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_74 : tensor<11008x4096xf32>) outs(%157 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %159 = "tosa.reshape"(%156) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %160 = tensor.empty() : tensor<80x11008xf32>
    %161 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%159, %158 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%160 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %162 = "tosa.reshape"(%161) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %163 = tensor.empty() : tensor<1x80x11008xf32>
    %164 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%162 : tensor<1x80x11008xf32>) outs(%163 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      %5006 = math.exp %5005 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5007 = arith.addf %cst_1777, %5006 : f32
      %5008 = arith.divf %in, %5007 : f32
      linalg.yield %5008 : f32
    } -> tensor<1x80x11008xf32>
    %165 = tensor.empty() : tensor<4096x11008xf32>
    %166 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_76 : tensor<11008x4096xf32>) outs(%165 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %167 = "tosa.reshape"(%156) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %168 = tensor.empty() : tensor<80x11008xf32>
    %169 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%167, %166 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%168 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %170 = "tosa.reshape"(%169) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %171 = tensor.empty() : tensor<1x80x11008xf32>
    %172 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%164, %170 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%171 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x11008xf32>
    %173 = tensor.empty() : tensor<11008x4096xf32>
    %174 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_78 : tensor<4096x11008xf32>) outs(%173 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %175 = "tosa.reshape"(%172) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %176 = tensor.empty() : tensor<80x4096xf32>
    %177 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%175, %174 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%176 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %178 = "tosa.reshape"(%177) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %179 = "tosa.add"(%142, %178) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %180 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_844 = arith.constant 2 : i32
    %181 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%179 : tensor<1x80x4096xf32>) outs(%180 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_844 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_845 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %182 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%181 : tensor<1x80x4096xf32>) outs(%cst_845 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_846 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %183 = "tosa.add"(%182, %cst_846) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %184 = tensor.empty() : tensor<1x80x1xf32>
    %185 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%183 : tensor<1x80x1xf32>) outs(%184 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %186 = tensor.empty() : tensor<1x80x4096xf32>
    %187 = tensor.empty() : tensor<1x80x4096xf32>
    %188 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%185 : tensor<1x80x1xf32>) outs(%187 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %189 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%179, %188 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%186 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %190 = tensor.empty() : tensor<1x80x4096xf32>
    %191 = tensor.empty() : tensor<1x80x4096xf32>
    %192 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1 : tensor<4096xf32>) outs(%191 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %193 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%192, %189 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%190 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %194 = tensor.empty() : tensor<4096x4096xf32>
    %195 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_80 : tensor<4096x4096xf32>) outs(%194 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %196 = "tosa.reshape"(%193) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %197 = tensor.empty() : tensor<80x4096xf32>
    %198 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%196, %195 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%197 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %199 = "tosa.reshape"(%198) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %200 = tensor.empty() : tensor<4096x4096xf32>
    %201 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_82 : tensor<4096x4096xf32>) outs(%200 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %202 = "tosa.reshape"(%193) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %203 = tensor.empty() : tensor<80x4096xf32>
    %204 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%202, %201 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%203 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %205 = "tosa.reshape"(%204) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %206 = tensor.empty() : tensor<4096x4096xf32>
    %207 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_84 : tensor<4096x4096xf32>) outs(%206 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %208 = "tosa.reshape"(%193) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %209 = tensor.empty() : tensor<80x4096xf32>
    %210 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%208, %207 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%209 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %211 = "tosa.reshape"(%210) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %212 = "tosa.reshape"(%199) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %213 = tensor.empty() : tensor<1x32x80x128xf32>
    %214 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%212 : tensor<1x80x32x128xf32>) outs(%213 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %215 = "tosa.reshape"(%205) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %216 = tensor.empty() : tensor<1x32x80x128xf32>
    %217 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%215 : tensor<1x80x32x128xf32>) outs(%216 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %218 = "tosa.reshape"(%211) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %219 = tensor.empty() : tensor<1x32x80x128xf32>
    %220 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%218 : tensor<1x80x32x128xf32>) outs(%219 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_847 = tensor.extract_slice %expanded_520[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_848 = tensor.extract_slice %extracted_slice_847[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_849 = tensor.extract_slice %extracted_slice_848[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_850 = tensor.extract_slice %expanded_522[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_851 = tensor.extract_slice %extracted_slice_850[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_852 = tensor.extract_slice %extracted_slice_851[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %221 = tensor.empty() : tensor<1x80x128xf32>
    %222 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_849 : tensor<1x1x80x128xf32>) outs(%221 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %223 = tensor.empty() : tensor<80x128xf32>
    %224 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%222 : tensor<1x80x128xf32>) outs(%223 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %225 = tensor.empty() : tensor<1x80x128xf32>
    %226 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_852 : tensor<1x1x80x128xf32>) outs(%225 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %227 = tensor.empty() : tensor<80x128xf32>
    %228 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%226 : tensor<1x80x128xf32>) outs(%227 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %229 = tensor.empty() : tensor<1x80x128xf32>
    %230 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%229 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %224[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %231 = "tosa.reshape"(%230) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %232 = tensor.empty() : tensor<1x80x128xf32>
    %233 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%232 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %228[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %234 = "tosa.reshape"(%233) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %235 = tensor.empty() : tensor<1x32x80x128xf32>
    %236 = tensor.empty() : tensor<1x32x80x128xf32>
    %237 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%231 : tensor<1x1x80x128xf32>) outs(%236 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %238 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%214, %237 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%235 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_853 = tensor.extract_slice %214[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_854 = tensor.extract_slice %214[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %239 = tensor.empty() : tensor<1x32x80x64xf32>
    %240 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_854 : tensor<1x32x80x64xf32>) outs(%239 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %241 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_855 = tensor.insert_slice %240 into %241[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_856 = tensor.insert_slice %extracted_slice_853 into %inserted_slice_855[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %242 = tensor.empty() : tensor<1x32x80x128xf32>
    %243 = tensor.empty() : tensor<1x32x80x128xf32>
    %244 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%234 : tensor<1x1x80x128xf32>) outs(%243 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %245 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_856, %244 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%242 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %246 = "tosa.add"(%238, %245) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %247 = tensor.empty() : tensor<1x32x80x128xf32>
    %248 = tensor.empty() : tensor<1x32x80x128xf32>
    %249 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%231 : tensor<1x1x80x128xf32>) outs(%248 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %250 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%217, %249 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%247 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_857 = tensor.extract_slice %217[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_858 = tensor.extract_slice %217[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %251 = tensor.empty() : tensor<1x32x80x64xf32>
    %252 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_858 : tensor<1x32x80x64xf32>) outs(%251 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %253 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_859 = tensor.insert_slice %252 into %253[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_860 = tensor.insert_slice %extracted_slice_857 into %inserted_slice_859[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %254 = tensor.empty() : tensor<1x32x80x128xf32>
    %255 = tensor.empty() : tensor<1x32x80x128xf32>
    %256 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%234 : tensor<1x1x80x128xf32>) outs(%255 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %257 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_860, %256 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%254 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %258 = "tosa.add"(%250, %257) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %259 = tensor.empty() : tensor<1x32x128x80xf32>
    %260 = linalg.generic {indexing_maps = [#map15, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%258 : tensor<1x32x80x128xf32>) outs(%259 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %261 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_861 = tensor.extract_slice %246[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_862 = tensor.insert_slice %extracted_slice_861 into %261[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %262 = "tosa.reshape"(%inserted_slice_862) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %263 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_863 = tensor.extract_slice %260[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_864 = tensor.insert_slice %extracted_slice_863 into %263[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %264 = "tosa.reshape"(%inserted_slice_864) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %265 = tensor.empty() : tensor<32x80x80xf32>
    %266 = linalg.batch_matmul ins(%262, %264 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%265 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %267 = "tosa.reshape"(%266) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_865 = arith.constant 11.3137083 : f32
    %268 = tensor.empty() : tensor<1x32x80x80xf32>
    %269 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%267 : tensor<1x32x80x80xf32>) outs(%268 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.divf %in, %cst_865 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %270 = "tosa.add"(%269, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %271 = tensor.empty() : tensor<1x32x80x1xf32>
    %272 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%271 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %273 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%270 : tensor<1x32x80x80xf32>) outs(%271 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.maxf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %274 = tensor.empty() : tensor<1x32x80x80xf32>
    %275 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%270, %273 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%274 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.subf %in, %in_1777 : f32
      %5006 = math.exp %5005 : f32
      linalg.yield %5006 : f32
    } -> tensor<1x32x80x80xf32>
    %276 = tensor.empty() : tensor<1x32x80x1xf32>
    %277 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%276 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %278 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%275 : tensor<1x32x80x80xf32>) outs(%277 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.addf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %279 = tensor.empty() : tensor<1x32x80x80xf32>
    %280 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%275, %278 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%279 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.divf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %281 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_866 = tensor.extract_slice %280[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_867 = tensor.insert_slice %extracted_slice_866 into %281[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %282 = "tosa.reshape"(%inserted_slice_867) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %283 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_868 = tensor.extract_slice %220[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_869 = tensor.insert_slice %extracted_slice_868 into %283[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %284 = "tosa.reshape"(%inserted_slice_869) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %285 = tensor.empty() : tensor<32x80x128xf32>
    %286 = linalg.batch_matmul ins(%282, %284 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%285 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %287 = "tosa.reshape"(%286) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %288 = tensor.empty() : tensor<1x80x32x128xf32>
    %289 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%287 : tensor<1x32x80x128xf32>) outs(%288 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_870 = tensor.extract_slice %289[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %290 = "tosa.reshape"(%extracted_slice_870) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %291 = tensor.empty() : tensor<4096x4096xf32>
    %292 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_86 : tensor<4096x4096xf32>) outs(%291 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %293 = "tosa.reshape"(%290) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %294 = tensor.empty() : tensor<80x4096xf32>
    %295 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%293, %292 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%294 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %296 = "tosa.reshape"(%295) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %297 = "tosa.add"(%179, %296) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %298 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_871 = arith.constant 2 : i32
    %299 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%297 : tensor<1x80x4096xf32>) outs(%298 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_871 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_872 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %300 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%299 : tensor<1x80x4096xf32>) outs(%cst_872 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_873 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %301 = "tosa.add"(%300, %cst_873) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %302 = tensor.empty() : tensor<1x80x1xf32>
    %303 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%301 : tensor<1x80x1xf32>) outs(%302 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %304 = tensor.empty() : tensor<1x80x4096xf32>
    %305 = tensor.empty() : tensor<1x80x4096xf32>
    %306 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%303 : tensor<1x80x1xf32>) outs(%305 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %307 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%297, %306 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%304 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %308 = tensor.empty() : tensor<1x80x4096xf32>
    %309 = tensor.empty() : tensor<1x80x4096xf32>
    %310 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_2 : tensor<4096xf32>) outs(%309 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %311 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%310, %307 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%308 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %312 = tensor.empty() : tensor<4096x11008xf32>
    %313 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_88 : tensor<11008x4096xf32>) outs(%312 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %314 = "tosa.reshape"(%311) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %315 = tensor.empty() : tensor<80x11008xf32>
    %316 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%314, %313 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%315 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %317 = "tosa.reshape"(%316) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %318 = tensor.empty() : tensor<1x80x11008xf32>
    %319 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%317 : tensor<1x80x11008xf32>) outs(%318 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      %5006 = math.exp %5005 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5007 = arith.addf %cst_1777, %5006 : f32
      %5008 = arith.divf %in, %5007 : f32
      linalg.yield %5008 : f32
    } -> tensor<1x80x11008xf32>
    %320 = tensor.empty() : tensor<4096x11008xf32>
    %321 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_90 : tensor<11008x4096xf32>) outs(%320 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %322 = "tosa.reshape"(%311) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %323 = tensor.empty() : tensor<80x11008xf32>
    %324 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%322, %321 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%323 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %325 = "tosa.reshape"(%324) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %326 = tensor.empty() : tensor<1x80x11008xf32>
    %327 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%319, %325 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%326 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x11008xf32>
    %328 = tensor.empty() : tensor<11008x4096xf32>
    %329 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_92 : tensor<4096x11008xf32>) outs(%328 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %330 = "tosa.reshape"(%327) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %331 = tensor.empty() : tensor<80x4096xf32>
    %332 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%330, %329 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%331 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %333 = "tosa.reshape"(%332) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %334 = "tosa.add"(%297, %333) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %335 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_874 = arith.constant 2 : i32
    %336 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%334 : tensor<1x80x4096xf32>) outs(%335 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_874 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_875 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %337 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%336 : tensor<1x80x4096xf32>) outs(%cst_875 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_876 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %338 = "tosa.add"(%337, %cst_876) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %339 = tensor.empty() : tensor<1x80x1xf32>
    %340 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%338 : tensor<1x80x1xf32>) outs(%339 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %341 = tensor.empty() : tensor<1x80x4096xf32>
    %342 = tensor.empty() : tensor<1x80x4096xf32>
    %343 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%340 : tensor<1x80x1xf32>) outs(%342 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %344 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%334, %343 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%341 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %345 = tensor.empty() : tensor<1x80x4096xf32>
    %346 = tensor.empty() : tensor<1x80x4096xf32>
    %347 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_3 : tensor<4096xf32>) outs(%346 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %348 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%347, %344 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%345 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %349 = tensor.empty() : tensor<4096x4096xf32>
    %350 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_94 : tensor<4096x4096xf32>) outs(%349 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %351 = "tosa.reshape"(%348) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %352 = tensor.empty() : tensor<80x4096xf32>
    %353 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%351, %350 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%352 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %354 = "tosa.reshape"(%353) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %355 = tensor.empty() : tensor<4096x4096xf32>
    %356 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_96 : tensor<4096x4096xf32>) outs(%355 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %357 = "tosa.reshape"(%348) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %358 = tensor.empty() : tensor<80x4096xf32>
    %359 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%357, %356 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%358 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %360 = "tosa.reshape"(%359) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %361 = tensor.empty() : tensor<4096x4096xf32>
    %362 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_98 : tensor<4096x4096xf32>) outs(%361 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %363 = "tosa.reshape"(%348) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %364 = tensor.empty() : tensor<80x4096xf32>
    %365 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%363, %362 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%364 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %366 = "tosa.reshape"(%365) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %367 = "tosa.reshape"(%354) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %368 = tensor.empty() : tensor<1x32x80x128xf32>
    %369 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%367 : tensor<1x80x32x128xf32>) outs(%368 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %370 = "tosa.reshape"(%360) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %371 = tensor.empty() : tensor<1x32x80x128xf32>
    %372 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%370 : tensor<1x80x32x128xf32>) outs(%371 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %373 = "tosa.reshape"(%366) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %374 = tensor.empty() : tensor<1x32x80x128xf32>
    %375 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%373 : tensor<1x80x32x128xf32>) outs(%374 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_877 = tensor.extract_slice %expanded_524[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_878 = tensor.extract_slice %extracted_slice_877[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_879 = tensor.extract_slice %extracted_slice_878[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_880 = tensor.extract_slice %expanded_526[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_881 = tensor.extract_slice %extracted_slice_880[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_882 = tensor.extract_slice %extracted_slice_881[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %376 = tensor.empty() : tensor<1x80x128xf32>
    %377 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_879 : tensor<1x1x80x128xf32>) outs(%376 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %378 = tensor.empty() : tensor<80x128xf32>
    %379 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%377 : tensor<1x80x128xf32>) outs(%378 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %380 = tensor.empty() : tensor<1x80x128xf32>
    %381 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_882 : tensor<1x1x80x128xf32>) outs(%380 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %382 = tensor.empty() : tensor<80x128xf32>
    %383 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%381 : tensor<1x80x128xf32>) outs(%382 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %384 = tensor.empty() : tensor<1x80x128xf32>
    %385 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%384 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %379[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %386 = "tosa.reshape"(%385) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %387 = tensor.empty() : tensor<1x80x128xf32>
    %388 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%387 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %383[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %389 = "tosa.reshape"(%388) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %390 = tensor.empty() : tensor<1x32x80x128xf32>
    %391 = tensor.empty() : tensor<1x32x80x128xf32>
    %392 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%386 : tensor<1x1x80x128xf32>) outs(%391 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %393 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%369, %392 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%390 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_883 = tensor.extract_slice %369[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_884 = tensor.extract_slice %369[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %394 = tensor.empty() : tensor<1x32x80x64xf32>
    %395 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_884 : tensor<1x32x80x64xf32>) outs(%394 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %396 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_885 = tensor.insert_slice %395 into %396[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_886 = tensor.insert_slice %extracted_slice_883 into %inserted_slice_885[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %397 = tensor.empty() : tensor<1x32x80x128xf32>
    %398 = tensor.empty() : tensor<1x32x80x128xf32>
    %399 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%389 : tensor<1x1x80x128xf32>) outs(%398 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %400 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_886, %399 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%397 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %401 = "tosa.add"(%393, %400) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %402 = tensor.empty() : tensor<1x32x80x128xf32>
    %403 = tensor.empty() : tensor<1x32x80x128xf32>
    %404 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%386 : tensor<1x1x80x128xf32>) outs(%403 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %405 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%372, %404 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%402 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_887 = tensor.extract_slice %372[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_888 = tensor.extract_slice %372[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %406 = tensor.empty() : tensor<1x32x80x64xf32>
    %407 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_888 : tensor<1x32x80x64xf32>) outs(%406 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %408 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_889 = tensor.insert_slice %407 into %408[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_890 = tensor.insert_slice %extracted_slice_887 into %inserted_slice_889[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %409 = tensor.empty() : tensor<1x32x80x128xf32>
    %410 = tensor.empty() : tensor<1x32x80x128xf32>
    %411 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%389 : tensor<1x1x80x128xf32>) outs(%410 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %412 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_890, %411 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%409 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %413 = "tosa.add"(%405, %412) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %414 = tensor.empty() : tensor<1x32x128x80xf32>
    %415 = linalg.generic {indexing_maps = [#map15, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%413 : tensor<1x32x80x128xf32>) outs(%414 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %416 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_891 = tensor.extract_slice %401[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_892 = tensor.insert_slice %extracted_slice_891 into %416[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %417 = "tosa.reshape"(%inserted_slice_892) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %418 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_893 = tensor.extract_slice %415[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_894 = tensor.insert_slice %extracted_slice_893 into %418[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %419 = "tosa.reshape"(%inserted_slice_894) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %420 = tensor.empty() : tensor<32x80x80xf32>
    %421 = linalg.batch_matmul ins(%417, %419 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%420 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %422 = "tosa.reshape"(%421) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_895 = arith.constant 11.3137083 : f32
    %423 = tensor.empty() : tensor<1x32x80x80xf32>
    %424 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%422 : tensor<1x32x80x80xf32>) outs(%423 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.divf %in, %cst_895 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %425 = "tosa.add"(%424, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %426 = tensor.empty() : tensor<1x32x80x1xf32>
    %427 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%426 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %428 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%425 : tensor<1x32x80x80xf32>) outs(%426 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.maxf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %429 = tensor.empty() : tensor<1x32x80x80xf32>
    %430 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%425, %428 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%429 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.subf %in, %in_1777 : f32
      %5006 = math.exp %5005 : f32
      linalg.yield %5006 : f32
    } -> tensor<1x32x80x80xf32>
    %431 = tensor.empty() : tensor<1x32x80x1xf32>
    %432 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%431 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %433 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%430 : tensor<1x32x80x80xf32>) outs(%432 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.addf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %434 = tensor.empty() : tensor<1x32x80x80xf32>
    %435 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%430, %433 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%434 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.divf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %436 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_896 = tensor.extract_slice %435[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_897 = tensor.insert_slice %extracted_slice_896 into %436[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %437 = "tosa.reshape"(%inserted_slice_897) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %438 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_898 = tensor.extract_slice %375[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_899 = tensor.insert_slice %extracted_slice_898 into %438[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %439 = "tosa.reshape"(%inserted_slice_899) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %440 = tensor.empty() : tensor<32x80x128xf32>
    %441 = linalg.batch_matmul ins(%437, %439 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%440 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %442 = "tosa.reshape"(%441) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %443 = tensor.empty() : tensor<1x80x32x128xf32>
    %444 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%442 : tensor<1x32x80x128xf32>) outs(%443 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_900 = tensor.extract_slice %444[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %445 = "tosa.reshape"(%extracted_slice_900) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %446 = tensor.empty() : tensor<4096x4096xf32>
    %447 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_100 : tensor<4096x4096xf32>) outs(%446 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %448 = "tosa.reshape"(%445) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %449 = tensor.empty() : tensor<80x4096xf32>
    %450 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%448, %447 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%449 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %451 = "tosa.reshape"(%450) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %452 = "tosa.add"(%334, %451) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %453 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_901 = arith.constant 2 : i32
    %454 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%452 : tensor<1x80x4096xf32>) outs(%453 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_901 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_902 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %455 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%454 : tensor<1x80x4096xf32>) outs(%cst_902 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_903 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %456 = "tosa.add"(%455, %cst_903) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %457 = tensor.empty() : tensor<1x80x1xf32>
    %458 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%456 : tensor<1x80x1xf32>) outs(%457 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %459 = tensor.empty() : tensor<1x80x4096xf32>
    %460 = tensor.empty() : tensor<1x80x4096xf32>
    %461 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%458 : tensor<1x80x1xf32>) outs(%460 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %462 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%452, %461 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%459 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %463 = tensor.empty() : tensor<1x80x4096xf32>
    %464 = tensor.empty() : tensor<1x80x4096xf32>
    %465 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_4 : tensor<4096xf32>) outs(%464 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %466 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%465, %462 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%463 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %467 = tensor.empty() : tensor<4096x11008xf32>
    %468 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_102 : tensor<11008x4096xf32>) outs(%467 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %469 = "tosa.reshape"(%466) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %470 = tensor.empty() : tensor<80x11008xf32>
    %471 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%469, %468 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%470 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %472 = "tosa.reshape"(%471) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %473 = tensor.empty() : tensor<1x80x11008xf32>
    %474 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%472 : tensor<1x80x11008xf32>) outs(%473 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      %5006 = math.exp %5005 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5007 = arith.addf %cst_1777, %5006 : f32
      %5008 = arith.divf %in, %5007 : f32
      linalg.yield %5008 : f32
    } -> tensor<1x80x11008xf32>
    %475 = tensor.empty() : tensor<4096x11008xf32>
    %476 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_104 : tensor<11008x4096xf32>) outs(%475 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %477 = "tosa.reshape"(%466) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %478 = tensor.empty() : tensor<80x11008xf32>
    %479 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%477, %476 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%478 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %480 = "tosa.reshape"(%479) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %481 = tensor.empty() : tensor<1x80x11008xf32>
    %482 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%474, %480 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%481 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x11008xf32>
    %483 = tensor.empty() : tensor<11008x4096xf32>
    %484 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_106 : tensor<4096x11008xf32>) outs(%483 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %485 = "tosa.reshape"(%482) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %486 = tensor.empty() : tensor<80x4096xf32>
    %487 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%485, %484 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%486 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %488 = "tosa.reshape"(%487) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %489 = "tosa.add"(%452, %488) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %490 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_904 = arith.constant 2 : i32
    %491 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%489 : tensor<1x80x4096xf32>) outs(%490 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_904 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_905 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %492 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%491 : tensor<1x80x4096xf32>) outs(%cst_905 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_906 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %493 = "tosa.add"(%492, %cst_906) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %494 = tensor.empty() : tensor<1x80x1xf32>
    %495 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%493 : tensor<1x80x1xf32>) outs(%494 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %496 = tensor.empty() : tensor<1x80x4096xf32>
    %497 = tensor.empty() : tensor<1x80x4096xf32>
    %498 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%495 : tensor<1x80x1xf32>) outs(%497 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %499 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%489, %498 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%496 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %500 = tensor.empty() : tensor<1x80x4096xf32>
    %501 = tensor.empty() : tensor<1x80x4096xf32>
    %502 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_5 : tensor<4096xf32>) outs(%501 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %503 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%502, %499 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%500 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %504 = tensor.empty() : tensor<4096x4096xf32>
    %505 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_108 : tensor<4096x4096xf32>) outs(%504 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %506 = "tosa.reshape"(%503) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %507 = tensor.empty() : tensor<80x4096xf32>
    %508 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%506, %505 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%507 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %509 = "tosa.reshape"(%508) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %510 = tensor.empty() : tensor<4096x4096xf32>
    %511 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_110 : tensor<4096x4096xf32>) outs(%510 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %512 = "tosa.reshape"(%503) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %513 = tensor.empty() : tensor<80x4096xf32>
    %514 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%512, %511 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%513 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %515 = "tosa.reshape"(%514) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %516 = tensor.empty() : tensor<4096x4096xf32>
    %517 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_112 : tensor<4096x4096xf32>) outs(%516 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %518 = "tosa.reshape"(%503) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %519 = tensor.empty() : tensor<80x4096xf32>
    %520 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%518, %517 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%519 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %521 = "tosa.reshape"(%520) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %522 = "tosa.reshape"(%509) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %523 = tensor.empty() : tensor<1x32x80x128xf32>
    %524 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%522 : tensor<1x80x32x128xf32>) outs(%523 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %525 = "tosa.reshape"(%515) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %526 = tensor.empty() : tensor<1x32x80x128xf32>
    %527 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%525 : tensor<1x80x32x128xf32>) outs(%526 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %528 = "tosa.reshape"(%521) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %529 = tensor.empty() : tensor<1x32x80x128xf32>
    %530 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%528 : tensor<1x80x32x128xf32>) outs(%529 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_907 = tensor.extract_slice %expanded_528[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_908 = tensor.extract_slice %extracted_slice_907[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_909 = tensor.extract_slice %extracted_slice_908[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_910 = tensor.extract_slice %expanded_530[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_911 = tensor.extract_slice %extracted_slice_910[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_912 = tensor.extract_slice %extracted_slice_911[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %531 = tensor.empty() : tensor<1x80x128xf32>
    %532 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_909 : tensor<1x1x80x128xf32>) outs(%531 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %533 = tensor.empty() : tensor<80x128xf32>
    %534 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%532 : tensor<1x80x128xf32>) outs(%533 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %535 = tensor.empty() : tensor<1x80x128xf32>
    %536 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_912 : tensor<1x1x80x128xf32>) outs(%535 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %537 = tensor.empty() : tensor<80x128xf32>
    %538 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%536 : tensor<1x80x128xf32>) outs(%537 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %539 = tensor.empty() : tensor<1x80x128xf32>
    %540 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%539 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %534[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %541 = "tosa.reshape"(%540) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %542 = tensor.empty() : tensor<1x80x128xf32>
    %543 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%542 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %538[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %544 = "tosa.reshape"(%543) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %545 = tensor.empty() : tensor<1x32x80x128xf32>
    %546 = tensor.empty() : tensor<1x32x80x128xf32>
    %547 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%541 : tensor<1x1x80x128xf32>) outs(%546 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %548 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%524, %547 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%545 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_913 = tensor.extract_slice %524[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_914 = tensor.extract_slice %524[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %549 = tensor.empty() : tensor<1x32x80x64xf32>
    %550 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_914 : tensor<1x32x80x64xf32>) outs(%549 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %551 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_915 = tensor.insert_slice %550 into %551[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_916 = tensor.insert_slice %extracted_slice_913 into %inserted_slice_915[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %552 = tensor.empty() : tensor<1x32x80x128xf32>
    %553 = tensor.empty() : tensor<1x32x80x128xf32>
    %554 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%544 : tensor<1x1x80x128xf32>) outs(%553 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %555 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_916, %554 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%552 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %556 = "tosa.add"(%548, %555) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %557 = tensor.empty() : tensor<1x32x80x128xf32>
    %558 = tensor.empty() : tensor<1x32x80x128xf32>
    %559 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%541 : tensor<1x1x80x128xf32>) outs(%558 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %560 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%527, %559 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%557 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_917 = tensor.extract_slice %527[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_918 = tensor.extract_slice %527[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %561 = tensor.empty() : tensor<1x32x80x64xf32>
    %562 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_918 : tensor<1x32x80x64xf32>) outs(%561 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %563 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_919 = tensor.insert_slice %562 into %563[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_920 = tensor.insert_slice %extracted_slice_917 into %inserted_slice_919[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %564 = tensor.empty() : tensor<1x32x80x128xf32>
    %565 = tensor.empty() : tensor<1x32x80x128xf32>
    %566 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%544 : tensor<1x1x80x128xf32>) outs(%565 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %567 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_920, %566 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%564 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %568 = "tosa.add"(%560, %567) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %569 = tensor.empty() : tensor<1x32x128x80xf32>
    %570 = linalg.generic {indexing_maps = [#map15, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%568 : tensor<1x32x80x128xf32>) outs(%569 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %571 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_921 = tensor.extract_slice %556[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_922 = tensor.insert_slice %extracted_slice_921 into %571[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %572 = "tosa.reshape"(%inserted_slice_922) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %573 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_923 = tensor.extract_slice %570[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_924 = tensor.insert_slice %extracted_slice_923 into %573[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %574 = "tosa.reshape"(%inserted_slice_924) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %575 = tensor.empty() : tensor<32x80x80xf32>
    %576 = linalg.batch_matmul ins(%572, %574 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%575 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %577 = "tosa.reshape"(%576) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_925 = arith.constant 11.3137083 : f32
    %578 = tensor.empty() : tensor<1x32x80x80xf32>
    %579 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%577 : tensor<1x32x80x80xf32>) outs(%578 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.divf %in, %cst_925 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %580 = "tosa.add"(%579, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %581 = tensor.empty() : tensor<1x32x80x1xf32>
    %582 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%581 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %583 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%580 : tensor<1x32x80x80xf32>) outs(%581 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.maxf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %584 = tensor.empty() : tensor<1x32x80x80xf32>
    %585 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%580, %583 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%584 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.subf %in, %in_1777 : f32
      %5006 = math.exp %5005 : f32
      linalg.yield %5006 : f32
    } -> tensor<1x32x80x80xf32>
    %586 = tensor.empty() : tensor<1x32x80x1xf32>
    %587 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%586 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %588 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%585 : tensor<1x32x80x80xf32>) outs(%587 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.addf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %589 = tensor.empty() : tensor<1x32x80x80xf32>
    %590 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%585, %588 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%589 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.divf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %591 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_926 = tensor.extract_slice %590[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_927 = tensor.insert_slice %extracted_slice_926 into %591[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %592 = "tosa.reshape"(%inserted_slice_927) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %593 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_928 = tensor.extract_slice %530[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_929 = tensor.insert_slice %extracted_slice_928 into %593[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %594 = "tosa.reshape"(%inserted_slice_929) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %595 = tensor.empty() : tensor<32x80x128xf32>
    %596 = linalg.batch_matmul ins(%592, %594 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%595 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %597 = "tosa.reshape"(%596) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %598 = tensor.empty() : tensor<1x80x32x128xf32>
    %599 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%597 : tensor<1x32x80x128xf32>) outs(%598 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_930 = tensor.extract_slice %599[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %600 = "tosa.reshape"(%extracted_slice_930) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %601 = tensor.empty() : tensor<4096x4096xf32>
    %602 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_114 : tensor<4096x4096xf32>) outs(%601 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %603 = "tosa.reshape"(%600) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %604 = tensor.empty() : tensor<80x4096xf32>
    %605 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%603, %602 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%604 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %606 = "tosa.reshape"(%605) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %607 = "tosa.add"(%489, %606) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %608 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_931 = arith.constant 2 : i32
    %609 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%607 : tensor<1x80x4096xf32>) outs(%608 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_931 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_932 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %610 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%609 : tensor<1x80x4096xf32>) outs(%cst_932 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_933 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %611 = "tosa.add"(%610, %cst_933) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %612 = tensor.empty() : tensor<1x80x1xf32>
    %613 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%611 : tensor<1x80x1xf32>) outs(%612 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %614 = tensor.empty() : tensor<1x80x4096xf32>
    %615 = tensor.empty() : tensor<1x80x4096xf32>
    %616 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%613 : tensor<1x80x1xf32>) outs(%615 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %617 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%607, %616 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%614 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %618 = tensor.empty() : tensor<1x80x4096xf32>
    %619 = tensor.empty() : tensor<1x80x4096xf32>
    %620 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_6 : tensor<4096xf32>) outs(%619 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %621 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%620, %617 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%618 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %622 = tensor.empty() : tensor<4096x11008xf32>
    %623 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_116 : tensor<11008x4096xf32>) outs(%622 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %624 = "tosa.reshape"(%621) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %625 = tensor.empty() : tensor<80x11008xf32>
    %626 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%624, %623 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%625 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %627 = "tosa.reshape"(%626) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %628 = tensor.empty() : tensor<1x80x11008xf32>
    %629 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%627 : tensor<1x80x11008xf32>) outs(%628 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      %5006 = math.exp %5005 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5007 = arith.addf %cst_1777, %5006 : f32
      %5008 = arith.divf %in, %5007 : f32
      linalg.yield %5008 : f32
    } -> tensor<1x80x11008xf32>
    %630 = tensor.empty() : tensor<4096x11008xf32>
    %631 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_118 : tensor<11008x4096xf32>) outs(%630 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %632 = "tosa.reshape"(%621) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %633 = tensor.empty() : tensor<80x11008xf32>
    %634 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%632, %631 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%633 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %635 = "tosa.reshape"(%634) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %636 = tensor.empty() : tensor<1x80x11008xf32>
    %637 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%629, %635 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%636 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x11008xf32>
    %638 = tensor.empty() : tensor<11008x4096xf32>
    %639 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_120 : tensor<4096x11008xf32>) outs(%638 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %640 = "tosa.reshape"(%637) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %641 = tensor.empty() : tensor<80x4096xf32>
    %642 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%640, %639 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%641 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %643 = "tosa.reshape"(%642) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %644 = "tosa.add"(%607, %643) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %645 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_934 = arith.constant 2 : i32
    %646 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%644 : tensor<1x80x4096xf32>) outs(%645 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_934 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_935 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %647 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%646 : tensor<1x80x4096xf32>) outs(%cst_935 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_936 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %648 = "tosa.add"(%647, %cst_936) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %649 = tensor.empty() : tensor<1x80x1xf32>
    %650 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%648 : tensor<1x80x1xf32>) outs(%649 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %651 = tensor.empty() : tensor<1x80x4096xf32>
    %652 = tensor.empty() : tensor<1x80x4096xf32>
    %653 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%650 : tensor<1x80x1xf32>) outs(%652 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %654 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%644, %653 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%651 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %655 = tensor.empty() : tensor<1x80x4096xf32>
    %656 = tensor.empty() : tensor<1x80x4096xf32>
    %657 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_7 : tensor<4096xf32>) outs(%656 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %658 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%657, %654 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%655 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %659 = tensor.empty() : tensor<4096x4096xf32>
    %660 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_122 : tensor<4096x4096xf32>) outs(%659 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %661 = "tosa.reshape"(%658) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %662 = tensor.empty() : tensor<80x4096xf32>
    %663 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%661, %660 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%662 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %664 = "tosa.reshape"(%663) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %665 = tensor.empty() : tensor<4096x4096xf32>
    %666 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_124 : tensor<4096x4096xf32>) outs(%665 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %667 = "tosa.reshape"(%658) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %668 = tensor.empty() : tensor<80x4096xf32>
    %669 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%667, %666 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%668 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %670 = "tosa.reshape"(%669) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %671 = tensor.empty() : tensor<4096x4096xf32>
    %672 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_126 : tensor<4096x4096xf32>) outs(%671 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %673 = "tosa.reshape"(%658) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %674 = tensor.empty() : tensor<80x4096xf32>
    %675 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%673, %672 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%674 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %676 = "tosa.reshape"(%675) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %677 = "tosa.reshape"(%664) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %678 = tensor.empty() : tensor<1x32x80x128xf32>
    %679 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%677 : tensor<1x80x32x128xf32>) outs(%678 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %680 = "tosa.reshape"(%670) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %681 = tensor.empty() : tensor<1x32x80x128xf32>
    %682 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%680 : tensor<1x80x32x128xf32>) outs(%681 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %683 = "tosa.reshape"(%676) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %684 = tensor.empty() : tensor<1x32x80x128xf32>
    %685 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%683 : tensor<1x80x32x128xf32>) outs(%684 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_937 = tensor.extract_slice %expanded_532[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_938 = tensor.extract_slice %extracted_slice_937[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_939 = tensor.extract_slice %extracted_slice_938[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_940 = tensor.extract_slice %expanded_534[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_941 = tensor.extract_slice %extracted_slice_940[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_942 = tensor.extract_slice %extracted_slice_941[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %686 = tensor.empty() : tensor<1x80x128xf32>
    %687 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_939 : tensor<1x1x80x128xf32>) outs(%686 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %688 = tensor.empty() : tensor<80x128xf32>
    %689 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%687 : tensor<1x80x128xf32>) outs(%688 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %690 = tensor.empty() : tensor<1x80x128xf32>
    %691 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_942 : tensor<1x1x80x128xf32>) outs(%690 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %692 = tensor.empty() : tensor<80x128xf32>
    %693 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%691 : tensor<1x80x128xf32>) outs(%692 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %694 = tensor.empty() : tensor<1x80x128xf32>
    %695 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%694 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %689[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %696 = "tosa.reshape"(%695) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %697 = tensor.empty() : tensor<1x80x128xf32>
    %698 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%697 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %693[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %699 = "tosa.reshape"(%698) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %700 = tensor.empty() : tensor<1x32x80x128xf32>
    %701 = tensor.empty() : tensor<1x32x80x128xf32>
    %702 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%696 : tensor<1x1x80x128xf32>) outs(%701 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %703 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%679, %702 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%700 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_943 = tensor.extract_slice %679[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_944 = tensor.extract_slice %679[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %704 = tensor.empty() : tensor<1x32x80x64xf32>
    %705 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_944 : tensor<1x32x80x64xf32>) outs(%704 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %706 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_945 = tensor.insert_slice %705 into %706[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_946 = tensor.insert_slice %extracted_slice_943 into %inserted_slice_945[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %707 = tensor.empty() : tensor<1x32x80x128xf32>
    %708 = tensor.empty() : tensor<1x32x80x128xf32>
    %709 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%699 : tensor<1x1x80x128xf32>) outs(%708 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %710 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_946, %709 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%707 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %711 = "tosa.add"(%703, %710) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %712 = tensor.empty() : tensor<1x32x80x128xf32>
    %713 = tensor.empty() : tensor<1x32x80x128xf32>
    %714 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%696 : tensor<1x1x80x128xf32>) outs(%713 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %715 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%682, %714 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%712 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_947 = tensor.extract_slice %682[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_948 = tensor.extract_slice %682[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %716 = tensor.empty() : tensor<1x32x80x64xf32>
    %717 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_948 : tensor<1x32x80x64xf32>) outs(%716 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %718 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_949 = tensor.insert_slice %717 into %718[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_950 = tensor.insert_slice %extracted_slice_947 into %inserted_slice_949[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %719 = tensor.empty() : tensor<1x32x80x128xf32>
    %720 = tensor.empty() : tensor<1x32x80x128xf32>
    %721 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%699 : tensor<1x1x80x128xf32>) outs(%720 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %722 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_950, %721 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%719 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %723 = "tosa.add"(%715, %722) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %724 = tensor.empty() : tensor<1x32x128x80xf32>
    %725 = linalg.generic {indexing_maps = [#map15, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%723 : tensor<1x32x80x128xf32>) outs(%724 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %726 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_951 = tensor.extract_slice %711[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_952 = tensor.insert_slice %extracted_slice_951 into %726[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %727 = "tosa.reshape"(%inserted_slice_952) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %728 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_953 = tensor.extract_slice %725[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_954 = tensor.insert_slice %extracted_slice_953 into %728[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %729 = "tosa.reshape"(%inserted_slice_954) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %730 = tensor.empty() : tensor<32x80x80xf32>
    %731 = linalg.batch_matmul ins(%727, %729 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%730 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %732 = "tosa.reshape"(%731) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_955 = arith.constant 11.3137083 : f32
    %733 = tensor.empty() : tensor<1x32x80x80xf32>
    %734 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%732 : tensor<1x32x80x80xf32>) outs(%733 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.divf %in, %cst_955 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %735 = "tosa.add"(%734, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %736 = tensor.empty() : tensor<1x32x80x1xf32>
    %737 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%736 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %738 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%735 : tensor<1x32x80x80xf32>) outs(%736 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.maxf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %739 = tensor.empty() : tensor<1x32x80x80xf32>
    %740 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%735, %738 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%739 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.subf %in, %in_1777 : f32
      %5006 = math.exp %5005 : f32
      linalg.yield %5006 : f32
    } -> tensor<1x32x80x80xf32>
    %741 = tensor.empty() : tensor<1x32x80x1xf32>
    %742 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%741 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %743 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%740 : tensor<1x32x80x80xf32>) outs(%742 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.addf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %744 = tensor.empty() : tensor<1x32x80x80xf32>
    %745 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%740, %743 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%744 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.divf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %746 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_956 = tensor.extract_slice %745[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_957 = tensor.insert_slice %extracted_slice_956 into %746[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %747 = "tosa.reshape"(%inserted_slice_957) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %748 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_958 = tensor.extract_slice %685[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_959 = tensor.insert_slice %extracted_slice_958 into %748[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %749 = "tosa.reshape"(%inserted_slice_959) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %750 = tensor.empty() : tensor<32x80x128xf32>
    %751 = linalg.batch_matmul ins(%747, %749 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%750 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %752 = "tosa.reshape"(%751) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %753 = tensor.empty() : tensor<1x80x32x128xf32>
    %754 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%752 : tensor<1x32x80x128xf32>) outs(%753 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_960 = tensor.extract_slice %754[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %755 = "tosa.reshape"(%extracted_slice_960) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %756 = tensor.empty() : tensor<4096x4096xf32>
    %757 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_128 : tensor<4096x4096xf32>) outs(%756 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %758 = "tosa.reshape"(%755) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %759 = tensor.empty() : tensor<80x4096xf32>
    %760 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%758, %757 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%759 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %761 = "tosa.reshape"(%760) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %762 = "tosa.add"(%644, %761) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %763 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_961 = arith.constant 2 : i32
    %764 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%762 : tensor<1x80x4096xf32>) outs(%763 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_961 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_962 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %765 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%764 : tensor<1x80x4096xf32>) outs(%cst_962 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_963 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %766 = "tosa.add"(%765, %cst_963) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %767 = tensor.empty() : tensor<1x80x1xf32>
    %768 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%766 : tensor<1x80x1xf32>) outs(%767 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %769 = tensor.empty() : tensor<1x80x4096xf32>
    %770 = tensor.empty() : tensor<1x80x4096xf32>
    %771 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%768 : tensor<1x80x1xf32>) outs(%770 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %772 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%762, %771 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%769 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %773 = tensor.empty() : tensor<1x80x4096xf32>
    %774 = tensor.empty() : tensor<1x80x4096xf32>
    %775 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_8 : tensor<4096xf32>) outs(%774 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %776 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%775, %772 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%773 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %777 = tensor.empty() : tensor<4096x11008xf32>
    %778 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_130 : tensor<11008x4096xf32>) outs(%777 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %779 = "tosa.reshape"(%776) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %780 = tensor.empty() : tensor<80x11008xf32>
    %781 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%779, %778 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%780 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %782 = "tosa.reshape"(%781) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %783 = tensor.empty() : tensor<1x80x11008xf32>
    %784 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%782 : tensor<1x80x11008xf32>) outs(%783 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      %5006 = math.exp %5005 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5007 = arith.addf %cst_1777, %5006 : f32
      %5008 = arith.divf %in, %5007 : f32
      linalg.yield %5008 : f32
    } -> tensor<1x80x11008xf32>
    %785 = tensor.empty() : tensor<4096x11008xf32>
    %786 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_132 : tensor<11008x4096xf32>) outs(%785 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %787 = "tosa.reshape"(%776) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %788 = tensor.empty() : tensor<80x11008xf32>
    %789 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%787, %786 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%788 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %790 = "tosa.reshape"(%789) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %791 = tensor.empty() : tensor<1x80x11008xf32>
    %792 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%784, %790 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%791 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x11008xf32>
    %793 = tensor.empty() : tensor<11008x4096xf32>
    %794 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_134 : tensor<4096x11008xf32>) outs(%793 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %795 = "tosa.reshape"(%792) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %796 = tensor.empty() : tensor<80x4096xf32>
    %797 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%795, %794 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%796 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %798 = "tosa.reshape"(%797) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %799 = "tosa.add"(%762, %798) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %800 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_964 = arith.constant 2 : i32
    %801 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%799 : tensor<1x80x4096xf32>) outs(%800 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_964 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_965 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %802 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%801 : tensor<1x80x4096xf32>) outs(%cst_965 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_966 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %803 = "tosa.add"(%802, %cst_966) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %804 = tensor.empty() : tensor<1x80x1xf32>
    %805 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%803 : tensor<1x80x1xf32>) outs(%804 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %806 = tensor.empty() : tensor<1x80x4096xf32>
    %807 = tensor.empty() : tensor<1x80x4096xf32>
    %808 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%805 : tensor<1x80x1xf32>) outs(%807 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %809 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%799, %808 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%806 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %810 = tensor.empty() : tensor<1x80x4096xf32>
    %811 = tensor.empty() : tensor<1x80x4096xf32>
    %812 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_9 : tensor<4096xf32>) outs(%811 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %813 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%812, %809 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%810 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %814 = tensor.empty() : tensor<4096x4096xf32>
    %815 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_136 : tensor<4096x4096xf32>) outs(%814 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %816 = "tosa.reshape"(%813) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %817 = tensor.empty() : tensor<80x4096xf32>
    %818 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%816, %815 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%817 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %819 = "tosa.reshape"(%818) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %820 = tensor.empty() : tensor<4096x4096xf32>
    %821 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_138 : tensor<4096x4096xf32>) outs(%820 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %822 = "tosa.reshape"(%813) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %823 = tensor.empty() : tensor<80x4096xf32>
    %824 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%822, %821 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%823 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %825 = "tosa.reshape"(%824) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %826 = tensor.empty() : tensor<4096x4096xf32>
    %827 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_140 : tensor<4096x4096xf32>) outs(%826 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %828 = "tosa.reshape"(%813) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %829 = tensor.empty() : tensor<80x4096xf32>
    %830 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%828, %827 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%829 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %831 = "tosa.reshape"(%830) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %832 = "tosa.reshape"(%819) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %833 = tensor.empty() : tensor<1x32x80x128xf32>
    %834 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%832 : tensor<1x80x32x128xf32>) outs(%833 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %835 = "tosa.reshape"(%825) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %836 = tensor.empty() : tensor<1x32x80x128xf32>
    %837 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%835 : tensor<1x80x32x128xf32>) outs(%836 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %838 = "tosa.reshape"(%831) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %839 = tensor.empty() : tensor<1x32x80x128xf32>
    %840 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%838 : tensor<1x80x32x128xf32>) outs(%839 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_967 = tensor.extract_slice %expanded_536[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_968 = tensor.extract_slice %extracted_slice_967[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_969 = tensor.extract_slice %extracted_slice_968[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_970 = tensor.extract_slice %expanded_538[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_971 = tensor.extract_slice %extracted_slice_970[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_972 = tensor.extract_slice %extracted_slice_971[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %841 = tensor.empty() : tensor<1x80x128xf32>
    %842 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_969 : tensor<1x1x80x128xf32>) outs(%841 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %843 = tensor.empty() : tensor<80x128xf32>
    %844 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%842 : tensor<1x80x128xf32>) outs(%843 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %845 = tensor.empty() : tensor<1x80x128xf32>
    %846 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_972 : tensor<1x1x80x128xf32>) outs(%845 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %847 = tensor.empty() : tensor<80x128xf32>
    %848 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%846 : tensor<1x80x128xf32>) outs(%847 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %849 = tensor.empty() : tensor<1x80x128xf32>
    %850 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%849 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %844[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %851 = "tosa.reshape"(%850) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %852 = tensor.empty() : tensor<1x80x128xf32>
    %853 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%852 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %848[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %854 = "tosa.reshape"(%853) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %855 = tensor.empty() : tensor<1x32x80x128xf32>
    %856 = tensor.empty() : tensor<1x32x80x128xf32>
    %857 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%851 : tensor<1x1x80x128xf32>) outs(%856 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %858 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%834, %857 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%855 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_973 = tensor.extract_slice %834[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_974 = tensor.extract_slice %834[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %859 = tensor.empty() : tensor<1x32x80x64xf32>
    %860 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_974 : tensor<1x32x80x64xf32>) outs(%859 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %861 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_975 = tensor.insert_slice %860 into %861[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_976 = tensor.insert_slice %extracted_slice_973 into %inserted_slice_975[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %862 = tensor.empty() : tensor<1x32x80x128xf32>
    %863 = tensor.empty() : tensor<1x32x80x128xf32>
    %864 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%854 : tensor<1x1x80x128xf32>) outs(%863 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %865 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_976, %864 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%862 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %866 = "tosa.add"(%858, %865) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %867 = tensor.empty() : tensor<1x32x80x128xf32>
    %868 = tensor.empty() : tensor<1x32x80x128xf32>
    %869 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%851 : tensor<1x1x80x128xf32>) outs(%868 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %870 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%837, %869 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%867 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_977 = tensor.extract_slice %837[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_978 = tensor.extract_slice %837[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %871 = tensor.empty() : tensor<1x32x80x64xf32>
    %872 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_978 : tensor<1x32x80x64xf32>) outs(%871 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %873 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_979 = tensor.insert_slice %872 into %873[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_980 = tensor.insert_slice %extracted_slice_977 into %inserted_slice_979[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %874 = tensor.empty() : tensor<1x32x80x128xf32>
    %875 = tensor.empty() : tensor<1x32x80x128xf32>
    %876 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%854 : tensor<1x1x80x128xf32>) outs(%875 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %877 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_980, %876 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%874 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %878 = "tosa.add"(%870, %877) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %879 = tensor.empty() : tensor<1x32x128x80xf32>
    %880 = linalg.generic {indexing_maps = [#map15, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%878 : tensor<1x32x80x128xf32>) outs(%879 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %881 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_981 = tensor.extract_slice %866[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_982 = tensor.insert_slice %extracted_slice_981 into %881[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %882 = "tosa.reshape"(%inserted_slice_982) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %883 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_983 = tensor.extract_slice %880[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_984 = tensor.insert_slice %extracted_slice_983 into %883[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %884 = "tosa.reshape"(%inserted_slice_984) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %885 = tensor.empty() : tensor<32x80x80xf32>
    %886 = linalg.batch_matmul ins(%882, %884 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%885 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %887 = "tosa.reshape"(%886) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_985 = arith.constant 11.3137083 : f32
    %888 = tensor.empty() : tensor<1x32x80x80xf32>
    %889 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%887 : tensor<1x32x80x80xf32>) outs(%888 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.divf %in, %cst_985 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %890 = "tosa.add"(%889, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %891 = tensor.empty() : tensor<1x32x80x1xf32>
    %892 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%891 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %893 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%890 : tensor<1x32x80x80xf32>) outs(%891 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.maxf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %894 = tensor.empty() : tensor<1x32x80x80xf32>
    %895 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%890, %893 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%894 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.subf %in, %in_1777 : f32
      %5006 = math.exp %5005 : f32
      linalg.yield %5006 : f32
    } -> tensor<1x32x80x80xf32>
    %896 = tensor.empty() : tensor<1x32x80x1xf32>
    %897 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%896 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %898 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%895 : tensor<1x32x80x80xf32>) outs(%897 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.addf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %899 = tensor.empty() : tensor<1x32x80x80xf32>
    %900 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%895, %898 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%899 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.divf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %901 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_986 = tensor.extract_slice %900[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_987 = tensor.insert_slice %extracted_slice_986 into %901[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %902 = "tosa.reshape"(%inserted_slice_987) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %903 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_988 = tensor.extract_slice %840[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_989 = tensor.insert_slice %extracted_slice_988 into %903[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %904 = "tosa.reshape"(%inserted_slice_989) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %905 = tensor.empty() : tensor<32x80x128xf32>
    %906 = linalg.batch_matmul ins(%902, %904 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%905 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %907 = "tosa.reshape"(%906) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %908 = tensor.empty() : tensor<1x80x32x128xf32>
    %909 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%907 : tensor<1x32x80x128xf32>) outs(%908 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_990 = tensor.extract_slice %909[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %910 = "tosa.reshape"(%extracted_slice_990) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %911 = tensor.empty() : tensor<4096x4096xf32>
    %912 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_142 : tensor<4096x4096xf32>) outs(%911 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %913 = "tosa.reshape"(%910) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %914 = tensor.empty() : tensor<80x4096xf32>
    %915 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%913, %912 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%914 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %916 = "tosa.reshape"(%915) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %917 = "tosa.add"(%799, %916) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %918 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_991 = arith.constant 2 : i32
    %919 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%917 : tensor<1x80x4096xf32>) outs(%918 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_991 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_992 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %920 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%919 : tensor<1x80x4096xf32>) outs(%cst_992 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_993 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %921 = "tosa.add"(%920, %cst_993) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %922 = tensor.empty() : tensor<1x80x1xf32>
    %923 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%921 : tensor<1x80x1xf32>) outs(%922 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %924 = tensor.empty() : tensor<1x80x4096xf32>
    %925 = tensor.empty() : tensor<1x80x4096xf32>
    %926 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%923 : tensor<1x80x1xf32>) outs(%925 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %927 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%917, %926 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%924 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %928 = tensor.empty() : tensor<1x80x4096xf32>
    %929 = tensor.empty() : tensor<1x80x4096xf32>
    %930 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_10 : tensor<4096xf32>) outs(%929 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %931 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%930, %927 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%928 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %932 = tensor.empty() : tensor<4096x11008xf32>
    %933 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_144 : tensor<11008x4096xf32>) outs(%932 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %934 = "tosa.reshape"(%931) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %935 = tensor.empty() : tensor<80x11008xf32>
    %936 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%934, %933 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%935 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %937 = "tosa.reshape"(%936) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %938 = tensor.empty() : tensor<1x80x11008xf32>
    %939 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%937 : tensor<1x80x11008xf32>) outs(%938 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      %5006 = math.exp %5005 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5007 = arith.addf %cst_1777, %5006 : f32
      %5008 = arith.divf %in, %5007 : f32
      linalg.yield %5008 : f32
    } -> tensor<1x80x11008xf32>
    %940 = tensor.empty() : tensor<4096x11008xf32>
    %941 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_146 : tensor<11008x4096xf32>) outs(%940 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %942 = "tosa.reshape"(%931) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %943 = tensor.empty() : tensor<80x11008xf32>
    %944 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%942, %941 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%943 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %945 = "tosa.reshape"(%944) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %946 = tensor.empty() : tensor<1x80x11008xf32>
    %947 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%939, %945 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%946 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x11008xf32>
    %948 = tensor.empty() : tensor<11008x4096xf32>
    %949 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_148 : tensor<4096x11008xf32>) outs(%948 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %950 = "tosa.reshape"(%947) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %951 = tensor.empty() : tensor<80x4096xf32>
    %952 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%950, %949 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%951 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %953 = "tosa.reshape"(%952) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %954 = "tosa.add"(%917, %953) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %955 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_994 = arith.constant 2 : i32
    %956 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%954 : tensor<1x80x4096xf32>) outs(%955 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_994 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_995 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %957 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%956 : tensor<1x80x4096xf32>) outs(%cst_995 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_996 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %958 = "tosa.add"(%957, %cst_996) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %959 = tensor.empty() : tensor<1x80x1xf32>
    %960 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%958 : tensor<1x80x1xf32>) outs(%959 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %961 = tensor.empty() : tensor<1x80x4096xf32>
    %962 = tensor.empty() : tensor<1x80x4096xf32>
    %963 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%960 : tensor<1x80x1xf32>) outs(%962 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %964 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%954, %963 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%961 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %965 = tensor.empty() : tensor<1x80x4096xf32>
    %966 = tensor.empty() : tensor<1x80x4096xf32>
    %967 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_11 : tensor<4096xf32>) outs(%966 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %968 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%967, %964 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%965 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %969 = tensor.empty() : tensor<4096x4096xf32>
    %970 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_150 : tensor<4096x4096xf32>) outs(%969 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %971 = "tosa.reshape"(%968) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %972 = tensor.empty() : tensor<80x4096xf32>
    %973 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%971, %970 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%972 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %974 = "tosa.reshape"(%973) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %975 = tensor.empty() : tensor<4096x4096xf32>
    %976 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_152 : tensor<4096x4096xf32>) outs(%975 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %977 = "tosa.reshape"(%968) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %978 = tensor.empty() : tensor<80x4096xf32>
    %979 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%977, %976 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%978 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %980 = "tosa.reshape"(%979) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %981 = tensor.empty() : tensor<4096x4096xf32>
    %982 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_154 : tensor<4096x4096xf32>) outs(%981 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %983 = "tosa.reshape"(%968) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %984 = tensor.empty() : tensor<80x4096xf32>
    %985 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%983, %982 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%984 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %986 = "tosa.reshape"(%985) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %987 = "tosa.reshape"(%974) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %988 = tensor.empty() : tensor<1x32x80x128xf32>
    %989 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%987 : tensor<1x80x32x128xf32>) outs(%988 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %990 = "tosa.reshape"(%980) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %991 = tensor.empty() : tensor<1x32x80x128xf32>
    %992 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%990 : tensor<1x80x32x128xf32>) outs(%991 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %993 = "tosa.reshape"(%986) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %994 = tensor.empty() : tensor<1x32x80x128xf32>
    %995 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%993 : tensor<1x80x32x128xf32>) outs(%994 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_997 = tensor.extract_slice %expanded_540[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_998 = tensor.extract_slice %extracted_slice_997[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_999 = tensor.extract_slice %extracted_slice_998[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1000 = tensor.extract_slice %expanded_542[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1001 = tensor.extract_slice %extracted_slice_1000[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1002 = tensor.extract_slice %extracted_slice_1001[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %996 = tensor.empty() : tensor<1x80x128xf32>
    %997 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_999 : tensor<1x1x80x128xf32>) outs(%996 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %998 = tensor.empty() : tensor<80x128xf32>
    %999 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%997 : tensor<1x80x128xf32>) outs(%998 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %1000 = tensor.empty() : tensor<1x80x128xf32>
    %1001 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1002 : tensor<1x1x80x128xf32>) outs(%1000 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %1002 = tensor.empty() : tensor<80x128xf32>
    %1003 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%1001 : tensor<1x80x128xf32>) outs(%1002 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %1004 = tensor.empty() : tensor<1x80x128xf32>
    %1005 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%1004 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %999[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %1006 = "tosa.reshape"(%1005) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %1007 = tensor.empty() : tensor<1x80x128xf32>
    %1008 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%1007 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %1003[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %1009 = "tosa.reshape"(%1008) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %1010 = tensor.empty() : tensor<1x32x80x128xf32>
    %1011 = tensor.empty() : tensor<1x32x80x128xf32>
    %1012 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1006 : tensor<1x1x80x128xf32>) outs(%1011 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1013 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%989, %1012 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1010 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1003 = tensor.extract_slice %989[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1004 = tensor.extract_slice %989[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %1014 = tensor.empty() : tensor<1x32x80x64xf32>
    %1015 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1004 : tensor<1x32x80x64xf32>) outs(%1014 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %1016 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1005 = tensor.insert_slice %1015 into %1016[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1006 = tensor.insert_slice %extracted_slice_1003 into %inserted_slice_1005[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %1017 = tensor.empty() : tensor<1x32x80x128xf32>
    %1018 = tensor.empty() : tensor<1x32x80x128xf32>
    %1019 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1009 : tensor<1x1x80x128xf32>) outs(%1018 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1020 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1006, %1019 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1017 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %1021 = "tosa.add"(%1013, %1020) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1022 = tensor.empty() : tensor<1x32x80x128xf32>
    %1023 = tensor.empty() : tensor<1x32x80x128xf32>
    %1024 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1006 : tensor<1x1x80x128xf32>) outs(%1023 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1025 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%992, %1024 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1022 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1007 = tensor.extract_slice %992[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1008 = tensor.extract_slice %992[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %1026 = tensor.empty() : tensor<1x32x80x64xf32>
    %1027 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1008 : tensor<1x32x80x64xf32>) outs(%1026 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %1028 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1009 = tensor.insert_slice %1027 into %1028[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1010 = tensor.insert_slice %extracted_slice_1007 into %inserted_slice_1009[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %1029 = tensor.empty() : tensor<1x32x80x128xf32>
    %1030 = tensor.empty() : tensor<1x32x80x128xf32>
    %1031 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1009 : tensor<1x1x80x128xf32>) outs(%1030 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1032 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1010, %1031 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1029 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %1033 = "tosa.add"(%1025, %1032) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1034 = tensor.empty() : tensor<1x32x128x80xf32>
    %1035 = linalg.generic {indexing_maps = [#map15, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1033 : tensor<1x32x80x128xf32>) outs(%1034 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %1036 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1011 = tensor.extract_slice %1021[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1012 = tensor.insert_slice %extracted_slice_1011 into %1036[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %1037 = "tosa.reshape"(%inserted_slice_1012) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %1038 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1013 = tensor.extract_slice %1035[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1014 = tensor.insert_slice %extracted_slice_1013 into %1038[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %1039 = "tosa.reshape"(%inserted_slice_1014) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %1040 = tensor.empty() : tensor<32x80x80xf32>
    %1041 = linalg.batch_matmul ins(%1037, %1039 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%1040 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %1042 = "tosa.reshape"(%1041) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1015 = arith.constant 11.3137083 : f32
    %1043 = tensor.empty() : tensor<1x32x80x80xf32>
    %1044 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1042 : tensor<1x32x80x80xf32>) outs(%1043 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.divf %in, %cst_1015 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %1045 = "tosa.add"(%1044, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %1046 = tensor.empty() : tensor<1x32x80x1xf32>
    %1047 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1046 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %1048 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1045 : tensor<1x32x80x80xf32>) outs(%1046 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.maxf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %1049 = tensor.empty() : tensor<1x32x80x80xf32>
    %1050 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1045, %1048 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%1049 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.subf %in, %in_1777 : f32
      %5006 = math.exp %5005 : f32
      linalg.yield %5006 : f32
    } -> tensor<1x32x80x80xf32>
    %1051 = tensor.empty() : tensor<1x32x80x1xf32>
    %1052 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1051 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %1053 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1050 : tensor<1x32x80x80xf32>) outs(%1052 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.addf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %1054 = tensor.empty() : tensor<1x32x80x80xf32>
    %1055 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1050, %1053 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%1054 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.divf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %1056 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1016 = tensor.extract_slice %1055[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1017 = tensor.insert_slice %extracted_slice_1016 into %1056[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %1057 = "tosa.reshape"(%inserted_slice_1017) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %1058 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1018 = tensor.extract_slice %995[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1019 = tensor.insert_slice %extracted_slice_1018 into %1058[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %1059 = "tosa.reshape"(%inserted_slice_1019) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %1060 = tensor.empty() : tensor<32x80x128xf32>
    %1061 = linalg.batch_matmul ins(%1057, %1059 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%1060 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %1062 = "tosa.reshape"(%1061) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1063 = tensor.empty() : tensor<1x80x32x128xf32>
    %1064 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1062 : tensor<1x32x80x128xf32>) outs(%1063 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1020 = tensor.extract_slice %1064[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %1065 = "tosa.reshape"(%extracted_slice_1020) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %1066 = tensor.empty() : tensor<4096x4096xf32>
    %1067 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_156 : tensor<4096x4096xf32>) outs(%1066 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1068 = "tosa.reshape"(%1065) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1069 = tensor.empty() : tensor<80x4096xf32>
    %1070 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%1068, %1067 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1069 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %1071 = "tosa.reshape"(%1070) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1072 = "tosa.add"(%954, %1071) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %1073 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1021 = arith.constant 2 : i32
    %1074 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1072 : tensor<1x80x4096xf32>) outs(%1073 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1021 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1022 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %1075 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1074 : tensor<1x80x4096xf32>) outs(%cst_1022 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1023 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1076 = "tosa.add"(%1075, %cst_1023) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %1077 = tensor.empty() : tensor<1x80x1xf32>
    %1078 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1076 : tensor<1x80x1xf32>) outs(%1077 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %1079 = tensor.empty() : tensor<1x80x4096xf32>
    %1080 = tensor.empty() : tensor<1x80x4096xf32>
    %1081 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1078 : tensor<1x80x1xf32>) outs(%1080 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1082 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1072, %1081 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1079 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %1083 = tensor.empty() : tensor<1x80x4096xf32>
    %1084 = tensor.empty() : tensor<1x80x4096xf32>
    %1085 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_12 : tensor<4096xf32>) outs(%1084 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1086 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1085, %1082 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1083 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %1087 = tensor.empty() : tensor<4096x11008xf32>
    %1088 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_158 : tensor<11008x4096xf32>) outs(%1087 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1089 = "tosa.reshape"(%1086) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1090 = tensor.empty() : tensor<80x11008xf32>
    %1091 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%1089, %1088 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%1090 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %1092 = "tosa.reshape"(%1091) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %1093 = tensor.empty() : tensor<1x80x11008xf32>
    %1094 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1092 : tensor<1x80x11008xf32>) outs(%1093 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      %5006 = math.exp %5005 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5007 = arith.addf %cst_1777, %5006 : f32
      %5008 = arith.divf %in, %5007 : f32
      linalg.yield %5008 : f32
    } -> tensor<1x80x11008xf32>
    %1095 = tensor.empty() : tensor<4096x11008xf32>
    %1096 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_160 : tensor<11008x4096xf32>) outs(%1095 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1097 = "tosa.reshape"(%1086) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1098 = tensor.empty() : tensor<80x11008xf32>
    %1099 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%1097, %1096 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%1098 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %1100 = "tosa.reshape"(%1099) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %1101 = tensor.empty() : tensor<1x80x11008xf32>
    %1102 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1094, %1100 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%1101 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x11008xf32>
    %1103 = tensor.empty() : tensor<11008x4096xf32>
    %1104 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_162 : tensor<4096x11008xf32>) outs(%1103 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %1105 = "tosa.reshape"(%1102) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %1106 = tensor.empty() : tensor<80x4096xf32>
    %1107 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%1105, %1104 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%1106 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %1108 = "tosa.reshape"(%1107) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1109 = "tosa.add"(%1072, %1108) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %1110 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1024 = arith.constant 2 : i32
    %1111 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1109 : tensor<1x80x4096xf32>) outs(%1110 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1024 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1025 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %1112 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1111 : tensor<1x80x4096xf32>) outs(%cst_1025 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1026 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1113 = "tosa.add"(%1112, %cst_1026) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %1114 = tensor.empty() : tensor<1x80x1xf32>
    %1115 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1113 : tensor<1x80x1xf32>) outs(%1114 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %1116 = tensor.empty() : tensor<1x80x4096xf32>
    %1117 = tensor.empty() : tensor<1x80x4096xf32>
    %1118 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1115 : tensor<1x80x1xf32>) outs(%1117 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1119 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1109, %1118 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1116 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %1120 = tensor.empty() : tensor<1x80x4096xf32>
    %1121 = tensor.empty() : tensor<1x80x4096xf32>
    %1122 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_13 : tensor<4096xf32>) outs(%1121 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1123 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1122, %1119 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1120 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %1124 = tensor.empty() : tensor<4096x4096xf32>
    %1125 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_164 : tensor<4096x4096xf32>) outs(%1124 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1126 = "tosa.reshape"(%1123) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1127 = tensor.empty() : tensor<80x4096xf32>
    %1128 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%1126, %1125 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1127 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %1129 = "tosa.reshape"(%1128) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1130 = tensor.empty() : tensor<4096x4096xf32>
    %1131 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_166 : tensor<4096x4096xf32>) outs(%1130 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1132 = "tosa.reshape"(%1123) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1133 = tensor.empty() : tensor<80x4096xf32>
    %1134 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%1132, %1131 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1133 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %1135 = "tosa.reshape"(%1134) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1136 = tensor.empty() : tensor<4096x4096xf32>
    %1137 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_168 : tensor<4096x4096xf32>) outs(%1136 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1138 = "tosa.reshape"(%1123) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1139 = tensor.empty() : tensor<80x4096xf32>
    %1140 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%1138, %1137 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1139 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %1141 = "tosa.reshape"(%1140) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1142 = "tosa.reshape"(%1129) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1143 = tensor.empty() : tensor<1x32x80x128xf32>
    %1144 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1142 : tensor<1x80x32x128xf32>) outs(%1143 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1145 = "tosa.reshape"(%1135) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1146 = tensor.empty() : tensor<1x32x80x128xf32>
    %1147 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1145 : tensor<1x80x32x128xf32>) outs(%1146 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1148 = "tosa.reshape"(%1141) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1149 = tensor.empty() : tensor<1x32x80x128xf32>
    %1150 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1148 : tensor<1x80x32x128xf32>) outs(%1149 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1027 = tensor.extract_slice %expanded_544[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1028 = tensor.extract_slice %extracted_slice_1027[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1029 = tensor.extract_slice %extracted_slice_1028[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1030 = tensor.extract_slice %expanded_546[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1031 = tensor.extract_slice %extracted_slice_1030[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1032 = tensor.extract_slice %extracted_slice_1031[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %1151 = tensor.empty() : tensor<1x80x128xf32>
    %1152 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1029 : tensor<1x1x80x128xf32>) outs(%1151 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %1153 = tensor.empty() : tensor<80x128xf32>
    %1154 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%1152 : tensor<1x80x128xf32>) outs(%1153 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %1155 = tensor.empty() : tensor<1x80x128xf32>
    %1156 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1032 : tensor<1x1x80x128xf32>) outs(%1155 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %1157 = tensor.empty() : tensor<80x128xf32>
    %1158 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%1156 : tensor<1x80x128xf32>) outs(%1157 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %1159 = tensor.empty() : tensor<1x80x128xf32>
    %1160 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%1159 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %1154[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %1161 = "tosa.reshape"(%1160) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %1162 = tensor.empty() : tensor<1x80x128xf32>
    %1163 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%1162 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %1158[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %1164 = "tosa.reshape"(%1163) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %1165 = tensor.empty() : tensor<1x32x80x128xf32>
    %1166 = tensor.empty() : tensor<1x32x80x128xf32>
    %1167 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1161 : tensor<1x1x80x128xf32>) outs(%1166 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1168 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1144, %1167 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1165 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1033 = tensor.extract_slice %1144[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1034 = tensor.extract_slice %1144[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %1169 = tensor.empty() : tensor<1x32x80x64xf32>
    %1170 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1034 : tensor<1x32x80x64xf32>) outs(%1169 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %1171 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1035 = tensor.insert_slice %1170 into %1171[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1036 = tensor.insert_slice %extracted_slice_1033 into %inserted_slice_1035[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %1172 = tensor.empty() : tensor<1x32x80x128xf32>
    %1173 = tensor.empty() : tensor<1x32x80x128xf32>
    %1174 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1164 : tensor<1x1x80x128xf32>) outs(%1173 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1175 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1036, %1174 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1172 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %1176 = "tosa.add"(%1168, %1175) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1177 = tensor.empty() : tensor<1x32x80x128xf32>
    %1178 = tensor.empty() : tensor<1x32x80x128xf32>
    %1179 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1161 : tensor<1x1x80x128xf32>) outs(%1178 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1180 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1147, %1179 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1177 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1037 = tensor.extract_slice %1147[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1038 = tensor.extract_slice %1147[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %1181 = tensor.empty() : tensor<1x32x80x64xf32>
    %1182 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1038 : tensor<1x32x80x64xf32>) outs(%1181 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %1183 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1039 = tensor.insert_slice %1182 into %1183[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1040 = tensor.insert_slice %extracted_slice_1037 into %inserted_slice_1039[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %1184 = tensor.empty() : tensor<1x32x80x128xf32>
    %1185 = tensor.empty() : tensor<1x32x80x128xf32>
    %1186 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1164 : tensor<1x1x80x128xf32>) outs(%1185 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1187 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1040, %1186 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1184 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %1188 = "tosa.add"(%1180, %1187) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1189 = tensor.empty() : tensor<1x32x128x80xf32>
    %1190 = linalg.generic {indexing_maps = [#map15, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1188 : tensor<1x32x80x128xf32>) outs(%1189 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %1191 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1041 = tensor.extract_slice %1176[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1042 = tensor.insert_slice %extracted_slice_1041 into %1191[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %1192 = "tosa.reshape"(%inserted_slice_1042) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %1193 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1043 = tensor.extract_slice %1190[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1044 = tensor.insert_slice %extracted_slice_1043 into %1193[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %1194 = "tosa.reshape"(%inserted_slice_1044) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %1195 = tensor.empty() : tensor<32x80x80xf32>
    %1196 = linalg.batch_matmul ins(%1192, %1194 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%1195 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %1197 = "tosa.reshape"(%1196) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1045 = arith.constant 11.3137083 : f32
    %1198 = tensor.empty() : tensor<1x32x80x80xf32>
    %1199 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1197 : tensor<1x32x80x80xf32>) outs(%1198 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.divf %in, %cst_1045 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %1200 = "tosa.add"(%1199, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %1201 = tensor.empty() : tensor<1x32x80x1xf32>
    %1202 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1201 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %1203 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1200 : tensor<1x32x80x80xf32>) outs(%1201 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.maxf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %1204 = tensor.empty() : tensor<1x32x80x80xf32>
    %1205 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1200, %1203 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%1204 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.subf %in, %in_1777 : f32
      %5006 = math.exp %5005 : f32
      linalg.yield %5006 : f32
    } -> tensor<1x32x80x80xf32>
    %1206 = tensor.empty() : tensor<1x32x80x1xf32>
    %1207 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1206 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %1208 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1205 : tensor<1x32x80x80xf32>) outs(%1207 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.addf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %1209 = tensor.empty() : tensor<1x32x80x80xf32>
    %1210 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1205, %1208 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%1209 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.divf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %1211 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1046 = tensor.extract_slice %1210[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1047 = tensor.insert_slice %extracted_slice_1046 into %1211[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %1212 = "tosa.reshape"(%inserted_slice_1047) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %1213 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1048 = tensor.extract_slice %1150[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1049 = tensor.insert_slice %extracted_slice_1048 into %1213[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %1214 = "tosa.reshape"(%inserted_slice_1049) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %1215 = tensor.empty() : tensor<32x80x128xf32>
    %1216 = linalg.batch_matmul ins(%1212, %1214 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%1215 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %1217 = "tosa.reshape"(%1216) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1218 = tensor.empty() : tensor<1x80x32x128xf32>
    %1219 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1217 : tensor<1x32x80x128xf32>) outs(%1218 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1050 = tensor.extract_slice %1219[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %1220 = "tosa.reshape"(%extracted_slice_1050) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %1221 = tensor.empty() : tensor<4096x4096xf32>
    %1222 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_170 : tensor<4096x4096xf32>) outs(%1221 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1223 = "tosa.reshape"(%1220) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1224 = tensor.empty() : tensor<80x4096xf32>
    %1225 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%1223, %1222 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1224 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %1226 = "tosa.reshape"(%1225) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1227 = "tosa.add"(%1109, %1226) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %1228 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1051 = arith.constant 2 : i32
    %1229 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1227 : tensor<1x80x4096xf32>) outs(%1228 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1051 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1052 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %1230 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1229 : tensor<1x80x4096xf32>) outs(%cst_1052 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1053 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1231 = "tosa.add"(%1230, %cst_1053) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %1232 = tensor.empty() : tensor<1x80x1xf32>
    %1233 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1231 : tensor<1x80x1xf32>) outs(%1232 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %1234 = tensor.empty() : tensor<1x80x4096xf32>
    %1235 = tensor.empty() : tensor<1x80x4096xf32>
    %1236 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1233 : tensor<1x80x1xf32>) outs(%1235 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1237 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1227, %1236 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1234 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %1238 = tensor.empty() : tensor<1x80x4096xf32>
    %1239 = tensor.empty() : tensor<1x80x4096xf32>
    %1240 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_14 : tensor<4096xf32>) outs(%1239 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1241 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1240, %1237 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1238 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %1242 = tensor.empty() : tensor<4096x11008xf32>
    %1243 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_172 : tensor<11008x4096xf32>) outs(%1242 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1244 = "tosa.reshape"(%1241) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1245 = tensor.empty() : tensor<80x11008xf32>
    %1246 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%1244, %1243 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%1245 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %1247 = "tosa.reshape"(%1246) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %1248 = tensor.empty() : tensor<1x80x11008xf32>
    %1249 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1247 : tensor<1x80x11008xf32>) outs(%1248 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      %5006 = math.exp %5005 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5007 = arith.addf %cst_1777, %5006 : f32
      %5008 = arith.divf %in, %5007 : f32
      linalg.yield %5008 : f32
    } -> tensor<1x80x11008xf32>
    %1250 = tensor.empty() : tensor<4096x11008xf32>
    %1251 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_174 : tensor<11008x4096xf32>) outs(%1250 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1252 = "tosa.reshape"(%1241) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1253 = tensor.empty() : tensor<80x11008xf32>
    %1254 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%1252, %1251 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%1253 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %1255 = "tosa.reshape"(%1254) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %1256 = tensor.empty() : tensor<1x80x11008xf32>
    %1257 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1249, %1255 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%1256 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x11008xf32>
    %1258 = tensor.empty() : tensor<11008x4096xf32>
    %1259 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_176 : tensor<4096x11008xf32>) outs(%1258 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %1260 = "tosa.reshape"(%1257) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %1261 = tensor.empty() : tensor<80x4096xf32>
    %1262 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%1260, %1259 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%1261 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %1263 = "tosa.reshape"(%1262) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1264 = "tosa.add"(%1227, %1263) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %1265 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1054 = arith.constant 2 : i32
    %1266 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1264 : tensor<1x80x4096xf32>) outs(%1265 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1054 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1055 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %1267 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1266 : tensor<1x80x4096xf32>) outs(%cst_1055 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1056 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1268 = "tosa.add"(%1267, %cst_1056) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %1269 = tensor.empty() : tensor<1x80x1xf32>
    %1270 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1268 : tensor<1x80x1xf32>) outs(%1269 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %1271 = tensor.empty() : tensor<1x80x4096xf32>
    %1272 = tensor.empty() : tensor<1x80x4096xf32>
    %1273 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1270 : tensor<1x80x1xf32>) outs(%1272 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1274 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1264, %1273 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1271 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %1275 = tensor.empty() : tensor<1x80x4096xf32>
    %1276 = tensor.empty() : tensor<1x80x4096xf32>
    %1277 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_15 : tensor<4096xf32>) outs(%1276 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1278 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1277, %1274 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1275 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %1279 = tensor.empty() : tensor<4096x4096xf32>
    %1280 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_178 : tensor<4096x4096xf32>) outs(%1279 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1281 = "tosa.reshape"(%1278) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1282 = tensor.empty() : tensor<80x4096xf32>
    %1283 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%1281, %1280 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1282 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %1284 = "tosa.reshape"(%1283) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1285 = tensor.empty() : tensor<4096x4096xf32>
    %1286 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_180 : tensor<4096x4096xf32>) outs(%1285 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1287 = "tosa.reshape"(%1278) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1288 = tensor.empty() : tensor<80x4096xf32>
    %1289 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%1287, %1286 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1288 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %1290 = "tosa.reshape"(%1289) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1291 = tensor.empty() : tensor<4096x4096xf32>
    %1292 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_182 : tensor<4096x4096xf32>) outs(%1291 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1293 = "tosa.reshape"(%1278) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1294 = tensor.empty() : tensor<80x4096xf32>
    %1295 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%1293, %1292 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1294 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %1296 = "tosa.reshape"(%1295) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1297 = "tosa.reshape"(%1284) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1298 = tensor.empty() : tensor<1x32x80x128xf32>
    %1299 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1297 : tensor<1x80x32x128xf32>) outs(%1298 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1300 = "tosa.reshape"(%1290) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1301 = tensor.empty() : tensor<1x32x80x128xf32>
    %1302 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1300 : tensor<1x80x32x128xf32>) outs(%1301 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1303 = "tosa.reshape"(%1296) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1304 = tensor.empty() : tensor<1x32x80x128xf32>
    %1305 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1303 : tensor<1x80x32x128xf32>) outs(%1304 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1057 = tensor.extract_slice %expanded_548[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1058 = tensor.extract_slice %extracted_slice_1057[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1059 = tensor.extract_slice %extracted_slice_1058[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1060 = tensor.extract_slice %expanded_550[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1061 = tensor.extract_slice %extracted_slice_1060[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1062 = tensor.extract_slice %extracted_slice_1061[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %1306 = tensor.empty() : tensor<1x80x128xf32>
    %1307 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1059 : tensor<1x1x80x128xf32>) outs(%1306 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %1308 = tensor.empty() : tensor<80x128xf32>
    %1309 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%1307 : tensor<1x80x128xf32>) outs(%1308 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %1310 = tensor.empty() : tensor<1x80x128xf32>
    %1311 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1062 : tensor<1x1x80x128xf32>) outs(%1310 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %1312 = tensor.empty() : tensor<80x128xf32>
    %1313 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%1311 : tensor<1x80x128xf32>) outs(%1312 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %1314 = tensor.empty() : tensor<1x80x128xf32>
    %1315 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%1314 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %1309[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %1316 = "tosa.reshape"(%1315) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %1317 = tensor.empty() : tensor<1x80x128xf32>
    %1318 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%1317 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %1313[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %1319 = "tosa.reshape"(%1318) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %1320 = tensor.empty() : tensor<1x32x80x128xf32>
    %1321 = tensor.empty() : tensor<1x32x80x128xf32>
    %1322 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1316 : tensor<1x1x80x128xf32>) outs(%1321 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1323 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1299, %1322 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1320 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1063 = tensor.extract_slice %1299[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1064 = tensor.extract_slice %1299[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %1324 = tensor.empty() : tensor<1x32x80x64xf32>
    %1325 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1064 : tensor<1x32x80x64xf32>) outs(%1324 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %1326 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1065 = tensor.insert_slice %1325 into %1326[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1066 = tensor.insert_slice %extracted_slice_1063 into %inserted_slice_1065[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %1327 = tensor.empty() : tensor<1x32x80x128xf32>
    %1328 = tensor.empty() : tensor<1x32x80x128xf32>
    %1329 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1319 : tensor<1x1x80x128xf32>) outs(%1328 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1330 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1066, %1329 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1327 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %1331 = "tosa.add"(%1323, %1330) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1332 = tensor.empty() : tensor<1x32x80x128xf32>
    %1333 = tensor.empty() : tensor<1x32x80x128xf32>
    %1334 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1316 : tensor<1x1x80x128xf32>) outs(%1333 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1335 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1302, %1334 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1332 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1067 = tensor.extract_slice %1302[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1068 = tensor.extract_slice %1302[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %1336 = tensor.empty() : tensor<1x32x80x64xf32>
    %1337 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1068 : tensor<1x32x80x64xf32>) outs(%1336 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %1338 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1069 = tensor.insert_slice %1337 into %1338[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1070 = tensor.insert_slice %extracted_slice_1067 into %inserted_slice_1069[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %1339 = tensor.empty() : tensor<1x32x80x128xf32>
    %1340 = tensor.empty() : tensor<1x32x80x128xf32>
    %1341 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1319 : tensor<1x1x80x128xf32>) outs(%1340 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1342 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1070, %1341 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1339 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %1343 = "tosa.add"(%1335, %1342) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1344 = tensor.empty() : tensor<1x32x128x80xf32>
    %1345 = linalg.generic {indexing_maps = [#map15, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1343 : tensor<1x32x80x128xf32>) outs(%1344 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %1346 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1071 = tensor.extract_slice %1331[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1072 = tensor.insert_slice %extracted_slice_1071 into %1346[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %1347 = "tosa.reshape"(%inserted_slice_1072) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %1348 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1073 = tensor.extract_slice %1345[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1074 = tensor.insert_slice %extracted_slice_1073 into %1348[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %1349 = "tosa.reshape"(%inserted_slice_1074) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %1350 = tensor.empty() : tensor<32x80x80xf32>
    %1351 = linalg.batch_matmul ins(%1347, %1349 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%1350 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %1352 = "tosa.reshape"(%1351) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1075 = arith.constant 11.3137083 : f32
    %1353 = tensor.empty() : tensor<1x32x80x80xf32>
    %1354 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1352 : tensor<1x32x80x80xf32>) outs(%1353 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.divf %in, %cst_1075 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %1355 = "tosa.add"(%1354, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %1356 = tensor.empty() : tensor<1x32x80x1xf32>
    %1357 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1356 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %1358 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1355 : tensor<1x32x80x80xf32>) outs(%1356 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.maxf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %1359 = tensor.empty() : tensor<1x32x80x80xf32>
    %1360 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1355, %1358 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%1359 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.subf %in, %in_1777 : f32
      %5006 = math.exp %5005 : f32
      linalg.yield %5006 : f32
    } -> tensor<1x32x80x80xf32>
    %1361 = tensor.empty() : tensor<1x32x80x1xf32>
    %1362 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1361 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %1363 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1360 : tensor<1x32x80x80xf32>) outs(%1362 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.addf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %1364 = tensor.empty() : tensor<1x32x80x80xf32>
    %1365 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1360, %1363 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%1364 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.divf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %1366 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1076 = tensor.extract_slice %1365[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1077 = tensor.insert_slice %extracted_slice_1076 into %1366[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %1367 = "tosa.reshape"(%inserted_slice_1077) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %1368 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1078 = tensor.extract_slice %1305[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1079 = tensor.insert_slice %extracted_slice_1078 into %1368[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %1369 = "tosa.reshape"(%inserted_slice_1079) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %1370 = tensor.empty() : tensor<32x80x128xf32>
    %1371 = linalg.batch_matmul ins(%1367, %1369 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%1370 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %1372 = "tosa.reshape"(%1371) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1373 = tensor.empty() : tensor<1x80x32x128xf32>
    %1374 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1372 : tensor<1x32x80x128xf32>) outs(%1373 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1080 = tensor.extract_slice %1374[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %1375 = "tosa.reshape"(%extracted_slice_1080) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %1376 = tensor.empty() : tensor<4096x4096xf32>
    %1377 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_184 : tensor<4096x4096xf32>) outs(%1376 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1378 = "tosa.reshape"(%1375) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1379 = tensor.empty() : tensor<80x4096xf32>
    %1380 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%1378, %1377 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1379 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %1381 = "tosa.reshape"(%1380) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1382 = "tosa.add"(%1264, %1381) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %1383 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1081 = arith.constant 2 : i32
    %1384 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1382 : tensor<1x80x4096xf32>) outs(%1383 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1081 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1082 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %1385 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1384 : tensor<1x80x4096xf32>) outs(%cst_1082 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1083 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1386 = "tosa.add"(%1385, %cst_1083) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %1387 = tensor.empty() : tensor<1x80x1xf32>
    %1388 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1386 : tensor<1x80x1xf32>) outs(%1387 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %1389 = tensor.empty() : tensor<1x80x4096xf32>
    %1390 = tensor.empty() : tensor<1x80x4096xf32>
    %1391 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1388 : tensor<1x80x1xf32>) outs(%1390 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1392 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1382, %1391 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1389 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %1393 = tensor.empty() : tensor<1x80x4096xf32>
    %1394 = tensor.empty() : tensor<1x80x4096xf32>
    %1395 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_16 : tensor<4096xf32>) outs(%1394 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1396 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1395, %1392 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1393 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %1397 = tensor.empty() : tensor<4096x11008xf32>
    %1398 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_186 : tensor<11008x4096xf32>) outs(%1397 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1399 = "tosa.reshape"(%1396) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1400 = tensor.empty() : tensor<80x11008xf32>
    %1401 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%1399, %1398 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%1400 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %1402 = "tosa.reshape"(%1401) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %1403 = tensor.empty() : tensor<1x80x11008xf32>
    %1404 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1402 : tensor<1x80x11008xf32>) outs(%1403 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      %5006 = math.exp %5005 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5007 = arith.addf %cst_1777, %5006 : f32
      %5008 = arith.divf %in, %5007 : f32
      linalg.yield %5008 : f32
    } -> tensor<1x80x11008xf32>
    %1405 = tensor.empty() : tensor<4096x11008xf32>
    %1406 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_188 : tensor<11008x4096xf32>) outs(%1405 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1407 = "tosa.reshape"(%1396) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1408 = tensor.empty() : tensor<80x11008xf32>
    %1409 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%1407, %1406 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%1408 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %1410 = "tosa.reshape"(%1409) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %1411 = tensor.empty() : tensor<1x80x11008xf32>
    %1412 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1404, %1410 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%1411 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x11008xf32>
    %1413 = tensor.empty() : tensor<11008x4096xf32>
    %1414 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_190 : tensor<4096x11008xf32>) outs(%1413 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %1415 = "tosa.reshape"(%1412) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %1416 = tensor.empty() : tensor<80x4096xf32>
    %1417 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%1415, %1414 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%1416 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %1418 = "tosa.reshape"(%1417) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1419 = "tosa.add"(%1382, %1418) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %1420 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1084 = arith.constant 2 : i32
    %1421 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1419 : tensor<1x80x4096xf32>) outs(%1420 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1084 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1085 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %1422 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1421 : tensor<1x80x4096xf32>) outs(%cst_1085 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1086 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1423 = "tosa.add"(%1422, %cst_1086) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %1424 = tensor.empty() : tensor<1x80x1xf32>
    %1425 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1423 : tensor<1x80x1xf32>) outs(%1424 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %1426 = tensor.empty() : tensor<1x80x4096xf32>
    %1427 = tensor.empty() : tensor<1x80x4096xf32>
    %1428 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1425 : tensor<1x80x1xf32>) outs(%1427 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1429 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1419, %1428 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1426 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %1430 = tensor.empty() : tensor<1x80x4096xf32>
    %1431 = tensor.empty() : tensor<1x80x4096xf32>
    %1432 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_17 : tensor<4096xf32>) outs(%1431 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1433 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1432, %1429 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1430 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %1434 = tensor.empty() : tensor<4096x4096xf32>
    %1435 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_192 : tensor<4096x4096xf32>) outs(%1434 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1436 = "tosa.reshape"(%1433) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1437 = tensor.empty() : tensor<80x4096xf32>
    %1438 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%1436, %1435 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1437 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %1439 = "tosa.reshape"(%1438) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1440 = tensor.empty() : tensor<4096x4096xf32>
    %1441 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_194 : tensor<4096x4096xf32>) outs(%1440 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1442 = "tosa.reshape"(%1433) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1443 = tensor.empty() : tensor<80x4096xf32>
    %1444 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%1442, %1441 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1443 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %1445 = "tosa.reshape"(%1444) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1446 = tensor.empty() : tensor<4096x4096xf32>
    %1447 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_196 : tensor<4096x4096xf32>) outs(%1446 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1448 = "tosa.reshape"(%1433) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1449 = tensor.empty() : tensor<80x4096xf32>
    %1450 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%1448, %1447 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1449 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %1451 = "tosa.reshape"(%1450) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1452 = "tosa.reshape"(%1439) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1453 = tensor.empty() : tensor<1x32x80x128xf32>
    %1454 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1452 : tensor<1x80x32x128xf32>) outs(%1453 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1455 = "tosa.reshape"(%1445) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1456 = tensor.empty() : tensor<1x32x80x128xf32>
    %1457 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1455 : tensor<1x80x32x128xf32>) outs(%1456 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1458 = "tosa.reshape"(%1451) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1459 = tensor.empty() : tensor<1x32x80x128xf32>
    %1460 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1458 : tensor<1x80x32x128xf32>) outs(%1459 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1087 = tensor.extract_slice %expanded_552[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1088 = tensor.extract_slice %extracted_slice_1087[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1089 = tensor.extract_slice %extracted_slice_1088[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1090 = tensor.extract_slice %expanded_554[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1091 = tensor.extract_slice %extracted_slice_1090[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1092 = tensor.extract_slice %extracted_slice_1091[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %1461 = tensor.empty() : tensor<1x80x128xf32>
    %1462 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1089 : tensor<1x1x80x128xf32>) outs(%1461 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %1463 = tensor.empty() : tensor<80x128xf32>
    %1464 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%1462 : tensor<1x80x128xf32>) outs(%1463 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %1465 = tensor.empty() : tensor<1x80x128xf32>
    %1466 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1092 : tensor<1x1x80x128xf32>) outs(%1465 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %1467 = tensor.empty() : tensor<80x128xf32>
    %1468 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%1466 : tensor<1x80x128xf32>) outs(%1467 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %1469 = tensor.empty() : tensor<1x80x128xf32>
    %1470 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%1469 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %1464[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %1471 = "tosa.reshape"(%1470) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %1472 = tensor.empty() : tensor<1x80x128xf32>
    %1473 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%1472 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %1468[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %1474 = "tosa.reshape"(%1473) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %1475 = tensor.empty() : tensor<1x32x80x128xf32>
    %1476 = tensor.empty() : tensor<1x32x80x128xf32>
    %1477 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1471 : tensor<1x1x80x128xf32>) outs(%1476 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1478 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1454, %1477 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1475 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1093 = tensor.extract_slice %1454[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1094 = tensor.extract_slice %1454[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %1479 = tensor.empty() : tensor<1x32x80x64xf32>
    %1480 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1094 : tensor<1x32x80x64xf32>) outs(%1479 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %1481 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1095 = tensor.insert_slice %1480 into %1481[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1096 = tensor.insert_slice %extracted_slice_1093 into %inserted_slice_1095[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %1482 = tensor.empty() : tensor<1x32x80x128xf32>
    %1483 = tensor.empty() : tensor<1x32x80x128xf32>
    %1484 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1474 : tensor<1x1x80x128xf32>) outs(%1483 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1485 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1096, %1484 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1482 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %1486 = "tosa.add"(%1478, %1485) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1487 = tensor.empty() : tensor<1x32x80x128xf32>
    %1488 = tensor.empty() : tensor<1x32x80x128xf32>
    %1489 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1471 : tensor<1x1x80x128xf32>) outs(%1488 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1490 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1457, %1489 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1487 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1097 = tensor.extract_slice %1457[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1098 = tensor.extract_slice %1457[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %1491 = tensor.empty() : tensor<1x32x80x64xf32>
    %1492 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1098 : tensor<1x32x80x64xf32>) outs(%1491 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %1493 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1099 = tensor.insert_slice %1492 into %1493[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1100 = tensor.insert_slice %extracted_slice_1097 into %inserted_slice_1099[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %1494 = tensor.empty() : tensor<1x32x80x128xf32>
    %1495 = tensor.empty() : tensor<1x32x80x128xf32>
    %1496 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1474 : tensor<1x1x80x128xf32>) outs(%1495 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1497 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1100, %1496 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1494 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %1498 = "tosa.add"(%1490, %1497) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1499 = tensor.empty() : tensor<1x32x128x80xf32>
    %1500 = linalg.generic {indexing_maps = [#map15, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1498 : tensor<1x32x80x128xf32>) outs(%1499 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %1501 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1101 = tensor.extract_slice %1486[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1102 = tensor.insert_slice %extracted_slice_1101 into %1501[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %1502 = "tosa.reshape"(%inserted_slice_1102) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %1503 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1103 = tensor.extract_slice %1500[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1104 = tensor.insert_slice %extracted_slice_1103 into %1503[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %1504 = "tosa.reshape"(%inserted_slice_1104) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %1505 = tensor.empty() : tensor<32x80x80xf32>
    %1506 = linalg.batch_matmul ins(%1502, %1504 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%1505 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %1507 = "tosa.reshape"(%1506) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1105 = arith.constant 11.3137083 : f32
    %1508 = tensor.empty() : tensor<1x32x80x80xf32>
    %1509 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1507 : tensor<1x32x80x80xf32>) outs(%1508 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.divf %in, %cst_1105 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %1510 = "tosa.add"(%1509, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %1511 = tensor.empty() : tensor<1x32x80x1xf32>
    %1512 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1511 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %1513 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1510 : tensor<1x32x80x80xf32>) outs(%1511 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.maxf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %1514 = tensor.empty() : tensor<1x32x80x80xf32>
    %1515 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1510, %1513 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%1514 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.subf %in, %in_1777 : f32
      %5006 = math.exp %5005 : f32
      linalg.yield %5006 : f32
    } -> tensor<1x32x80x80xf32>
    %1516 = tensor.empty() : tensor<1x32x80x1xf32>
    %1517 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1516 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %1518 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1515 : tensor<1x32x80x80xf32>) outs(%1517 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.addf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %1519 = tensor.empty() : tensor<1x32x80x80xf32>
    %1520 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1515, %1518 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%1519 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.divf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %1521 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1106 = tensor.extract_slice %1520[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1107 = tensor.insert_slice %extracted_slice_1106 into %1521[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %1522 = "tosa.reshape"(%inserted_slice_1107) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %1523 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1108 = tensor.extract_slice %1460[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1109 = tensor.insert_slice %extracted_slice_1108 into %1523[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %1524 = "tosa.reshape"(%inserted_slice_1109) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %1525 = tensor.empty() : tensor<32x80x128xf32>
    %1526 = linalg.batch_matmul ins(%1522, %1524 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%1525 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %1527 = "tosa.reshape"(%1526) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1528 = tensor.empty() : tensor<1x80x32x128xf32>
    %1529 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1527 : tensor<1x32x80x128xf32>) outs(%1528 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1110 = tensor.extract_slice %1529[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %1530 = "tosa.reshape"(%extracted_slice_1110) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %1531 = tensor.empty() : tensor<4096x4096xf32>
    %1532 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_198 : tensor<4096x4096xf32>) outs(%1531 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1533 = "tosa.reshape"(%1530) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1534 = tensor.empty() : tensor<80x4096xf32>
    %1535 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%1533, %1532 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1534 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %1536 = "tosa.reshape"(%1535) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1537 = "tosa.add"(%1419, %1536) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %1538 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1111 = arith.constant 2 : i32
    %1539 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1537 : tensor<1x80x4096xf32>) outs(%1538 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1111 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1112 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %1540 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1539 : tensor<1x80x4096xf32>) outs(%cst_1112 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1113 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1541 = "tosa.add"(%1540, %cst_1113) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %1542 = tensor.empty() : tensor<1x80x1xf32>
    %1543 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1541 : tensor<1x80x1xf32>) outs(%1542 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %1544 = tensor.empty() : tensor<1x80x4096xf32>
    %1545 = tensor.empty() : tensor<1x80x4096xf32>
    %1546 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1543 : tensor<1x80x1xf32>) outs(%1545 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1547 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1537, %1546 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1544 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %1548 = tensor.empty() : tensor<1x80x4096xf32>
    %1549 = tensor.empty() : tensor<1x80x4096xf32>
    %1550 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_18 : tensor<4096xf32>) outs(%1549 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1551 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1550, %1547 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1548 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %1552 = tensor.empty() : tensor<4096x11008xf32>
    %1553 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_200 : tensor<11008x4096xf32>) outs(%1552 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1554 = "tosa.reshape"(%1551) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1555 = tensor.empty() : tensor<80x11008xf32>
    %1556 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%1554, %1553 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%1555 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %1557 = "tosa.reshape"(%1556) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %1558 = tensor.empty() : tensor<1x80x11008xf32>
    %1559 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1557 : tensor<1x80x11008xf32>) outs(%1558 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      %5006 = math.exp %5005 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5007 = arith.addf %cst_1777, %5006 : f32
      %5008 = arith.divf %in, %5007 : f32
      linalg.yield %5008 : f32
    } -> tensor<1x80x11008xf32>
    %1560 = tensor.empty() : tensor<4096x11008xf32>
    %1561 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_202 : tensor<11008x4096xf32>) outs(%1560 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1562 = "tosa.reshape"(%1551) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1563 = tensor.empty() : tensor<80x11008xf32>
    %1564 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%1562, %1561 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%1563 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %1565 = "tosa.reshape"(%1564) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %1566 = tensor.empty() : tensor<1x80x11008xf32>
    %1567 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1559, %1565 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%1566 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x11008xf32>
    %1568 = tensor.empty() : tensor<11008x4096xf32>
    %1569 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_204 : tensor<4096x11008xf32>) outs(%1568 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %1570 = "tosa.reshape"(%1567) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %1571 = tensor.empty() : tensor<80x4096xf32>
    %1572 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%1570, %1569 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%1571 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %1573 = "tosa.reshape"(%1572) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1574 = "tosa.add"(%1537, %1573) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %1575 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1114 = arith.constant 2 : i32
    %1576 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1574 : tensor<1x80x4096xf32>) outs(%1575 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1114 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1115 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %1577 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1576 : tensor<1x80x4096xf32>) outs(%cst_1115 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1116 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1578 = "tosa.add"(%1577, %cst_1116) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %1579 = tensor.empty() : tensor<1x80x1xf32>
    %1580 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1578 : tensor<1x80x1xf32>) outs(%1579 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %1581 = tensor.empty() : tensor<1x80x4096xf32>
    %1582 = tensor.empty() : tensor<1x80x4096xf32>
    %1583 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1580 : tensor<1x80x1xf32>) outs(%1582 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1584 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1574, %1583 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1581 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %1585 = tensor.empty() : tensor<1x80x4096xf32>
    %1586 = tensor.empty() : tensor<1x80x4096xf32>
    %1587 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_19 : tensor<4096xf32>) outs(%1586 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1588 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1587, %1584 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1585 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %1589 = tensor.empty() : tensor<4096x4096xf32>
    %1590 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_206 : tensor<4096x4096xf32>) outs(%1589 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1591 = "tosa.reshape"(%1588) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1592 = tensor.empty() : tensor<80x4096xf32>
    %1593 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%1591, %1590 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1592 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %1594 = "tosa.reshape"(%1593) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1595 = tensor.empty() : tensor<4096x4096xf32>
    %1596 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_208 : tensor<4096x4096xf32>) outs(%1595 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1597 = "tosa.reshape"(%1588) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1598 = tensor.empty() : tensor<80x4096xf32>
    %1599 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%1597, %1596 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1598 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %1600 = "tosa.reshape"(%1599) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1601 = tensor.empty() : tensor<4096x4096xf32>
    %1602 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_210 : tensor<4096x4096xf32>) outs(%1601 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1603 = "tosa.reshape"(%1588) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1604 = tensor.empty() : tensor<80x4096xf32>
    %1605 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%1603, %1602 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1604 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %1606 = "tosa.reshape"(%1605) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1607 = "tosa.reshape"(%1594) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1608 = tensor.empty() : tensor<1x32x80x128xf32>
    %1609 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1607 : tensor<1x80x32x128xf32>) outs(%1608 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1610 = "tosa.reshape"(%1600) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1611 = tensor.empty() : tensor<1x32x80x128xf32>
    %1612 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1610 : tensor<1x80x32x128xf32>) outs(%1611 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1613 = "tosa.reshape"(%1606) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1614 = tensor.empty() : tensor<1x32x80x128xf32>
    %1615 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1613 : tensor<1x80x32x128xf32>) outs(%1614 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1117 = tensor.extract_slice %expanded_556[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1118 = tensor.extract_slice %extracted_slice_1117[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1119 = tensor.extract_slice %extracted_slice_1118[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1120 = tensor.extract_slice %expanded_558[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1121 = tensor.extract_slice %extracted_slice_1120[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1122 = tensor.extract_slice %extracted_slice_1121[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %1616 = tensor.empty() : tensor<1x80x128xf32>
    %1617 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1119 : tensor<1x1x80x128xf32>) outs(%1616 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %1618 = tensor.empty() : tensor<80x128xf32>
    %1619 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%1617 : tensor<1x80x128xf32>) outs(%1618 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %1620 = tensor.empty() : tensor<1x80x128xf32>
    %1621 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1122 : tensor<1x1x80x128xf32>) outs(%1620 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %1622 = tensor.empty() : tensor<80x128xf32>
    %1623 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%1621 : tensor<1x80x128xf32>) outs(%1622 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %1624 = tensor.empty() : tensor<1x80x128xf32>
    %1625 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%1624 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %1619[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %1626 = "tosa.reshape"(%1625) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %1627 = tensor.empty() : tensor<1x80x128xf32>
    %1628 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%1627 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %1623[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %1629 = "tosa.reshape"(%1628) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %1630 = tensor.empty() : tensor<1x32x80x128xf32>
    %1631 = tensor.empty() : tensor<1x32x80x128xf32>
    %1632 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1626 : tensor<1x1x80x128xf32>) outs(%1631 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1633 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1609, %1632 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1630 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1123 = tensor.extract_slice %1609[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1124 = tensor.extract_slice %1609[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %1634 = tensor.empty() : tensor<1x32x80x64xf32>
    %1635 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1124 : tensor<1x32x80x64xf32>) outs(%1634 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %1636 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1125 = tensor.insert_slice %1635 into %1636[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1126 = tensor.insert_slice %extracted_slice_1123 into %inserted_slice_1125[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %1637 = tensor.empty() : tensor<1x32x80x128xf32>
    %1638 = tensor.empty() : tensor<1x32x80x128xf32>
    %1639 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1629 : tensor<1x1x80x128xf32>) outs(%1638 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1640 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1126, %1639 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1637 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %1641 = "tosa.add"(%1633, %1640) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1642 = tensor.empty() : tensor<1x32x80x128xf32>
    %1643 = tensor.empty() : tensor<1x32x80x128xf32>
    %1644 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1626 : tensor<1x1x80x128xf32>) outs(%1643 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1645 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1612, %1644 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1642 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1127 = tensor.extract_slice %1612[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1128 = tensor.extract_slice %1612[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %1646 = tensor.empty() : tensor<1x32x80x64xf32>
    %1647 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1128 : tensor<1x32x80x64xf32>) outs(%1646 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %1648 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1129 = tensor.insert_slice %1647 into %1648[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1130 = tensor.insert_slice %extracted_slice_1127 into %inserted_slice_1129[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %1649 = tensor.empty() : tensor<1x32x80x128xf32>
    %1650 = tensor.empty() : tensor<1x32x80x128xf32>
    %1651 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1629 : tensor<1x1x80x128xf32>) outs(%1650 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1652 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1130, %1651 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1649 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %1653 = "tosa.add"(%1645, %1652) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1654 = tensor.empty() : tensor<1x32x128x80xf32>
    %1655 = linalg.generic {indexing_maps = [#map15, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1653 : tensor<1x32x80x128xf32>) outs(%1654 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %1656 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1131 = tensor.extract_slice %1641[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1132 = tensor.insert_slice %extracted_slice_1131 into %1656[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %1657 = "tosa.reshape"(%inserted_slice_1132) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %1658 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1133 = tensor.extract_slice %1655[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1134 = tensor.insert_slice %extracted_slice_1133 into %1658[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %1659 = "tosa.reshape"(%inserted_slice_1134) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %1660 = tensor.empty() : tensor<32x80x80xf32>
    %1661 = linalg.batch_matmul ins(%1657, %1659 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%1660 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %1662 = "tosa.reshape"(%1661) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1135 = arith.constant 11.3137083 : f32
    %1663 = tensor.empty() : tensor<1x32x80x80xf32>
    %1664 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1662 : tensor<1x32x80x80xf32>) outs(%1663 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.divf %in, %cst_1135 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %1665 = "tosa.add"(%1664, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %1666 = tensor.empty() : tensor<1x32x80x1xf32>
    %1667 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1666 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %1668 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1665 : tensor<1x32x80x80xf32>) outs(%1666 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.maxf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %1669 = tensor.empty() : tensor<1x32x80x80xf32>
    %1670 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1665, %1668 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%1669 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.subf %in, %in_1777 : f32
      %5006 = math.exp %5005 : f32
      linalg.yield %5006 : f32
    } -> tensor<1x32x80x80xf32>
    %1671 = tensor.empty() : tensor<1x32x80x1xf32>
    %1672 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1671 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %1673 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1670 : tensor<1x32x80x80xf32>) outs(%1672 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.addf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %1674 = tensor.empty() : tensor<1x32x80x80xf32>
    %1675 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1670, %1673 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%1674 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.divf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %1676 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1136 = tensor.extract_slice %1675[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1137 = tensor.insert_slice %extracted_slice_1136 into %1676[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %1677 = "tosa.reshape"(%inserted_slice_1137) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %1678 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1138 = tensor.extract_slice %1615[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1139 = tensor.insert_slice %extracted_slice_1138 into %1678[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %1679 = "tosa.reshape"(%inserted_slice_1139) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %1680 = tensor.empty() : tensor<32x80x128xf32>
    %1681 = linalg.batch_matmul ins(%1677, %1679 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%1680 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %1682 = "tosa.reshape"(%1681) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1683 = tensor.empty() : tensor<1x80x32x128xf32>
    %1684 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1682 : tensor<1x32x80x128xf32>) outs(%1683 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1140 = tensor.extract_slice %1684[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %1685 = "tosa.reshape"(%extracted_slice_1140) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %1686 = tensor.empty() : tensor<4096x4096xf32>
    %1687 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_212 : tensor<4096x4096xf32>) outs(%1686 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1688 = "tosa.reshape"(%1685) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1689 = tensor.empty() : tensor<80x4096xf32>
    %1690 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%1688, %1687 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1689 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %1691 = "tosa.reshape"(%1690) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1692 = "tosa.add"(%1574, %1691) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %1693 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1141 = arith.constant 2 : i32
    %1694 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1692 : tensor<1x80x4096xf32>) outs(%1693 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1141 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1142 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %1695 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1694 : tensor<1x80x4096xf32>) outs(%cst_1142 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1143 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1696 = "tosa.add"(%1695, %cst_1143) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %1697 = tensor.empty() : tensor<1x80x1xf32>
    %1698 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1696 : tensor<1x80x1xf32>) outs(%1697 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %1699 = tensor.empty() : tensor<1x80x4096xf32>
    %1700 = tensor.empty() : tensor<1x80x4096xf32>
    %1701 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1698 : tensor<1x80x1xf32>) outs(%1700 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1702 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1692, %1701 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1699 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %1703 = tensor.empty() : tensor<1x80x4096xf32>
    %1704 = tensor.empty() : tensor<1x80x4096xf32>
    %1705 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_20 : tensor<4096xf32>) outs(%1704 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1706 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1705, %1702 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1703 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %1707 = tensor.empty() : tensor<4096x11008xf32>
    %1708 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_214 : tensor<11008x4096xf32>) outs(%1707 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1709 = "tosa.reshape"(%1706) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1710 = tensor.empty() : tensor<80x11008xf32>
    %1711 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%1709, %1708 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%1710 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %1712 = "tosa.reshape"(%1711) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %1713 = tensor.empty() : tensor<1x80x11008xf32>
    %1714 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1712 : tensor<1x80x11008xf32>) outs(%1713 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      %5006 = math.exp %5005 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5007 = arith.addf %cst_1777, %5006 : f32
      %5008 = arith.divf %in, %5007 : f32
      linalg.yield %5008 : f32
    } -> tensor<1x80x11008xf32>
    %1715 = tensor.empty() : tensor<4096x11008xf32>
    %1716 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_216 : tensor<11008x4096xf32>) outs(%1715 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1717 = "tosa.reshape"(%1706) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1718 = tensor.empty() : tensor<80x11008xf32>
    %1719 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%1717, %1716 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%1718 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %1720 = "tosa.reshape"(%1719) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %1721 = tensor.empty() : tensor<1x80x11008xf32>
    %1722 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1714, %1720 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%1721 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x11008xf32>
    %1723 = tensor.empty() : tensor<11008x4096xf32>
    %1724 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_218 : tensor<4096x11008xf32>) outs(%1723 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %1725 = "tosa.reshape"(%1722) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %1726 = tensor.empty() : tensor<80x4096xf32>
    %1727 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%1725, %1724 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%1726 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %1728 = "tosa.reshape"(%1727) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1729 = "tosa.add"(%1692, %1728) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %1730 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1144 = arith.constant 2 : i32
    %1731 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1729 : tensor<1x80x4096xf32>) outs(%1730 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1144 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1145 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %1732 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1731 : tensor<1x80x4096xf32>) outs(%cst_1145 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1146 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1733 = "tosa.add"(%1732, %cst_1146) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %1734 = tensor.empty() : tensor<1x80x1xf32>
    %1735 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1733 : tensor<1x80x1xf32>) outs(%1734 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %1736 = tensor.empty() : tensor<1x80x4096xf32>
    %1737 = tensor.empty() : tensor<1x80x4096xf32>
    %1738 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1735 : tensor<1x80x1xf32>) outs(%1737 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1739 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1729, %1738 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1736 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %1740 = tensor.empty() : tensor<1x80x4096xf32>
    %1741 = tensor.empty() : tensor<1x80x4096xf32>
    %1742 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_21 : tensor<4096xf32>) outs(%1741 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1743 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1742, %1739 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1740 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %1744 = tensor.empty() : tensor<4096x4096xf32>
    %1745 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_220 : tensor<4096x4096xf32>) outs(%1744 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1746 = "tosa.reshape"(%1743) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1747 = tensor.empty() : tensor<80x4096xf32>
    %1748 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%1746, %1745 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1747 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %1749 = "tosa.reshape"(%1748) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1750 = tensor.empty() : tensor<4096x4096xf32>
    %1751 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_222 : tensor<4096x4096xf32>) outs(%1750 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1752 = "tosa.reshape"(%1743) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1753 = tensor.empty() : tensor<80x4096xf32>
    %1754 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%1752, %1751 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1753 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %1755 = "tosa.reshape"(%1754) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1756 = tensor.empty() : tensor<4096x4096xf32>
    %1757 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_224 : tensor<4096x4096xf32>) outs(%1756 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1758 = "tosa.reshape"(%1743) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1759 = tensor.empty() : tensor<80x4096xf32>
    %1760 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%1758, %1757 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1759 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %1761 = "tosa.reshape"(%1760) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1762 = "tosa.reshape"(%1749) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1763 = tensor.empty() : tensor<1x32x80x128xf32>
    %1764 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1762 : tensor<1x80x32x128xf32>) outs(%1763 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1765 = "tosa.reshape"(%1755) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1766 = tensor.empty() : tensor<1x32x80x128xf32>
    %1767 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1765 : tensor<1x80x32x128xf32>) outs(%1766 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1768 = "tosa.reshape"(%1761) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1769 = tensor.empty() : tensor<1x32x80x128xf32>
    %1770 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1768 : tensor<1x80x32x128xf32>) outs(%1769 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1147 = tensor.extract_slice %expanded_560[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1148 = tensor.extract_slice %extracted_slice_1147[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1149 = tensor.extract_slice %extracted_slice_1148[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1150 = tensor.extract_slice %expanded_562[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1151 = tensor.extract_slice %extracted_slice_1150[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1152 = tensor.extract_slice %extracted_slice_1151[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %1771 = tensor.empty() : tensor<1x80x128xf32>
    %1772 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1149 : tensor<1x1x80x128xf32>) outs(%1771 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %1773 = tensor.empty() : tensor<80x128xf32>
    %1774 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%1772 : tensor<1x80x128xf32>) outs(%1773 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %1775 = tensor.empty() : tensor<1x80x128xf32>
    %1776 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1152 : tensor<1x1x80x128xf32>) outs(%1775 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %1777 = tensor.empty() : tensor<80x128xf32>
    %1778 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%1776 : tensor<1x80x128xf32>) outs(%1777 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %1779 = tensor.empty() : tensor<1x80x128xf32>
    %1780 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%1779 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %1774[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %1781 = "tosa.reshape"(%1780) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %1782 = tensor.empty() : tensor<1x80x128xf32>
    %1783 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%1782 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %1778[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %1784 = "tosa.reshape"(%1783) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %1785 = tensor.empty() : tensor<1x32x80x128xf32>
    %1786 = tensor.empty() : tensor<1x32x80x128xf32>
    %1787 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1781 : tensor<1x1x80x128xf32>) outs(%1786 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1788 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1764, %1787 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1785 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1153 = tensor.extract_slice %1764[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1154 = tensor.extract_slice %1764[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %1789 = tensor.empty() : tensor<1x32x80x64xf32>
    %1790 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1154 : tensor<1x32x80x64xf32>) outs(%1789 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %1791 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1155 = tensor.insert_slice %1790 into %1791[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1156 = tensor.insert_slice %extracted_slice_1153 into %inserted_slice_1155[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %1792 = tensor.empty() : tensor<1x32x80x128xf32>
    %1793 = tensor.empty() : tensor<1x32x80x128xf32>
    %1794 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1784 : tensor<1x1x80x128xf32>) outs(%1793 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1795 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1156, %1794 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1792 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %1796 = "tosa.add"(%1788, %1795) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1797 = tensor.empty() : tensor<1x32x80x128xf32>
    %1798 = tensor.empty() : tensor<1x32x80x128xf32>
    %1799 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1781 : tensor<1x1x80x128xf32>) outs(%1798 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1800 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1767, %1799 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1797 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1157 = tensor.extract_slice %1767[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1158 = tensor.extract_slice %1767[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %1801 = tensor.empty() : tensor<1x32x80x64xf32>
    %1802 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1158 : tensor<1x32x80x64xf32>) outs(%1801 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %1803 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1159 = tensor.insert_slice %1802 into %1803[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1160 = tensor.insert_slice %extracted_slice_1157 into %inserted_slice_1159[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %1804 = tensor.empty() : tensor<1x32x80x128xf32>
    %1805 = tensor.empty() : tensor<1x32x80x128xf32>
    %1806 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1784 : tensor<1x1x80x128xf32>) outs(%1805 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1807 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1160, %1806 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1804 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %1808 = "tosa.add"(%1800, %1807) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1809 = tensor.empty() : tensor<1x32x128x80xf32>
    %1810 = linalg.generic {indexing_maps = [#map15, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1808 : tensor<1x32x80x128xf32>) outs(%1809 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %1811 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1161 = tensor.extract_slice %1796[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1162 = tensor.insert_slice %extracted_slice_1161 into %1811[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %1812 = "tosa.reshape"(%inserted_slice_1162) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %1813 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1163 = tensor.extract_slice %1810[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1164 = tensor.insert_slice %extracted_slice_1163 into %1813[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %1814 = "tosa.reshape"(%inserted_slice_1164) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %1815 = tensor.empty() : tensor<32x80x80xf32>
    %1816 = linalg.batch_matmul ins(%1812, %1814 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%1815 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %1817 = "tosa.reshape"(%1816) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1165 = arith.constant 11.3137083 : f32
    %1818 = tensor.empty() : tensor<1x32x80x80xf32>
    %1819 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1817 : tensor<1x32x80x80xf32>) outs(%1818 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.divf %in, %cst_1165 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %1820 = "tosa.add"(%1819, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %1821 = tensor.empty() : tensor<1x32x80x1xf32>
    %1822 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1821 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %1823 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1820 : tensor<1x32x80x80xf32>) outs(%1821 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.maxf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %1824 = tensor.empty() : tensor<1x32x80x80xf32>
    %1825 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1820, %1823 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%1824 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.subf %in, %in_1777 : f32
      %5006 = math.exp %5005 : f32
      linalg.yield %5006 : f32
    } -> tensor<1x32x80x80xf32>
    %1826 = tensor.empty() : tensor<1x32x80x1xf32>
    %1827 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1826 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %1828 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1825 : tensor<1x32x80x80xf32>) outs(%1827 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.addf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %1829 = tensor.empty() : tensor<1x32x80x80xf32>
    %1830 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1825, %1828 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%1829 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.divf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %1831 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1166 = tensor.extract_slice %1830[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1167 = tensor.insert_slice %extracted_slice_1166 into %1831[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %1832 = "tosa.reshape"(%inserted_slice_1167) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %1833 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1168 = tensor.extract_slice %1770[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1169 = tensor.insert_slice %extracted_slice_1168 into %1833[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %1834 = "tosa.reshape"(%inserted_slice_1169) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %1835 = tensor.empty() : tensor<32x80x128xf32>
    %1836 = linalg.batch_matmul ins(%1832, %1834 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%1835 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %1837 = "tosa.reshape"(%1836) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1838 = tensor.empty() : tensor<1x80x32x128xf32>
    %1839 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1837 : tensor<1x32x80x128xf32>) outs(%1838 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1170 = tensor.extract_slice %1839[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %1840 = "tosa.reshape"(%extracted_slice_1170) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %1841 = tensor.empty() : tensor<4096x4096xf32>
    %1842 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_226 : tensor<4096x4096xf32>) outs(%1841 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1843 = "tosa.reshape"(%1840) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1844 = tensor.empty() : tensor<80x4096xf32>
    %1845 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%1843, %1842 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1844 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %1846 = "tosa.reshape"(%1845) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1847 = "tosa.add"(%1729, %1846) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %1848 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1171 = arith.constant 2 : i32
    %1849 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1847 : tensor<1x80x4096xf32>) outs(%1848 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1171 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1172 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %1850 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1849 : tensor<1x80x4096xf32>) outs(%cst_1172 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1173 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1851 = "tosa.add"(%1850, %cst_1173) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %1852 = tensor.empty() : tensor<1x80x1xf32>
    %1853 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1851 : tensor<1x80x1xf32>) outs(%1852 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %1854 = tensor.empty() : tensor<1x80x4096xf32>
    %1855 = tensor.empty() : tensor<1x80x4096xf32>
    %1856 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1853 : tensor<1x80x1xf32>) outs(%1855 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1857 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1847, %1856 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1854 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %1858 = tensor.empty() : tensor<1x80x4096xf32>
    %1859 = tensor.empty() : tensor<1x80x4096xf32>
    %1860 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_22 : tensor<4096xf32>) outs(%1859 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1861 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1860, %1857 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1858 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %1862 = tensor.empty() : tensor<4096x11008xf32>
    %1863 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_228 : tensor<11008x4096xf32>) outs(%1862 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1864 = "tosa.reshape"(%1861) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1865 = tensor.empty() : tensor<80x11008xf32>
    %1866 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%1864, %1863 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%1865 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %1867 = "tosa.reshape"(%1866) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %1868 = tensor.empty() : tensor<1x80x11008xf32>
    %1869 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1867 : tensor<1x80x11008xf32>) outs(%1868 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      %5006 = math.exp %5005 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5007 = arith.addf %cst_1777, %5006 : f32
      %5008 = arith.divf %in, %5007 : f32
      linalg.yield %5008 : f32
    } -> tensor<1x80x11008xf32>
    %1870 = tensor.empty() : tensor<4096x11008xf32>
    %1871 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_230 : tensor<11008x4096xf32>) outs(%1870 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1872 = "tosa.reshape"(%1861) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1873 = tensor.empty() : tensor<80x11008xf32>
    %1874 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%1872, %1871 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%1873 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %1875 = "tosa.reshape"(%1874) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %1876 = tensor.empty() : tensor<1x80x11008xf32>
    %1877 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1869, %1875 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%1876 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x11008xf32>
    %1878 = tensor.empty() : tensor<11008x4096xf32>
    %1879 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_232 : tensor<4096x11008xf32>) outs(%1878 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %1880 = "tosa.reshape"(%1877) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %1881 = tensor.empty() : tensor<80x4096xf32>
    %1882 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%1880, %1879 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%1881 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %1883 = "tosa.reshape"(%1882) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1884 = "tosa.add"(%1847, %1883) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %1885 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1174 = arith.constant 2 : i32
    %1886 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1884 : tensor<1x80x4096xf32>) outs(%1885 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1174 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1175 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %1887 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1886 : tensor<1x80x4096xf32>) outs(%cst_1175 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1176 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1888 = "tosa.add"(%1887, %cst_1176) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %1889 = tensor.empty() : tensor<1x80x1xf32>
    %1890 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1888 : tensor<1x80x1xf32>) outs(%1889 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %1891 = tensor.empty() : tensor<1x80x4096xf32>
    %1892 = tensor.empty() : tensor<1x80x4096xf32>
    %1893 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1890 : tensor<1x80x1xf32>) outs(%1892 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1894 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1884, %1893 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1891 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %1895 = tensor.empty() : tensor<1x80x4096xf32>
    %1896 = tensor.empty() : tensor<1x80x4096xf32>
    %1897 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_23 : tensor<4096xf32>) outs(%1896 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1898 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1897, %1894 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1895 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %1899 = tensor.empty() : tensor<4096x4096xf32>
    %1900 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_234 : tensor<4096x4096xf32>) outs(%1899 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1901 = "tosa.reshape"(%1898) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1902 = tensor.empty() : tensor<80x4096xf32>
    %1903 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%1901, %1900 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1902 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %1904 = "tosa.reshape"(%1903) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1905 = tensor.empty() : tensor<4096x4096xf32>
    %1906 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_236 : tensor<4096x4096xf32>) outs(%1905 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1907 = "tosa.reshape"(%1898) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1908 = tensor.empty() : tensor<80x4096xf32>
    %1909 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%1907, %1906 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1908 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %1910 = "tosa.reshape"(%1909) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1911 = tensor.empty() : tensor<4096x4096xf32>
    %1912 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_238 : tensor<4096x4096xf32>) outs(%1911 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1913 = "tosa.reshape"(%1898) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1914 = tensor.empty() : tensor<80x4096xf32>
    %1915 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%1913, %1912 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1914 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %1916 = "tosa.reshape"(%1915) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1917 = "tosa.reshape"(%1904) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1918 = tensor.empty() : tensor<1x32x80x128xf32>
    %1919 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1917 : tensor<1x80x32x128xf32>) outs(%1918 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1920 = "tosa.reshape"(%1910) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1921 = tensor.empty() : tensor<1x32x80x128xf32>
    %1922 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1920 : tensor<1x80x32x128xf32>) outs(%1921 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1923 = "tosa.reshape"(%1916) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1924 = tensor.empty() : tensor<1x32x80x128xf32>
    %1925 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1923 : tensor<1x80x32x128xf32>) outs(%1924 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1177 = tensor.extract_slice %expanded_564[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1178 = tensor.extract_slice %extracted_slice_1177[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1179 = tensor.extract_slice %extracted_slice_1178[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1180 = tensor.extract_slice %expanded_566[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1181 = tensor.extract_slice %extracted_slice_1180[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1182 = tensor.extract_slice %extracted_slice_1181[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %1926 = tensor.empty() : tensor<1x80x128xf32>
    %1927 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1179 : tensor<1x1x80x128xf32>) outs(%1926 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %1928 = tensor.empty() : tensor<80x128xf32>
    %1929 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%1927 : tensor<1x80x128xf32>) outs(%1928 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %1930 = tensor.empty() : tensor<1x80x128xf32>
    %1931 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1182 : tensor<1x1x80x128xf32>) outs(%1930 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %1932 = tensor.empty() : tensor<80x128xf32>
    %1933 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%1931 : tensor<1x80x128xf32>) outs(%1932 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %1934 = tensor.empty() : tensor<1x80x128xf32>
    %1935 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%1934 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %1929[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %1936 = "tosa.reshape"(%1935) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %1937 = tensor.empty() : tensor<1x80x128xf32>
    %1938 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%1937 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %1933[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %1939 = "tosa.reshape"(%1938) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %1940 = tensor.empty() : tensor<1x32x80x128xf32>
    %1941 = tensor.empty() : tensor<1x32x80x128xf32>
    %1942 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1936 : tensor<1x1x80x128xf32>) outs(%1941 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1943 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1919, %1942 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1940 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1183 = tensor.extract_slice %1919[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1184 = tensor.extract_slice %1919[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %1944 = tensor.empty() : tensor<1x32x80x64xf32>
    %1945 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1184 : tensor<1x32x80x64xf32>) outs(%1944 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %1946 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1185 = tensor.insert_slice %1945 into %1946[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1186 = tensor.insert_slice %extracted_slice_1183 into %inserted_slice_1185[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %1947 = tensor.empty() : tensor<1x32x80x128xf32>
    %1948 = tensor.empty() : tensor<1x32x80x128xf32>
    %1949 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1939 : tensor<1x1x80x128xf32>) outs(%1948 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1950 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1186, %1949 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1947 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %1951 = "tosa.add"(%1943, %1950) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1952 = tensor.empty() : tensor<1x32x80x128xf32>
    %1953 = tensor.empty() : tensor<1x32x80x128xf32>
    %1954 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1936 : tensor<1x1x80x128xf32>) outs(%1953 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1955 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1922, %1954 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1952 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1187 = tensor.extract_slice %1922[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1188 = tensor.extract_slice %1922[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %1956 = tensor.empty() : tensor<1x32x80x64xf32>
    %1957 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1188 : tensor<1x32x80x64xf32>) outs(%1956 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %1958 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1189 = tensor.insert_slice %1957 into %1958[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1190 = tensor.insert_slice %extracted_slice_1187 into %inserted_slice_1189[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %1959 = tensor.empty() : tensor<1x32x80x128xf32>
    %1960 = tensor.empty() : tensor<1x32x80x128xf32>
    %1961 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1939 : tensor<1x1x80x128xf32>) outs(%1960 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1962 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1190, %1961 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1959 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %1963 = "tosa.add"(%1955, %1962) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1964 = tensor.empty() : tensor<1x32x128x80xf32>
    %1965 = linalg.generic {indexing_maps = [#map15, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1963 : tensor<1x32x80x128xf32>) outs(%1964 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %1966 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1191 = tensor.extract_slice %1951[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1192 = tensor.insert_slice %extracted_slice_1191 into %1966[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %1967 = "tosa.reshape"(%inserted_slice_1192) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %1968 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1193 = tensor.extract_slice %1965[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1194 = tensor.insert_slice %extracted_slice_1193 into %1968[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %1969 = "tosa.reshape"(%inserted_slice_1194) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %1970 = tensor.empty() : tensor<32x80x80xf32>
    %1971 = linalg.batch_matmul ins(%1967, %1969 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%1970 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %1972 = "tosa.reshape"(%1971) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1195 = arith.constant 11.3137083 : f32
    %1973 = tensor.empty() : tensor<1x32x80x80xf32>
    %1974 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1972 : tensor<1x32x80x80xf32>) outs(%1973 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.divf %in, %cst_1195 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %1975 = "tosa.add"(%1974, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %1976 = tensor.empty() : tensor<1x32x80x1xf32>
    %1977 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1976 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %1978 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1975 : tensor<1x32x80x80xf32>) outs(%1976 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.maxf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %1979 = tensor.empty() : tensor<1x32x80x80xf32>
    %1980 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1975, %1978 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%1979 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.subf %in, %in_1777 : f32
      %5006 = math.exp %5005 : f32
      linalg.yield %5006 : f32
    } -> tensor<1x32x80x80xf32>
    %1981 = tensor.empty() : tensor<1x32x80x1xf32>
    %1982 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1981 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %1983 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1980 : tensor<1x32x80x80xf32>) outs(%1982 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.addf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %1984 = tensor.empty() : tensor<1x32x80x80xf32>
    %1985 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1980, %1983 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%1984 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.divf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %1986 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1196 = tensor.extract_slice %1985[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1197 = tensor.insert_slice %extracted_slice_1196 into %1986[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %1987 = "tosa.reshape"(%inserted_slice_1197) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %1988 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1198 = tensor.extract_slice %1925[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1199 = tensor.insert_slice %extracted_slice_1198 into %1988[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %1989 = "tosa.reshape"(%inserted_slice_1199) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %1990 = tensor.empty() : tensor<32x80x128xf32>
    %1991 = linalg.batch_matmul ins(%1987, %1989 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%1990 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %1992 = "tosa.reshape"(%1991) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1993 = tensor.empty() : tensor<1x80x32x128xf32>
    %1994 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1992 : tensor<1x32x80x128xf32>) outs(%1993 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1200 = tensor.extract_slice %1994[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %1995 = "tosa.reshape"(%extracted_slice_1200) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %1996 = tensor.empty() : tensor<4096x4096xf32>
    %1997 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_240 : tensor<4096x4096xf32>) outs(%1996 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1998 = "tosa.reshape"(%1995) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %1999 = tensor.empty() : tensor<80x4096xf32>
    %2000 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%1998, %1997 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%1999 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %2001 = "tosa.reshape"(%2000) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2002 = "tosa.add"(%1884, %2001) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %2003 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1201 = arith.constant 2 : i32
    %2004 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2002 : tensor<1x80x4096xf32>) outs(%2003 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1201 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1202 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %2005 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2004 : tensor<1x80x4096xf32>) outs(%cst_1202 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1203 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2006 = "tosa.add"(%2005, %cst_1203) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %2007 = tensor.empty() : tensor<1x80x1xf32>
    %2008 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2006 : tensor<1x80x1xf32>) outs(%2007 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %2009 = tensor.empty() : tensor<1x80x4096xf32>
    %2010 = tensor.empty() : tensor<1x80x4096xf32>
    %2011 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2008 : tensor<1x80x1xf32>) outs(%2010 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2012 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2002, %2011 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2009 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %2013 = tensor.empty() : tensor<1x80x4096xf32>
    %2014 = tensor.empty() : tensor<1x80x4096xf32>
    %2015 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_24 : tensor<4096xf32>) outs(%2014 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2016 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2015, %2012 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2013 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %2017 = tensor.empty() : tensor<4096x11008xf32>
    %2018 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_242 : tensor<11008x4096xf32>) outs(%2017 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2019 = "tosa.reshape"(%2016) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2020 = tensor.empty() : tensor<80x11008xf32>
    %2021 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%2019, %2018 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%2020 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %2022 = "tosa.reshape"(%2021) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %2023 = tensor.empty() : tensor<1x80x11008xf32>
    %2024 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2022 : tensor<1x80x11008xf32>) outs(%2023 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      %5006 = math.exp %5005 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5007 = arith.addf %cst_1777, %5006 : f32
      %5008 = arith.divf %in, %5007 : f32
      linalg.yield %5008 : f32
    } -> tensor<1x80x11008xf32>
    %2025 = tensor.empty() : tensor<4096x11008xf32>
    %2026 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_244 : tensor<11008x4096xf32>) outs(%2025 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2027 = "tosa.reshape"(%2016) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2028 = tensor.empty() : tensor<80x11008xf32>
    %2029 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%2027, %2026 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%2028 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %2030 = "tosa.reshape"(%2029) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %2031 = tensor.empty() : tensor<1x80x11008xf32>
    %2032 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2024, %2030 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%2031 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x11008xf32>
    %2033 = tensor.empty() : tensor<11008x4096xf32>
    %2034 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_246 : tensor<4096x11008xf32>) outs(%2033 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %2035 = "tosa.reshape"(%2032) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %2036 = tensor.empty() : tensor<80x4096xf32>
    %2037 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%2035, %2034 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%2036 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %2038 = "tosa.reshape"(%2037) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2039 = "tosa.add"(%2002, %2038) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %2040 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1204 = arith.constant 2 : i32
    %2041 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2039 : tensor<1x80x4096xf32>) outs(%2040 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1204 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1205 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %2042 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2041 : tensor<1x80x4096xf32>) outs(%cst_1205 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1206 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2043 = "tosa.add"(%2042, %cst_1206) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %2044 = tensor.empty() : tensor<1x80x1xf32>
    %2045 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2043 : tensor<1x80x1xf32>) outs(%2044 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %2046 = tensor.empty() : tensor<1x80x4096xf32>
    %2047 = tensor.empty() : tensor<1x80x4096xf32>
    %2048 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2045 : tensor<1x80x1xf32>) outs(%2047 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2049 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2039, %2048 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2046 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %2050 = tensor.empty() : tensor<1x80x4096xf32>
    %2051 = tensor.empty() : tensor<1x80x4096xf32>
    %2052 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_25 : tensor<4096xf32>) outs(%2051 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2053 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2052, %2049 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2050 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %2054 = tensor.empty() : tensor<4096x4096xf32>
    %2055 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_248 : tensor<4096x4096xf32>) outs(%2054 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2056 = "tosa.reshape"(%2053) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2057 = tensor.empty() : tensor<80x4096xf32>
    %2058 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%2056, %2055 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2057 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %2059 = "tosa.reshape"(%2058) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2060 = tensor.empty() : tensor<4096x4096xf32>
    %2061 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_250 : tensor<4096x4096xf32>) outs(%2060 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2062 = "tosa.reshape"(%2053) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2063 = tensor.empty() : tensor<80x4096xf32>
    %2064 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%2062, %2061 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2063 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %2065 = "tosa.reshape"(%2064) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2066 = tensor.empty() : tensor<4096x4096xf32>
    %2067 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_252 : tensor<4096x4096xf32>) outs(%2066 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2068 = "tosa.reshape"(%2053) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2069 = tensor.empty() : tensor<80x4096xf32>
    %2070 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%2068, %2067 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2069 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %2071 = "tosa.reshape"(%2070) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2072 = "tosa.reshape"(%2059) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2073 = tensor.empty() : tensor<1x32x80x128xf32>
    %2074 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2072 : tensor<1x80x32x128xf32>) outs(%2073 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2075 = "tosa.reshape"(%2065) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2076 = tensor.empty() : tensor<1x32x80x128xf32>
    %2077 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2075 : tensor<1x80x32x128xf32>) outs(%2076 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2078 = "tosa.reshape"(%2071) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2079 = tensor.empty() : tensor<1x32x80x128xf32>
    %2080 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2078 : tensor<1x80x32x128xf32>) outs(%2079 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1207 = tensor.extract_slice %expanded_568[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1208 = tensor.extract_slice %extracted_slice_1207[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1209 = tensor.extract_slice %extracted_slice_1208[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1210 = tensor.extract_slice %expanded_570[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1211 = tensor.extract_slice %extracted_slice_1210[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1212 = tensor.extract_slice %extracted_slice_1211[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %2081 = tensor.empty() : tensor<1x80x128xf32>
    %2082 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1209 : tensor<1x1x80x128xf32>) outs(%2081 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %2083 = tensor.empty() : tensor<80x128xf32>
    %2084 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%2082 : tensor<1x80x128xf32>) outs(%2083 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %2085 = tensor.empty() : tensor<1x80x128xf32>
    %2086 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1212 : tensor<1x1x80x128xf32>) outs(%2085 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %2087 = tensor.empty() : tensor<80x128xf32>
    %2088 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%2086 : tensor<1x80x128xf32>) outs(%2087 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %2089 = tensor.empty() : tensor<1x80x128xf32>
    %2090 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%2089 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %2084[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %2091 = "tosa.reshape"(%2090) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %2092 = tensor.empty() : tensor<1x80x128xf32>
    %2093 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%2092 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %2088[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %2094 = "tosa.reshape"(%2093) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %2095 = tensor.empty() : tensor<1x32x80x128xf32>
    %2096 = tensor.empty() : tensor<1x32x80x128xf32>
    %2097 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2091 : tensor<1x1x80x128xf32>) outs(%2096 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2098 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2074, %2097 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2095 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1213 = tensor.extract_slice %2074[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1214 = tensor.extract_slice %2074[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %2099 = tensor.empty() : tensor<1x32x80x64xf32>
    %2100 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1214 : tensor<1x32x80x64xf32>) outs(%2099 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %2101 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1215 = tensor.insert_slice %2100 into %2101[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1216 = tensor.insert_slice %extracted_slice_1213 into %inserted_slice_1215[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %2102 = tensor.empty() : tensor<1x32x80x128xf32>
    %2103 = tensor.empty() : tensor<1x32x80x128xf32>
    %2104 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2094 : tensor<1x1x80x128xf32>) outs(%2103 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2105 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1216, %2104 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2102 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %2106 = "tosa.add"(%2098, %2105) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2107 = tensor.empty() : tensor<1x32x80x128xf32>
    %2108 = tensor.empty() : tensor<1x32x80x128xf32>
    %2109 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2091 : tensor<1x1x80x128xf32>) outs(%2108 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2110 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2077, %2109 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2107 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1217 = tensor.extract_slice %2077[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1218 = tensor.extract_slice %2077[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %2111 = tensor.empty() : tensor<1x32x80x64xf32>
    %2112 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1218 : tensor<1x32x80x64xf32>) outs(%2111 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %2113 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1219 = tensor.insert_slice %2112 into %2113[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1220 = tensor.insert_slice %extracted_slice_1217 into %inserted_slice_1219[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %2114 = tensor.empty() : tensor<1x32x80x128xf32>
    %2115 = tensor.empty() : tensor<1x32x80x128xf32>
    %2116 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2094 : tensor<1x1x80x128xf32>) outs(%2115 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2117 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1220, %2116 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2114 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %2118 = "tosa.add"(%2110, %2117) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2119 = tensor.empty() : tensor<1x32x128x80xf32>
    %2120 = linalg.generic {indexing_maps = [#map15, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2118 : tensor<1x32x80x128xf32>) outs(%2119 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %2121 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1221 = tensor.extract_slice %2106[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1222 = tensor.insert_slice %extracted_slice_1221 into %2121[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %2122 = "tosa.reshape"(%inserted_slice_1222) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %2123 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1223 = tensor.extract_slice %2120[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1224 = tensor.insert_slice %extracted_slice_1223 into %2123[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %2124 = "tosa.reshape"(%inserted_slice_1224) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %2125 = tensor.empty() : tensor<32x80x80xf32>
    %2126 = linalg.batch_matmul ins(%2122, %2124 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%2125 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %2127 = "tosa.reshape"(%2126) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1225 = arith.constant 11.3137083 : f32
    %2128 = tensor.empty() : tensor<1x32x80x80xf32>
    %2129 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2127 : tensor<1x32x80x80xf32>) outs(%2128 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.divf %in, %cst_1225 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %2130 = "tosa.add"(%2129, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %2131 = tensor.empty() : tensor<1x32x80x1xf32>
    %2132 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2131 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %2133 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2130 : tensor<1x32x80x80xf32>) outs(%2131 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.maxf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %2134 = tensor.empty() : tensor<1x32x80x80xf32>
    %2135 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2130, %2133 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%2134 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.subf %in, %in_1777 : f32
      %5006 = math.exp %5005 : f32
      linalg.yield %5006 : f32
    } -> tensor<1x32x80x80xf32>
    %2136 = tensor.empty() : tensor<1x32x80x1xf32>
    %2137 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2136 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %2138 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2135 : tensor<1x32x80x80xf32>) outs(%2137 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.addf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %2139 = tensor.empty() : tensor<1x32x80x80xf32>
    %2140 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2135, %2138 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%2139 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.divf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %2141 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1226 = tensor.extract_slice %2140[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1227 = tensor.insert_slice %extracted_slice_1226 into %2141[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %2142 = "tosa.reshape"(%inserted_slice_1227) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %2143 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1228 = tensor.extract_slice %2080[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1229 = tensor.insert_slice %extracted_slice_1228 into %2143[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %2144 = "tosa.reshape"(%inserted_slice_1229) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %2145 = tensor.empty() : tensor<32x80x128xf32>
    %2146 = linalg.batch_matmul ins(%2142, %2144 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%2145 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %2147 = "tosa.reshape"(%2146) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2148 = tensor.empty() : tensor<1x80x32x128xf32>
    %2149 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2147 : tensor<1x32x80x128xf32>) outs(%2148 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1230 = tensor.extract_slice %2149[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %2150 = "tosa.reshape"(%extracted_slice_1230) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %2151 = tensor.empty() : tensor<4096x4096xf32>
    %2152 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_254 : tensor<4096x4096xf32>) outs(%2151 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2153 = "tosa.reshape"(%2150) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2154 = tensor.empty() : tensor<80x4096xf32>
    %2155 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%2153, %2152 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2154 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %2156 = "tosa.reshape"(%2155) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2157 = "tosa.add"(%2039, %2156) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %2158 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1231 = arith.constant 2 : i32
    %2159 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2157 : tensor<1x80x4096xf32>) outs(%2158 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1231 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1232 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %2160 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2159 : tensor<1x80x4096xf32>) outs(%cst_1232 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1233 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2161 = "tosa.add"(%2160, %cst_1233) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %2162 = tensor.empty() : tensor<1x80x1xf32>
    %2163 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2161 : tensor<1x80x1xf32>) outs(%2162 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %2164 = tensor.empty() : tensor<1x80x4096xf32>
    %2165 = tensor.empty() : tensor<1x80x4096xf32>
    %2166 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2163 : tensor<1x80x1xf32>) outs(%2165 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2167 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2157, %2166 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2164 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %2168 = tensor.empty() : tensor<1x80x4096xf32>
    %2169 = tensor.empty() : tensor<1x80x4096xf32>
    %2170 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_26 : tensor<4096xf32>) outs(%2169 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2171 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2170, %2167 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2168 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %2172 = tensor.empty() : tensor<4096x11008xf32>
    %2173 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_256 : tensor<11008x4096xf32>) outs(%2172 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2174 = "tosa.reshape"(%2171) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2175 = tensor.empty() : tensor<80x11008xf32>
    %2176 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%2174, %2173 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%2175 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %2177 = "tosa.reshape"(%2176) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %2178 = tensor.empty() : tensor<1x80x11008xf32>
    %2179 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2177 : tensor<1x80x11008xf32>) outs(%2178 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      %5006 = math.exp %5005 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5007 = arith.addf %cst_1777, %5006 : f32
      %5008 = arith.divf %in, %5007 : f32
      linalg.yield %5008 : f32
    } -> tensor<1x80x11008xf32>
    %2180 = tensor.empty() : tensor<4096x11008xf32>
    %2181 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_258 : tensor<11008x4096xf32>) outs(%2180 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2182 = "tosa.reshape"(%2171) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2183 = tensor.empty() : tensor<80x11008xf32>
    %2184 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%2182, %2181 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%2183 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %2185 = "tosa.reshape"(%2184) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %2186 = tensor.empty() : tensor<1x80x11008xf32>
    %2187 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2179, %2185 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%2186 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x11008xf32>
    %2188 = tensor.empty() : tensor<11008x4096xf32>
    %2189 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_260 : tensor<4096x11008xf32>) outs(%2188 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %2190 = "tosa.reshape"(%2187) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %2191 = tensor.empty() : tensor<80x4096xf32>
    %2192 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%2190, %2189 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%2191 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %2193 = "tosa.reshape"(%2192) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2194 = "tosa.add"(%2157, %2193) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %2195 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1234 = arith.constant 2 : i32
    %2196 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2194 : tensor<1x80x4096xf32>) outs(%2195 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1234 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1235 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %2197 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2196 : tensor<1x80x4096xf32>) outs(%cst_1235 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1236 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2198 = "tosa.add"(%2197, %cst_1236) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %2199 = tensor.empty() : tensor<1x80x1xf32>
    %2200 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2198 : tensor<1x80x1xf32>) outs(%2199 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %2201 = tensor.empty() : tensor<1x80x4096xf32>
    %2202 = tensor.empty() : tensor<1x80x4096xf32>
    %2203 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2200 : tensor<1x80x1xf32>) outs(%2202 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2204 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2194, %2203 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2201 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %2205 = tensor.empty() : tensor<1x80x4096xf32>
    %2206 = tensor.empty() : tensor<1x80x4096xf32>
    %2207 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_27 : tensor<4096xf32>) outs(%2206 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2208 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2207, %2204 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2205 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %2209 = tensor.empty() : tensor<4096x4096xf32>
    %2210 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_262 : tensor<4096x4096xf32>) outs(%2209 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2211 = "tosa.reshape"(%2208) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2212 = tensor.empty() : tensor<80x4096xf32>
    %2213 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%2211, %2210 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2212 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %2214 = "tosa.reshape"(%2213) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2215 = tensor.empty() : tensor<4096x4096xf32>
    %2216 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_264 : tensor<4096x4096xf32>) outs(%2215 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2217 = "tosa.reshape"(%2208) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2218 = tensor.empty() : tensor<80x4096xf32>
    %2219 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%2217, %2216 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2218 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %2220 = "tosa.reshape"(%2219) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2221 = tensor.empty() : tensor<4096x4096xf32>
    %2222 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_266 : tensor<4096x4096xf32>) outs(%2221 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2223 = "tosa.reshape"(%2208) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2224 = tensor.empty() : tensor<80x4096xf32>
    %2225 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%2223, %2222 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2224 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %2226 = "tosa.reshape"(%2225) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2227 = "tosa.reshape"(%2214) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2228 = tensor.empty() : tensor<1x32x80x128xf32>
    %2229 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2227 : tensor<1x80x32x128xf32>) outs(%2228 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2230 = "tosa.reshape"(%2220) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2231 = tensor.empty() : tensor<1x32x80x128xf32>
    %2232 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2230 : tensor<1x80x32x128xf32>) outs(%2231 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2233 = "tosa.reshape"(%2226) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2234 = tensor.empty() : tensor<1x32x80x128xf32>
    %2235 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2233 : tensor<1x80x32x128xf32>) outs(%2234 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1237 = tensor.extract_slice %expanded_572[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1238 = tensor.extract_slice %extracted_slice_1237[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1239 = tensor.extract_slice %extracted_slice_1238[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1240 = tensor.extract_slice %expanded_574[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1241 = tensor.extract_slice %extracted_slice_1240[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1242 = tensor.extract_slice %extracted_slice_1241[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %2236 = tensor.empty() : tensor<1x80x128xf32>
    %2237 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1239 : tensor<1x1x80x128xf32>) outs(%2236 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %2238 = tensor.empty() : tensor<80x128xf32>
    %2239 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%2237 : tensor<1x80x128xf32>) outs(%2238 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %2240 = tensor.empty() : tensor<1x80x128xf32>
    %2241 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1242 : tensor<1x1x80x128xf32>) outs(%2240 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %2242 = tensor.empty() : tensor<80x128xf32>
    %2243 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%2241 : tensor<1x80x128xf32>) outs(%2242 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %2244 = tensor.empty() : tensor<1x80x128xf32>
    %2245 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%2244 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %2239[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %2246 = "tosa.reshape"(%2245) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %2247 = tensor.empty() : tensor<1x80x128xf32>
    %2248 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%2247 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %2243[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %2249 = "tosa.reshape"(%2248) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %2250 = tensor.empty() : tensor<1x32x80x128xf32>
    %2251 = tensor.empty() : tensor<1x32x80x128xf32>
    %2252 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2246 : tensor<1x1x80x128xf32>) outs(%2251 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2253 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2229, %2252 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2250 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1243 = tensor.extract_slice %2229[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1244 = tensor.extract_slice %2229[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %2254 = tensor.empty() : tensor<1x32x80x64xf32>
    %2255 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1244 : tensor<1x32x80x64xf32>) outs(%2254 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %2256 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1245 = tensor.insert_slice %2255 into %2256[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1246 = tensor.insert_slice %extracted_slice_1243 into %inserted_slice_1245[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %2257 = tensor.empty() : tensor<1x32x80x128xf32>
    %2258 = tensor.empty() : tensor<1x32x80x128xf32>
    %2259 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2249 : tensor<1x1x80x128xf32>) outs(%2258 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2260 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1246, %2259 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2257 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %2261 = "tosa.add"(%2253, %2260) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2262 = tensor.empty() : tensor<1x32x80x128xf32>
    %2263 = tensor.empty() : tensor<1x32x80x128xf32>
    %2264 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2246 : tensor<1x1x80x128xf32>) outs(%2263 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2265 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2232, %2264 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2262 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1247 = tensor.extract_slice %2232[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1248 = tensor.extract_slice %2232[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %2266 = tensor.empty() : tensor<1x32x80x64xf32>
    %2267 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1248 : tensor<1x32x80x64xf32>) outs(%2266 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %2268 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1249 = tensor.insert_slice %2267 into %2268[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1250 = tensor.insert_slice %extracted_slice_1247 into %inserted_slice_1249[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %2269 = tensor.empty() : tensor<1x32x80x128xf32>
    %2270 = tensor.empty() : tensor<1x32x80x128xf32>
    %2271 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2249 : tensor<1x1x80x128xf32>) outs(%2270 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2272 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1250, %2271 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2269 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %2273 = "tosa.add"(%2265, %2272) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2274 = tensor.empty() : tensor<1x32x128x80xf32>
    %2275 = linalg.generic {indexing_maps = [#map15, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2273 : tensor<1x32x80x128xf32>) outs(%2274 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %2276 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1251 = tensor.extract_slice %2261[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1252 = tensor.insert_slice %extracted_slice_1251 into %2276[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %2277 = "tosa.reshape"(%inserted_slice_1252) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %2278 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1253 = tensor.extract_slice %2275[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1254 = tensor.insert_slice %extracted_slice_1253 into %2278[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %2279 = "tosa.reshape"(%inserted_slice_1254) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %2280 = tensor.empty() : tensor<32x80x80xf32>
    %2281 = linalg.batch_matmul ins(%2277, %2279 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%2280 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %2282 = "tosa.reshape"(%2281) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1255 = arith.constant 11.3137083 : f32
    %2283 = tensor.empty() : tensor<1x32x80x80xf32>
    %2284 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2282 : tensor<1x32x80x80xf32>) outs(%2283 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.divf %in, %cst_1255 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %2285 = "tosa.add"(%2284, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %2286 = tensor.empty() : tensor<1x32x80x1xf32>
    %2287 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2286 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %2288 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2285 : tensor<1x32x80x80xf32>) outs(%2286 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.maxf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %2289 = tensor.empty() : tensor<1x32x80x80xf32>
    %2290 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2285, %2288 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%2289 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.subf %in, %in_1777 : f32
      %5006 = math.exp %5005 : f32
      linalg.yield %5006 : f32
    } -> tensor<1x32x80x80xf32>
    %2291 = tensor.empty() : tensor<1x32x80x1xf32>
    %2292 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2291 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %2293 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2290 : tensor<1x32x80x80xf32>) outs(%2292 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.addf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %2294 = tensor.empty() : tensor<1x32x80x80xf32>
    %2295 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2290, %2293 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%2294 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.divf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %2296 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1256 = tensor.extract_slice %2295[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1257 = tensor.insert_slice %extracted_slice_1256 into %2296[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %2297 = "tosa.reshape"(%inserted_slice_1257) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %2298 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1258 = tensor.extract_slice %2235[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1259 = tensor.insert_slice %extracted_slice_1258 into %2298[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %2299 = "tosa.reshape"(%inserted_slice_1259) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %2300 = tensor.empty() : tensor<32x80x128xf32>
    %2301 = linalg.batch_matmul ins(%2297, %2299 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%2300 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %2302 = "tosa.reshape"(%2301) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2303 = tensor.empty() : tensor<1x80x32x128xf32>
    %2304 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2302 : tensor<1x32x80x128xf32>) outs(%2303 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1260 = tensor.extract_slice %2304[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %2305 = "tosa.reshape"(%extracted_slice_1260) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %2306 = tensor.empty() : tensor<4096x4096xf32>
    %2307 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_268 : tensor<4096x4096xf32>) outs(%2306 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2308 = "tosa.reshape"(%2305) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2309 = tensor.empty() : tensor<80x4096xf32>
    %2310 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%2308, %2307 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2309 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %2311 = "tosa.reshape"(%2310) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2312 = "tosa.add"(%2194, %2311) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %2313 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1261 = arith.constant 2 : i32
    %2314 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2312 : tensor<1x80x4096xf32>) outs(%2313 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1261 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1262 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %2315 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2314 : tensor<1x80x4096xf32>) outs(%cst_1262 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1263 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2316 = "tosa.add"(%2315, %cst_1263) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %2317 = tensor.empty() : tensor<1x80x1xf32>
    %2318 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2316 : tensor<1x80x1xf32>) outs(%2317 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %2319 = tensor.empty() : tensor<1x80x4096xf32>
    %2320 = tensor.empty() : tensor<1x80x4096xf32>
    %2321 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2318 : tensor<1x80x1xf32>) outs(%2320 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2322 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2312, %2321 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2319 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %2323 = tensor.empty() : tensor<1x80x4096xf32>
    %2324 = tensor.empty() : tensor<1x80x4096xf32>
    %2325 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_28 : tensor<4096xf32>) outs(%2324 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2326 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2325, %2322 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2323 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %2327 = tensor.empty() : tensor<4096x11008xf32>
    %2328 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_270 : tensor<11008x4096xf32>) outs(%2327 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2329 = "tosa.reshape"(%2326) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2330 = tensor.empty() : tensor<80x11008xf32>
    %2331 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%2329, %2328 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%2330 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %2332 = "tosa.reshape"(%2331) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %2333 = tensor.empty() : tensor<1x80x11008xf32>
    %2334 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2332 : tensor<1x80x11008xf32>) outs(%2333 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      %5006 = math.exp %5005 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5007 = arith.addf %cst_1777, %5006 : f32
      %5008 = arith.divf %in, %5007 : f32
      linalg.yield %5008 : f32
    } -> tensor<1x80x11008xf32>
    %2335 = tensor.empty() : tensor<4096x11008xf32>
    %2336 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_272 : tensor<11008x4096xf32>) outs(%2335 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2337 = "tosa.reshape"(%2326) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2338 = tensor.empty() : tensor<80x11008xf32>
    %2339 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%2337, %2336 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%2338 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %2340 = "tosa.reshape"(%2339) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %2341 = tensor.empty() : tensor<1x80x11008xf32>
    %2342 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2334, %2340 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%2341 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x11008xf32>
    %2343 = tensor.empty() : tensor<11008x4096xf32>
    %2344 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_274 : tensor<4096x11008xf32>) outs(%2343 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %2345 = "tosa.reshape"(%2342) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %2346 = tensor.empty() : tensor<80x4096xf32>
    %2347 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%2345, %2344 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%2346 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %2348 = "tosa.reshape"(%2347) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2349 = "tosa.add"(%2312, %2348) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %2350 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1264 = arith.constant 2 : i32
    %2351 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2349 : tensor<1x80x4096xf32>) outs(%2350 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1264 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1265 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %2352 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2351 : tensor<1x80x4096xf32>) outs(%cst_1265 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1266 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2353 = "tosa.add"(%2352, %cst_1266) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %2354 = tensor.empty() : tensor<1x80x1xf32>
    %2355 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2353 : tensor<1x80x1xf32>) outs(%2354 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %2356 = tensor.empty() : tensor<1x80x4096xf32>
    %2357 = tensor.empty() : tensor<1x80x4096xf32>
    %2358 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2355 : tensor<1x80x1xf32>) outs(%2357 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2359 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2349, %2358 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2356 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %2360 = tensor.empty() : tensor<1x80x4096xf32>
    %2361 = tensor.empty() : tensor<1x80x4096xf32>
    %2362 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_29 : tensor<4096xf32>) outs(%2361 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2363 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2362, %2359 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2360 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %2364 = tensor.empty() : tensor<4096x4096xf32>
    %2365 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_276 : tensor<4096x4096xf32>) outs(%2364 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2366 = "tosa.reshape"(%2363) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2367 = tensor.empty() : tensor<80x4096xf32>
    %2368 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%2366, %2365 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2367 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %2369 = "tosa.reshape"(%2368) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2370 = tensor.empty() : tensor<4096x4096xf32>
    %2371 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_278 : tensor<4096x4096xf32>) outs(%2370 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2372 = "tosa.reshape"(%2363) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2373 = tensor.empty() : tensor<80x4096xf32>
    %2374 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%2372, %2371 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2373 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %2375 = "tosa.reshape"(%2374) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2376 = tensor.empty() : tensor<4096x4096xf32>
    %2377 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_280 : tensor<4096x4096xf32>) outs(%2376 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2378 = "tosa.reshape"(%2363) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2379 = tensor.empty() : tensor<80x4096xf32>
    %2380 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%2378, %2377 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2379 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %2381 = "tosa.reshape"(%2380) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2382 = "tosa.reshape"(%2369) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2383 = tensor.empty() : tensor<1x32x80x128xf32>
    %2384 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2382 : tensor<1x80x32x128xf32>) outs(%2383 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2385 = "tosa.reshape"(%2375) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2386 = tensor.empty() : tensor<1x32x80x128xf32>
    %2387 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2385 : tensor<1x80x32x128xf32>) outs(%2386 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2388 = "tosa.reshape"(%2381) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2389 = tensor.empty() : tensor<1x32x80x128xf32>
    %2390 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2388 : tensor<1x80x32x128xf32>) outs(%2389 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1267 = tensor.extract_slice %expanded_576[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1268 = tensor.extract_slice %extracted_slice_1267[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1269 = tensor.extract_slice %extracted_slice_1268[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1270 = tensor.extract_slice %expanded_578[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1271 = tensor.extract_slice %extracted_slice_1270[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1272 = tensor.extract_slice %extracted_slice_1271[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %2391 = tensor.empty() : tensor<1x80x128xf32>
    %2392 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1269 : tensor<1x1x80x128xf32>) outs(%2391 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %2393 = tensor.empty() : tensor<80x128xf32>
    %2394 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%2392 : tensor<1x80x128xf32>) outs(%2393 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %2395 = tensor.empty() : tensor<1x80x128xf32>
    %2396 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1272 : tensor<1x1x80x128xf32>) outs(%2395 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %2397 = tensor.empty() : tensor<80x128xf32>
    %2398 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%2396 : tensor<1x80x128xf32>) outs(%2397 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %2399 = tensor.empty() : tensor<1x80x128xf32>
    %2400 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%2399 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %2394[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %2401 = "tosa.reshape"(%2400) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %2402 = tensor.empty() : tensor<1x80x128xf32>
    %2403 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%2402 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %2398[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %2404 = "tosa.reshape"(%2403) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %2405 = tensor.empty() : tensor<1x32x80x128xf32>
    %2406 = tensor.empty() : tensor<1x32x80x128xf32>
    %2407 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2401 : tensor<1x1x80x128xf32>) outs(%2406 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2408 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2384, %2407 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2405 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1273 = tensor.extract_slice %2384[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1274 = tensor.extract_slice %2384[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %2409 = tensor.empty() : tensor<1x32x80x64xf32>
    %2410 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1274 : tensor<1x32x80x64xf32>) outs(%2409 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %2411 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1275 = tensor.insert_slice %2410 into %2411[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1276 = tensor.insert_slice %extracted_slice_1273 into %inserted_slice_1275[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %2412 = tensor.empty() : tensor<1x32x80x128xf32>
    %2413 = tensor.empty() : tensor<1x32x80x128xf32>
    %2414 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2404 : tensor<1x1x80x128xf32>) outs(%2413 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2415 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1276, %2414 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2412 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %2416 = "tosa.add"(%2408, %2415) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2417 = tensor.empty() : tensor<1x32x80x128xf32>
    %2418 = tensor.empty() : tensor<1x32x80x128xf32>
    %2419 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2401 : tensor<1x1x80x128xf32>) outs(%2418 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2420 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2387, %2419 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2417 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1277 = tensor.extract_slice %2387[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1278 = tensor.extract_slice %2387[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %2421 = tensor.empty() : tensor<1x32x80x64xf32>
    %2422 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1278 : tensor<1x32x80x64xf32>) outs(%2421 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %2423 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1279 = tensor.insert_slice %2422 into %2423[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1280 = tensor.insert_slice %extracted_slice_1277 into %inserted_slice_1279[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %2424 = tensor.empty() : tensor<1x32x80x128xf32>
    %2425 = tensor.empty() : tensor<1x32x80x128xf32>
    %2426 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2404 : tensor<1x1x80x128xf32>) outs(%2425 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2427 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1280, %2426 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2424 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %2428 = "tosa.add"(%2420, %2427) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2429 = tensor.empty() : tensor<1x32x128x80xf32>
    %2430 = linalg.generic {indexing_maps = [#map15, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2428 : tensor<1x32x80x128xf32>) outs(%2429 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %2431 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1281 = tensor.extract_slice %2416[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1282 = tensor.insert_slice %extracted_slice_1281 into %2431[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %2432 = "tosa.reshape"(%inserted_slice_1282) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %2433 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1283 = tensor.extract_slice %2430[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1284 = tensor.insert_slice %extracted_slice_1283 into %2433[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %2434 = "tosa.reshape"(%inserted_slice_1284) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %2435 = tensor.empty() : tensor<32x80x80xf32>
    %2436 = linalg.batch_matmul ins(%2432, %2434 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%2435 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %2437 = "tosa.reshape"(%2436) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1285 = arith.constant 11.3137083 : f32
    %2438 = tensor.empty() : tensor<1x32x80x80xf32>
    %2439 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2437 : tensor<1x32x80x80xf32>) outs(%2438 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.divf %in, %cst_1285 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %2440 = "tosa.add"(%2439, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %2441 = tensor.empty() : tensor<1x32x80x1xf32>
    %2442 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2441 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %2443 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2440 : tensor<1x32x80x80xf32>) outs(%2441 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.maxf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %2444 = tensor.empty() : tensor<1x32x80x80xf32>
    %2445 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2440, %2443 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%2444 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.subf %in, %in_1777 : f32
      %5006 = math.exp %5005 : f32
      linalg.yield %5006 : f32
    } -> tensor<1x32x80x80xf32>
    %2446 = tensor.empty() : tensor<1x32x80x1xf32>
    %2447 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2446 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %2448 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2445 : tensor<1x32x80x80xf32>) outs(%2447 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.addf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %2449 = tensor.empty() : tensor<1x32x80x80xf32>
    %2450 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2445, %2448 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%2449 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.divf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %2451 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1286 = tensor.extract_slice %2450[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1287 = tensor.insert_slice %extracted_slice_1286 into %2451[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %2452 = "tosa.reshape"(%inserted_slice_1287) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %2453 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1288 = tensor.extract_slice %2390[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1289 = tensor.insert_slice %extracted_slice_1288 into %2453[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %2454 = "tosa.reshape"(%inserted_slice_1289) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %2455 = tensor.empty() : tensor<32x80x128xf32>
    %2456 = linalg.batch_matmul ins(%2452, %2454 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%2455 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %2457 = "tosa.reshape"(%2456) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2458 = tensor.empty() : tensor<1x80x32x128xf32>
    %2459 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2457 : tensor<1x32x80x128xf32>) outs(%2458 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1290 = tensor.extract_slice %2459[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %2460 = "tosa.reshape"(%extracted_slice_1290) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %2461 = tensor.empty() : tensor<4096x4096xf32>
    %2462 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_282 : tensor<4096x4096xf32>) outs(%2461 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2463 = "tosa.reshape"(%2460) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2464 = tensor.empty() : tensor<80x4096xf32>
    %2465 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%2463, %2462 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2464 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %2466 = "tosa.reshape"(%2465) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2467 = "tosa.add"(%2349, %2466) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %2468 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1291 = arith.constant 2 : i32
    %2469 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2467 : tensor<1x80x4096xf32>) outs(%2468 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1291 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1292 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %2470 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2469 : tensor<1x80x4096xf32>) outs(%cst_1292 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1293 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2471 = "tosa.add"(%2470, %cst_1293) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %2472 = tensor.empty() : tensor<1x80x1xf32>
    %2473 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2471 : tensor<1x80x1xf32>) outs(%2472 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %2474 = tensor.empty() : tensor<1x80x4096xf32>
    %2475 = tensor.empty() : tensor<1x80x4096xf32>
    %2476 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2473 : tensor<1x80x1xf32>) outs(%2475 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2477 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2467, %2476 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2474 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %2478 = tensor.empty() : tensor<1x80x4096xf32>
    %2479 = tensor.empty() : tensor<1x80x4096xf32>
    %2480 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_30 : tensor<4096xf32>) outs(%2479 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2481 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2480, %2477 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2478 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %2482 = tensor.empty() : tensor<4096x11008xf32>
    %2483 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_284 : tensor<11008x4096xf32>) outs(%2482 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2484 = "tosa.reshape"(%2481) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2485 = tensor.empty() : tensor<80x11008xf32>
    %2486 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%2484, %2483 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%2485 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %2487 = "tosa.reshape"(%2486) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %2488 = tensor.empty() : tensor<1x80x11008xf32>
    %2489 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2487 : tensor<1x80x11008xf32>) outs(%2488 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      %5006 = math.exp %5005 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5007 = arith.addf %cst_1777, %5006 : f32
      %5008 = arith.divf %in, %5007 : f32
      linalg.yield %5008 : f32
    } -> tensor<1x80x11008xf32>
    %2490 = tensor.empty() : tensor<4096x11008xf32>
    %2491 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_286 : tensor<11008x4096xf32>) outs(%2490 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2492 = "tosa.reshape"(%2481) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2493 = tensor.empty() : tensor<80x11008xf32>
    %2494 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%2492, %2491 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%2493 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %2495 = "tosa.reshape"(%2494) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %2496 = tensor.empty() : tensor<1x80x11008xf32>
    %2497 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2489, %2495 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%2496 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x11008xf32>
    %2498 = tensor.empty() : tensor<11008x4096xf32>
    %2499 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_288 : tensor<4096x11008xf32>) outs(%2498 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %2500 = "tosa.reshape"(%2497) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %2501 = tensor.empty() : tensor<80x4096xf32>
    %2502 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%2500, %2499 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%2501 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %2503 = "tosa.reshape"(%2502) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2504 = "tosa.add"(%2467, %2503) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %2505 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1294 = arith.constant 2 : i32
    %2506 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2504 : tensor<1x80x4096xf32>) outs(%2505 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1294 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1295 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %2507 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2506 : tensor<1x80x4096xf32>) outs(%cst_1295 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1296 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2508 = "tosa.add"(%2507, %cst_1296) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %2509 = tensor.empty() : tensor<1x80x1xf32>
    %2510 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2508 : tensor<1x80x1xf32>) outs(%2509 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %2511 = tensor.empty() : tensor<1x80x4096xf32>
    %2512 = tensor.empty() : tensor<1x80x4096xf32>
    %2513 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2510 : tensor<1x80x1xf32>) outs(%2512 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2514 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2504, %2513 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2511 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %2515 = tensor.empty() : tensor<1x80x4096xf32>
    %2516 = tensor.empty() : tensor<1x80x4096xf32>
    %2517 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_31 : tensor<4096xf32>) outs(%2516 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2518 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2517, %2514 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2515 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %2519 = tensor.empty() : tensor<4096x4096xf32>
    %2520 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_290 : tensor<4096x4096xf32>) outs(%2519 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2521 = "tosa.reshape"(%2518) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2522 = tensor.empty() : tensor<80x4096xf32>
    %2523 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%2521, %2520 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2522 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %2524 = "tosa.reshape"(%2523) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2525 = tensor.empty() : tensor<4096x4096xf32>
    %2526 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_292 : tensor<4096x4096xf32>) outs(%2525 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2527 = "tosa.reshape"(%2518) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2528 = tensor.empty() : tensor<80x4096xf32>
    %2529 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%2527, %2526 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2528 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %2530 = "tosa.reshape"(%2529) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2531 = tensor.empty() : tensor<4096x4096xf32>
    %2532 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_294 : tensor<4096x4096xf32>) outs(%2531 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2533 = "tosa.reshape"(%2518) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2534 = tensor.empty() : tensor<80x4096xf32>
    %2535 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%2533, %2532 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2534 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %2536 = "tosa.reshape"(%2535) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2537 = "tosa.reshape"(%2524) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2538 = tensor.empty() : tensor<1x32x80x128xf32>
    %2539 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2537 : tensor<1x80x32x128xf32>) outs(%2538 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2540 = "tosa.reshape"(%2530) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2541 = tensor.empty() : tensor<1x32x80x128xf32>
    %2542 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2540 : tensor<1x80x32x128xf32>) outs(%2541 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2543 = "tosa.reshape"(%2536) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2544 = tensor.empty() : tensor<1x32x80x128xf32>
    %2545 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2543 : tensor<1x80x32x128xf32>) outs(%2544 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1297 = tensor.extract_slice %expanded_580[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1298 = tensor.extract_slice %extracted_slice_1297[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1299 = tensor.extract_slice %extracted_slice_1298[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1300 = tensor.extract_slice %expanded_582[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1301 = tensor.extract_slice %extracted_slice_1300[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1302 = tensor.extract_slice %extracted_slice_1301[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %2546 = tensor.empty() : tensor<1x80x128xf32>
    %2547 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1299 : tensor<1x1x80x128xf32>) outs(%2546 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %2548 = tensor.empty() : tensor<80x128xf32>
    %2549 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%2547 : tensor<1x80x128xf32>) outs(%2548 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %2550 = tensor.empty() : tensor<1x80x128xf32>
    %2551 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1302 : tensor<1x1x80x128xf32>) outs(%2550 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %2552 = tensor.empty() : tensor<80x128xf32>
    %2553 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%2551 : tensor<1x80x128xf32>) outs(%2552 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %2554 = tensor.empty() : tensor<1x80x128xf32>
    %2555 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%2554 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %2549[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %2556 = "tosa.reshape"(%2555) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %2557 = tensor.empty() : tensor<1x80x128xf32>
    %2558 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%2557 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %2553[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %2559 = "tosa.reshape"(%2558) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %2560 = tensor.empty() : tensor<1x32x80x128xf32>
    %2561 = tensor.empty() : tensor<1x32x80x128xf32>
    %2562 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2556 : tensor<1x1x80x128xf32>) outs(%2561 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2563 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2539, %2562 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2560 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1303 = tensor.extract_slice %2539[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1304 = tensor.extract_slice %2539[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %2564 = tensor.empty() : tensor<1x32x80x64xf32>
    %2565 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1304 : tensor<1x32x80x64xf32>) outs(%2564 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %2566 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1305 = tensor.insert_slice %2565 into %2566[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1306 = tensor.insert_slice %extracted_slice_1303 into %inserted_slice_1305[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %2567 = tensor.empty() : tensor<1x32x80x128xf32>
    %2568 = tensor.empty() : tensor<1x32x80x128xf32>
    %2569 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2559 : tensor<1x1x80x128xf32>) outs(%2568 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2570 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1306, %2569 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2567 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %2571 = "tosa.add"(%2563, %2570) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2572 = tensor.empty() : tensor<1x32x80x128xf32>
    %2573 = tensor.empty() : tensor<1x32x80x128xf32>
    %2574 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2556 : tensor<1x1x80x128xf32>) outs(%2573 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2575 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2542, %2574 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2572 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1307 = tensor.extract_slice %2542[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1308 = tensor.extract_slice %2542[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %2576 = tensor.empty() : tensor<1x32x80x64xf32>
    %2577 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1308 : tensor<1x32x80x64xf32>) outs(%2576 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %2578 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1309 = tensor.insert_slice %2577 into %2578[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1310 = tensor.insert_slice %extracted_slice_1307 into %inserted_slice_1309[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %2579 = tensor.empty() : tensor<1x32x80x128xf32>
    %2580 = tensor.empty() : tensor<1x32x80x128xf32>
    %2581 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2559 : tensor<1x1x80x128xf32>) outs(%2580 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2582 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1310, %2581 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2579 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %2583 = "tosa.add"(%2575, %2582) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2584 = tensor.empty() : tensor<1x32x128x80xf32>
    %2585 = linalg.generic {indexing_maps = [#map15, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2583 : tensor<1x32x80x128xf32>) outs(%2584 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %2586 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1311 = tensor.extract_slice %2571[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1312 = tensor.insert_slice %extracted_slice_1311 into %2586[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %2587 = "tosa.reshape"(%inserted_slice_1312) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %2588 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1313 = tensor.extract_slice %2585[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1314 = tensor.insert_slice %extracted_slice_1313 into %2588[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %2589 = "tosa.reshape"(%inserted_slice_1314) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %2590 = tensor.empty() : tensor<32x80x80xf32>
    %2591 = linalg.batch_matmul ins(%2587, %2589 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%2590 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %2592 = "tosa.reshape"(%2591) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1315 = arith.constant 11.3137083 : f32
    %2593 = tensor.empty() : tensor<1x32x80x80xf32>
    %2594 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2592 : tensor<1x32x80x80xf32>) outs(%2593 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.divf %in, %cst_1315 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %2595 = "tosa.add"(%2594, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %2596 = tensor.empty() : tensor<1x32x80x1xf32>
    %2597 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2596 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %2598 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2595 : tensor<1x32x80x80xf32>) outs(%2596 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.maxf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %2599 = tensor.empty() : tensor<1x32x80x80xf32>
    %2600 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2595, %2598 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%2599 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.subf %in, %in_1777 : f32
      %5006 = math.exp %5005 : f32
      linalg.yield %5006 : f32
    } -> tensor<1x32x80x80xf32>
    %2601 = tensor.empty() : tensor<1x32x80x1xf32>
    %2602 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2601 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %2603 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2600 : tensor<1x32x80x80xf32>) outs(%2602 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.addf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %2604 = tensor.empty() : tensor<1x32x80x80xf32>
    %2605 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2600, %2603 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%2604 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.divf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %2606 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1316 = tensor.extract_slice %2605[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1317 = tensor.insert_slice %extracted_slice_1316 into %2606[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %2607 = "tosa.reshape"(%inserted_slice_1317) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %2608 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1318 = tensor.extract_slice %2545[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1319 = tensor.insert_slice %extracted_slice_1318 into %2608[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %2609 = "tosa.reshape"(%inserted_slice_1319) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %2610 = tensor.empty() : tensor<32x80x128xf32>
    %2611 = linalg.batch_matmul ins(%2607, %2609 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%2610 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %2612 = "tosa.reshape"(%2611) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2613 = tensor.empty() : tensor<1x80x32x128xf32>
    %2614 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2612 : tensor<1x32x80x128xf32>) outs(%2613 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1320 = tensor.extract_slice %2614[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %2615 = "tosa.reshape"(%extracted_slice_1320) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %2616 = tensor.empty() : tensor<4096x4096xf32>
    %2617 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_296 : tensor<4096x4096xf32>) outs(%2616 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2618 = "tosa.reshape"(%2615) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2619 = tensor.empty() : tensor<80x4096xf32>
    %2620 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%2618, %2617 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2619 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %2621 = "tosa.reshape"(%2620) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2622 = "tosa.add"(%2504, %2621) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %2623 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1321 = arith.constant 2 : i32
    %2624 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2622 : tensor<1x80x4096xf32>) outs(%2623 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1321 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1322 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %2625 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2624 : tensor<1x80x4096xf32>) outs(%cst_1322 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1323 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2626 = "tosa.add"(%2625, %cst_1323) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %2627 = tensor.empty() : tensor<1x80x1xf32>
    %2628 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2626 : tensor<1x80x1xf32>) outs(%2627 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %2629 = tensor.empty() : tensor<1x80x4096xf32>
    %2630 = tensor.empty() : tensor<1x80x4096xf32>
    %2631 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2628 : tensor<1x80x1xf32>) outs(%2630 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2632 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2622, %2631 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2629 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %2633 = tensor.empty() : tensor<1x80x4096xf32>
    %2634 = tensor.empty() : tensor<1x80x4096xf32>
    %2635 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_32 : tensor<4096xf32>) outs(%2634 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2636 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2635, %2632 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2633 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %2637 = tensor.empty() : tensor<4096x11008xf32>
    %2638 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_298 : tensor<11008x4096xf32>) outs(%2637 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2639 = "tosa.reshape"(%2636) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2640 = tensor.empty() : tensor<80x11008xf32>
    %2641 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%2639, %2638 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%2640 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %2642 = "tosa.reshape"(%2641) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %2643 = tensor.empty() : tensor<1x80x11008xf32>
    %2644 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2642 : tensor<1x80x11008xf32>) outs(%2643 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      %5006 = math.exp %5005 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5007 = arith.addf %cst_1777, %5006 : f32
      %5008 = arith.divf %in, %5007 : f32
      linalg.yield %5008 : f32
    } -> tensor<1x80x11008xf32>
    %2645 = tensor.empty() : tensor<4096x11008xf32>
    %2646 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_300 : tensor<11008x4096xf32>) outs(%2645 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2647 = "tosa.reshape"(%2636) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2648 = tensor.empty() : tensor<80x11008xf32>
    %2649 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%2647, %2646 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%2648 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %2650 = "tosa.reshape"(%2649) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %2651 = tensor.empty() : tensor<1x80x11008xf32>
    %2652 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2644, %2650 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%2651 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x11008xf32>
    %2653 = tensor.empty() : tensor<11008x4096xf32>
    %2654 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_302 : tensor<4096x11008xf32>) outs(%2653 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %2655 = "tosa.reshape"(%2652) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %2656 = tensor.empty() : tensor<80x4096xf32>
    %2657 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%2655, %2654 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%2656 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %2658 = "tosa.reshape"(%2657) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2659 = "tosa.add"(%2622, %2658) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %2660 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1324 = arith.constant 2 : i32
    %2661 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2659 : tensor<1x80x4096xf32>) outs(%2660 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1324 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1325 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %2662 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2661 : tensor<1x80x4096xf32>) outs(%cst_1325 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1326 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2663 = "tosa.add"(%2662, %cst_1326) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %2664 = tensor.empty() : tensor<1x80x1xf32>
    %2665 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2663 : tensor<1x80x1xf32>) outs(%2664 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %2666 = tensor.empty() : tensor<1x80x4096xf32>
    %2667 = tensor.empty() : tensor<1x80x4096xf32>
    %2668 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2665 : tensor<1x80x1xf32>) outs(%2667 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2669 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2659, %2668 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2666 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %2670 = tensor.empty() : tensor<1x80x4096xf32>
    %2671 = tensor.empty() : tensor<1x80x4096xf32>
    %2672 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_33 : tensor<4096xf32>) outs(%2671 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2673 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2672, %2669 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2670 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %2674 = tensor.empty() : tensor<4096x4096xf32>
    %2675 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_304 : tensor<4096x4096xf32>) outs(%2674 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2676 = "tosa.reshape"(%2673) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2677 = tensor.empty() : tensor<80x4096xf32>
    %2678 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%2676, %2675 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2677 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %2679 = "tosa.reshape"(%2678) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2680 = tensor.empty() : tensor<4096x4096xf32>
    %2681 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_306 : tensor<4096x4096xf32>) outs(%2680 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2682 = "tosa.reshape"(%2673) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2683 = tensor.empty() : tensor<80x4096xf32>
    %2684 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%2682, %2681 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2683 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %2685 = "tosa.reshape"(%2684) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2686 = tensor.empty() : tensor<4096x4096xf32>
    %2687 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_308 : tensor<4096x4096xf32>) outs(%2686 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2688 = "tosa.reshape"(%2673) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2689 = tensor.empty() : tensor<80x4096xf32>
    %2690 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%2688, %2687 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2689 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %2691 = "tosa.reshape"(%2690) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2692 = "tosa.reshape"(%2679) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2693 = tensor.empty() : tensor<1x32x80x128xf32>
    %2694 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2692 : tensor<1x80x32x128xf32>) outs(%2693 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2695 = "tosa.reshape"(%2685) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2696 = tensor.empty() : tensor<1x32x80x128xf32>
    %2697 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2695 : tensor<1x80x32x128xf32>) outs(%2696 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2698 = "tosa.reshape"(%2691) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2699 = tensor.empty() : tensor<1x32x80x128xf32>
    %2700 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2698 : tensor<1x80x32x128xf32>) outs(%2699 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1327 = tensor.extract_slice %expanded_584[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1328 = tensor.extract_slice %extracted_slice_1327[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1329 = tensor.extract_slice %extracted_slice_1328[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1330 = tensor.extract_slice %expanded_586[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1331 = tensor.extract_slice %extracted_slice_1330[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1332 = tensor.extract_slice %extracted_slice_1331[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %2701 = tensor.empty() : tensor<1x80x128xf32>
    %2702 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1329 : tensor<1x1x80x128xf32>) outs(%2701 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %2703 = tensor.empty() : tensor<80x128xf32>
    %2704 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%2702 : tensor<1x80x128xf32>) outs(%2703 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %2705 = tensor.empty() : tensor<1x80x128xf32>
    %2706 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1332 : tensor<1x1x80x128xf32>) outs(%2705 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %2707 = tensor.empty() : tensor<80x128xf32>
    %2708 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%2706 : tensor<1x80x128xf32>) outs(%2707 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %2709 = tensor.empty() : tensor<1x80x128xf32>
    %2710 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%2709 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %2704[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %2711 = "tosa.reshape"(%2710) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %2712 = tensor.empty() : tensor<1x80x128xf32>
    %2713 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%2712 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %2708[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %2714 = "tosa.reshape"(%2713) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %2715 = tensor.empty() : tensor<1x32x80x128xf32>
    %2716 = tensor.empty() : tensor<1x32x80x128xf32>
    %2717 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2711 : tensor<1x1x80x128xf32>) outs(%2716 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2718 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2694, %2717 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2715 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1333 = tensor.extract_slice %2694[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1334 = tensor.extract_slice %2694[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %2719 = tensor.empty() : tensor<1x32x80x64xf32>
    %2720 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1334 : tensor<1x32x80x64xf32>) outs(%2719 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %2721 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1335 = tensor.insert_slice %2720 into %2721[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1336 = tensor.insert_slice %extracted_slice_1333 into %inserted_slice_1335[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %2722 = tensor.empty() : tensor<1x32x80x128xf32>
    %2723 = tensor.empty() : tensor<1x32x80x128xf32>
    %2724 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2714 : tensor<1x1x80x128xf32>) outs(%2723 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2725 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1336, %2724 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2722 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %2726 = "tosa.add"(%2718, %2725) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2727 = tensor.empty() : tensor<1x32x80x128xf32>
    %2728 = tensor.empty() : tensor<1x32x80x128xf32>
    %2729 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2711 : tensor<1x1x80x128xf32>) outs(%2728 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2730 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2697, %2729 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2727 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1337 = tensor.extract_slice %2697[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1338 = tensor.extract_slice %2697[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %2731 = tensor.empty() : tensor<1x32x80x64xf32>
    %2732 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1338 : tensor<1x32x80x64xf32>) outs(%2731 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %2733 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1339 = tensor.insert_slice %2732 into %2733[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1340 = tensor.insert_slice %extracted_slice_1337 into %inserted_slice_1339[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %2734 = tensor.empty() : tensor<1x32x80x128xf32>
    %2735 = tensor.empty() : tensor<1x32x80x128xf32>
    %2736 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2714 : tensor<1x1x80x128xf32>) outs(%2735 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2737 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1340, %2736 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2734 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %2738 = "tosa.add"(%2730, %2737) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2739 = tensor.empty() : tensor<1x32x128x80xf32>
    %2740 = linalg.generic {indexing_maps = [#map15, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2738 : tensor<1x32x80x128xf32>) outs(%2739 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %2741 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1341 = tensor.extract_slice %2726[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1342 = tensor.insert_slice %extracted_slice_1341 into %2741[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %2742 = "tosa.reshape"(%inserted_slice_1342) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %2743 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1343 = tensor.extract_slice %2740[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1344 = tensor.insert_slice %extracted_slice_1343 into %2743[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %2744 = "tosa.reshape"(%inserted_slice_1344) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %2745 = tensor.empty() : tensor<32x80x80xf32>
    %2746 = linalg.batch_matmul ins(%2742, %2744 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%2745 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %2747 = "tosa.reshape"(%2746) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1345 = arith.constant 11.3137083 : f32
    %2748 = tensor.empty() : tensor<1x32x80x80xf32>
    %2749 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2747 : tensor<1x32x80x80xf32>) outs(%2748 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.divf %in, %cst_1345 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %2750 = "tosa.add"(%2749, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %2751 = tensor.empty() : tensor<1x32x80x1xf32>
    %2752 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2751 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %2753 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2750 : tensor<1x32x80x80xf32>) outs(%2751 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.maxf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %2754 = tensor.empty() : tensor<1x32x80x80xf32>
    %2755 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2750, %2753 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%2754 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.subf %in, %in_1777 : f32
      %5006 = math.exp %5005 : f32
      linalg.yield %5006 : f32
    } -> tensor<1x32x80x80xf32>
    %2756 = tensor.empty() : tensor<1x32x80x1xf32>
    %2757 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2756 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %2758 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2755 : tensor<1x32x80x80xf32>) outs(%2757 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.addf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %2759 = tensor.empty() : tensor<1x32x80x80xf32>
    %2760 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2755, %2758 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%2759 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.divf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %2761 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1346 = tensor.extract_slice %2760[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1347 = tensor.insert_slice %extracted_slice_1346 into %2761[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %2762 = "tosa.reshape"(%inserted_slice_1347) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %2763 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1348 = tensor.extract_slice %2700[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1349 = tensor.insert_slice %extracted_slice_1348 into %2763[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %2764 = "tosa.reshape"(%inserted_slice_1349) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %2765 = tensor.empty() : tensor<32x80x128xf32>
    %2766 = linalg.batch_matmul ins(%2762, %2764 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%2765 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %2767 = "tosa.reshape"(%2766) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2768 = tensor.empty() : tensor<1x80x32x128xf32>
    %2769 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2767 : tensor<1x32x80x128xf32>) outs(%2768 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1350 = tensor.extract_slice %2769[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %2770 = "tosa.reshape"(%extracted_slice_1350) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %2771 = tensor.empty() : tensor<4096x4096xf32>
    %2772 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_310 : tensor<4096x4096xf32>) outs(%2771 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2773 = "tosa.reshape"(%2770) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2774 = tensor.empty() : tensor<80x4096xf32>
    %2775 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%2773, %2772 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2774 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %2776 = "tosa.reshape"(%2775) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2777 = "tosa.add"(%2659, %2776) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %2778 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1351 = arith.constant 2 : i32
    %2779 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2777 : tensor<1x80x4096xf32>) outs(%2778 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1351 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1352 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %2780 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2779 : tensor<1x80x4096xf32>) outs(%cst_1352 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1353 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2781 = "tosa.add"(%2780, %cst_1353) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %2782 = tensor.empty() : tensor<1x80x1xf32>
    %2783 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2781 : tensor<1x80x1xf32>) outs(%2782 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %2784 = tensor.empty() : tensor<1x80x4096xf32>
    %2785 = tensor.empty() : tensor<1x80x4096xf32>
    %2786 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2783 : tensor<1x80x1xf32>) outs(%2785 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2787 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2777, %2786 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2784 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %2788 = tensor.empty() : tensor<1x80x4096xf32>
    %2789 = tensor.empty() : tensor<1x80x4096xf32>
    %2790 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_34 : tensor<4096xf32>) outs(%2789 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2791 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2790, %2787 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2788 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %2792 = tensor.empty() : tensor<4096x11008xf32>
    %2793 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_312 : tensor<11008x4096xf32>) outs(%2792 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2794 = "tosa.reshape"(%2791) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2795 = tensor.empty() : tensor<80x11008xf32>
    %2796 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%2794, %2793 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%2795 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %2797 = "tosa.reshape"(%2796) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %2798 = tensor.empty() : tensor<1x80x11008xf32>
    %2799 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2797 : tensor<1x80x11008xf32>) outs(%2798 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      %5006 = math.exp %5005 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5007 = arith.addf %cst_1777, %5006 : f32
      %5008 = arith.divf %in, %5007 : f32
      linalg.yield %5008 : f32
    } -> tensor<1x80x11008xf32>
    %2800 = tensor.empty() : tensor<4096x11008xf32>
    %2801 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_314 : tensor<11008x4096xf32>) outs(%2800 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2802 = "tosa.reshape"(%2791) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2803 = tensor.empty() : tensor<80x11008xf32>
    %2804 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%2802, %2801 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%2803 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %2805 = "tosa.reshape"(%2804) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %2806 = tensor.empty() : tensor<1x80x11008xf32>
    %2807 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2799, %2805 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%2806 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x11008xf32>
    %2808 = tensor.empty() : tensor<11008x4096xf32>
    %2809 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_316 : tensor<4096x11008xf32>) outs(%2808 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %2810 = "tosa.reshape"(%2807) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %2811 = tensor.empty() : tensor<80x4096xf32>
    %2812 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%2810, %2809 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%2811 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %2813 = "tosa.reshape"(%2812) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2814 = "tosa.add"(%2777, %2813) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %2815 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1354 = arith.constant 2 : i32
    %2816 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2814 : tensor<1x80x4096xf32>) outs(%2815 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1354 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1355 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %2817 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2816 : tensor<1x80x4096xf32>) outs(%cst_1355 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1356 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2818 = "tosa.add"(%2817, %cst_1356) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %2819 = tensor.empty() : tensor<1x80x1xf32>
    %2820 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2818 : tensor<1x80x1xf32>) outs(%2819 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %2821 = tensor.empty() : tensor<1x80x4096xf32>
    %2822 = tensor.empty() : tensor<1x80x4096xf32>
    %2823 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2820 : tensor<1x80x1xf32>) outs(%2822 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2824 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2814, %2823 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2821 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %2825 = tensor.empty() : tensor<1x80x4096xf32>
    %2826 = tensor.empty() : tensor<1x80x4096xf32>
    %2827 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_35 : tensor<4096xf32>) outs(%2826 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2828 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2827, %2824 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2825 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %2829 = tensor.empty() : tensor<4096x4096xf32>
    %2830 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_318 : tensor<4096x4096xf32>) outs(%2829 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2831 = "tosa.reshape"(%2828) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2832 = tensor.empty() : tensor<80x4096xf32>
    %2833 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%2831, %2830 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2832 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %2834 = "tosa.reshape"(%2833) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2835 = tensor.empty() : tensor<4096x4096xf32>
    %2836 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_320 : tensor<4096x4096xf32>) outs(%2835 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2837 = "tosa.reshape"(%2828) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2838 = tensor.empty() : tensor<80x4096xf32>
    %2839 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%2837, %2836 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2838 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %2840 = "tosa.reshape"(%2839) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2841 = tensor.empty() : tensor<4096x4096xf32>
    %2842 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_322 : tensor<4096x4096xf32>) outs(%2841 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2843 = "tosa.reshape"(%2828) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2844 = tensor.empty() : tensor<80x4096xf32>
    %2845 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%2843, %2842 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2844 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %2846 = "tosa.reshape"(%2845) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2847 = "tosa.reshape"(%2834) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2848 = tensor.empty() : tensor<1x32x80x128xf32>
    %2849 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2847 : tensor<1x80x32x128xf32>) outs(%2848 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2850 = "tosa.reshape"(%2840) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2851 = tensor.empty() : tensor<1x32x80x128xf32>
    %2852 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2850 : tensor<1x80x32x128xf32>) outs(%2851 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2853 = "tosa.reshape"(%2846) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2854 = tensor.empty() : tensor<1x32x80x128xf32>
    %2855 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2853 : tensor<1x80x32x128xf32>) outs(%2854 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1357 = tensor.extract_slice %expanded_588[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1358 = tensor.extract_slice %extracted_slice_1357[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1359 = tensor.extract_slice %extracted_slice_1358[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1360 = tensor.extract_slice %expanded_590[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1361 = tensor.extract_slice %extracted_slice_1360[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1362 = tensor.extract_slice %extracted_slice_1361[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %2856 = tensor.empty() : tensor<1x80x128xf32>
    %2857 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1359 : tensor<1x1x80x128xf32>) outs(%2856 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %2858 = tensor.empty() : tensor<80x128xf32>
    %2859 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%2857 : tensor<1x80x128xf32>) outs(%2858 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %2860 = tensor.empty() : tensor<1x80x128xf32>
    %2861 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1362 : tensor<1x1x80x128xf32>) outs(%2860 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %2862 = tensor.empty() : tensor<80x128xf32>
    %2863 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%2861 : tensor<1x80x128xf32>) outs(%2862 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %2864 = tensor.empty() : tensor<1x80x128xf32>
    %2865 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%2864 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %2859[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %2866 = "tosa.reshape"(%2865) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %2867 = tensor.empty() : tensor<1x80x128xf32>
    %2868 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%2867 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %2863[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %2869 = "tosa.reshape"(%2868) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %2870 = tensor.empty() : tensor<1x32x80x128xf32>
    %2871 = tensor.empty() : tensor<1x32x80x128xf32>
    %2872 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2866 : tensor<1x1x80x128xf32>) outs(%2871 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2873 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2849, %2872 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2870 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1363 = tensor.extract_slice %2849[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1364 = tensor.extract_slice %2849[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %2874 = tensor.empty() : tensor<1x32x80x64xf32>
    %2875 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1364 : tensor<1x32x80x64xf32>) outs(%2874 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %2876 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1365 = tensor.insert_slice %2875 into %2876[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1366 = tensor.insert_slice %extracted_slice_1363 into %inserted_slice_1365[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %2877 = tensor.empty() : tensor<1x32x80x128xf32>
    %2878 = tensor.empty() : tensor<1x32x80x128xf32>
    %2879 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2869 : tensor<1x1x80x128xf32>) outs(%2878 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2880 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1366, %2879 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2877 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %2881 = "tosa.add"(%2873, %2880) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2882 = tensor.empty() : tensor<1x32x80x128xf32>
    %2883 = tensor.empty() : tensor<1x32x80x128xf32>
    %2884 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2866 : tensor<1x1x80x128xf32>) outs(%2883 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2885 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2852, %2884 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2882 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1367 = tensor.extract_slice %2852[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1368 = tensor.extract_slice %2852[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %2886 = tensor.empty() : tensor<1x32x80x64xf32>
    %2887 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1368 : tensor<1x32x80x64xf32>) outs(%2886 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %2888 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1369 = tensor.insert_slice %2887 into %2888[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1370 = tensor.insert_slice %extracted_slice_1367 into %inserted_slice_1369[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %2889 = tensor.empty() : tensor<1x32x80x128xf32>
    %2890 = tensor.empty() : tensor<1x32x80x128xf32>
    %2891 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2869 : tensor<1x1x80x128xf32>) outs(%2890 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2892 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1370, %2891 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2889 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %2893 = "tosa.add"(%2885, %2892) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2894 = tensor.empty() : tensor<1x32x128x80xf32>
    %2895 = linalg.generic {indexing_maps = [#map15, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2893 : tensor<1x32x80x128xf32>) outs(%2894 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %2896 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1371 = tensor.extract_slice %2881[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1372 = tensor.insert_slice %extracted_slice_1371 into %2896[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %2897 = "tosa.reshape"(%inserted_slice_1372) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %2898 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1373 = tensor.extract_slice %2895[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1374 = tensor.insert_slice %extracted_slice_1373 into %2898[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %2899 = "tosa.reshape"(%inserted_slice_1374) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %2900 = tensor.empty() : tensor<32x80x80xf32>
    %2901 = linalg.batch_matmul ins(%2897, %2899 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%2900 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %2902 = "tosa.reshape"(%2901) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1375 = arith.constant 11.3137083 : f32
    %2903 = tensor.empty() : tensor<1x32x80x80xf32>
    %2904 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2902 : tensor<1x32x80x80xf32>) outs(%2903 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.divf %in, %cst_1375 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %2905 = "tosa.add"(%2904, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %2906 = tensor.empty() : tensor<1x32x80x1xf32>
    %2907 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2906 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %2908 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2905 : tensor<1x32x80x80xf32>) outs(%2906 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.maxf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %2909 = tensor.empty() : tensor<1x32x80x80xf32>
    %2910 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2905, %2908 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%2909 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.subf %in, %in_1777 : f32
      %5006 = math.exp %5005 : f32
      linalg.yield %5006 : f32
    } -> tensor<1x32x80x80xf32>
    %2911 = tensor.empty() : tensor<1x32x80x1xf32>
    %2912 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2911 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %2913 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2910 : tensor<1x32x80x80xf32>) outs(%2912 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.addf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %2914 = tensor.empty() : tensor<1x32x80x80xf32>
    %2915 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2910, %2913 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%2914 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.divf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %2916 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1376 = tensor.extract_slice %2915[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1377 = tensor.insert_slice %extracted_slice_1376 into %2916[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %2917 = "tosa.reshape"(%inserted_slice_1377) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %2918 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1378 = tensor.extract_slice %2855[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1379 = tensor.insert_slice %extracted_slice_1378 into %2918[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %2919 = "tosa.reshape"(%inserted_slice_1379) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %2920 = tensor.empty() : tensor<32x80x128xf32>
    %2921 = linalg.batch_matmul ins(%2917, %2919 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%2920 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %2922 = "tosa.reshape"(%2921) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2923 = tensor.empty() : tensor<1x80x32x128xf32>
    %2924 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2922 : tensor<1x32x80x128xf32>) outs(%2923 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1380 = tensor.extract_slice %2924[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %2925 = "tosa.reshape"(%extracted_slice_1380) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %2926 = tensor.empty() : tensor<4096x4096xf32>
    %2927 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_324 : tensor<4096x4096xf32>) outs(%2926 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2928 = "tosa.reshape"(%2925) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2929 = tensor.empty() : tensor<80x4096xf32>
    %2930 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%2928, %2927 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2929 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %2931 = "tosa.reshape"(%2930) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2932 = "tosa.add"(%2814, %2931) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %2933 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1381 = arith.constant 2 : i32
    %2934 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2932 : tensor<1x80x4096xf32>) outs(%2933 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1381 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1382 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %2935 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2934 : tensor<1x80x4096xf32>) outs(%cst_1382 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1383 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2936 = "tosa.add"(%2935, %cst_1383) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %2937 = tensor.empty() : tensor<1x80x1xf32>
    %2938 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2936 : tensor<1x80x1xf32>) outs(%2937 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %2939 = tensor.empty() : tensor<1x80x4096xf32>
    %2940 = tensor.empty() : tensor<1x80x4096xf32>
    %2941 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2938 : tensor<1x80x1xf32>) outs(%2940 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2942 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2932, %2941 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2939 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %2943 = tensor.empty() : tensor<1x80x4096xf32>
    %2944 = tensor.empty() : tensor<1x80x4096xf32>
    %2945 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_36 : tensor<4096xf32>) outs(%2944 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2946 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2945, %2942 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2943 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %2947 = tensor.empty() : tensor<4096x11008xf32>
    %2948 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_326 : tensor<11008x4096xf32>) outs(%2947 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2949 = "tosa.reshape"(%2946) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2950 = tensor.empty() : tensor<80x11008xf32>
    %2951 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%2949, %2948 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%2950 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %2952 = "tosa.reshape"(%2951) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %2953 = tensor.empty() : tensor<1x80x11008xf32>
    %2954 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2952 : tensor<1x80x11008xf32>) outs(%2953 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      %5006 = math.exp %5005 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5007 = arith.addf %cst_1777, %5006 : f32
      %5008 = arith.divf %in, %5007 : f32
      linalg.yield %5008 : f32
    } -> tensor<1x80x11008xf32>
    %2955 = tensor.empty() : tensor<4096x11008xf32>
    %2956 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_328 : tensor<11008x4096xf32>) outs(%2955 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2957 = "tosa.reshape"(%2946) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2958 = tensor.empty() : tensor<80x11008xf32>
    %2959 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%2957, %2956 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%2958 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %2960 = "tosa.reshape"(%2959) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %2961 = tensor.empty() : tensor<1x80x11008xf32>
    %2962 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2954, %2960 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%2961 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x11008xf32>
    %2963 = tensor.empty() : tensor<11008x4096xf32>
    %2964 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_330 : tensor<4096x11008xf32>) outs(%2963 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %2965 = "tosa.reshape"(%2962) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %2966 = tensor.empty() : tensor<80x4096xf32>
    %2967 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%2965, %2964 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%2966 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %2968 = "tosa.reshape"(%2967) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2969 = "tosa.add"(%2932, %2968) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %2970 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1384 = arith.constant 2 : i32
    %2971 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2969 : tensor<1x80x4096xf32>) outs(%2970 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1384 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1385 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %2972 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2971 : tensor<1x80x4096xf32>) outs(%cst_1385 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1386 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2973 = "tosa.add"(%2972, %cst_1386) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %2974 = tensor.empty() : tensor<1x80x1xf32>
    %2975 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2973 : tensor<1x80x1xf32>) outs(%2974 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %2976 = tensor.empty() : tensor<1x80x4096xf32>
    %2977 = tensor.empty() : tensor<1x80x4096xf32>
    %2978 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2975 : tensor<1x80x1xf32>) outs(%2977 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2979 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2969, %2978 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2976 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %2980 = tensor.empty() : tensor<1x80x4096xf32>
    %2981 = tensor.empty() : tensor<1x80x4096xf32>
    %2982 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_37 : tensor<4096xf32>) outs(%2981 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2983 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2982, %2979 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2980 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %2984 = tensor.empty() : tensor<4096x4096xf32>
    %2985 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_332 : tensor<4096x4096xf32>) outs(%2984 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2986 = "tosa.reshape"(%2983) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2987 = tensor.empty() : tensor<80x4096xf32>
    %2988 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%2986, %2985 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2987 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %2989 = "tosa.reshape"(%2988) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2990 = tensor.empty() : tensor<4096x4096xf32>
    %2991 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_334 : tensor<4096x4096xf32>) outs(%2990 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2992 = "tosa.reshape"(%2983) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2993 = tensor.empty() : tensor<80x4096xf32>
    %2994 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%2992, %2991 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2993 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %2995 = "tosa.reshape"(%2994) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2996 = tensor.empty() : tensor<4096x4096xf32>
    %2997 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_336 : tensor<4096x4096xf32>) outs(%2996 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2998 = "tosa.reshape"(%2983) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %2999 = tensor.empty() : tensor<80x4096xf32>
    %3000 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%2998, %2997 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%2999 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %3001 = "tosa.reshape"(%3000) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3002 = "tosa.reshape"(%2989) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3003 = tensor.empty() : tensor<1x32x80x128xf32>
    %3004 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3002 : tensor<1x80x32x128xf32>) outs(%3003 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3005 = "tosa.reshape"(%2995) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3006 = tensor.empty() : tensor<1x32x80x128xf32>
    %3007 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3005 : tensor<1x80x32x128xf32>) outs(%3006 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3008 = "tosa.reshape"(%3001) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3009 = tensor.empty() : tensor<1x32x80x128xf32>
    %3010 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3008 : tensor<1x80x32x128xf32>) outs(%3009 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1387 = tensor.extract_slice %expanded_592[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1388 = tensor.extract_slice %extracted_slice_1387[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1389 = tensor.extract_slice %extracted_slice_1388[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1390 = tensor.extract_slice %expanded_594[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1391 = tensor.extract_slice %extracted_slice_1390[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1392 = tensor.extract_slice %extracted_slice_1391[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %3011 = tensor.empty() : tensor<1x80x128xf32>
    %3012 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1389 : tensor<1x1x80x128xf32>) outs(%3011 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %3013 = tensor.empty() : tensor<80x128xf32>
    %3014 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%3012 : tensor<1x80x128xf32>) outs(%3013 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %3015 = tensor.empty() : tensor<1x80x128xf32>
    %3016 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1392 : tensor<1x1x80x128xf32>) outs(%3015 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %3017 = tensor.empty() : tensor<80x128xf32>
    %3018 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%3016 : tensor<1x80x128xf32>) outs(%3017 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %3019 = tensor.empty() : tensor<1x80x128xf32>
    %3020 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%3019 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %3014[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %3021 = "tosa.reshape"(%3020) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %3022 = tensor.empty() : tensor<1x80x128xf32>
    %3023 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%3022 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %3018[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %3024 = "tosa.reshape"(%3023) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %3025 = tensor.empty() : tensor<1x32x80x128xf32>
    %3026 = tensor.empty() : tensor<1x32x80x128xf32>
    %3027 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3021 : tensor<1x1x80x128xf32>) outs(%3026 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3028 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3004, %3027 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3025 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1393 = tensor.extract_slice %3004[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1394 = tensor.extract_slice %3004[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %3029 = tensor.empty() : tensor<1x32x80x64xf32>
    %3030 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1394 : tensor<1x32x80x64xf32>) outs(%3029 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %3031 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1395 = tensor.insert_slice %3030 into %3031[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1396 = tensor.insert_slice %extracted_slice_1393 into %inserted_slice_1395[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %3032 = tensor.empty() : tensor<1x32x80x128xf32>
    %3033 = tensor.empty() : tensor<1x32x80x128xf32>
    %3034 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3024 : tensor<1x1x80x128xf32>) outs(%3033 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3035 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1396, %3034 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3032 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %3036 = "tosa.add"(%3028, %3035) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3037 = tensor.empty() : tensor<1x32x80x128xf32>
    %3038 = tensor.empty() : tensor<1x32x80x128xf32>
    %3039 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3021 : tensor<1x1x80x128xf32>) outs(%3038 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3040 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3007, %3039 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3037 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1397 = tensor.extract_slice %3007[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1398 = tensor.extract_slice %3007[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %3041 = tensor.empty() : tensor<1x32x80x64xf32>
    %3042 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1398 : tensor<1x32x80x64xf32>) outs(%3041 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %3043 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1399 = tensor.insert_slice %3042 into %3043[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1400 = tensor.insert_slice %extracted_slice_1397 into %inserted_slice_1399[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %3044 = tensor.empty() : tensor<1x32x80x128xf32>
    %3045 = tensor.empty() : tensor<1x32x80x128xf32>
    %3046 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3024 : tensor<1x1x80x128xf32>) outs(%3045 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3047 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1400, %3046 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3044 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %3048 = "tosa.add"(%3040, %3047) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3049 = tensor.empty() : tensor<1x32x128x80xf32>
    %3050 = linalg.generic {indexing_maps = [#map15, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3048 : tensor<1x32x80x128xf32>) outs(%3049 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %3051 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1401 = tensor.extract_slice %3036[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1402 = tensor.insert_slice %extracted_slice_1401 into %3051[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %3052 = "tosa.reshape"(%inserted_slice_1402) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %3053 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1403 = tensor.extract_slice %3050[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1404 = tensor.insert_slice %extracted_slice_1403 into %3053[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %3054 = "tosa.reshape"(%inserted_slice_1404) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %3055 = tensor.empty() : tensor<32x80x80xf32>
    %3056 = linalg.batch_matmul ins(%3052, %3054 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%3055 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %3057 = "tosa.reshape"(%3056) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1405 = arith.constant 11.3137083 : f32
    %3058 = tensor.empty() : tensor<1x32x80x80xf32>
    %3059 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3057 : tensor<1x32x80x80xf32>) outs(%3058 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.divf %in, %cst_1405 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %3060 = "tosa.add"(%3059, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %3061 = tensor.empty() : tensor<1x32x80x1xf32>
    %3062 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3061 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %3063 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3060 : tensor<1x32x80x80xf32>) outs(%3061 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.maxf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %3064 = tensor.empty() : tensor<1x32x80x80xf32>
    %3065 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3060, %3063 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%3064 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.subf %in, %in_1777 : f32
      %5006 = math.exp %5005 : f32
      linalg.yield %5006 : f32
    } -> tensor<1x32x80x80xf32>
    %3066 = tensor.empty() : tensor<1x32x80x1xf32>
    %3067 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3066 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %3068 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3065 : tensor<1x32x80x80xf32>) outs(%3067 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.addf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %3069 = tensor.empty() : tensor<1x32x80x80xf32>
    %3070 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3065, %3068 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%3069 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.divf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %3071 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1406 = tensor.extract_slice %3070[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1407 = tensor.insert_slice %extracted_slice_1406 into %3071[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %3072 = "tosa.reshape"(%inserted_slice_1407) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %3073 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1408 = tensor.extract_slice %3010[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1409 = tensor.insert_slice %extracted_slice_1408 into %3073[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %3074 = "tosa.reshape"(%inserted_slice_1409) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %3075 = tensor.empty() : tensor<32x80x128xf32>
    %3076 = linalg.batch_matmul ins(%3072, %3074 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%3075 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %3077 = "tosa.reshape"(%3076) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3078 = tensor.empty() : tensor<1x80x32x128xf32>
    %3079 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3077 : tensor<1x32x80x128xf32>) outs(%3078 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1410 = tensor.extract_slice %3079[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %3080 = "tosa.reshape"(%extracted_slice_1410) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %3081 = tensor.empty() : tensor<4096x4096xf32>
    %3082 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_338 : tensor<4096x4096xf32>) outs(%3081 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3083 = "tosa.reshape"(%3080) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3084 = tensor.empty() : tensor<80x4096xf32>
    %3085 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%3083, %3082 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%3084 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %3086 = "tosa.reshape"(%3085) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3087 = "tosa.add"(%2969, %3086) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %3088 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1411 = arith.constant 2 : i32
    %3089 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3087 : tensor<1x80x4096xf32>) outs(%3088 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1411 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1412 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %3090 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%3089 : tensor<1x80x4096xf32>) outs(%cst_1412 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1413 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %3091 = "tosa.add"(%3090, %cst_1413) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %3092 = tensor.empty() : tensor<1x80x1xf32>
    %3093 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3091 : tensor<1x80x1xf32>) outs(%3092 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %3094 = tensor.empty() : tensor<1x80x4096xf32>
    %3095 = tensor.empty() : tensor<1x80x4096xf32>
    %3096 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3093 : tensor<1x80x1xf32>) outs(%3095 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3097 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3087, %3096 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3094 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %3098 = tensor.empty() : tensor<1x80x4096xf32>
    %3099 = tensor.empty() : tensor<1x80x4096xf32>
    %3100 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_38 : tensor<4096xf32>) outs(%3099 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3101 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3100, %3097 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3098 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %3102 = tensor.empty() : tensor<4096x11008xf32>
    %3103 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_340 : tensor<11008x4096xf32>) outs(%3102 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3104 = "tosa.reshape"(%3101) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3105 = tensor.empty() : tensor<80x11008xf32>
    %3106 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%3104, %3103 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%3105 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %3107 = "tosa.reshape"(%3106) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %3108 = tensor.empty() : tensor<1x80x11008xf32>
    %3109 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3107 : tensor<1x80x11008xf32>) outs(%3108 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      %5006 = math.exp %5005 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5007 = arith.addf %cst_1777, %5006 : f32
      %5008 = arith.divf %in, %5007 : f32
      linalg.yield %5008 : f32
    } -> tensor<1x80x11008xf32>
    %3110 = tensor.empty() : tensor<4096x11008xf32>
    %3111 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_342 : tensor<11008x4096xf32>) outs(%3110 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3112 = "tosa.reshape"(%3101) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3113 = tensor.empty() : tensor<80x11008xf32>
    %3114 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%3112, %3111 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%3113 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %3115 = "tosa.reshape"(%3114) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %3116 = tensor.empty() : tensor<1x80x11008xf32>
    %3117 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3109, %3115 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%3116 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x11008xf32>
    %3118 = tensor.empty() : tensor<11008x4096xf32>
    %3119 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_344 : tensor<4096x11008xf32>) outs(%3118 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %3120 = "tosa.reshape"(%3117) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %3121 = tensor.empty() : tensor<80x4096xf32>
    %3122 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%3120, %3119 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%3121 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %3123 = "tosa.reshape"(%3122) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3124 = "tosa.add"(%3087, %3123) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %3125 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1414 = arith.constant 2 : i32
    %3126 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3124 : tensor<1x80x4096xf32>) outs(%3125 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1414 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1415 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %3127 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%3126 : tensor<1x80x4096xf32>) outs(%cst_1415 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1416 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %3128 = "tosa.add"(%3127, %cst_1416) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %3129 = tensor.empty() : tensor<1x80x1xf32>
    %3130 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3128 : tensor<1x80x1xf32>) outs(%3129 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %3131 = tensor.empty() : tensor<1x80x4096xf32>
    %3132 = tensor.empty() : tensor<1x80x4096xf32>
    %3133 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3130 : tensor<1x80x1xf32>) outs(%3132 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3134 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3124, %3133 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3131 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %3135 = tensor.empty() : tensor<1x80x4096xf32>
    %3136 = tensor.empty() : tensor<1x80x4096xf32>
    %3137 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_39 : tensor<4096xf32>) outs(%3136 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3138 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3137, %3134 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3135 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %3139 = tensor.empty() : tensor<4096x4096xf32>
    %3140 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_346 : tensor<4096x4096xf32>) outs(%3139 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3141 = "tosa.reshape"(%3138) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3142 = tensor.empty() : tensor<80x4096xf32>
    %3143 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%3141, %3140 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%3142 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %3144 = "tosa.reshape"(%3143) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3145 = tensor.empty() : tensor<4096x4096xf32>
    %3146 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_348 : tensor<4096x4096xf32>) outs(%3145 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3147 = "tosa.reshape"(%3138) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3148 = tensor.empty() : tensor<80x4096xf32>
    %3149 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%3147, %3146 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%3148 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %3150 = "tosa.reshape"(%3149) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3151 = tensor.empty() : tensor<4096x4096xf32>
    %3152 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_350 : tensor<4096x4096xf32>) outs(%3151 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3153 = "tosa.reshape"(%3138) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3154 = tensor.empty() : tensor<80x4096xf32>
    %3155 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%3153, %3152 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%3154 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %3156 = "tosa.reshape"(%3155) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3157 = "tosa.reshape"(%3144) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3158 = tensor.empty() : tensor<1x32x80x128xf32>
    %3159 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3157 : tensor<1x80x32x128xf32>) outs(%3158 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3160 = "tosa.reshape"(%3150) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3161 = tensor.empty() : tensor<1x32x80x128xf32>
    %3162 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3160 : tensor<1x80x32x128xf32>) outs(%3161 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3163 = "tosa.reshape"(%3156) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3164 = tensor.empty() : tensor<1x32x80x128xf32>
    %3165 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3163 : tensor<1x80x32x128xf32>) outs(%3164 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1417 = tensor.extract_slice %expanded_596[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1418 = tensor.extract_slice %extracted_slice_1417[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1419 = tensor.extract_slice %extracted_slice_1418[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1420 = tensor.extract_slice %expanded_598[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1421 = tensor.extract_slice %extracted_slice_1420[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1422 = tensor.extract_slice %extracted_slice_1421[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %3166 = tensor.empty() : tensor<1x80x128xf32>
    %3167 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1419 : tensor<1x1x80x128xf32>) outs(%3166 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %3168 = tensor.empty() : tensor<80x128xf32>
    %3169 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%3167 : tensor<1x80x128xf32>) outs(%3168 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %3170 = tensor.empty() : tensor<1x80x128xf32>
    %3171 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1422 : tensor<1x1x80x128xf32>) outs(%3170 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %3172 = tensor.empty() : tensor<80x128xf32>
    %3173 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%3171 : tensor<1x80x128xf32>) outs(%3172 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %3174 = tensor.empty() : tensor<1x80x128xf32>
    %3175 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%3174 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %3169[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %3176 = "tosa.reshape"(%3175) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %3177 = tensor.empty() : tensor<1x80x128xf32>
    %3178 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%3177 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %3173[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %3179 = "tosa.reshape"(%3178) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %3180 = tensor.empty() : tensor<1x32x80x128xf32>
    %3181 = tensor.empty() : tensor<1x32x80x128xf32>
    %3182 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3176 : tensor<1x1x80x128xf32>) outs(%3181 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3183 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3159, %3182 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3180 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1423 = tensor.extract_slice %3159[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1424 = tensor.extract_slice %3159[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %3184 = tensor.empty() : tensor<1x32x80x64xf32>
    %3185 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1424 : tensor<1x32x80x64xf32>) outs(%3184 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %3186 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1425 = tensor.insert_slice %3185 into %3186[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1426 = tensor.insert_slice %extracted_slice_1423 into %inserted_slice_1425[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %3187 = tensor.empty() : tensor<1x32x80x128xf32>
    %3188 = tensor.empty() : tensor<1x32x80x128xf32>
    %3189 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3179 : tensor<1x1x80x128xf32>) outs(%3188 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3190 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1426, %3189 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3187 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %3191 = "tosa.add"(%3183, %3190) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3192 = tensor.empty() : tensor<1x32x80x128xf32>
    %3193 = tensor.empty() : tensor<1x32x80x128xf32>
    %3194 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3176 : tensor<1x1x80x128xf32>) outs(%3193 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3195 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3162, %3194 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3192 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1427 = tensor.extract_slice %3162[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1428 = tensor.extract_slice %3162[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %3196 = tensor.empty() : tensor<1x32x80x64xf32>
    %3197 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1428 : tensor<1x32x80x64xf32>) outs(%3196 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %3198 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1429 = tensor.insert_slice %3197 into %3198[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1430 = tensor.insert_slice %extracted_slice_1427 into %inserted_slice_1429[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %3199 = tensor.empty() : tensor<1x32x80x128xf32>
    %3200 = tensor.empty() : tensor<1x32x80x128xf32>
    %3201 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3179 : tensor<1x1x80x128xf32>) outs(%3200 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3202 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1430, %3201 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3199 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %3203 = "tosa.add"(%3195, %3202) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3204 = tensor.empty() : tensor<1x32x128x80xf32>
    %3205 = linalg.generic {indexing_maps = [#map15, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3203 : tensor<1x32x80x128xf32>) outs(%3204 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %3206 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1431 = tensor.extract_slice %3191[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1432 = tensor.insert_slice %extracted_slice_1431 into %3206[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %3207 = "tosa.reshape"(%inserted_slice_1432) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %3208 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1433 = tensor.extract_slice %3205[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1434 = tensor.insert_slice %extracted_slice_1433 into %3208[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %3209 = "tosa.reshape"(%inserted_slice_1434) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %3210 = tensor.empty() : tensor<32x80x80xf32>
    %3211 = linalg.batch_matmul ins(%3207, %3209 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%3210 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %3212 = "tosa.reshape"(%3211) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1435 = arith.constant 11.3137083 : f32
    %3213 = tensor.empty() : tensor<1x32x80x80xf32>
    %3214 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3212 : tensor<1x32x80x80xf32>) outs(%3213 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.divf %in, %cst_1435 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %3215 = "tosa.add"(%3214, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %3216 = tensor.empty() : tensor<1x32x80x1xf32>
    %3217 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3216 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %3218 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3215 : tensor<1x32x80x80xf32>) outs(%3216 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.maxf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %3219 = tensor.empty() : tensor<1x32x80x80xf32>
    %3220 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3215, %3218 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%3219 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.subf %in, %in_1777 : f32
      %5006 = math.exp %5005 : f32
      linalg.yield %5006 : f32
    } -> tensor<1x32x80x80xf32>
    %3221 = tensor.empty() : tensor<1x32x80x1xf32>
    %3222 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3221 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %3223 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3220 : tensor<1x32x80x80xf32>) outs(%3222 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.addf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %3224 = tensor.empty() : tensor<1x32x80x80xf32>
    %3225 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3220, %3223 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%3224 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.divf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %3226 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1436 = tensor.extract_slice %3225[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1437 = tensor.insert_slice %extracted_slice_1436 into %3226[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %3227 = "tosa.reshape"(%inserted_slice_1437) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %3228 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1438 = tensor.extract_slice %3165[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1439 = tensor.insert_slice %extracted_slice_1438 into %3228[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %3229 = "tosa.reshape"(%inserted_slice_1439) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %3230 = tensor.empty() : tensor<32x80x128xf32>
    %3231 = linalg.batch_matmul ins(%3227, %3229 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%3230 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %3232 = "tosa.reshape"(%3231) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3233 = tensor.empty() : tensor<1x80x32x128xf32>
    %3234 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3232 : tensor<1x32x80x128xf32>) outs(%3233 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1440 = tensor.extract_slice %3234[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %3235 = "tosa.reshape"(%extracted_slice_1440) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %3236 = tensor.empty() : tensor<4096x4096xf32>
    %3237 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_352 : tensor<4096x4096xf32>) outs(%3236 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3238 = "tosa.reshape"(%3235) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3239 = tensor.empty() : tensor<80x4096xf32>
    %3240 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%3238, %3237 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%3239 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %3241 = "tosa.reshape"(%3240) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3242 = "tosa.add"(%3124, %3241) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %3243 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1441 = arith.constant 2 : i32
    %3244 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3242 : tensor<1x80x4096xf32>) outs(%3243 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1441 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1442 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %3245 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%3244 : tensor<1x80x4096xf32>) outs(%cst_1442 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1443 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %3246 = "tosa.add"(%3245, %cst_1443) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %3247 = tensor.empty() : tensor<1x80x1xf32>
    %3248 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3246 : tensor<1x80x1xf32>) outs(%3247 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %3249 = tensor.empty() : tensor<1x80x4096xf32>
    %3250 = tensor.empty() : tensor<1x80x4096xf32>
    %3251 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3248 : tensor<1x80x1xf32>) outs(%3250 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3252 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3242, %3251 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3249 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %3253 = tensor.empty() : tensor<1x80x4096xf32>
    %3254 = tensor.empty() : tensor<1x80x4096xf32>
    %3255 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_40 : tensor<4096xf32>) outs(%3254 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3256 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3255, %3252 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3253 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %3257 = tensor.empty() : tensor<4096x11008xf32>
    %3258 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_354 : tensor<11008x4096xf32>) outs(%3257 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3259 = "tosa.reshape"(%3256) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3260 = tensor.empty() : tensor<80x11008xf32>
    %3261 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%3259, %3258 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%3260 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %3262 = "tosa.reshape"(%3261) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %3263 = tensor.empty() : tensor<1x80x11008xf32>
    %3264 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3262 : tensor<1x80x11008xf32>) outs(%3263 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      %5006 = math.exp %5005 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5007 = arith.addf %cst_1777, %5006 : f32
      %5008 = arith.divf %in, %5007 : f32
      linalg.yield %5008 : f32
    } -> tensor<1x80x11008xf32>
    %3265 = tensor.empty() : tensor<4096x11008xf32>
    %3266 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_356 : tensor<11008x4096xf32>) outs(%3265 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3267 = "tosa.reshape"(%3256) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3268 = tensor.empty() : tensor<80x11008xf32>
    %3269 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%3267, %3266 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%3268 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %3270 = "tosa.reshape"(%3269) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %3271 = tensor.empty() : tensor<1x80x11008xf32>
    %3272 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3264, %3270 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%3271 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x11008xf32>
    %3273 = tensor.empty() : tensor<11008x4096xf32>
    %3274 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_358 : tensor<4096x11008xf32>) outs(%3273 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %3275 = "tosa.reshape"(%3272) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %3276 = tensor.empty() : tensor<80x4096xf32>
    %3277 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%3275, %3274 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%3276 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %3278 = "tosa.reshape"(%3277) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3279 = "tosa.add"(%3242, %3278) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %3280 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1444 = arith.constant 2 : i32
    %3281 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3279 : tensor<1x80x4096xf32>) outs(%3280 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1444 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1445 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %3282 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%3281 : tensor<1x80x4096xf32>) outs(%cst_1445 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1446 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %3283 = "tosa.add"(%3282, %cst_1446) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %3284 = tensor.empty() : tensor<1x80x1xf32>
    %3285 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3283 : tensor<1x80x1xf32>) outs(%3284 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %3286 = tensor.empty() : tensor<1x80x4096xf32>
    %3287 = tensor.empty() : tensor<1x80x4096xf32>
    %3288 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3285 : tensor<1x80x1xf32>) outs(%3287 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3289 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3279, %3288 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3286 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %3290 = tensor.empty() : tensor<1x80x4096xf32>
    %3291 = tensor.empty() : tensor<1x80x4096xf32>
    %3292 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_41 : tensor<4096xf32>) outs(%3291 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3293 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3292, %3289 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3290 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %3294 = tensor.empty() : tensor<4096x4096xf32>
    %3295 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_360 : tensor<4096x4096xf32>) outs(%3294 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3296 = "tosa.reshape"(%3293) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3297 = tensor.empty() : tensor<80x4096xf32>
    %3298 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%3296, %3295 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%3297 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %3299 = "tosa.reshape"(%3298) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3300 = tensor.empty() : tensor<4096x4096xf32>
    %3301 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_362 : tensor<4096x4096xf32>) outs(%3300 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3302 = "tosa.reshape"(%3293) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3303 = tensor.empty() : tensor<80x4096xf32>
    %3304 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%3302, %3301 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%3303 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %3305 = "tosa.reshape"(%3304) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3306 = tensor.empty() : tensor<4096x4096xf32>
    %3307 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_364 : tensor<4096x4096xf32>) outs(%3306 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3308 = "tosa.reshape"(%3293) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3309 = tensor.empty() : tensor<80x4096xf32>
    %3310 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%3308, %3307 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%3309 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %3311 = "tosa.reshape"(%3310) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3312 = "tosa.reshape"(%3299) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3313 = tensor.empty() : tensor<1x32x80x128xf32>
    %3314 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3312 : tensor<1x80x32x128xf32>) outs(%3313 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3315 = "tosa.reshape"(%3305) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3316 = tensor.empty() : tensor<1x32x80x128xf32>
    %3317 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3315 : tensor<1x80x32x128xf32>) outs(%3316 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3318 = "tosa.reshape"(%3311) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3319 = tensor.empty() : tensor<1x32x80x128xf32>
    %3320 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3318 : tensor<1x80x32x128xf32>) outs(%3319 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1447 = tensor.extract_slice %expanded_600[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1448 = tensor.extract_slice %extracted_slice_1447[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1449 = tensor.extract_slice %extracted_slice_1448[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1450 = tensor.extract_slice %expanded_602[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1451 = tensor.extract_slice %extracted_slice_1450[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1452 = tensor.extract_slice %extracted_slice_1451[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %3321 = tensor.empty() : tensor<1x80x128xf32>
    %3322 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1449 : tensor<1x1x80x128xf32>) outs(%3321 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %3323 = tensor.empty() : tensor<80x128xf32>
    %3324 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%3322 : tensor<1x80x128xf32>) outs(%3323 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %3325 = tensor.empty() : tensor<1x80x128xf32>
    %3326 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1452 : tensor<1x1x80x128xf32>) outs(%3325 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %3327 = tensor.empty() : tensor<80x128xf32>
    %3328 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%3326 : tensor<1x80x128xf32>) outs(%3327 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %3329 = tensor.empty() : tensor<1x80x128xf32>
    %3330 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%3329 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %3324[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %3331 = "tosa.reshape"(%3330) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %3332 = tensor.empty() : tensor<1x80x128xf32>
    %3333 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%3332 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %3328[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %3334 = "tosa.reshape"(%3333) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %3335 = tensor.empty() : tensor<1x32x80x128xf32>
    %3336 = tensor.empty() : tensor<1x32x80x128xf32>
    %3337 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3331 : tensor<1x1x80x128xf32>) outs(%3336 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3338 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3314, %3337 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3335 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1453 = tensor.extract_slice %3314[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1454 = tensor.extract_slice %3314[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %3339 = tensor.empty() : tensor<1x32x80x64xf32>
    %3340 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1454 : tensor<1x32x80x64xf32>) outs(%3339 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %3341 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1455 = tensor.insert_slice %3340 into %3341[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1456 = tensor.insert_slice %extracted_slice_1453 into %inserted_slice_1455[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %3342 = tensor.empty() : tensor<1x32x80x128xf32>
    %3343 = tensor.empty() : tensor<1x32x80x128xf32>
    %3344 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3334 : tensor<1x1x80x128xf32>) outs(%3343 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3345 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1456, %3344 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3342 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %3346 = "tosa.add"(%3338, %3345) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3347 = tensor.empty() : tensor<1x32x80x128xf32>
    %3348 = tensor.empty() : tensor<1x32x80x128xf32>
    %3349 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3331 : tensor<1x1x80x128xf32>) outs(%3348 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3350 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3317, %3349 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3347 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1457 = tensor.extract_slice %3317[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1458 = tensor.extract_slice %3317[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %3351 = tensor.empty() : tensor<1x32x80x64xf32>
    %3352 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1458 : tensor<1x32x80x64xf32>) outs(%3351 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %3353 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1459 = tensor.insert_slice %3352 into %3353[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1460 = tensor.insert_slice %extracted_slice_1457 into %inserted_slice_1459[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %3354 = tensor.empty() : tensor<1x32x80x128xf32>
    %3355 = tensor.empty() : tensor<1x32x80x128xf32>
    %3356 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3334 : tensor<1x1x80x128xf32>) outs(%3355 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3357 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1460, %3356 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3354 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %3358 = "tosa.add"(%3350, %3357) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3359 = tensor.empty() : tensor<1x32x128x80xf32>
    %3360 = linalg.generic {indexing_maps = [#map15, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3358 : tensor<1x32x80x128xf32>) outs(%3359 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %3361 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1461 = tensor.extract_slice %3346[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1462 = tensor.insert_slice %extracted_slice_1461 into %3361[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %3362 = "tosa.reshape"(%inserted_slice_1462) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %3363 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1463 = tensor.extract_slice %3360[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1464 = tensor.insert_slice %extracted_slice_1463 into %3363[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %3364 = "tosa.reshape"(%inserted_slice_1464) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %3365 = tensor.empty() : tensor<32x80x80xf32>
    %3366 = linalg.batch_matmul ins(%3362, %3364 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%3365 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %3367 = "tosa.reshape"(%3366) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1465 = arith.constant 11.3137083 : f32
    %3368 = tensor.empty() : tensor<1x32x80x80xf32>
    %3369 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3367 : tensor<1x32x80x80xf32>) outs(%3368 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.divf %in, %cst_1465 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %3370 = "tosa.add"(%3369, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %3371 = tensor.empty() : tensor<1x32x80x1xf32>
    %3372 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3371 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %3373 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3370 : tensor<1x32x80x80xf32>) outs(%3371 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.maxf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %3374 = tensor.empty() : tensor<1x32x80x80xf32>
    %3375 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3370, %3373 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%3374 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.subf %in, %in_1777 : f32
      %5006 = math.exp %5005 : f32
      linalg.yield %5006 : f32
    } -> tensor<1x32x80x80xf32>
    %3376 = tensor.empty() : tensor<1x32x80x1xf32>
    %3377 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3376 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %3378 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3375 : tensor<1x32x80x80xf32>) outs(%3377 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.addf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %3379 = tensor.empty() : tensor<1x32x80x80xf32>
    %3380 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3375, %3378 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%3379 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.divf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %3381 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1466 = tensor.extract_slice %3380[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1467 = tensor.insert_slice %extracted_slice_1466 into %3381[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %3382 = "tosa.reshape"(%inserted_slice_1467) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %3383 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1468 = tensor.extract_slice %3320[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1469 = tensor.insert_slice %extracted_slice_1468 into %3383[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %3384 = "tosa.reshape"(%inserted_slice_1469) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %3385 = tensor.empty() : tensor<32x80x128xf32>
    %3386 = linalg.batch_matmul ins(%3382, %3384 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%3385 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %3387 = "tosa.reshape"(%3386) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3388 = tensor.empty() : tensor<1x80x32x128xf32>
    %3389 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3387 : tensor<1x32x80x128xf32>) outs(%3388 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1470 = tensor.extract_slice %3389[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %3390 = "tosa.reshape"(%extracted_slice_1470) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %3391 = tensor.empty() : tensor<4096x4096xf32>
    %3392 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_366 : tensor<4096x4096xf32>) outs(%3391 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3393 = "tosa.reshape"(%3390) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3394 = tensor.empty() : tensor<80x4096xf32>
    %3395 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%3393, %3392 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%3394 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %3396 = "tosa.reshape"(%3395) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3397 = "tosa.add"(%3279, %3396) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %3398 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1471 = arith.constant 2 : i32
    %3399 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3397 : tensor<1x80x4096xf32>) outs(%3398 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1471 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1472 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %3400 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%3399 : tensor<1x80x4096xf32>) outs(%cst_1472 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1473 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %3401 = "tosa.add"(%3400, %cst_1473) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %3402 = tensor.empty() : tensor<1x80x1xf32>
    %3403 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3401 : tensor<1x80x1xf32>) outs(%3402 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %3404 = tensor.empty() : tensor<1x80x4096xf32>
    %3405 = tensor.empty() : tensor<1x80x4096xf32>
    %3406 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3403 : tensor<1x80x1xf32>) outs(%3405 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3407 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3397, %3406 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3404 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %3408 = tensor.empty() : tensor<1x80x4096xf32>
    %3409 = tensor.empty() : tensor<1x80x4096xf32>
    %3410 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_42 : tensor<4096xf32>) outs(%3409 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3411 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3410, %3407 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3408 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %3412 = tensor.empty() : tensor<4096x11008xf32>
    %3413 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_368 : tensor<11008x4096xf32>) outs(%3412 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3414 = "tosa.reshape"(%3411) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3415 = tensor.empty() : tensor<80x11008xf32>
    %3416 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%3414, %3413 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%3415 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %3417 = "tosa.reshape"(%3416) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %3418 = tensor.empty() : tensor<1x80x11008xf32>
    %3419 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3417 : tensor<1x80x11008xf32>) outs(%3418 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      %5006 = math.exp %5005 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5007 = arith.addf %cst_1777, %5006 : f32
      %5008 = arith.divf %in, %5007 : f32
      linalg.yield %5008 : f32
    } -> tensor<1x80x11008xf32>
    %3420 = tensor.empty() : tensor<4096x11008xf32>
    %3421 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_370 : tensor<11008x4096xf32>) outs(%3420 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3422 = "tosa.reshape"(%3411) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3423 = tensor.empty() : tensor<80x11008xf32>
    %3424 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%3422, %3421 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%3423 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %3425 = "tosa.reshape"(%3424) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %3426 = tensor.empty() : tensor<1x80x11008xf32>
    %3427 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3419, %3425 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%3426 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x11008xf32>
    %3428 = tensor.empty() : tensor<11008x4096xf32>
    %3429 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_372 : tensor<4096x11008xf32>) outs(%3428 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %3430 = "tosa.reshape"(%3427) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %3431 = tensor.empty() : tensor<80x4096xf32>
    %3432 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%3430, %3429 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%3431 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %3433 = "tosa.reshape"(%3432) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3434 = "tosa.add"(%3397, %3433) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %3435 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1474 = arith.constant 2 : i32
    %3436 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3434 : tensor<1x80x4096xf32>) outs(%3435 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1474 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1475 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %3437 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%3436 : tensor<1x80x4096xf32>) outs(%cst_1475 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1476 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %3438 = "tosa.add"(%3437, %cst_1476) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %3439 = tensor.empty() : tensor<1x80x1xf32>
    %3440 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3438 : tensor<1x80x1xf32>) outs(%3439 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %3441 = tensor.empty() : tensor<1x80x4096xf32>
    %3442 = tensor.empty() : tensor<1x80x4096xf32>
    %3443 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3440 : tensor<1x80x1xf32>) outs(%3442 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3444 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3434, %3443 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3441 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %3445 = tensor.empty() : tensor<1x80x4096xf32>
    %3446 = tensor.empty() : tensor<1x80x4096xf32>
    %3447 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_43 : tensor<4096xf32>) outs(%3446 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3448 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3447, %3444 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3445 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %3449 = tensor.empty() : tensor<4096x4096xf32>
    %3450 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_374 : tensor<4096x4096xf32>) outs(%3449 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3451 = "tosa.reshape"(%3448) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3452 = tensor.empty() : tensor<80x4096xf32>
    %3453 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%3451, %3450 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%3452 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %3454 = "tosa.reshape"(%3453) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3455 = tensor.empty() : tensor<4096x4096xf32>
    %3456 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_376 : tensor<4096x4096xf32>) outs(%3455 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3457 = "tosa.reshape"(%3448) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3458 = tensor.empty() : tensor<80x4096xf32>
    %3459 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%3457, %3456 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%3458 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %3460 = "tosa.reshape"(%3459) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3461 = tensor.empty() : tensor<4096x4096xf32>
    %3462 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_378 : tensor<4096x4096xf32>) outs(%3461 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3463 = "tosa.reshape"(%3448) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3464 = tensor.empty() : tensor<80x4096xf32>
    %3465 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%3463, %3462 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%3464 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %3466 = "tosa.reshape"(%3465) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3467 = "tosa.reshape"(%3454) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3468 = tensor.empty() : tensor<1x32x80x128xf32>
    %3469 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3467 : tensor<1x80x32x128xf32>) outs(%3468 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3470 = "tosa.reshape"(%3460) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3471 = tensor.empty() : tensor<1x32x80x128xf32>
    %3472 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3470 : tensor<1x80x32x128xf32>) outs(%3471 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3473 = "tosa.reshape"(%3466) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3474 = tensor.empty() : tensor<1x32x80x128xf32>
    %3475 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3473 : tensor<1x80x32x128xf32>) outs(%3474 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1477 = tensor.extract_slice %expanded_604[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1478 = tensor.extract_slice %extracted_slice_1477[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1479 = tensor.extract_slice %extracted_slice_1478[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1480 = tensor.extract_slice %expanded_606[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1481 = tensor.extract_slice %extracted_slice_1480[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1482 = tensor.extract_slice %extracted_slice_1481[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %3476 = tensor.empty() : tensor<1x80x128xf32>
    %3477 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1479 : tensor<1x1x80x128xf32>) outs(%3476 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %3478 = tensor.empty() : tensor<80x128xf32>
    %3479 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%3477 : tensor<1x80x128xf32>) outs(%3478 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %3480 = tensor.empty() : tensor<1x80x128xf32>
    %3481 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1482 : tensor<1x1x80x128xf32>) outs(%3480 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %3482 = tensor.empty() : tensor<80x128xf32>
    %3483 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%3481 : tensor<1x80x128xf32>) outs(%3482 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %3484 = tensor.empty() : tensor<1x80x128xf32>
    %3485 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%3484 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %3479[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %3486 = "tosa.reshape"(%3485) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %3487 = tensor.empty() : tensor<1x80x128xf32>
    %3488 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%3487 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %3483[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %3489 = "tosa.reshape"(%3488) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %3490 = tensor.empty() : tensor<1x32x80x128xf32>
    %3491 = tensor.empty() : tensor<1x32x80x128xf32>
    %3492 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3486 : tensor<1x1x80x128xf32>) outs(%3491 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3493 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3469, %3492 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3490 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1483 = tensor.extract_slice %3469[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1484 = tensor.extract_slice %3469[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %3494 = tensor.empty() : tensor<1x32x80x64xf32>
    %3495 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1484 : tensor<1x32x80x64xf32>) outs(%3494 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %3496 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1485 = tensor.insert_slice %3495 into %3496[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1486 = tensor.insert_slice %extracted_slice_1483 into %inserted_slice_1485[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %3497 = tensor.empty() : tensor<1x32x80x128xf32>
    %3498 = tensor.empty() : tensor<1x32x80x128xf32>
    %3499 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3489 : tensor<1x1x80x128xf32>) outs(%3498 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3500 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1486, %3499 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3497 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %3501 = "tosa.add"(%3493, %3500) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3502 = tensor.empty() : tensor<1x32x80x128xf32>
    %3503 = tensor.empty() : tensor<1x32x80x128xf32>
    %3504 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3486 : tensor<1x1x80x128xf32>) outs(%3503 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3505 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3472, %3504 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3502 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1487 = tensor.extract_slice %3472[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1488 = tensor.extract_slice %3472[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %3506 = tensor.empty() : tensor<1x32x80x64xf32>
    %3507 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1488 : tensor<1x32x80x64xf32>) outs(%3506 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %3508 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1489 = tensor.insert_slice %3507 into %3508[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1490 = tensor.insert_slice %extracted_slice_1487 into %inserted_slice_1489[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %3509 = tensor.empty() : tensor<1x32x80x128xf32>
    %3510 = tensor.empty() : tensor<1x32x80x128xf32>
    %3511 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3489 : tensor<1x1x80x128xf32>) outs(%3510 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3512 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1490, %3511 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3509 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %3513 = "tosa.add"(%3505, %3512) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3514 = tensor.empty() : tensor<1x32x128x80xf32>
    %3515 = linalg.generic {indexing_maps = [#map15, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3513 : tensor<1x32x80x128xf32>) outs(%3514 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %3516 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1491 = tensor.extract_slice %3501[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1492 = tensor.insert_slice %extracted_slice_1491 into %3516[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %3517 = "tosa.reshape"(%inserted_slice_1492) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %3518 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1493 = tensor.extract_slice %3515[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1494 = tensor.insert_slice %extracted_slice_1493 into %3518[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %3519 = "tosa.reshape"(%inserted_slice_1494) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %3520 = tensor.empty() : tensor<32x80x80xf32>
    %3521 = linalg.batch_matmul ins(%3517, %3519 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%3520 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %3522 = "tosa.reshape"(%3521) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1495 = arith.constant 11.3137083 : f32
    %3523 = tensor.empty() : tensor<1x32x80x80xf32>
    %3524 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3522 : tensor<1x32x80x80xf32>) outs(%3523 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.divf %in, %cst_1495 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %3525 = "tosa.add"(%3524, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %3526 = tensor.empty() : tensor<1x32x80x1xf32>
    %3527 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3526 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %3528 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3525 : tensor<1x32x80x80xf32>) outs(%3526 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.maxf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %3529 = tensor.empty() : tensor<1x32x80x80xf32>
    %3530 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3525, %3528 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%3529 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.subf %in, %in_1777 : f32
      %5006 = math.exp %5005 : f32
      linalg.yield %5006 : f32
    } -> tensor<1x32x80x80xf32>
    %3531 = tensor.empty() : tensor<1x32x80x1xf32>
    %3532 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3531 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %3533 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3530 : tensor<1x32x80x80xf32>) outs(%3532 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.addf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %3534 = tensor.empty() : tensor<1x32x80x80xf32>
    %3535 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3530, %3533 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%3534 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.divf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %3536 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1496 = tensor.extract_slice %3535[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1497 = tensor.insert_slice %extracted_slice_1496 into %3536[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %3537 = "tosa.reshape"(%inserted_slice_1497) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %3538 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1498 = tensor.extract_slice %3475[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1499 = tensor.insert_slice %extracted_slice_1498 into %3538[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %3539 = "tosa.reshape"(%inserted_slice_1499) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %3540 = tensor.empty() : tensor<32x80x128xf32>
    %3541 = linalg.batch_matmul ins(%3537, %3539 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%3540 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %3542 = "tosa.reshape"(%3541) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3543 = tensor.empty() : tensor<1x80x32x128xf32>
    %3544 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3542 : tensor<1x32x80x128xf32>) outs(%3543 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1500 = tensor.extract_slice %3544[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %3545 = "tosa.reshape"(%extracted_slice_1500) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %3546 = tensor.empty() : tensor<4096x4096xf32>
    %3547 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_380 : tensor<4096x4096xf32>) outs(%3546 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3548 = "tosa.reshape"(%3545) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3549 = tensor.empty() : tensor<80x4096xf32>
    %3550 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%3548, %3547 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%3549 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %3551 = "tosa.reshape"(%3550) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3552 = "tosa.add"(%3434, %3551) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %3553 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1501 = arith.constant 2 : i32
    %3554 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3552 : tensor<1x80x4096xf32>) outs(%3553 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1501 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1502 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %3555 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%3554 : tensor<1x80x4096xf32>) outs(%cst_1502 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1503 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %3556 = "tosa.add"(%3555, %cst_1503) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %3557 = tensor.empty() : tensor<1x80x1xf32>
    %3558 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3556 : tensor<1x80x1xf32>) outs(%3557 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %3559 = tensor.empty() : tensor<1x80x4096xf32>
    %3560 = tensor.empty() : tensor<1x80x4096xf32>
    %3561 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3558 : tensor<1x80x1xf32>) outs(%3560 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3562 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3552, %3561 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3559 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %3563 = tensor.empty() : tensor<1x80x4096xf32>
    %3564 = tensor.empty() : tensor<1x80x4096xf32>
    %3565 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_44 : tensor<4096xf32>) outs(%3564 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3566 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3565, %3562 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3563 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %3567 = tensor.empty() : tensor<4096x11008xf32>
    %3568 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_382 : tensor<11008x4096xf32>) outs(%3567 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3569 = "tosa.reshape"(%3566) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3570 = tensor.empty() : tensor<80x11008xf32>
    %3571 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%3569, %3568 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%3570 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %3572 = "tosa.reshape"(%3571) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %3573 = tensor.empty() : tensor<1x80x11008xf32>
    %3574 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3572 : tensor<1x80x11008xf32>) outs(%3573 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      %5006 = math.exp %5005 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5007 = arith.addf %cst_1777, %5006 : f32
      %5008 = arith.divf %in, %5007 : f32
      linalg.yield %5008 : f32
    } -> tensor<1x80x11008xf32>
    %3575 = tensor.empty() : tensor<4096x11008xf32>
    %3576 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_384 : tensor<11008x4096xf32>) outs(%3575 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3577 = "tosa.reshape"(%3566) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3578 = tensor.empty() : tensor<80x11008xf32>
    %3579 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%3577, %3576 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%3578 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %3580 = "tosa.reshape"(%3579) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %3581 = tensor.empty() : tensor<1x80x11008xf32>
    %3582 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3574, %3580 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%3581 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x11008xf32>
    %3583 = tensor.empty() : tensor<11008x4096xf32>
    %3584 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_386 : tensor<4096x11008xf32>) outs(%3583 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %3585 = "tosa.reshape"(%3582) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %3586 = tensor.empty() : tensor<80x4096xf32>
    %3587 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%3585, %3584 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%3586 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %3588 = "tosa.reshape"(%3587) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3589 = "tosa.add"(%3552, %3588) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %3590 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1504 = arith.constant 2 : i32
    %3591 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3589 : tensor<1x80x4096xf32>) outs(%3590 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1504 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1505 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %3592 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%3591 : tensor<1x80x4096xf32>) outs(%cst_1505 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1506 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %3593 = "tosa.add"(%3592, %cst_1506) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %3594 = tensor.empty() : tensor<1x80x1xf32>
    %3595 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3593 : tensor<1x80x1xf32>) outs(%3594 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %3596 = tensor.empty() : tensor<1x80x4096xf32>
    %3597 = tensor.empty() : tensor<1x80x4096xf32>
    %3598 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3595 : tensor<1x80x1xf32>) outs(%3597 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3599 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3589, %3598 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3596 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %3600 = tensor.empty() : tensor<1x80x4096xf32>
    %3601 = tensor.empty() : tensor<1x80x4096xf32>
    %3602 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_45 : tensor<4096xf32>) outs(%3601 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3603 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3602, %3599 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3600 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %3604 = tensor.empty() : tensor<4096x4096xf32>
    %3605 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_388 : tensor<4096x4096xf32>) outs(%3604 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3606 = "tosa.reshape"(%3603) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3607 = tensor.empty() : tensor<80x4096xf32>
    %3608 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%3606, %3605 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%3607 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %3609 = "tosa.reshape"(%3608) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3610 = tensor.empty() : tensor<4096x4096xf32>
    %3611 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_390 : tensor<4096x4096xf32>) outs(%3610 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3612 = "tosa.reshape"(%3603) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3613 = tensor.empty() : tensor<80x4096xf32>
    %3614 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%3612, %3611 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%3613 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %3615 = "tosa.reshape"(%3614) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3616 = tensor.empty() : tensor<4096x4096xf32>
    %3617 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_392 : tensor<4096x4096xf32>) outs(%3616 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3618 = "tosa.reshape"(%3603) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3619 = tensor.empty() : tensor<80x4096xf32>
    %3620 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%3618, %3617 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%3619 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %3621 = "tosa.reshape"(%3620) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3622 = "tosa.reshape"(%3609) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3623 = tensor.empty() : tensor<1x32x80x128xf32>
    %3624 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3622 : tensor<1x80x32x128xf32>) outs(%3623 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3625 = "tosa.reshape"(%3615) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3626 = tensor.empty() : tensor<1x32x80x128xf32>
    %3627 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3625 : tensor<1x80x32x128xf32>) outs(%3626 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3628 = "tosa.reshape"(%3621) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3629 = tensor.empty() : tensor<1x32x80x128xf32>
    %3630 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3628 : tensor<1x80x32x128xf32>) outs(%3629 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1507 = tensor.extract_slice %expanded_608[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1508 = tensor.extract_slice %extracted_slice_1507[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1509 = tensor.extract_slice %extracted_slice_1508[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1510 = tensor.extract_slice %expanded_610[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1511 = tensor.extract_slice %extracted_slice_1510[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1512 = tensor.extract_slice %extracted_slice_1511[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %3631 = tensor.empty() : tensor<1x80x128xf32>
    %3632 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1509 : tensor<1x1x80x128xf32>) outs(%3631 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %3633 = tensor.empty() : tensor<80x128xf32>
    %3634 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%3632 : tensor<1x80x128xf32>) outs(%3633 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %3635 = tensor.empty() : tensor<1x80x128xf32>
    %3636 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1512 : tensor<1x1x80x128xf32>) outs(%3635 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %3637 = tensor.empty() : tensor<80x128xf32>
    %3638 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%3636 : tensor<1x80x128xf32>) outs(%3637 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %3639 = tensor.empty() : tensor<1x80x128xf32>
    %3640 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%3639 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %3634[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %3641 = "tosa.reshape"(%3640) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %3642 = tensor.empty() : tensor<1x80x128xf32>
    %3643 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%3642 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %3638[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %3644 = "tosa.reshape"(%3643) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %3645 = tensor.empty() : tensor<1x32x80x128xf32>
    %3646 = tensor.empty() : tensor<1x32x80x128xf32>
    %3647 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3641 : tensor<1x1x80x128xf32>) outs(%3646 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3648 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3624, %3647 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3645 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1513 = tensor.extract_slice %3624[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1514 = tensor.extract_slice %3624[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %3649 = tensor.empty() : tensor<1x32x80x64xf32>
    %3650 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1514 : tensor<1x32x80x64xf32>) outs(%3649 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %3651 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1515 = tensor.insert_slice %3650 into %3651[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1516 = tensor.insert_slice %extracted_slice_1513 into %inserted_slice_1515[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %3652 = tensor.empty() : tensor<1x32x80x128xf32>
    %3653 = tensor.empty() : tensor<1x32x80x128xf32>
    %3654 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3644 : tensor<1x1x80x128xf32>) outs(%3653 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3655 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1516, %3654 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3652 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %3656 = "tosa.add"(%3648, %3655) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3657 = tensor.empty() : tensor<1x32x80x128xf32>
    %3658 = tensor.empty() : tensor<1x32x80x128xf32>
    %3659 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3641 : tensor<1x1x80x128xf32>) outs(%3658 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3660 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3627, %3659 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3657 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1517 = tensor.extract_slice %3627[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1518 = tensor.extract_slice %3627[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %3661 = tensor.empty() : tensor<1x32x80x64xf32>
    %3662 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1518 : tensor<1x32x80x64xf32>) outs(%3661 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %3663 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1519 = tensor.insert_slice %3662 into %3663[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1520 = tensor.insert_slice %extracted_slice_1517 into %inserted_slice_1519[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %3664 = tensor.empty() : tensor<1x32x80x128xf32>
    %3665 = tensor.empty() : tensor<1x32x80x128xf32>
    %3666 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3644 : tensor<1x1x80x128xf32>) outs(%3665 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3667 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1520, %3666 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3664 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %3668 = "tosa.add"(%3660, %3667) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3669 = tensor.empty() : tensor<1x32x128x80xf32>
    %3670 = linalg.generic {indexing_maps = [#map15, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3668 : tensor<1x32x80x128xf32>) outs(%3669 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %3671 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1521 = tensor.extract_slice %3656[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1522 = tensor.insert_slice %extracted_slice_1521 into %3671[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %3672 = "tosa.reshape"(%inserted_slice_1522) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %3673 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1523 = tensor.extract_slice %3670[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1524 = tensor.insert_slice %extracted_slice_1523 into %3673[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %3674 = "tosa.reshape"(%inserted_slice_1524) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %3675 = tensor.empty() : tensor<32x80x80xf32>
    %3676 = linalg.batch_matmul ins(%3672, %3674 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%3675 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %3677 = "tosa.reshape"(%3676) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1525 = arith.constant 11.3137083 : f32
    %3678 = tensor.empty() : tensor<1x32x80x80xf32>
    %3679 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3677 : tensor<1x32x80x80xf32>) outs(%3678 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.divf %in, %cst_1525 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %3680 = "tosa.add"(%3679, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %3681 = tensor.empty() : tensor<1x32x80x1xf32>
    %3682 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3681 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %3683 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3680 : tensor<1x32x80x80xf32>) outs(%3681 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.maxf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %3684 = tensor.empty() : tensor<1x32x80x80xf32>
    %3685 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3680, %3683 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%3684 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.subf %in, %in_1777 : f32
      %5006 = math.exp %5005 : f32
      linalg.yield %5006 : f32
    } -> tensor<1x32x80x80xf32>
    %3686 = tensor.empty() : tensor<1x32x80x1xf32>
    %3687 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3686 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %3688 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3685 : tensor<1x32x80x80xf32>) outs(%3687 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.addf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %3689 = tensor.empty() : tensor<1x32x80x80xf32>
    %3690 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3685, %3688 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%3689 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.divf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %3691 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1526 = tensor.extract_slice %3690[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1527 = tensor.insert_slice %extracted_slice_1526 into %3691[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %3692 = "tosa.reshape"(%inserted_slice_1527) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %3693 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1528 = tensor.extract_slice %3630[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1529 = tensor.insert_slice %extracted_slice_1528 into %3693[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %3694 = "tosa.reshape"(%inserted_slice_1529) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %3695 = tensor.empty() : tensor<32x80x128xf32>
    %3696 = linalg.batch_matmul ins(%3692, %3694 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%3695 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %3697 = "tosa.reshape"(%3696) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3698 = tensor.empty() : tensor<1x80x32x128xf32>
    %3699 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3697 : tensor<1x32x80x128xf32>) outs(%3698 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1530 = tensor.extract_slice %3699[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %3700 = "tosa.reshape"(%extracted_slice_1530) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %3701 = tensor.empty() : tensor<4096x4096xf32>
    %3702 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_394 : tensor<4096x4096xf32>) outs(%3701 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3703 = "tosa.reshape"(%3700) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3704 = tensor.empty() : tensor<80x4096xf32>
    %3705 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%3703, %3702 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%3704 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %3706 = "tosa.reshape"(%3705) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3707 = "tosa.add"(%3589, %3706) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %3708 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1531 = arith.constant 2 : i32
    %3709 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3707 : tensor<1x80x4096xf32>) outs(%3708 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1531 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1532 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %3710 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%3709 : tensor<1x80x4096xf32>) outs(%cst_1532 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1533 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %3711 = "tosa.add"(%3710, %cst_1533) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %3712 = tensor.empty() : tensor<1x80x1xf32>
    %3713 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3711 : tensor<1x80x1xf32>) outs(%3712 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %3714 = tensor.empty() : tensor<1x80x4096xf32>
    %3715 = tensor.empty() : tensor<1x80x4096xf32>
    %3716 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3713 : tensor<1x80x1xf32>) outs(%3715 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3717 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3707, %3716 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3714 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %3718 = tensor.empty() : tensor<1x80x4096xf32>
    %3719 = tensor.empty() : tensor<1x80x4096xf32>
    %3720 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_46 : tensor<4096xf32>) outs(%3719 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3721 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3720, %3717 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3718 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %3722 = tensor.empty() : tensor<4096x11008xf32>
    %3723 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_396 : tensor<11008x4096xf32>) outs(%3722 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3724 = "tosa.reshape"(%3721) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3725 = tensor.empty() : tensor<80x11008xf32>
    %3726 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%3724, %3723 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%3725 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %3727 = "tosa.reshape"(%3726) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %3728 = tensor.empty() : tensor<1x80x11008xf32>
    %3729 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3727 : tensor<1x80x11008xf32>) outs(%3728 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      %5006 = math.exp %5005 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5007 = arith.addf %cst_1777, %5006 : f32
      %5008 = arith.divf %in, %5007 : f32
      linalg.yield %5008 : f32
    } -> tensor<1x80x11008xf32>
    %3730 = tensor.empty() : tensor<4096x11008xf32>
    %3731 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_398 : tensor<11008x4096xf32>) outs(%3730 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3732 = "tosa.reshape"(%3721) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3733 = tensor.empty() : tensor<80x11008xf32>
    %3734 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%3732, %3731 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%3733 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %3735 = "tosa.reshape"(%3734) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %3736 = tensor.empty() : tensor<1x80x11008xf32>
    %3737 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3729, %3735 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%3736 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x11008xf32>
    %3738 = tensor.empty() : tensor<11008x4096xf32>
    %3739 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_400 : tensor<4096x11008xf32>) outs(%3738 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %3740 = "tosa.reshape"(%3737) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %3741 = tensor.empty() : tensor<80x4096xf32>
    %3742 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%3740, %3739 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%3741 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %3743 = "tosa.reshape"(%3742) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3744 = "tosa.add"(%3707, %3743) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %3745 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1534 = arith.constant 2 : i32
    %3746 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3744 : tensor<1x80x4096xf32>) outs(%3745 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1534 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1535 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %3747 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%3746 : tensor<1x80x4096xf32>) outs(%cst_1535 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1536 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %3748 = "tosa.add"(%3747, %cst_1536) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %3749 = tensor.empty() : tensor<1x80x1xf32>
    %3750 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3748 : tensor<1x80x1xf32>) outs(%3749 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %3751 = tensor.empty() : tensor<1x80x4096xf32>
    %3752 = tensor.empty() : tensor<1x80x4096xf32>
    %3753 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3750 : tensor<1x80x1xf32>) outs(%3752 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3754 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3744, %3753 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3751 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %3755 = tensor.empty() : tensor<1x80x4096xf32>
    %3756 = tensor.empty() : tensor<1x80x4096xf32>
    %3757 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_47 : tensor<4096xf32>) outs(%3756 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3758 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3757, %3754 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3755 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %3759 = tensor.empty() : tensor<4096x4096xf32>
    %3760 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_402 : tensor<4096x4096xf32>) outs(%3759 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3761 = "tosa.reshape"(%3758) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3762 = tensor.empty() : tensor<80x4096xf32>
    %3763 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%3761, %3760 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%3762 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %3764 = "tosa.reshape"(%3763) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3765 = tensor.empty() : tensor<4096x4096xf32>
    %3766 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_404 : tensor<4096x4096xf32>) outs(%3765 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3767 = "tosa.reshape"(%3758) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3768 = tensor.empty() : tensor<80x4096xf32>
    %3769 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%3767, %3766 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%3768 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %3770 = "tosa.reshape"(%3769) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3771 = tensor.empty() : tensor<4096x4096xf32>
    %3772 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_406 : tensor<4096x4096xf32>) outs(%3771 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3773 = "tosa.reshape"(%3758) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3774 = tensor.empty() : tensor<80x4096xf32>
    %3775 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%3773, %3772 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%3774 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %3776 = "tosa.reshape"(%3775) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3777 = "tosa.reshape"(%3764) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3778 = tensor.empty() : tensor<1x32x80x128xf32>
    %3779 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3777 : tensor<1x80x32x128xf32>) outs(%3778 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3780 = "tosa.reshape"(%3770) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3781 = tensor.empty() : tensor<1x32x80x128xf32>
    %3782 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3780 : tensor<1x80x32x128xf32>) outs(%3781 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3783 = "tosa.reshape"(%3776) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3784 = tensor.empty() : tensor<1x32x80x128xf32>
    %3785 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3783 : tensor<1x80x32x128xf32>) outs(%3784 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1537 = tensor.extract_slice %expanded_612[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1538 = tensor.extract_slice %extracted_slice_1537[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1539 = tensor.extract_slice %extracted_slice_1538[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1540 = tensor.extract_slice %expanded_614[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1541 = tensor.extract_slice %extracted_slice_1540[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1542 = tensor.extract_slice %extracted_slice_1541[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %3786 = tensor.empty() : tensor<1x80x128xf32>
    %3787 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1539 : tensor<1x1x80x128xf32>) outs(%3786 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %3788 = tensor.empty() : tensor<80x128xf32>
    %3789 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%3787 : tensor<1x80x128xf32>) outs(%3788 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %3790 = tensor.empty() : tensor<1x80x128xf32>
    %3791 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1542 : tensor<1x1x80x128xf32>) outs(%3790 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %3792 = tensor.empty() : tensor<80x128xf32>
    %3793 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%3791 : tensor<1x80x128xf32>) outs(%3792 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %3794 = tensor.empty() : tensor<1x80x128xf32>
    %3795 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%3794 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %3789[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %3796 = "tosa.reshape"(%3795) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %3797 = tensor.empty() : tensor<1x80x128xf32>
    %3798 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%3797 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %3793[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %3799 = "tosa.reshape"(%3798) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %3800 = tensor.empty() : tensor<1x32x80x128xf32>
    %3801 = tensor.empty() : tensor<1x32x80x128xf32>
    %3802 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3796 : tensor<1x1x80x128xf32>) outs(%3801 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3803 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3779, %3802 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3800 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1543 = tensor.extract_slice %3779[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1544 = tensor.extract_slice %3779[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %3804 = tensor.empty() : tensor<1x32x80x64xf32>
    %3805 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1544 : tensor<1x32x80x64xf32>) outs(%3804 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %3806 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1545 = tensor.insert_slice %3805 into %3806[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1546 = tensor.insert_slice %extracted_slice_1543 into %inserted_slice_1545[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %3807 = tensor.empty() : tensor<1x32x80x128xf32>
    %3808 = tensor.empty() : tensor<1x32x80x128xf32>
    %3809 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3799 : tensor<1x1x80x128xf32>) outs(%3808 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3810 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1546, %3809 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3807 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %3811 = "tosa.add"(%3803, %3810) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3812 = tensor.empty() : tensor<1x32x80x128xf32>
    %3813 = tensor.empty() : tensor<1x32x80x128xf32>
    %3814 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3796 : tensor<1x1x80x128xf32>) outs(%3813 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3815 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3782, %3814 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3812 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1547 = tensor.extract_slice %3782[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1548 = tensor.extract_slice %3782[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %3816 = tensor.empty() : tensor<1x32x80x64xf32>
    %3817 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1548 : tensor<1x32x80x64xf32>) outs(%3816 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %3818 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1549 = tensor.insert_slice %3817 into %3818[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1550 = tensor.insert_slice %extracted_slice_1547 into %inserted_slice_1549[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %3819 = tensor.empty() : tensor<1x32x80x128xf32>
    %3820 = tensor.empty() : tensor<1x32x80x128xf32>
    %3821 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3799 : tensor<1x1x80x128xf32>) outs(%3820 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3822 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1550, %3821 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3819 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %3823 = "tosa.add"(%3815, %3822) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3824 = tensor.empty() : tensor<1x32x128x80xf32>
    %3825 = linalg.generic {indexing_maps = [#map15, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3823 : tensor<1x32x80x128xf32>) outs(%3824 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %3826 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1551 = tensor.extract_slice %3811[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1552 = tensor.insert_slice %extracted_slice_1551 into %3826[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %3827 = "tosa.reshape"(%inserted_slice_1552) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %3828 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1553 = tensor.extract_slice %3825[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1554 = tensor.insert_slice %extracted_slice_1553 into %3828[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %3829 = "tosa.reshape"(%inserted_slice_1554) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %3830 = tensor.empty() : tensor<32x80x80xf32>
    %3831 = linalg.batch_matmul ins(%3827, %3829 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%3830 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %3832 = "tosa.reshape"(%3831) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1555 = arith.constant 11.3137083 : f32
    %3833 = tensor.empty() : tensor<1x32x80x80xf32>
    %3834 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3832 : tensor<1x32x80x80xf32>) outs(%3833 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.divf %in, %cst_1555 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %3835 = "tosa.add"(%3834, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %3836 = tensor.empty() : tensor<1x32x80x1xf32>
    %3837 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3836 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %3838 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3835 : tensor<1x32x80x80xf32>) outs(%3836 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.maxf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %3839 = tensor.empty() : tensor<1x32x80x80xf32>
    %3840 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3835, %3838 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%3839 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.subf %in, %in_1777 : f32
      %5006 = math.exp %5005 : f32
      linalg.yield %5006 : f32
    } -> tensor<1x32x80x80xf32>
    %3841 = tensor.empty() : tensor<1x32x80x1xf32>
    %3842 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3841 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %3843 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3840 : tensor<1x32x80x80xf32>) outs(%3842 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.addf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %3844 = tensor.empty() : tensor<1x32x80x80xf32>
    %3845 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3840, %3843 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%3844 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.divf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %3846 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1556 = tensor.extract_slice %3845[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1557 = tensor.insert_slice %extracted_slice_1556 into %3846[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %3847 = "tosa.reshape"(%inserted_slice_1557) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %3848 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1558 = tensor.extract_slice %3785[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1559 = tensor.insert_slice %extracted_slice_1558 into %3848[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %3849 = "tosa.reshape"(%inserted_slice_1559) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %3850 = tensor.empty() : tensor<32x80x128xf32>
    %3851 = linalg.batch_matmul ins(%3847, %3849 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%3850 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %3852 = "tosa.reshape"(%3851) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3853 = tensor.empty() : tensor<1x80x32x128xf32>
    %3854 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3852 : tensor<1x32x80x128xf32>) outs(%3853 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1560 = tensor.extract_slice %3854[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %3855 = "tosa.reshape"(%extracted_slice_1560) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %3856 = tensor.empty() : tensor<4096x4096xf32>
    %3857 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_408 : tensor<4096x4096xf32>) outs(%3856 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3858 = "tosa.reshape"(%3855) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3859 = tensor.empty() : tensor<80x4096xf32>
    %3860 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%3858, %3857 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%3859 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %3861 = "tosa.reshape"(%3860) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3862 = "tosa.add"(%3744, %3861) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %3863 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1561 = arith.constant 2 : i32
    %3864 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3862 : tensor<1x80x4096xf32>) outs(%3863 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1561 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1562 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %3865 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%3864 : tensor<1x80x4096xf32>) outs(%cst_1562 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1563 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %3866 = "tosa.add"(%3865, %cst_1563) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %3867 = tensor.empty() : tensor<1x80x1xf32>
    %3868 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3866 : tensor<1x80x1xf32>) outs(%3867 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %3869 = tensor.empty() : tensor<1x80x4096xf32>
    %3870 = tensor.empty() : tensor<1x80x4096xf32>
    %3871 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3868 : tensor<1x80x1xf32>) outs(%3870 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3872 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3862, %3871 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3869 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %3873 = tensor.empty() : tensor<1x80x4096xf32>
    %3874 = tensor.empty() : tensor<1x80x4096xf32>
    %3875 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_48 : tensor<4096xf32>) outs(%3874 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3876 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3875, %3872 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3873 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %3877 = tensor.empty() : tensor<4096x11008xf32>
    %3878 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_410 : tensor<11008x4096xf32>) outs(%3877 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3879 = "tosa.reshape"(%3876) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3880 = tensor.empty() : tensor<80x11008xf32>
    %3881 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%3879, %3878 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%3880 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %3882 = "tosa.reshape"(%3881) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %3883 = tensor.empty() : tensor<1x80x11008xf32>
    %3884 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3882 : tensor<1x80x11008xf32>) outs(%3883 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      %5006 = math.exp %5005 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5007 = arith.addf %cst_1777, %5006 : f32
      %5008 = arith.divf %in, %5007 : f32
      linalg.yield %5008 : f32
    } -> tensor<1x80x11008xf32>
    %3885 = tensor.empty() : tensor<4096x11008xf32>
    %3886 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_412 : tensor<11008x4096xf32>) outs(%3885 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3887 = "tosa.reshape"(%3876) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3888 = tensor.empty() : tensor<80x11008xf32>
    %3889 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%3887, %3886 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%3888 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %3890 = "tosa.reshape"(%3889) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %3891 = tensor.empty() : tensor<1x80x11008xf32>
    %3892 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3884, %3890 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%3891 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x11008xf32>
    %3893 = tensor.empty() : tensor<11008x4096xf32>
    %3894 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_414 : tensor<4096x11008xf32>) outs(%3893 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %3895 = "tosa.reshape"(%3892) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %3896 = tensor.empty() : tensor<80x4096xf32>
    %3897 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%3895, %3894 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%3896 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %3898 = "tosa.reshape"(%3897) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3899 = "tosa.add"(%3862, %3898) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %3900 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1564 = arith.constant 2 : i32
    %3901 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3899 : tensor<1x80x4096xf32>) outs(%3900 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1564 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1565 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %3902 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%3901 : tensor<1x80x4096xf32>) outs(%cst_1565 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1566 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %3903 = "tosa.add"(%3902, %cst_1566) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %3904 = tensor.empty() : tensor<1x80x1xf32>
    %3905 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3903 : tensor<1x80x1xf32>) outs(%3904 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %3906 = tensor.empty() : tensor<1x80x4096xf32>
    %3907 = tensor.empty() : tensor<1x80x4096xf32>
    %3908 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3905 : tensor<1x80x1xf32>) outs(%3907 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3909 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3899, %3908 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3906 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %3910 = tensor.empty() : tensor<1x80x4096xf32>
    %3911 = tensor.empty() : tensor<1x80x4096xf32>
    %3912 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_49 : tensor<4096xf32>) outs(%3911 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3913 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3912, %3909 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3910 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %3914 = tensor.empty() : tensor<4096x4096xf32>
    %3915 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_416 : tensor<4096x4096xf32>) outs(%3914 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3916 = "tosa.reshape"(%3913) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3917 = tensor.empty() : tensor<80x4096xf32>
    %3918 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%3916, %3915 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%3917 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %3919 = "tosa.reshape"(%3918) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3920 = tensor.empty() : tensor<4096x4096xf32>
    %3921 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_418 : tensor<4096x4096xf32>) outs(%3920 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3922 = "tosa.reshape"(%3913) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3923 = tensor.empty() : tensor<80x4096xf32>
    %3924 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%3922, %3921 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%3923 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %3925 = "tosa.reshape"(%3924) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3926 = tensor.empty() : tensor<4096x4096xf32>
    %3927 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_420 : tensor<4096x4096xf32>) outs(%3926 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3928 = "tosa.reshape"(%3913) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %3929 = tensor.empty() : tensor<80x4096xf32>
    %3930 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%3928, %3927 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%3929 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %3931 = "tosa.reshape"(%3930) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3932 = "tosa.reshape"(%3919) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3933 = tensor.empty() : tensor<1x32x80x128xf32>
    %3934 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3932 : tensor<1x80x32x128xf32>) outs(%3933 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3935 = "tosa.reshape"(%3925) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3936 = tensor.empty() : tensor<1x32x80x128xf32>
    %3937 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3935 : tensor<1x80x32x128xf32>) outs(%3936 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3938 = "tosa.reshape"(%3931) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3939 = tensor.empty() : tensor<1x32x80x128xf32>
    %3940 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3938 : tensor<1x80x32x128xf32>) outs(%3939 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1567 = tensor.extract_slice %expanded_616[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1568 = tensor.extract_slice %extracted_slice_1567[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1569 = tensor.extract_slice %extracted_slice_1568[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1570 = tensor.extract_slice %expanded_618[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1571 = tensor.extract_slice %extracted_slice_1570[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1572 = tensor.extract_slice %extracted_slice_1571[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %3941 = tensor.empty() : tensor<1x80x128xf32>
    %3942 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1569 : tensor<1x1x80x128xf32>) outs(%3941 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %3943 = tensor.empty() : tensor<80x128xf32>
    %3944 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%3942 : tensor<1x80x128xf32>) outs(%3943 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %3945 = tensor.empty() : tensor<1x80x128xf32>
    %3946 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1572 : tensor<1x1x80x128xf32>) outs(%3945 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %3947 = tensor.empty() : tensor<80x128xf32>
    %3948 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%3946 : tensor<1x80x128xf32>) outs(%3947 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %3949 = tensor.empty() : tensor<1x80x128xf32>
    %3950 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%3949 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %3944[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %3951 = "tosa.reshape"(%3950) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %3952 = tensor.empty() : tensor<1x80x128xf32>
    %3953 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%3952 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %3948[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %3954 = "tosa.reshape"(%3953) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %3955 = tensor.empty() : tensor<1x32x80x128xf32>
    %3956 = tensor.empty() : tensor<1x32x80x128xf32>
    %3957 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3951 : tensor<1x1x80x128xf32>) outs(%3956 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3958 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3934, %3957 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3955 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1573 = tensor.extract_slice %3934[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1574 = tensor.extract_slice %3934[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %3959 = tensor.empty() : tensor<1x32x80x64xf32>
    %3960 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1574 : tensor<1x32x80x64xf32>) outs(%3959 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %3961 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1575 = tensor.insert_slice %3960 into %3961[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1576 = tensor.insert_slice %extracted_slice_1573 into %inserted_slice_1575[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %3962 = tensor.empty() : tensor<1x32x80x128xf32>
    %3963 = tensor.empty() : tensor<1x32x80x128xf32>
    %3964 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3954 : tensor<1x1x80x128xf32>) outs(%3963 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3965 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1576, %3964 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3962 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %3966 = "tosa.add"(%3958, %3965) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3967 = tensor.empty() : tensor<1x32x80x128xf32>
    %3968 = tensor.empty() : tensor<1x32x80x128xf32>
    %3969 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3951 : tensor<1x1x80x128xf32>) outs(%3968 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3970 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3937, %3969 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3967 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1577 = tensor.extract_slice %3937[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1578 = tensor.extract_slice %3937[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %3971 = tensor.empty() : tensor<1x32x80x64xf32>
    %3972 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1578 : tensor<1x32x80x64xf32>) outs(%3971 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %3973 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1579 = tensor.insert_slice %3972 into %3973[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1580 = tensor.insert_slice %extracted_slice_1577 into %inserted_slice_1579[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %3974 = tensor.empty() : tensor<1x32x80x128xf32>
    %3975 = tensor.empty() : tensor<1x32x80x128xf32>
    %3976 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3954 : tensor<1x1x80x128xf32>) outs(%3975 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3977 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1580, %3976 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3974 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %3978 = "tosa.add"(%3970, %3977) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3979 = tensor.empty() : tensor<1x32x128x80xf32>
    %3980 = linalg.generic {indexing_maps = [#map15, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3978 : tensor<1x32x80x128xf32>) outs(%3979 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %3981 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1581 = tensor.extract_slice %3966[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1582 = tensor.insert_slice %extracted_slice_1581 into %3981[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %3982 = "tosa.reshape"(%inserted_slice_1582) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %3983 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1583 = tensor.extract_slice %3980[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1584 = tensor.insert_slice %extracted_slice_1583 into %3983[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %3984 = "tosa.reshape"(%inserted_slice_1584) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %3985 = tensor.empty() : tensor<32x80x80xf32>
    %3986 = linalg.batch_matmul ins(%3982, %3984 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%3985 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %3987 = "tosa.reshape"(%3986) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1585 = arith.constant 11.3137083 : f32
    %3988 = tensor.empty() : tensor<1x32x80x80xf32>
    %3989 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3987 : tensor<1x32x80x80xf32>) outs(%3988 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.divf %in, %cst_1585 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %3990 = "tosa.add"(%3989, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %3991 = tensor.empty() : tensor<1x32x80x1xf32>
    %3992 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3991 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %3993 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3990 : tensor<1x32x80x80xf32>) outs(%3991 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.maxf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %3994 = tensor.empty() : tensor<1x32x80x80xf32>
    %3995 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3990, %3993 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%3994 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.subf %in, %in_1777 : f32
      %5006 = math.exp %5005 : f32
      linalg.yield %5006 : f32
    } -> tensor<1x32x80x80xf32>
    %3996 = tensor.empty() : tensor<1x32x80x1xf32>
    %3997 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3996 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %3998 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3995 : tensor<1x32x80x80xf32>) outs(%3997 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.addf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %3999 = tensor.empty() : tensor<1x32x80x80xf32>
    %4000 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3995, %3998 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%3999 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.divf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %4001 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1586 = tensor.extract_slice %4000[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1587 = tensor.insert_slice %extracted_slice_1586 into %4001[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %4002 = "tosa.reshape"(%inserted_slice_1587) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %4003 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1588 = tensor.extract_slice %3940[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1589 = tensor.insert_slice %extracted_slice_1588 into %4003[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %4004 = "tosa.reshape"(%inserted_slice_1589) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %4005 = tensor.empty() : tensor<32x80x128xf32>
    %4006 = linalg.batch_matmul ins(%4002, %4004 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%4005 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %4007 = "tosa.reshape"(%4006) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4008 = tensor.empty() : tensor<1x80x32x128xf32>
    %4009 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4007 : tensor<1x32x80x128xf32>) outs(%4008 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1590 = tensor.extract_slice %4009[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %4010 = "tosa.reshape"(%extracted_slice_1590) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %4011 = tensor.empty() : tensor<4096x4096xf32>
    %4012 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_422 : tensor<4096x4096xf32>) outs(%4011 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4013 = "tosa.reshape"(%4010) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4014 = tensor.empty() : tensor<80x4096xf32>
    %4015 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%4013, %4012 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%4014 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %4016 = "tosa.reshape"(%4015) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4017 = "tosa.add"(%3899, %4016) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %4018 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1591 = arith.constant 2 : i32
    %4019 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4017 : tensor<1x80x4096xf32>) outs(%4018 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1591 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1592 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %4020 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4019 : tensor<1x80x4096xf32>) outs(%cst_1592 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1593 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4021 = "tosa.add"(%4020, %cst_1593) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %4022 = tensor.empty() : tensor<1x80x1xf32>
    %4023 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4021 : tensor<1x80x1xf32>) outs(%4022 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %4024 = tensor.empty() : tensor<1x80x4096xf32>
    %4025 = tensor.empty() : tensor<1x80x4096xf32>
    %4026 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4023 : tensor<1x80x1xf32>) outs(%4025 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4027 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4017, %4026 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4024 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %4028 = tensor.empty() : tensor<1x80x4096xf32>
    %4029 = tensor.empty() : tensor<1x80x4096xf32>
    %4030 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_50 : tensor<4096xf32>) outs(%4029 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4031 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4030, %4027 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4028 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %4032 = tensor.empty() : tensor<4096x11008xf32>
    %4033 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_424 : tensor<11008x4096xf32>) outs(%4032 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4034 = "tosa.reshape"(%4031) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4035 = tensor.empty() : tensor<80x11008xf32>
    %4036 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%4034, %4033 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%4035 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %4037 = "tosa.reshape"(%4036) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %4038 = tensor.empty() : tensor<1x80x11008xf32>
    %4039 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4037 : tensor<1x80x11008xf32>) outs(%4038 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      %5006 = math.exp %5005 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5007 = arith.addf %cst_1777, %5006 : f32
      %5008 = arith.divf %in, %5007 : f32
      linalg.yield %5008 : f32
    } -> tensor<1x80x11008xf32>
    %4040 = tensor.empty() : tensor<4096x11008xf32>
    %4041 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_426 : tensor<11008x4096xf32>) outs(%4040 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4042 = "tosa.reshape"(%4031) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4043 = tensor.empty() : tensor<80x11008xf32>
    %4044 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%4042, %4041 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%4043 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %4045 = "tosa.reshape"(%4044) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %4046 = tensor.empty() : tensor<1x80x11008xf32>
    %4047 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4039, %4045 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%4046 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x11008xf32>
    %4048 = tensor.empty() : tensor<11008x4096xf32>
    %4049 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_428 : tensor<4096x11008xf32>) outs(%4048 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %4050 = "tosa.reshape"(%4047) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %4051 = tensor.empty() : tensor<80x4096xf32>
    %4052 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%4050, %4049 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%4051 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %4053 = "tosa.reshape"(%4052) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4054 = "tosa.add"(%4017, %4053) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %4055 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1594 = arith.constant 2 : i32
    %4056 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4054 : tensor<1x80x4096xf32>) outs(%4055 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1594 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1595 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %4057 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4056 : tensor<1x80x4096xf32>) outs(%cst_1595 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1596 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4058 = "tosa.add"(%4057, %cst_1596) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %4059 = tensor.empty() : tensor<1x80x1xf32>
    %4060 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4058 : tensor<1x80x1xf32>) outs(%4059 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %4061 = tensor.empty() : tensor<1x80x4096xf32>
    %4062 = tensor.empty() : tensor<1x80x4096xf32>
    %4063 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4060 : tensor<1x80x1xf32>) outs(%4062 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4064 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4054, %4063 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4061 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %4065 = tensor.empty() : tensor<1x80x4096xf32>
    %4066 = tensor.empty() : tensor<1x80x4096xf32>
    %4067 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_51 : tensor<4096xf32>) outs(%4066 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4068 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4067, %4064 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4065 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %4069 = tensor.empty() : tensor<4096x4096xf32>
    %4070 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_430 : tensor<4096x4096xf32>) outs(%4069 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4071 = "tosa.reshape"(%4068) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4072 = tensor.empty() : tensor<80x4096xf32>
    %4073 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%4071, %4070 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%4072 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %4074 = "tosa.reshape"(%4073) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4075 = tensor.empty() : tensor<4096x4096xf32>
    %4076 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_432 : tensor<4096x4096xf32>) outs(%4075 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4077 = "tosa.reshape"(%4068) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4078 = tensor.empty() : tensor<80x4096xf32>
    %4079 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%4077, %4076 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%4078 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %4080 = "tosa.reshape"(%4079) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4081 = tensor.empty() : tensor<4096x4096xf32>
    %4082 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_434 : tensor<4096x4096xf32>) outs(%4081 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4083 = "tosa.reshape"(%4068) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4084 = tensor.empty() : tensor<80x4096xf32>
    %4085 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%4083, %4082 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%4084 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %4086 = "tosa.reshape"(%4085) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4087 = "tosa.reshape"(%4074) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4088 = tensor.empty() : tensor<1x32x80x128xf32>
    %4089 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4087 : tensor<1x80x32x128xf32>) outs(%4088 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4090 = "tosa.reshape"(%4080) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4091 = tensor.empty() : tensor<1x32x80x128xf32>
    %4092 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4090 : tensor<1x80x32x128xf32>) outs(%4091 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4093 = "tosa.reshape"(%4086) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4094 = tensor.empty() : tensor<1x32x80x128xf32>
    %4095 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4093 : tensor<1x80x32x128xf32>) outs(%4094 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1597 = tensor.extract_slice %expanded_620[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1598 = tensor.extract_slice %extracted_slice_1597[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1599 = tensor.extract_slice %extracted_slice_1598[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1600 = tensor.extract_slice %expanded_622[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1601 = tensor.extract_slice %extracted_slice_1600[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1602 = tensor.extract_slice %extracted_slice_1601[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %4096 = tensor.empty() : tensor<1x80x128xf32>
    %4097 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1599 : tensor<1x1x80x128xf32>) outs(%4096 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %4098 = tensor.empty() : tensor<80x128xf32>
    %4099 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%4097 : tensor<1x80x128xf32>) outs(%4098 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %4100 = tensor.empty() : tensor<1x80x128xf32>
    %4101 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1602 : tensor<1x1x80x128xf32>) outs(%4100 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %4102 = tensor.empty() : tensor<80x128xf32>
    %4103 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%4101 : tensor<1x80x128xf32>) outs(%4102 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %4104 = tensor.empty() : tensor<1x80x128xf32>
    %4105 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%4104 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %4099[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %4106 = "tosa.reshape"(%4105) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %4107 = tensor.empty() : tensor<1x80x128xf32>
    %4108 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%4107 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %4103[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %4109 = "tosa.reshape"(%4108) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %4110 = tensor.empty() : tensor<1x32x80x128xf32>
    %4111 = tensor.empty() : tensor<1x32x80x128xf32>
    %4112 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4106 : tensor<1x1x80x128xf32>) outs(%4111 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4113 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4089, %4112 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4110 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1603 = tensor.extract_slice %4089[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1604 = tensor.extract_slice %4089[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %4114 = tensor.empty() : tensor<1x32x80x64xf32>
    %4115 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1604 : tensor<1x32x80x64xf32>) outs(%4114 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %4116 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1605 = tensor.insert_slice %4115 into %4116[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1606 = tensor.insert_slice %extracted_slice_1603 into %inserted_slice_1605[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %4117 = tensor.empty() : tensor<1x32x80x128xf32>
    %4118 = tensor.empty() : tensor<1x32x80x128xf32>
    %4119 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4109 : tensor<1x1x80x128xf32>) outs(%4118 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4120 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1606, %4119 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4117 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %4121 = "tosa.add"(%4113, %4120) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4122 = tensor.empty() : tensor<1x32x80x128xf32>
    %4123 = tensor.empty() : tensor<1x32x80x128xf32>
    %4124 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4106 : tensor<1x1x80x128xf32>) outs(%4123 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4125 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4092, %4124 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4122 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1607 = tensor.extract_slice %4092[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1608 = tensor.extract_slice %4092[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %4126 = tensor.empty() : tensor<1x32x80x64xf32>
    %4127 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1608 : tensor<1x32x80x64xf32>) outs(%4126 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %4128 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1609 = tensor.insert_slice %4127 into %4128[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1610 = tensor.insert_slice %extracted_slice_1607 into %inserted_slice_1609[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %4129 = tensor.empty() : tensor<1x32x80x128xf32>
    %4130 = tensor.empty() : tensor<1x32x80x128xf32>
    %4131 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4109 : tensor<1x1x80x128xf32>) outs(%4130 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4132 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1610, %4131 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4129 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %4133 = "tosa.add"(%4125, %4132) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4134 = tensor.empty() : tensor<1x32x128x80xf32>
    %4135 = linalg.generic {indexing_maps = [#map15, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4133 : tensor<1x32x80x128xf32>) outs(%4134 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %4136 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1611 = tensor.extract_slice %4121[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1612 = tensor.insert_slice %extracted_slice_1611 into %4136[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %4137 = "tosa.reshape"(%inserted_slice_1612) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %4138 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1613 = tensor.extract_slice %4135[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1614 = tensor.insert_slice %extracted_slice_1613 into %4138[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %4139 = "tosa.reshape"(%inserted_slice_1614) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %4140 = tensor.empty() : tensor<32x80x80xf32>
    %4141 = linalg.batch_matmul ins(%4137, %4139 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%4140 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %4142 = "tosa.reshape"(%4141) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1615 = arith.constant 11.3137083 : f32
    %4143 = tensor.empty() : tensor<1x32x80x80xf32>
    %4144 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4142 : tensor<1x32x80x80xf32>) outs(%4143 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.divf %in, %cst_1615 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %4145 = "tosa.add"(%4144, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %4146 = tensor.empty() : tensor<1x32x80x1xf32>
    %4147 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4146 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %4148 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4145 : tensor<1x32x80x80xf32>) outs(%4146 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.maxf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %4149 = tensor.empty() : tensor<1x32x80x80xf32>
    %4150 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4145, %4148 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%4149 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.subf %in, %in_1777 : f32
      %5006 = math.exp %5005 : f32
      linalg.yield %5006 : f32
    } -> tensor<1x32x80x80xf32>
    %4151 = tensor.empty() : tensor<1x32x80x1xf32>
    %4152 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4151 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %4153 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4150 : tensor<1x32x80x80xf32>) outs(%4152 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.addf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %4154 = tensor.empty() : tensor<1x32x80x80xf32>
    %4155 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4150, %4153 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%4154 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.divf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %4156 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1616 = tensor.extract_slice %4155[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1617 = tensor.insert_slice %extracted_slice_1616 into %4156[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %4157 = "tosa.reshape"(%inserted_slice_1617) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %4158 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1618 = tensor.extract_slice %4095[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1619 = tensor.insert_slice %extracted_slice_1618 into %4158[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %4159 = "tosa.reshape"(%inserted_slice_1619) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %4160 = tensor.empty() : tensor<32x80x128xf32>
    %4161 = linalg.batch_matmul ins(%4157, %4159 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%4160 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %4162 = "tosa.reshape"(%4161) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4163 = tensor.empty() : tensor<1x80x32x128xf32>
    %4164 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4162 : tensor<1x32x80x128xf32>) outs(%4163 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1620 = tensor.extract_slice %4164[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %4165 = "tosa.reshape"(%extracted_slice_1620) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %4166 = tensor.empty() : tensor<4096x4096xf32>
    %4167 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_436 : tensor<4096x4096xf32>) outs(%4166 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4168 = "tosa.reshape"(%4165) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4169 = tensor.empty() : tensor<80x4096xf32>
    %4170 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%4168, %4167 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%4169 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %4171 = "tosa.reshape"(%4170) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4172 = "tosa.add"(%4054, %4171) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %4173 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1621 = arith.constant 2 : i32
    %4174 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4172 : tensor<1x80x4096xf32>) outs(%4173 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1621 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1622 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %4175 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4174 : tensor<1x80x4096xf32>) outs(%cst_1622 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1623 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4176 = "tosa.add"(%4175, %cst_1623) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %4177 = tensor.empty() : tensor<1x80x1xf32>
    %4178 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4176 : tensor<1x80x1xf32>) outs(%4177 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %4179 = tensor.empty() : tensor<1x80x4096xf32>
    %4180 = tensor.empty() : tensor<1x80x4096xf32>
    %4181 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4178 : tensor<1x80x1xf32>) outs(%4180 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4182 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4172, %4181 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4179 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %4183 = tensor.empty() : tensor<1x80x4096xf32>
    %4184 = tensor.empty() : tensor<1x80x4096xf32>
    %4185 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_52 : tensor<4096xf32>) outs(%4184 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4186 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4185, %4182 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4183 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %4187 = tensor.empty() : tensor<4096x11008xf32>
    %4188 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_438 : tensor<11008x4096xf32>) outs(%4187 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4189 = "tosa.reshape"(%4186) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4190 = tensor.empty() : tensor<80x11008xf32>
    %4191 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%4189, %4188 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%4190 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %4192 = "tosa.reshape"(%4191) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %4193 = tensor.empty() : tensor<1x80x11008xf32>
    %4194 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4192 : tensor<1x80x11008xf32>) outs(%4193 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      %5006 = math.exp %5005 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5007 = arith.addf %cst_1777, %5006 : f32
      %5008 = arith.divf %in, %5007 : f32
      linalg.yield %5008 : f32
    } -> tensor<1x80x11008xf32>
    %4195 = tensor.empty() : tensor<4096x11008xf32>
    %4196 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_440 : tensor<11008x4096xf32>) outs(%4195 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4197 = "tosa.reshape"(%4186) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4198 = tensor.empty() : tensor<80x11008xf32>
    %4199 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%4197, %4196 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%4198 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %4200 = "tosa.reshape"(%4199) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %4201 = tensor.empty() : tensor<1x80x11008xf32>
    %4202 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4194, %4200 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%4201 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x11008xf32>
    %4203 = tensor.empty() : tensor<11008x4096xf32>
    %4204 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_442 : tensor<4096x11008xf32>) outs(%4203 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %4205 = "tosa.reshape"(%4202) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %4206 = tensor.empty() : tensor<80x4096xf32>
    %4207 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%4205, %4204 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%4206 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %4208 = "tosa.reshape"(%4207) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4209 = "tosa.add"(%4172, %4208) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %4210 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1624 = arith.constant 2 : i32
    %4211 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4209 : tensor<1x80x4096xf32>) outs(%4210 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1624 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1625 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %4212 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4211 : tensor<1x80x4096xf32>) outs(%cst_1625 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1626 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4213 = "tosa.add"(%4212, %cst_1626) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %4214 = tensor.empty() : tensor<1x80x1xf32>
    %4215 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4213 : tensor<1x80x1xf32>) outs(%4214 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %4216 = tensor.empty() : tensor<1x80x4096xf32>
    %4217 = tensor.empty() : tensor<1x80x4096xf32>
    %4218 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4215 : tensor<1x80x1xf32>) outs(%4217 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4219 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4209, %4218 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4216 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %4220 = tensor.empty() : tensor<1x80x4096xf32>
    %4221 = tensor.empty() : tensor<1x80x4096xf32>
    %4222 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_53 : tensor<4096xf32>) outs(%4221 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4223 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4222, %4219 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4220 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %4224 = tensor.empty() : tensor<4096x4096xf32>
    %4225 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_444 : tensor<4096x4096xf32>) outs(%4224 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4226 = "tosa.reshape"(%4223) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4227 = tensor.empty() : tensor<80x4096xf32>
    %4228 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%4226, %4225 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%4227 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %4229 = "tosa.reshape"(%4228) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4230 = tensor.empty() : tensor<4096x4096xf32>
    %4231 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_446 : tensor<4096x4096xf32>) outs(%4230 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4232 = "tosa.reshape"(%4223) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4233 = tensor.empty() : tensor<80x4096xf32>
    %4234 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%4232, %4231 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%4233 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %4235 = "tosa.reshape"(%4234) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4236 = tensor.empty() : tensor<4096x4096xf32>
    %4237 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_448 : tensor<4096x4096xf32>) outs(%4236 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4238 = "tosa.reshape"(%4223) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4239 = tensor.empty() : tensor<80x4096xf32>
    %4240 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%4238, %4237 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%4239 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %4241 = "tosa.reshape"(%4240) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4242 = "tosa.reshape"(%4229) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4243 = tensor.empty() : tensor<1x32x80x128xf32>
    %4244 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4242 : tensor<1x80x32x128xf32>) outs(%4243 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4245 = "tosa.reshape"(%4235) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4246 = tensor.empty() : tensor<1x32x80x128xf32>
    %4247 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4245 : tensor<1x80x32x128xf32>) outs(%4246 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4248 = "tosa.reshape"(%4241) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4249 = tensor.empty() : tensor<1x32x80x128xf32>
    %4250 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4248 : tensor<1x80x32x128xf32>) outs(%4249 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1627 = tensor.extract_slice %expanded_624[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1628 = tensor.extract_slice %extracted_slice_1627[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1629 = tensor.extract_slice %extracted_slice_1628[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1630 = tensor.extract_slice %expanded_626[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1631 = tensor.extract_slice %extracted_slice_1630[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1632 = tensor.extract_slice %extracted_slice_1631[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %4251 = tensor.empty() : tensor<1x80x128xf32>
    %4252 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1629 : tensor<1x1x80x128xf32>) outs(%4251 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %4253 = tensor.empty() : tensor<80x128xf32>
    %4254 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%4252 : tensor<1x80x128xf32>) outs(%4253 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %4255 = tensor.empty() : tensor<1x80x128xf32>
    %4256 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1632 : tensor<1x1x80x128xf32>) outs(%4255 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %4257 = tensor.empty() : tensor<80x128xf32>
    %4258 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%4256 : tensor<1x80x128xf32>) outs(%4257 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %4259 = tensor.empty() : tensor<1x80x128xf32>
    %4260 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%4259 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %4254[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %4261 = "tosa.reshape"(%4260) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %4262 = tensor.empty() : tensor<1x80x128xf32>
    %4263 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%4262 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %4258[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %4264 = "tosa.reshape"(%4263) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %4265 = tensor.empty() : tensor<1x32x80x128xf32>
    %4266 = tensor.empty() : tensor<1x32x80x128xf32>
    %4267 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4261 : tensor<1x1x80x128xf32>) outs(%4266 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4268 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4244, %4267 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4265 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1633 = tensor.extract_slice %4244[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1634 = tensor.extract_slice %4244[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %4269 = tensor.empty() : tensor<1x32x80x64xf32>
    %4270 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1634 : tensor<1x32x80x64xf32>) outs(%4269 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %4271 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1635 = tensor.insert_slice %4270 into %4271[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1636 = tensor.insert_slice %extracted_slice_1633 into %inserted_slice_1635[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %4272 = tensor.empty() : tensor<1x32x80x128xf32>
    %4273 = tensor.empty() : tensor<1x32x80x128xf32>
    %4274 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4264 : tensor<1x1x80x128xf32>) outs(%4273 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4275 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1636, %4274 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4272 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %4276 = "tosa.add"(%4268, %4275) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4277 = tensor.empty() : tensor<1x32x80x128xf32>
    %4278 = tensor.empty() : tensor<1x32x80x128xf32>
    %4279 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4261 : tensor<1x1x80x128xf32>) outs(%4278 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4280 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4247, %4279 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4277 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1637 = tensor.extract_slice %4247[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1638 = tensor.extract_slice %4247[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %4281 = tensor.empty() : tensor<1x32x80x64xf32>
    %4282 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1638 : tensor<1x32x80x64xf32>) outs(%4281 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %4283 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1639 = tensor.insert_slice %4282 into %4283[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1640 = tensor.insert_slice %extracted_slice_1637 into %inserted_slice_1639[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %4284 = tensor.empty() : tensor<1x32x80x128xf32>
    %4285 = tensor.empty() : tensor<1x32x80x128xf32>
    %4286 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4264 : tensor<1x1x80x128xf32>) outs(%4285 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4287 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1640, %4286 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4284 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %4288 = "tosa.add"(%4280, %4287) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4289 = tensor.empty() : tensor<1x32x128x80xf32>
    %4290 = linalg.generic {indexing_maps = [#map15, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4288 : tensor<1x32x80x128xf32>) outs(%4289 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %4291 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1641 = tensor.extract_slice %4276[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1642 = tensor.insert_slice %extracted_slice_1641 into %4291[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %4292 = "tosa.reshape"(%inserted_slice_1642) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %4293 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1643 = tensor.extract_slice %4290[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1644 = tensor.insert_slice %extracted_slice_1643 into %4293[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %4294 = "tosa.reshape"(%inserted_slice_1644) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %4295 = tensor.empty() : tensor<32x80x80xf32>
    %4296 = linalg.batch_matmul ins(%4292, %4294 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%4295 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %4297 = "tosa.reshape"(%4296) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1645 = arith.constant 11.3137083 : f32
    %4298 = tensor.empty() : tensor<1x32x80x80xf32>
    %4299 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4297 : tensor<1x32x80x80xf32>) outs(%4298 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.divf %in, %cst_1645 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %4300 = "tosa.add"(%4299, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %4301 = tensor.empty() : tensor<1x32x80x1xf32>
    %4302 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4301 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %4303 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4300 : tensor<1x32x80x80xf32>) outs(%4301 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.maxf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %4304 = tensor.empty() : tensor<1x32x80x80xf32>
    %4305 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4300, %4303 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%4304 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.subf %in, %in_1777 : f32
      %5006 = math.exp %5005 : f32
      linalg.yield %5006 : f32
    } -> tensor<1x32x80x80xf32>
    %4306 = tensor.empty() : tensor<1x32x80x1xf32>
    %4307 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4306 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %4308 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4305 : tensor<1x32x80x80xf32>) outs(%4307 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.addf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %4309 = tensor.empty() : tensor<1x32x80x80xf32>
    %4310 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4305, %4308 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%4309 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.divf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %4311 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1646 = tensor.extract_slice %4310[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1647 = tensor.insert_slice %extracted_slice_1646 into %4311[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %4312 = "tosa.reshape"(%inserted_slice_1647) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %4313 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1648 = tensor.extract_slice %4250[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1649 = tensor.insert_slice %extracted_slice_1648 into %4313[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %4314 = "tosa.reshape"(%inserted_slice_1649) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %4315 = tensor.empty() : tensor<32x80x128xf32>
    %4316 = linalg.batch_matmul ins(%4312, %4314 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%4315 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %4317 = "tosa.reshape"(%4316) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4318 = tensor.empty() : tensor<1x80x32x128xf32>
    %4319 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4317 : tensor<1x32x80x128xf32>) outs(%4318 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1650 = tensor.extract_slice %4319[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %4320 = "tosa.reshape"(%extracted_slice_1650) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %4321 = tensor.empty() : tensor<4096x4096xf32>
    %4322 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_450 : tensor<4096x4096xf32>) outs(%4321 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4323 = "tosa.reshape"(%4320) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4324 = tensor.empty() : tensor<80x4096xf32>
    %4325 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%4323, %4322 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%4324 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %4326 = "tosa.reshape"(%4325) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4327 = "tosa.add"(%4209, %4326) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %4328 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1651 = arith.constant 2 : i32
    %4329 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4327 : tensor<1x80x4096xf32>) outs(%4328 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1651 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1652 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %4330 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4329 : tensor<1x80x4096xf32>) outs(%cst_1652 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1653 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4331 = "tosa.add"(%4330, %cst_1653) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %4332 = tensor.empty() : tensor<1x80x1xf32>
    %4333 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4331 : tensor<1x80x1xf32>) outs(%4332 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %4334 = tensor.empty() : tensor<1x80x4096xf32>
    %4335 = tensor.empty() : tensor<1x80x4096xf32>
    %4336 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4333 : tensor<1x80x1xf32>) outs(%4335 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4337 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4327, %4336 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4334 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %4338 = tensor.empty() : tensor<1x80x4096xf32>
    %4339 = tensor.empty() : tensor<1x80x4096xf32>
    %4340 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_54 : tensor<4096xf32>) outs(%4339 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4341 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4340, %4337 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4338 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %4342 = tensor.empty() : tensor<4096x11008xf32>
    %4343 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_452 : tensor<11008x4096xf32>) outs(%4342 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4344 = "tosa.reshape"(%4341) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4345 = tensor.empty() : tensor<80x11008xf32>
    %4346 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%4344, %4343 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%4345 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %4347 = "tosa.reshape"(%4346) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %4348 = tensor.empty() : tensor<1x80x11008xf32>
    %4349 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4347 : tensor<1x80x11008xf32>) outs(%4348 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      %5006 = math.exp %5005 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5007 = arith.addf %cst_1777, %5006 : f32
      %5008 = arith.divf %in, %5007 : f32
      linalg.yield %5008 : f32
    } -> tensor<1x80x11008xf32>
    %4350 = tensor.empty() : tensor<4096x11008xf32>
    %4351 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_454 : tensor<11008x4096xf32>) outs(%4350 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4352 = "tosa.reshape"(%4341) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4353 = tensor.empty() : tensor<80x11008xf32>
    %4354 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%4352, %4351 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%4353 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %4355 = "tosa.reshape"(%4354) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %4356 = tensor.empty() : tensor<1x80x11008xf32>
    %4357 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4349, %4355 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%4356 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x11008xf32>
    %4358 = tensor.empty() : tensor<11008x4096xf32>
    %4359 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_456 : tensor<4096x11008xf32>) outs(%4358 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %4360 = "tosa.reshape"(%4357) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %4361 = tensor.empty() : tensor<80x4096xf32>
    %4362 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%4360, %4359 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%4361 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %4363 = "tosa.reshape"(%4362) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4364 = "tosa.add"(%4327, %4363) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %4365 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1654 = arith.constant 2 : i32
    %4366 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4364 : tensor<1x80x4096xf32>) outs(%4365 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1654 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1655 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %4367 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4366 : tensor<1x80x4096xf32>) outs(%cst_1655 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1656 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4368 = "tosa.add"(%4367, %cst_1656) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %4369 = tensor.empty() : tensor<1x80x1xf32>
    %4370 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4368 : tensor<1x80x1xf32>) outs(%4369 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %4371 = tensor.empty() : tensor<1x80x4096xf32>
    %4372 = tensor.empty() : tensor<1x80x4096xf32>
    %4373 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4370 : tensor<1x80x1xf32>) outs(%4372 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4374 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4364, %4373 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4371 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %4375 = tensor.empty() : tensor<1x80x4096xf32>
    %4376 = tensor.empty() : tensor<1x80x4096xf32>
    %4377 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_55 : tensor<4096xf32>) outs(%4376 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4378 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4377, %4374 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4375 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %4379 = tensor.empty() : tensor<4096x4096xf32>
    %4380 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_458 : tensor<4096x4096xf32>) outs(%4379 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4381 = "tosa.reshape"(%4378) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4382 = tensor.empty() : tensor<80x4096xf32>
    %4383 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%4381, %4380 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%4382 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %4384 = "tosa.reshape"(%4383) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4385 = tensor.empty() : tensor<4096x4096xf32>
    %4386 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_460 : tensor<4096x4096xf32>) outs(%4385 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4387 = "tosa.reshape"(%4378) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4388 = tensor.empty() : tensor<80x4096xf32>
    %4389 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%4387, %4386 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%4388 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %4390 = "tosa.reshape"(%4389) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4391 = tensor.empty() : tensor<4096x4096xf32>
    %4392 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_462 : tensor<4096x4096xf32>) outs(%4391 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4393 = "tosa.reshape"(%4378) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4394 = tensor.empty() : tensor<80x4096xf32>
    %4395 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%4393, %4392 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%4394 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %4396 = "tosa.reshape"(%4395) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4397 = "tosa.reshape"(%4384) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4398 = tensor.empty() : tensor<1x32x80x128xf32>
    %4399 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4397 : tensor<1x80x32x128xf32>) outs(%4398 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4400 = "tosa.reshape"(%4390) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4401 = tensor.empty() : tensor<1x32x80x128xf32>
    %4402 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4400 : tensor<1x80x32x128xf32>) outs(%4401 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4403 = "tosa.reshape"(%4396) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4404 = tensor.empty() : tensor<1x32x80x128xf32>
    %4405 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4403 : tensor<1x80x32x128xf32>) outs(%4404 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1657 = tensor.extract_slice %expanded_628[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1658 = tensor.extract_slice %extracted_slice_1657[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1659 = tensor.extract_slice %extracted_slice_1658[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1660 = tensor.extract_slice %expanded_630[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1661 = tensor.extract_slice %extracted_slice_1660[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1662 = tensor.extract_slice %extracted_slice_1661[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %4406 = tensor.empty() : tensor<1x80x128xf32>
    %4407 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1659 : tensor<1x1x80x128xf32>) outs(%4406 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %4408 = tensor.empty() : tensor<80x128xf32>
    %4409 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%4407 : tensor<1x80x128xf32>) outs(%4408 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %4410 = tensor.empty() : tensor<1x80x128xf32>
    %4411 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1662 : tensor<1x1x80x128xf32>) outs(%4410 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %4412 = tensor.empty() : tensor<80x128xf32>
    %4413 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%4411 : tensor<1x80x128xf32>) outs(%4412 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %4414 = tensor.empty() : tensor<1x80x128xf32>
    %4415 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%4414 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %4409[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %4416 = "tosa.reshape"(%4415) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %4417 = tensor.empty() : tensor<1x80x128xf32>
    %4418 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%4417 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %4413[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %4419 = "tosa.reshape"(%4418) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %4420 = tensor.empty() : tensor<1x32x80x128xf32>
    %4421 = tensor.empty() : tensor<1x32x80x128xf32>
    %4422 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4416 : tensor<1x1x80x128xf32>) outs(%4421 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4423 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4399, %4422 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4420 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1663 = tensor.extract_slice %4399[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1664 = tensor.extract_slice %4399[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %4424 = tensor.empty() : tensor<1x32x80x64xf32>
    %4425 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1664 : tensor<1x32x80x64xf32>) outs(%4424 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %4426 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1665 = tensor.insert_slice %4425 into %4426[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1666 = tensor.insert_slice %extracted_slice_1663 into %inserted_slice_1665[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %4427 = tensor.empty() : tensor<1x32x80x128xf32>
    %4428 = tensor.empty() : tensor<1x32x80x128xf32>
    %4429 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4419 : tensor<1x1x80x128xf32>) outs(%4428 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4430 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1666, %4429 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4427 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %4431 = "tosa.add"(%4423, %4430) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4432 = tensor.empty() : tensor<1x32x80x128xf32>
    %4433 = tensor.empty() : tensor<1x32x80x128xf32>
    %4434 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4416 : tensor<1x1x80x128xf32>) outs(%4433 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4435 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4402, %4434 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4432 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1667 = tensor.extract_slice %4402[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1668 = tensor.extract_slice %4402[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %4436 = tensor.empty() : tensor<1x32x80x64xf32>
    %4437 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1668 : tensor<1x32x80x64xf32>) outs(%4436 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %4438 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1669 = tensor.insert_slice %4437 into %4438[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1670 = tensor.insert_slice %extracted_slice_1667 into %inserted_slice_1669[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %4439 = tensor.empty() : tensor<1x32x80x128xf32>
    %4440 = tensor.empty() : tensor<1x32x80x128xf32>
    %4441 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4419 : tensor<1x1x80x128xf32>) outs(%4440 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4442 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1670, %4441 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4439 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %4443 = "tosa.add"(%4435, %4442) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4444 = tensor.empty() : tensor<1x32x128x80xf32>
    %4445 = linalg.generic {indexing_maps = [#map15, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4443 : tensor<1x32x80x128xf32>) outs(%4444 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %4446 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1671 = tensor.extract_slice %4431[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1672 = tensor.insert_slice %extracted_slice_1671 into %4446[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %4447 = "tosa.reshape"(%inserted_slice_1672) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %4448 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1673 = tensor.extract_slice %4445[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1674 = tensor.insert_slice %extracted_slice_1673 into %4448[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %4449 = "tosa.reshape"(%inserted_slice_1674) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %4450 = tensor.empty() : tensor<32x80x80xf32>
    %4451 = linalg.batch_matmul ins(%4447, %4449 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%4450 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %4452 = "tosa.reshape"(%4451) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1675 = arith.constant 11.3137083 : f32
    %4453 = tensor.empty() : tensor<1x32x80x80xf32>
    %4454 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4452 : tensor<1x32x80x80xf32>) outs(%4453 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.divf %in, %cst_1675 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %4455 = "tosa.add"(%4454, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %4456 = tensor.empty() : tensor<1x32x80x1xf32>
    %4457 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4456 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %4458 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4455 : tensor<1x32x80x80xf32>) outs(%4456 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.maxf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %4459 = tensor.empty() : tensor<1x32x80x80xf32>
    %4460 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4455, %4458 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%4459 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.subf %in, %in_1777 : f32
      %5006 = math.exp %5005 : f32
      linalg.yield %5006 : f32
    } -> tensor<1x32x80x80xf32>
    %4461 = tensor.empty() : tensor<1x32x80x1xf32>
    %4462 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4461 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %4463 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4460 : tensor<1x32x80x80xf32>) outs(%4462 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.addf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %4464 = tensor.empty() : tensor<1x32x80x80xf32>
    %4465 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4460, %4463 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%4464 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.divf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %4466 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1676 = tensor.extract_slice %4465[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1677 = tensor.insert_slice %extracted_slice_1676 into %4466[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %4467 = "tosa.reshape"(%inserted_slice_1677) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %4468 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1678 = tensor.extract_slice %4405[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1679 = tensor.insert_slice %extracted_slice_1678 into %4468[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %4469 = "tosa.reshape"(%inserted_slice_1679) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %4470 = tensor.empty() : tensor<32x80x128xf32>
    %4471 = linalg.batch_matmul ins(%4467, %4469 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%4470 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %4472 = "tosa.reshape"(%4471) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4473 = tensor.empty() : tensor<1x80x32x128xf32>
    %4474 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4472 : tensor<1x32x80x128xf32>) outs(%4473 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1680 = tensor.extract_slice %4474[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %4475 = "tosa.reshape"(%extracted_slice_1680) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %4476 = tensor.empty() : tensor<4096x4096xf32>
    %4477 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_464 : tensor<4096x4096xf32>) outs(%4476 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4478 = "tosa.reshape"(%4475) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4479 = tensor.empty() : tensor<80x4096xf32>
    %4480 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%4478, %4477 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%4479 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %4481 = "tosa.reshape"(%4480) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4482 = "tosa.add"(%4364, %4481) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %4483 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1681 = arith.constant 2 : i32
    %4484 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4482 : tensor<1x80x4096xf32>) outs(%4483 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1681 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1682 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %4485 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4484 : tensor<1x80x4096xf32>) outs(%cst_1682 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1683 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4486 = "tosa.add"(%4485, %cst_1683) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %4487 = tensor.empty() : tensor<1x80x1xf32>
    %4488 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4486 : tensor<1x80x1xf32>) outs(%4487 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %4489 = tensor.empty() : tensor<1x80x4096xf32>
    %4490 = tensor.empty() : tensor<1x80x4096xf32>
    %4491 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4488 : tensor<1x80x1xf32>) outs(%4490 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4492 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4482, %4491 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4489 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %4493 = tensor.empty() : tensor<1x80x4096xf32>
    %4494 = tensor.empty() : tensor<1x80x4096xf32>
    %4495 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_56 : tensor<4096xf32>) outs(%4494 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4496 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4495, %4492 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4493 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %4497 = tensor.empty() : tensor<4096x11008xf32>
    %4498 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_466 : tensor<11008x4096xf32>) outs(%4497 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4499 = "tosa.reshape"(%4496) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4500 = tensor.empty() : tensor<80x11008xf32>
    %4501 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%4499, %4498 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%4500 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %4502 = "tosa.reshape"(%4501) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %4503 = tensor.empty() : tensor<1x80x11008xf32>
    %4504 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4502 : tensor<1x80x11008xf32>) outs(%4503 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      %5006 = math.exp %5005 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5007 = arith.addf %cst_1777, %5006 : f32
      %5008 = arith.divf %in, %5007 : f32
      linalg.yield %5008 : f32
    } -> tensor<1x80x11008xf32>
    %4505 = tensor.empty() : tensor<4096x11008xf32>
    %4506 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_468 : tensor<11008x4096xf32>) outs(%4505 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4507 = "tosa.reshape"(%4496) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4508 = tensor.empty() : tensor<80x11008xf32>
    %4509 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%4507, %4506 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%4508 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %4510 = "tosa.reshape"(%4509) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %4511 = tensor.empty() : tensor<1x80x11008xf32>
    %4512 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4504, %4510 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%4511 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x11008xf32>
    %4513 = tensor.empty() : tensor<11008x4096xf32>
    %4514 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_470 : tensor<4096x11008xf32>) outs(%4513 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %4515 = "tosa.reshape"(%4512) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %4516 = tensor.empty() : tensor<80x4096xf32>
    %4517 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%4515, %4514 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%4516 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %4518 = "tosa.reshape"(%4517) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4519 = "tosa.add"(%4482, %4518) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %4520 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1684 = arith.constant 2 : i32
    %4521 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4519 : tensor<1x80x4096xf32>) outs(%4520 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1684 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1685 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %4522 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4521 : tensor<1x80x4096xf32>) outs(%cst_1685 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1686 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4523 = "tosa.add"(%4522, %cst_1686) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %4524 = tensor.empty() : tensor<1x80x1xf32>
    %4525 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4523 : tensor<1x80x1xf32>) outs(%4524 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %4526 = tensor.empty() : tensor<1x80x4096xf32>
    %4527 = tensor.empty() : tensor<1x80x4096xf32>
    %4528 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4525 : tensor<1x80x1xf32>) outs(%4527 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4529 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4519, %4528 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4526 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %4530 = tensor.empty() : tensor<1x80x4096xf32>
    %4531 = tensor.empty() : tensor<1x80x4096xf32>
    %4532 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_57 : tensor<4096xf32>) outs(%4531 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4533 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4532, %4529 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4530 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %4534 = tensor.empty() : tensor<4096x4096xf32>
    %4535 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_472 : tensor<4096x4096xf32>) outs(%4534 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4536 = "tosa.reshape"(%4533) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4537 = tensor.empty() : tensor<80x4096xf32>
    %4538 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%4536, %4535 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%4537 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %4539 = "tosa.reshape"(%4538) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4540 = tensor.empty() : tensor<4096x4096xf32>
    %4541 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_474 : tensor<4096x4096xf32>) outs(%4540 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4542 = "tosa.reshape"(%4533) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4543 = tensor.empty() : tensor<80x4096xf32>
    %4544 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%4542, %4541 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%4543 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %4545 = "tosa.reshape"(%4544) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4546 = tensor.empty() : tensor<4096x4096xf32>
    %4547 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_476 : tensor<4096x4096xf32>) outs(%4546 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4548 = "tosa.reshape"(%4533) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4549 = tensor.empty() : tensor<80x4096xf32>
    %4550 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%4548, %4547 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%4549 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %4551 = "tosa.reshape"(%4550) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4552 = "tosa.reshape"(%4539) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4553 = tensor.empty() : tensor<1x32x80x128xf32>
    %4554 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4552 : tensor<1x80x32x128xf32>) outs(%4553 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4555 = "tosa.reshape"(%4545) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4556 = tensor.empty() : tensor<1x32x80x128xf32>
    %4557 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4555 : tensor<1x80x32x128xf32>) outs(%4556 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4558 = "tosa.reshape"(%4551) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4559 = tensor.empty() : tensor<1x32x80x128xf32>
    %4560 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4558 : tensor<1x80x32x128xf32>) outs(%4559 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1687 = tensor.extract_slice %expanded_632[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1688 = tensor.extract_slice %extracted_slice_1687[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1689 = tensor.extract_slice %extracted_slice_1688[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1690 = tensor.extract_slice %expanded_634[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1691 = tensor.extract_slice %extracted_slice_1690[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1692 = tensor.extract_slice %extracted_slice_1691[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %4561 = tensor.empty() : tensor<1x80x128xf32>
    %4562 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1689 : tensor<1x1x80x128xf32>) outs(%4561 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %4563 = tensor.empty() : tensor<80x128xf32>
    %4564 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%4562 : tensor<1x80x128xf32>) outs(%4563 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %4565 = tensor.empty() : tensor<1x80x128xf32>
    %4566 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1692 : tensor<1x1x80x128xf32>) outs(%4565 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %4567 = tensor.empty() : tensor<80x128xf32>
    %4568 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%4566 : tensor<1x80x128xf32>) outs(%4567 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %4569 = tensor.empty() : tensor<1x80x128xf32>
    %4570 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%4569 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %4564[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %4571 = "tosa.reshape"(%4570) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %4572 = tensor.empty() : tensor<1x80x128xf32>
    %4573 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%4572 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %4568[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %4574 = "tosa.reshape"(%4573) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %4575 = tensor.empty() : tensor<1x32x80x128xf32>
    %4576 = tensor.empty() : tensor<1x32x80x128xf32>
    %4577 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4571 : tensor<1x1x80x128xf32>) outs(%4576 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4578 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4554, %4577 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4575 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1693 = tensor.extract_slice %4554[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1694 = tensor.extract_slice %4554[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %4579 = tensor.empty() : tensor<1x32x80x64xf32>
    %4580 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1694 : tensor<1x32x80x64xf32>) outs(%4579 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %4581 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1695 = tensor.insert_slice %4580 into %4581[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1696 = tensor.insert_slice %extracted_slice_1693 into %inserted_slice_1695[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %4582 = tensor.empty() : tensor<1x32x80x128xf32>
    %4583 = tensor.empty() : tensor<1x32x80x128xf32>
    %4584 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4574 : tensor<1x1x80x128xf32>) outs(%4583 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4585 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1696, %4584 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4582 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %4586 = "tosa.add"(%4578, %4585) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4587 = tensor.empty() : tensor<1x32x80x128xf32>
    %4588 = tensor.empty() : tensor<1x32x80x128xf32>
    %4589 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4571 : tensor<1x1x80x128xf32>) outs(%4588 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4590 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4557, %4589 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4587 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1697 = tensor.extract_slice %4557[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1698 = tensor.extract_slice %4557[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %4591 = tensor.empty() : tensor<1x32x80x64xf32>
    %4592 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1698 : tensor<1x32x80x64xf32>) outs(%4591 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %4593 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1699 = tensor.insert_slice %4592 into %4593[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1700 = tensor.insert_slice %extracted_slice_1697 into %inserted_slice_1699[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %4594 = tensor.empty() : tensor<1x32x80x128xf32>
    %4595 = tensor.empty() : tensor<1x32x80x128xf32>
    %4596 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4574 : tensor<1x1x80x128xf32>) outs(%4595 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4597 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1700, %4596 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4594 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %4598 = "tosa.add"(%4590, %4597) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4599 = tensor.empty() : tensor<1x32x128x80xf32>
    %4600 = linalg.generic {indexing_maps = [#map15, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4598 : tensor<1x32x80x128xf32>) outs(%4599 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %4601 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1701 = tensor.extract_slice %4586[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1702 = tensor.insert_slice %extracted_slice_1701 into %4601[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %4602 = "tosa.reshape"(%inserted_slice_1702) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %4603 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1703 = tensor.extract_slice %4600[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1704 = tensor.insert_slice %extracted_slice_1703 into %4603[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %4604 = "tosa.reshape"(%inserted_slice_1704) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %4605 = tensor.empty() : tensor<32x80x80xf32>
    %4606 = linalg.batch_matmul ins(%4602, %4604 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%4605 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %4607 = "tosa.reshape"(%4606) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1705 = arith.constant 11.3137083 : f32
    %4608 = tensor.empty() : tensor<1x32x80x80xf32>
    %4609 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4607 : tensor<1x32x80x80xf32>) outs(%4608 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.divf %in, %cst_1705 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %4610 = "tosa.add"(%4609, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %4611 = tensor.empty() : tensor<1x32x80x1xf32>
    %4612 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4611 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %4613 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4610 : tensor<1x32x80x80xf32>) outs(%4611 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.maxf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %4614 = tensor.empty() : tensor<1x32x80x80xf32>
    %4615 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4610, %4613 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%4614 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.subf %in, %in_1777 : f32
      %5006 = math.exp %5005 : f32
      linalg.yield %5006 : f32
    } -> tensor<1x32x80x80xf32>
    %4616 = tensor.empty() : tensor<1x32x80x1xf32>
    %4617 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4616 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %4618 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4615 : tensor<1x32x80x80xf32>) outs(%4617 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.addf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %4619 = tensor.empty() : tensor<1x32x80x80xf32>
    %4620 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4615, %4618 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%4619 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.divf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %4621 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1706 = tensor.extract_slice %4620[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1707 = tensor.insert_slice %extracted_slice_1706 into %4621[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %4622 = "tosa.reshape"(%inserted_slice_1707) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %4623 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1708 = tensor.extract_slice %4560[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1709 = tensor.insert_slice %extracted_slice_1708 into %4623[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %4624 = "tosa.reshape"(%inserted_slice_1709) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %4625 = tensor.empty() : tensor<32x80x128xf32>
    %4626 = linalg.batch_matmul ins(%4622, %4624 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%4625 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %4627 = "tosa.reshape"(%4626) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4628 = tensor.empty() : tensor<1x80x32x128xf32>
    %4629 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4627 : tensor<1x32x80x128xf32>) outs(%4628 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1710 = tensor.extract_slice %4629[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %4630 = "tosa.reshape"(%extracted_slice_1710) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %4631 = tensor.empty() : tensor<4096x4096xf32>
    %4632 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_478 : tensor<4096x4096xf32>) outs(%4631 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4633 = "tosa.reshape"(%4630) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4634 = tensor.empty() : tensor<80x4096xf32>
    %4635 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%4633, %4632 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%4634 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %4636 = "tosa.reshape"(%4635) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4637 = "tosa.add"(%4519, %4636) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %4638 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1711 = arith.constant 2 : i32
    %4639 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4637 : tensor<1x80x4096xf32>) outs(%4638 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1711 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1712 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %4640 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4639 : tensor<1x80x4096xf32>) outs(%cst_1712 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1713 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4641 = "tosa.add"(%4640, %cst_1713) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %4642 = tensor.empty() : tensor<1x80x1xf32>
    %4643 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4641 : tensor<1x80x1xf32>) outs(%4642 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %4644 = tensor.empty() : tensor<1x80x4096xf32>
    %4645 = tensor.empty() : tensor<1x80x4096xf32>
    %4646 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4643 : tensor<1x80x1xf32>) outs(%4645 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4647 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4637, %4646 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4644 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %4648 = tensor.empty() : tensor<1x80x4096xf32>
    %4649 = tensor.empty() : tensor<1x80x4096xf32>
    %4650 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_58 : tensor<4096xf32>) outs(%4649 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4651 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4650, %4647 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4648 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %4652 = tensor.empty() : tensor<4096x11008xf32>
    %4653 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_480 : tensor<11008x4096xf32>) outs(%4652 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4654 = "tosa.reshape"(%4651) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4655 = tensor.empty() : tensor<80x11008xf32>
    %4656 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%4654, %4653 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%4655 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %4657 = "tosa.reshape"(%4656) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %4658 = tensor.empty() : tensor<1x80x11008xf32>
    %4659 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4657 : tensor<1x80x11008xf32>) outs(%4658 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      %5006 = math.exp %5005 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5007 = arith.addf %cst_1777, %5006 : f32
      %5008 = arith.divf %in, %5007 : f32
      linalg.yield %5008 : f32
    } -> tensor<1x80x11008xf32>
    %4660 = tensor.empty() : tensor<4096x11008xf32>
    %4661 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_482 : tensor<11008x4096xf32>) outs(%4660 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4662 = "tosa.reshape"(%4651) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4663 = tensor.empty() : tensor<80x11008xf32>
    %4664 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%4662, %4661 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%4663 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %4665 = "tosa.reshape"(%4664) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %4666 = tensor.empty() : tensor<1x80x11008xf32>
    %4667 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4659, %4665 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%4666 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x11008xf32>
    %4668 = tensor.empty() : tensor<11008x4096xf32>
    %4669 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_484 : tensor<4096x11008xf32>) outs(%4668 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %4670 = "tosa.reshape"(%4667) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %4671 = tensor.empty() : tensor<80x4096xf32>
    %4672 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%4670, %4669 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%4671 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %4673 = "tosa.reshape"(%4672) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4674 = "tosa.add"(%4637, %4673) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %4675 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1714 = arith.constant 2 : i32
    %4676 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4674 : tensor<1x80x4096xf32>) outs(%4675 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1714 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1715 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %4677 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4676 : tensor<1x80x4096xf32>) outs(%cst_1715 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1716 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4678 = "tosa.add"(%4677, %cst_1716) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %4679 = tensor.empty() : tensor<1x80x1xf32>
    %4680 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4678 : tensor<1x80x1xf32>) outs(%4679 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %4681 = tensor.empty() : tensor<1x80x4096xf32>
    %4682 = tensor.empty() : tensor<1x80x4096xf32>
    %4683 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4680 : tensor<1x80x1xf32>) outs(%4682 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4684 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4674, %4683 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4681 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %4685 = tensor.empty() : tensor<1x80x4096xf32>
    %4686 = tensor.empty() : tensor<1x80x4096xf32>
    %4687 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_59 : tensor<4096xf32>) outs(%4686 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4688 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4687, %4684 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4685 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %4689 = tensor.empty() : tensor<4096x4096xf32>
    %4690 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_486 : tensor<4096x4096xf32>) outs(%4689 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4691 = "tosa.reshape"(%4688) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4692 = tensor.empty() : tensor<80x4096xf32>
    %4693 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%4691, %4690 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%4692 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %4694 = "tosa.reshape"(%4693) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4695 = tensor.empty() : tensor<4096x4096xf32>
    %4696 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_488 : tensor<4096x4096xf32>) outs(%4695 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4697 = "tosa.reshape"(%4688) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4698 = tensor.empty() : tensor<80x4096xf32>
    %4699 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%4697, %4696 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%4698 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %4700 = "tosa.reshape"(%4699) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4701 = tensor.empty() : tensor<4096x4096xf32>
    %4702 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_490 : tensor<4096x4096xf32>) outs(%4701 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4703 = "tosa.reshape"(%4688) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4704 = tensor.empty() : tensor<80x4096xf32>
    %4705 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%4703, %4702 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%4704 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %4706 = "tosa.reshape"(%4705) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4707 = "tosa.reshape"(%4694) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4708 = tensor.empty() : tensor<1x32x80x128xf32>
    %4709 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4707 : tensor<1x80x32x128xf32>) outs(%4708 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4710 = "tosa.reshape"(%4700) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4711 = tensor.empty() : tensor<1x32x80x128xf32>
    %4712 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4710 : tensor<1x80x32x128xf32>) outs(%4711 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4713 = "tosa.reshape"(%4706) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4714 = tensor.empty() : tensor<1x32x80x128xf32>
    %4715 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4713 : tensor<1x80x32x128xf32>) outs(%4714 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1717 = tensor.extract_slice %expanded_636[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1718 = tensor.extract_slice %extracted_slice_1717[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1719 = tensor.extract_slice %extracted_slice_1718[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1720 = tensor.extract_slice %expanded_638[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1721 = tensor.extract_slice %extracted_slice_1720[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1722 = tensor.extract_slice %extracted_slice_1721[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %4716 = tensor.empty() : tensor<1x80x128xf32>
    %4717 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1719 : tensor<1x1x80x128xf32>) outs(%4716 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %4718 = tensor.empty() : tensor<80x128xf32>
    %4719 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%4717 : tensor<1x80x128xf32>) outs(%4718 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %4720 = tensor.empty() : tensor<1x80x128xf32>
    %4721 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1722 : tensor<1x1x80x128xf32>) outs(%4720 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %4722 = tensor.empty() : tensor<80x128xf32>
    %4723 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%4721 : tensor<1x80x128xf32>) outs(%4722 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %4724 = tensor.empty() : tensor<1x80x128xf32>
    %4725 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%4724 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %4719[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %4726 = "tosa.reshape"(%4725) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %4727 = tensor.empty() : tensor<1x80x128xf32>
    %4728 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%4727 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %4723[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %4729 = "tosa.reshape"(%4728) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %4730 = tensor.empty() : tensor<1x32x80x128xf32>
    %4731 = tensor.empty() : tensor<1x32x80x128xf32>
    %4732 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4726 : tensor<1x1x80x128xf32>) outs(%4731 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4733 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4709, %4732 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4730 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1723 = tensor.extract_slice %4709[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1724 = tensor.extract_slice %4709[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %4734 = tensor.empty() : tensor<1x32x80x64xf32>
    %4735 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1724 : tensor<1x32x80x64xf32>) outs(%4734 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %4736 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1725 = tensor.insert_slice %4735 into %4736[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1726 = tensor.insert_slice %extracted_slice_1723 into %inserted_slice_1725[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %4737 = tensor.empty() : tensor<1x32x80x128xf32>
    %4738 = tensor.empty() : tensor<1x32x80x128xf32>
    %4739 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4729 : tensor<1x1x80x128xf32>) outs(%4738 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4740 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1726, %4739 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4737 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %4741 = "tosa.add"(%4733, %4740) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4742 = tensor.empty() : tensor<1x32x80x128xf32>
    %4743 = tensor.empty() : tensor<1x32x80x128xf32>
    %4744 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4726 : tensor<1x1x80x128xf32>) outs(%4743 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4745 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4712, %4744 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4742 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1727 = tensor.extract_slice %4712[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1728 = tensor.extract_slice %4712[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %4746 = tensor.empty() : tensor<1x32x80x64xf32>
    %4747 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1728 : tensor<1x32x80x64xf32>) outs(%4746 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %4748 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1729 = tensor.insert_slice %4747 into %4748[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1730 = tensor.insert_slice %extracted_slice_1727 into %inserted_slice_1729[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %4749 = tensor.empty() : tensor<1x32x80x128xf32>
    %4750 = tensor.empty() : tensor<1x32x80x128xf32>
    %4751 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4729 : tensor<1x1x80x128xf32>) outs(%4750 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4752 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1730, %4751 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4749 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %4753 = "tosa.add"(%4745, %4752) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4754 = tensor.empty() : tensor<1x32x128x80xf32>
    %4755 = linalg.generic {indexing_maps = [#map15, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4753 : tensor<1x32x80x128xf32>) outs(%4754 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %4756 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1731 = tensor.extract_slice %4741[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1732 = tensor.insert_slice %extracted_slice_1731 into %4756[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %4757 = "tosa.reshape"(%inserted_slice_1732) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %4758 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1733 = tensor.extract_slice %4755[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1734 = tensor.insert_slice %extracted_slice_1733 into %4758[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %4759 = "tosa.reshape"(%inserted_slice_1734) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %4760 = tensor.empty() : tensor<32x80x80xf32>
    %4761 = linalg.batch_matmul ins(%4757, %4759 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%4760 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %4762 = "tosa.reshape"(%4761) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1735 = arith.constant 11.3137083 : f32
    %4763 = tensor.empty() : tensor<1x32x80x80xf32>
    %4764 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4762 : tensor<1x32x80x80xf32>) outs(%4763 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.divf %in, %cst_1735 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %4765 = "tosa.add"(%4764, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %4766 = tensor.empty() : tensor<1x32x80x1xf32>
    %4767 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4766 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %4768 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4765 : tensor<1x32x80x80xf32>) outs(%4766 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.maxf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %4769 = tensor.empty() : tensor<1x32x80x80xf32>
    %4770 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4765, %4768 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%4769 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.subf %in, %in_1777 : f32
      %5006 = math.exp %5005 : f32
      linalg.yield %5006 : f32
    } -> tensor<1x32x80x80xf32>
    %4771 = tensor.empty() : tensor<1x32x80x1xf32>
    %4772 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4771 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %4773 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4770 : tensor<1x32x80x80xf32>) outs(%4772 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.addf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %4774 = tensor.empty() : tensor<1x32x80x80xf32>
    %4775 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4770, %4773 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%4774 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.divf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %4776 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1736 = tensor.extract_slice %4775[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1737 = tensor.insert_slice %extracted_slice_1736 into %4776[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %4777 = "tosa.reshape"(%inserted_slice_1737) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %4778 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1738 = tensor.extract_slice %4715[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1739 = tensor.insert_slice %extracted_slice_1738 into %4778[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %4779 = "tosa.reshape"(%inserted_slice_1739) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %4780 = tensor.empty() : tensor<32x80x128xf32>
    %4781 = linalg.batch_matmul ins(%4777, %4779 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%4780 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %4782 = "tosa.reshape"(%4781) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4783 = tensor.empty() : tensor<1x80x32x128xf32>
    %4784 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4782 : tensor<1x32x80x128xf32>) outs(%4783 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1740 = tensor.extract_slice %4784[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %4785 = "tosa.reshape"(%extracted_slice_1740) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %4786 = tensor.empty() : tensor<4096x4096xf32>
    %4787 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_492 : tensor<4096x4096xf32>) outs(%4786 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4788 = "tosa.reshape"(%4785) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4789 = tensor.empty() : tensor<80x4096xf32>
    %4790 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%4788, %4787 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%4789 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %4791 = "tosa.reshape"(%4790) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4792 = "tosa.add"(%4674, %4791) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %4793 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1741 = arith.constant 2 : i32
    %4794 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4792 : tensor<1x80x4096xf32>) outs(%4793 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1741 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1742 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %4795 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4794 : tensor<1x80x4096xf32>) outs(%cst_1742 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1743 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4796 = "tosa.add"(%4795, %cst_1743) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %4797 = tensor.empty() : tensor<1x80x1xf32>
    %4798 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4796 : tensor<1x80x1xf32>) outs(%4797 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %4799 = tensor.empty() : tensor<1x80x4096xf32>
    %4800 = tensor.empty() : tensor<1x80x4096xf32>
    %4801 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4798 : tensor<1x80x1xf32>) outs(%4800 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4802 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4792, %4801 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4799 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %4803 = tensor.empty() : tensor<1x80x4096xf32>
    %4804 = tensor.empty() : tensor<1x80x4096xf32>
    %4805 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_60 : tensor<4096xf32>) outs(%4804 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4806 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4805, %4802 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4803 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %4807 = tensor.empty() : tensor<4096x11008xf32>
    %4808 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_494 : tensor<11008x4096xf32>) outs(%4807 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4809 = "tosa.reshape"(%4806) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4810 = tensor.empty() : tensor<80x11008xf32>
    %4811 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%4809, %4808 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%4810 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %4812 = "tosa.reshape"(%4811) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %4813 = tensor.empty() : tensor<1x80x11008xf32>
    %4814 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4812 : tensor<1x80x11008xf32>) outs(%4813 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      %5006 = math.exp %5005 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5007 = arith.addf %cst_1777, %5006 : f32
      %5008 = arith.divf %in, %5007 : f32
      linalg.yield %5008 : f32
    } -> tensor<1x80x11008xf32>
    %4815 = tensor.empty() : tensor<4096x11008xf32>
    %4816 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_496 : tensor<11008x4096xf32>) outs(%4815 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4817 = "tosa.reshape"(%4806) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4818 = tensor.empty() : tensor<80x11008xf32>
    %4819 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%4817, %4816 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%4818 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %4820 = "tosa.reshape"(%4819) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %4821 = tensor.empty() : tensor<1x80x11008xf32>
    %4822 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4814, %4820 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%4821 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x11008xf32>
    %4823 = tensor.empty() : tensor<11008x4096xf32>
    %4824 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_498 : tensor<4096x11008xf32>) outs(%4823 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %4825 = "tosa.reshape"(%4822) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %4826 = tensor.empty() : tensor<80x4096xf32>
    %4827 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%4825, %4824 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%4826 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %4828 = "tosa.reshape"(%4827) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4829 = "tosa.add"(%4792, %4828) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %4830 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1744 = arith.constant 2 : i32
    %4831 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4829 : tensor<1x80x4096xf32>) outs(%4830 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1744 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1745 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %4832 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4831 : tensor<1x80x4096xf32>) outs(%cst_1745 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1746 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4833 = "tosa.add"(%4832, %cst_1746) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %4834 = tensor.empty() : tensor<1x80x1xf32>
    %4835 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4833 : tensor<1x80x1xf32>) outs(%4834 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %4836 = tensor.empty() : tensor<1x80x4096xf32>
    %4837 = tensor.empty() : tensor<1x80x4096xf32>
    %4838 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4835 : tensor<1x80x1xf32>) outs(%4837 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4839 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4829, %4838 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4836 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %4840 = tensor.empty() : tensor<1x80x4096xf32>
    %4841 = tensor.empty() : tensor<1x80x4096xf32>
    %4842 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_61 : tensor<4096xf32>) outs(%4841 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4843 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4842, %4839 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4840 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %4844 = tensor.empty() : tensor<4096x4096xf32>
    %4845 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_500 : tensor<4096x4096xf32>) outs(%4844 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4846 = "tosa.reshape"(%4843) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4847 = tensor.empty() : tensor<80x4096xf32>
    %4848 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%4846, %4845 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%4847 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %4849 = "tosa.reshape"(%4848) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4850 = tensor.empty() : tensor<4096x4096xf32>
    %4851 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_502 : tensor<4096x4096xf32>) outs(%4850 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4852 = "tosa.reshape"(%4843) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4853 = tensor.empty() : tensor<80x4096xf32>
    %4854 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%4852, %4851 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%4853 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %4855 = "tosa.reshape"(%4854) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4856 = tensor.empty() : tensor<4096x4096xf32>
    %4857 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_504 : tensor<4096x4096xf32>) outs(%4856 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4858 = "tosa.reshape"(%4843) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4859 = tensor.empty() : tensor<80x4096xf32>
    %4860 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%4858, %4857 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%4859 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %4861 = "tosa.reshape"(%4860) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4862 = "tosa.reshape"(%4849) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4863 = tensor.empty() : tensor<1x32x80x128xf32>
    %4864 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4862 : tensor<1x80x32x128xf32>) outs(%4863 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4865 = "tosa.reshape"(%4855) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4866 = tensor.empty() : tensor<1x32x80x128xf32>
    %4867 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4865 : tensor<1x80x32x128xf32>) outs(%4866 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4868 = "tosa.reshape"(%4861) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4869 = tensor.empty() : tensor<1x32x80x128xf32>
    %4870 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4868 : tensor<1x80x32x128xf32>) outs(%4869 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1747 = tensor.extract_slice %expanded_640[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1748 = tensor.extract_slice %extracted_slice_1747[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1749 = tensor.extract_slice %extracted_slice_1748[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1750 = tensor.extract_slice %expanded_642[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1751 = tensor.extract_slice %extracted_slice_1750[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1752 = tensor.extract_slice %extracted_slice_1751[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %4871 = tensor.empty() : tensor<1x80x128xf32>
    %4872 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1749 : tensor<1x1x80x128xf32>) outs(%4871 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %4873 = tensor.empty() : tensor<80x128xf32>
    %4874 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%4872 : tensor<1x80x128xf32>) outs(%4873 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %4875 = tensor.empty() : tensor<1x80x128xf32>
    %4876 = linalg.generic {indexing_maps = [#map11, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1752 : tensor<1x1x80x128xf32>) outs(%4875 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %4877 = tensor.empty() : tensor<80x128xf32>
    %4878 = linalg.generic {indexing_maps = [#map12, #map4], iterator_types = ["parallel", "parallel"]} ins(%4876 : tensor<1x80x128xf32>) outs(%4877 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %4879 = tensor.empty() : tensor<1x80x128xf32>
    %4880 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%4879 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %4874[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %4881 = "tosa.reshape"(%4880) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %4882 = tensor.empty() : tensor<1x80x128xf32>
    %4883 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%4882 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5005 = arith.index_cast %in : i64 to index
      %5006 = linalg.index 2 : index
      %extracted = tensor.extract %4878[%5005, %5006] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %4884 = "tosa.reshape"(%4883) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %4885 = tensor.empty() : tensor<1x32x80x128xf32>
    %4886 = tensor.empty() : tensor<1x32x80x128xf32>
    %4887 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4881 : tensor<1x1x80x128xf32>) outs(%4886 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4888 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4864, %4887 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4885 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1753 = tensor.extract_slice %4864[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1754 = tensor.extract_slice %4864[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %4889 = tensor.empty() : tensor<1x32x80x64xf32>
    %4890 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1754 : tensor<1x32x80x64xf32>) outs(%4889 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %4891 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1755 = tensor.insert_slice %4890 into %4891[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1756 = tensor.insert_slice %extracted_slice_1753 into %inserted_slice_1755[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %4892 = tensor.empty() : tensor<1x32x80x128xf32>
    %4893 = tensor.empty() : tensor<1x32x80x128xf32>
    %4894 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4884 : tensor<1x1x80x128xf32>) outs(%4893 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4895 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1756, %4894 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4892 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %4896 = "tosa.add"(%4888, %4895) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4897 = tensor.empty() : tensor<1x32x80x128xf32>
    %4898 = tensor.empty() : tensor<1x32x80x128xf32>
    %4899 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4881 : tensor<1x1x80x128xf32>) outs(%4898 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4900 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4867, %4899 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4897 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1757 = tensor.extract_slice %4867[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1758 = tensor.extract_slice %4867[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %4901 = tensor.empty() : tensor<1x32x80x64xf32>
    %4902 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1758 : tensor<1x32x80x64xf32>) outs(%4901 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x64xf32>
    %4903 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1759 = tensor.insert_slice %4902 into %4903[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1760 = tensor.insert_slice %extracted_slice_1757 into %inserted_slice_1759[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %4904 = tensor.empty() : tensor<1x32x80x128xf32>
    %4905 = tensor.empty() : tensor<1x32x80x128xf32>
    %4906 = linalg.generic {indexing_maps = [#map13, #map14], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4884 : tensor<1x1x80x128xf32>) outs(%4905 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4907 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1760, %4906 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4904 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x128xf32>
    %4908 = "tosa.add"(%4900, %4907) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4909 = tensor.empty() : tensor<1x32x128x80xf32>
    %4910 = linalg.generic {indexing_maps = [#map15, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4908 : tensor<1x32x80x128xf32>) outs(%4909 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %4911 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1761 = tensor.extract_slice %4896[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1762 = tensor.insert_slice %extracted_slice_1761 into %4911[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %4912 = "tosa.reshape"(%inserted_slice_1762) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %4913 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1763 = tensor.extract_slice %4910[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1764 = tensor.insert_slice %extracted_slice_1763 into %4913[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %4914 = "tosa.reshape"(%inserted_slice_1764) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %4915 = tensor.empty() : tensor<32x80x80xf32>
    %4916 = linalg.batch_matmul ins(%4912, %4914 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%4915 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %4917 = "tosa.reshape"(%4916) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1765 = arith.constant 11.3137083 : f32
    %4918 = tensor.empty() : tensor<1x32x80x80xf32>
    %4919 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4917 : tensor<1x32x80x80xf32>) outs(%4918 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.divf %in, %cst_1765 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %4920 = "tosa.add"(%4919, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %4921 = tensor.empty() : tensor<1x32x80x1xf32>
    %4922 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4921 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %4923 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4920 : tensor<1x32x80x80xf32>) outs(%4921 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.maxf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %4924 = tensor.empty() : tensor<1x32x80x80xf32>
    %4925 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4920, %4923 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%4924 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.subf %in, %in_1777 : f32
      %5006 = math.exp %5005 : f32
      linalg.yield %5006 : f32
    } -> tensor<1x32x80x80xf32>
    %4926 = tensor.empty() : tensor<1x32x80x1xf32>
    %4927 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4926 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_1777 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_1777 : f32
    } -> tensor<1x32x80x1xf32>
    %4928 = linalg.generic {indexing_maps = [#map5, #map16], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4925 : tensor<1x32x80x80xf32>) outs(%4927 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.addf %in, %out : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x1xf32>
    %4929 = tensor.empty() : tensor<1x32x80x80xf32>
    %4930 = linalg.generic {indexing_maps = [#map5, #map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4925, %4928 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%4929 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.divf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x32x80x80xf32>
    %4931 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1766 = tensor.extract_slice %4930[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1767 = tensor.insert_slice %extracted_slice_1766 into %4931[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %4932 = "tosa.reshape"(%inserted_slice_1767) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %4933 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1768 = tensor.extract_slice %4870[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1769 = tensor.insert_slice %extracted_slice_1768 into %4933[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %4934 = "tosa.reshape"(%inserted_slice_1769) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %4935 = tensor.empty() : tensor<32x80x128xf32>
    %4936 = linalg.batch_matmul ins(%4932, %4934 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%4935 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %4937 = "tosa.reshape"(%4936) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4938 = tensor.empty() : tensor<1x80x32x128xf32>
    %4939 = linalg.generic {indexing_maps = [#map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4937 : tensor<1x32x80x128xf32>) outs(%4938 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1770 = tensor.extract_slice %4939[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %4940 = "tosa.reshape"(%extracted_slice_1770) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %4941 = tensor.empty() : tensor<4096x4096xf32>
    %4942 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_506 : tensor<4096x4096xf32>) outs(%4941 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4943 = "tosa.reshape"(%4940) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4944 = tensor.empty() : tensor<80x4096xf32>
    %4945 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%4943, %4942 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%4944 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %4946 = "tosa.reshape"(%4945) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4947 = "tosa.add"(%4829, %4946) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %4948 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1771 = arith.constant 2 : i32
    %4949 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4947 : tensor<1x80x4096xf32>) outs(%4948 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1771 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1772 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %4950 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4949 : tensor<1x80x4096xf32>) outs(%cst_1772 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1773 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4951 = "tosa.add"(%4950, %cst_1773) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %4952 = tensor.empty() : tensor<1x80x1xf32>
    %4953 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4951 : tensor<1x80x1xf32>) outs(%4952 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %4954 = tensor.empty() : tensor<1x80x4096xf32>
    %4955 = tensor.empty() : tensor<1x80x4096xf32>
    %4956 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4953 : tensor<1x80x1xf32>) outs(%4955 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4957 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4947, %4956 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4954 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %4958 = tensor.empty() : tensor<1x80x4096xf32>
    %4959 = tensor.empty() : tensor<1x80x4096xf32>
    %4960 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_62 : tensor<4096xf32>) outs(%4959 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4961 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4960, %4957 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4958 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %4962 = tensor.empty() : tensor<4096x11008xf32>
    %4963 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_508 : tensor<11008x4096xf32>) outs(%4962 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4964 = "tosa.reshape"(%4961) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4965 = tensor.empty() : tensor<80x11008xf32>
    %4966 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%4964, %4963 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%4965 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %4967 = "tosa.reshape"(%4966) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %4968 = tensor.empty() : tensor<1x80x11008xf32>
    %4969 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4967 : tensor<1x80x11008xf32>) outs(%4968 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = arith.negf %in : f32
      %5006 = math.exp %5005 : f32
      %cst_1777 = arith.constant 1.000000e+00 : f32
      %5007 = arith.addf %cst_1777, %5006 : f32
      %5008 = arith.divf %in, %5007 : f32
      linalg.yield %5008 : f32
    } -> tensor<1x80x11008xf32>
    %4970 = tensor.empty() : tensor<4096x11008xf32>
    %4971 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_510 : tensor<11008x4096xf32>) outs(%4970 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4972 = "tosa.reshape"(%4961) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %4973 = tensor.empty() : tensor<80x11008xf32>
    %4974 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%4972, %4971 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%4973 : tensor<80x11008xf32>) -> tensor<80x11008xf32>
    %4975 = "tosa.reshape"(%4974) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %4976 = tensor.empty() : tensor<1x80x11008xf32>
    %4977 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4969, %4975 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%4976 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x11008xf32>
    %4978 = tensor.empty() : tensor<11008x4096xf32>
    %4979 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_512 : tensor<4096x11008xf32>) outs(%4978 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %4980 = "tosa.reshape"(%4977) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %4981 = tensor.empty() : tensor<80x4096xf32>
    %4982 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%4980, %4979 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%4981 : tensor<80x4096xf32>) -> tensor<80x4096xf32>
    %4983 = "tosa.reshape"(%4982) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4984 = "tosa.add"(%4947, %4983) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %4985 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1774 = arith.constant 2 : i32
    %4986 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4984 : tensor<1x80x4096xf32>) outs(%4985 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.fpowi %in, %c2_i32_1774 : f32, i32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1775 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %4987 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4986 : tensor<1x80x4096xf32>) outs(%cst_1775 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_1777 = arith.constant 4.096000e+03 : f32
      %5005 = arith.divf %in, %cst_1777 : f32
      %5006 = arith.addf %5005, %out : f32
      linalg.yield %5006 : f32
    } -> tensor<1x80x1xf32>
    %cst_1776 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4988 = "tosa.add"(%4987, %cst_1776) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %4989 = tensor.empty() : tensor<1x80x1xf32>
    %4990 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4988 : tensor<1x80x1xf32>) outs(%4989 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5005 = math.rsqrt %in : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x1xf32>
    %4991 = tensor.empty() : tensor<1x80x4096xf32>
    %4992 = tensor.empty() : tensor<1x80x4096xf32>
    %4993 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4990 : tensor<1x80x1xf32>) outs(%4992 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4994 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4984, %4993 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4991 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %4995 = tensor.empty() : tensor<1x80x4096xf32>
    %4996 = tensor.empty() : tensor<1x80x4096xf32>
    %4997 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_63 : tensor<4096xf32>) outs(%4996 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4998 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4997, %4994 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4995 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_1777: f32, %out: f32):
      %5005 = arith.mulf %in, %in_1777 : f32
      linalg.yield %5005 : f32
    } -> tensor<1x80x4096xf32>
    %4999 = tensor.empty() : tensor<4096x32000xf32>
    %5000 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_514 : tensor<32000x4096xf32>) outs(%4999 : tensor<4096x32000xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x32000xf32>
    %5001 = "tosa.reshape"(%4998) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %5002 = tensor.empty() : tensor<80x32000xf32>
    %5003 = linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%5001, %5000 : tensor<80x4096xf32>, tensor<4096x32000xf32>) outs(%5002 : tensor<80x32000xf32>) -> tensor<80x32000xf32>
    %5004 = "tosa.reshape"(%5003) {new_shape = array<i64: 1, 80, 32000>} : (tensor<80x32000xf32>) -> tensor<1x80x32000xf32>
    return %5004 : tensor<1x80x32000xf32>
  }
}
