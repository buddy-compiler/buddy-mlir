from mlir import ir
from mlir.dialects import tosa, linalg, arith, tensor, math
import numpy
from mlir.passmanager import PassManager

ctx = ir.Context()
with ir.Location.unknown(ctx):
  _module = ir.Module.create()
  with ir.InsertionPoint(_module.body):
      op2 = arith.ConstantOp(ir.IntegerType.get_signless(1), ir.IntegerAttr.get(ir.IntegerType.get_signless(1), 1))
      op = arith.ExtUIOp(ir.IntegerType.get_signless(32), op2)

      #op = ir.Operation.create("linalg.softmax", [tensor_type], [op.result], {"dimension": ir.IntegerAttr.get(ir.IntegerType.get_signless(64), 1)}, None, 0, None, None)
      #print(op)
      # op4 = tensor.EmptyOp([1, 1], ir.F32Type.get())
      # op = linalg.ReduceOp([ir.RankedTensorType.get([1, 1], ir.F32Type.get())], [op3.result], [op4.result], ir._denseI64ArrayAttr([1], ctx))
      # block = ir.Block.create_at_start(op.regions[0], [ir.RankedTensorType(op3.result.type).element_type, ir.RankedTensorType(op4.result.type).element_type])
      #fpowi_op = arith.AddFOp(block.arguments[0], block.arguments[1])
      #block.append(fpowi_op)
      #block.append(linalg.YieldOp([fpowi_op.result]))
  print(_module)
  pm = PassManager("builtin.module")
  pm.add("func.func(tosa-to-linalg)")
  pm.add("func.func(tosa-to-tensor)")
  pm.add("func.func(tosa-to-arith)")
  pm.add("empty-tensor-to-alloc-tensor")
  pm.add("convert-elementwise-to-linalg")
  pm.add("arith-bufferize")
  pm.add("func.func(linalg-bufferize)")
  pm.add("func.func(tensor-bufferize)")
  pm.add("func-bufferize")
  pm.run(_module.operation)
  print(_module)
  print("-------------------------------------------------------------------")
  print("Lowering the module to LLVM dialect ...")
  pm.add("func.func(buffer-deallocation)")
  pm.add("func.func(convert-linalg-to-loops)")
  pm.add("convert-scf-to-cf")
  pm.add("convert-linalg-to-llvm")
  pm.add("convert-arith-to-llvm")
  pm.add("expand-strided-metadata")
  pm.add("finalize-memref-to-llvm")
  pm.add("convert-func-to-llvm")
  pm.add("reconcile-unrealized-casts")
  pm.run(_module.operation)
  print(_module)