#map = affine_map<(d0, d1, d2) -> (d0, d1)>
#map1 = affine_map<(d0, d1, d2) -> (d0, d1, d2)>
#map2 = affine_map<(d0, d1, d2) -> (d1)>
#map3 = affine_map<(d0, d1, d2) -> (d0, d2)>
#map4 = affine_map<(d0, d1) -> (d0, d1)>
#map5 = affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>
#map6 = affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>
#map7 = affine_map<(d0, d1, d2, d3) -> (d0, d1, d3)>
#map8 = affine_map<(d0, d1, d2) -> (d2)>
#map9 = affine_map<(d0, d1) -> (d1, d0)>
#map10 = affine_map<(d0, d1, d2) -> (d2, d1)>
#map11 = affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>
#map12 = affine_map<(d0, d1, d2) -> (d0, 0, d1, d2)>
#map13 = affine_map<(d0, d1) -> (0, d0, d1)>
#map14 = affine_map<(d0, d1, d2, d3, d4) -> (d0, d4, d2, d3)>
#map15 = affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>
#map16 = affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>
#map17 = affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>
module {
  func.func @forward(%arg0: tensor<6755192832xf32>, %arg1: tensor<1x80xi64>) -> tensor<1x80x32000xf32> {
    %extracted_slice = tensor.extract_slice %arg0[0] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_0 = tensor.extract_slice %arg0[4096] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_1 = tensor.extract_slice %arg0[8192] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_2 = tensor.extract_slice %arg0[12288] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_3 = tensor.extract_slice %arg0[16384] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_4 = tensor.extract_slice %arg0[20480] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_5 = tensor.extract_slice %arg0[24576] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_6 = tensor.extract_slice %arg0[28672] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_7 = tensor.extract_slice %arg0[32768] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_8 = tensor.extract_slice %arg0[36864] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_9 = tensor.extract_slice %arg0[40960] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_10 = tensor.extract_slice %arg0[45056] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_11 = tensor.extract_slice %arg0[49152] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_12 = tensor.extract_slice %arg0[53248] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_13 = tensor.extract_slice %arg0[57344] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_14 = tensor.extract_slice %arg0[61440] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_15 = tensor.extract_slice %arg0[65536] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_16 = tensor.extract_slice %arg0[69632] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_17 = tensor.extract_slice %arg0[73728] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_18 = tensor.extract_slice %arg0[77824] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_19 = tensor.extract_slice %arg0[81920] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_20 = tensor.extract_slice %arg0[86016] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_21 = tensor.extract_slice %arg0[90112] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_22 = tensor.extract_slice %arg0[94208] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_23 = tensor.extract_slice %arg0[98304] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_24 = tensor.extract_slice %arg0[102400] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_25 = tensor.extract_slice %arg0[106496] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_26 = tensor.extract_slice %arg0[110592] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_27 = tensor.extract_slice %arg0[114688] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_28 = tensor.extract_slice %arg0[118784] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_29 = tensor.extract_slice %arg0[122880] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_30 = tensor.extract_slice %arg0[126976] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_31 = tensor.extract_slice %arg0[131072] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_32 = tensor.extract_slice %arg0[135168] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_33 = tensor.extract_slice %arg0[139264] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_34 = tensor.extract_slice %arg0[143360] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_35 = tensor.extract_slice %arg0[147456] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_36 = tensor.extract_slice %arg0[151552] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_37 = tensor.extract_slice %arg0[155648] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_38 = tensor.extract_slice %arg0[159744] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_39 = tensor.extract_slice %arg0[163840] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_40 = tensor.extract_slice %arg0[167936] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_41 = tensor.extract_slice %arg0[172032] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_42 = tensor.extract_slice %arg0[176128] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_43 = tensor.extract_slice %arg0[180224] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_44 = tensor.extract_slice %arg0[184320] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_45 = tensor.extract_slice %arg0[188416] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_46 = tensor.extract_slice %arg0[192512] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_47 = tensor.extract_slice %arg0[196608] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_48 = tensor.extract_slice %arg0[200704] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_49 = tensor.extract_slice %arg0[204800] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_50 = tensor.extract_slice %arg0[208896] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_51 = tensor.extract_slice %arg0[212992] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_52 = tensor.extract_slice %arg0[217088] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_53 = tensor.extract_slice %arg0[221184] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_54 = tensor.extract_slice %arg0[225280] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_55 = tensor.extract_slice %arg0[229376] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_56 = tensor.extract_slice %arg0[233472] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_57 = tensor.extract_slice %arg0[237568] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_58 = tensor.extract_slice %arg0[241664] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_59 = tensor.extract_slice %arg0[245760] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_60 = tensor.extract_slice %arg0[249856] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_61 = tensor.extract_slice %arg0[253952] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_62 = tensor.extract_slice %arg0[258048] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_63 = tensor.extract_slice %arg0[262144] [4096] [1] : tensor<6755192832xf32> to tensor<4096xf32>
    %extracted_slice_64 = tensor.extract_slice %arg0[266240] [131072000] [1] : tensor<6755192832xf32> to tensor<131072000xf32>
    %expanded = tensor.expand_shape %extracted_slice_64 [[0, 1]] : tensor<131072000xf32> into tensor<32000x4096xf32>
    %extracted_slice_65 = tensor.extract_slice %arg0[131338240] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_66 = tensor.expand_shape %extracted_slice_65 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_67 = tensor.extract_slice %arg0[148115456] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_68 = tensor.expand_shape %extracted_slice_67 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_69 = tensor.extract_slice %arg0[164892672] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_70 = tensor.expand_shape %extracted_slice_69 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_71 = tensor.extract_slice %arg0[181669888] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_72 = tensor.expand_shape %extracted_slice_71 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_73 = tensor.extract_slice %arg0[198447104] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_74 = tensor.expand_shape %extracted_slice_73 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_75 = tensor.extract_slice %arg0[243535872] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_76 = tensor.expand_shape %extracted_slice_75 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_77 = tensor.extract_slice %arg0[288624640] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_78 = tensor.expand_shape %extracted_slice_77 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_79 = tensor.extract_slice %arg0[333713408] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_80 = tensor.expand_shape %extracted_slice_79 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_81 = tensor.extract_slice %arg0[350490624] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_82 = tensor.expand_shape %extracted_slice_81 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_83 = tensor.extract_slice %arg0[367267840] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_84 = tensor.expand_shape %extracted_slice_83 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_85 = tensor.extract_slice %arg0[384045056] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_86 = tensor.expand_shape %extracted_slice_85 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_87 = tensor.extract_slice %arg0[400822272] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_88 = tensor.expand_shape %extracted_slice_87 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_89 = tensor.extract_slice %arg0[445911040] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_90 = tensor.expand_shape %extracted_slice_89 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_91 = tensor.extract_slice %arg0[490999808] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_92 = tensor.expand_shape %extracted_slice_91 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_93 = tensor.extract_slice %arg0[536088576] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_94 = tensor.expand_shape %extracted_slice_93 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_95 = tensor.extract_slice %arg0[552865792] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_96 = tensor.expand_shape %extracted_slice_95 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_97 = tensor.extract_slice %arg0[569643008] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_98 = tensor.expand_shape %extracted_slice_97 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_99 = tensor.extract_slice %arg0[586420224] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_100 = tensor.expand_shape %extracted_slice_99 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_101 = tensor.extract_slice %arg0[603197440] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_102 = tensor.expand_shape %extracted_slice_101 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_103 = tensor.extract_slice %arg0[648286208] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_104 = tensor.expand_shape %extracted_slice_103 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_105 = tensor.extract_slice %arg0[693374976] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_106 = tensor.expand_shape %extracted_slice_105 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_107 = tensor.extract_slice %arg0[738463744] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_108 = tensor.expand_shape %extracted_slice_107 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_109 = tensor.extract_slice %arg0[755240960] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_110 = tensor.expand_shape %extracted_slice_109 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_111 = tensor.extract_slice %arg0[772018176] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_112 = tensor.expand_shape %extracted_slice_111 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_113 = tensor.extract_slice %arg0[788795392] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_114 = tensor.expand_shape %extracted_slice_113 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_115 = tensor.extract_slice %arg0[805572608] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_116 = tensor.expand_shape %extracted_slice_115 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_117 = tensor.extract_slice %arg0[850661376] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_118 = tensor.expand_shape %extracted_slice_117 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_119 = tensor.extract_slice %arg0[895750144] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_120 = tensor.expand_shape %extracted_slice_119 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_121 = tensor.extract_slice %arg0[940838912] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_122 = tensor.expand_shape %extracted_slice_121 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_123 = tensor.extract_slice %arg0[957616128] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_124 = tensor.expand_shape %extracted_slice_123 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_125 = tensor.extract_slice %arg0[974393344] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_126 = tensor.expand_shape %extracted_slice_125 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_127 = tensor.extract_slice %arg0[991170560] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_128 = tensor.expand_shape %extracted_slice_127 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_129 = tensor.extract_slice %arg0[1007947776] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_130 = tensor.expand_shape %extracted_slice_129 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_131 = tensor.extract_slice %arg0[1053036544] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_132 = tensor.expand_shape %extracted_slice_131 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_133 = tensor.extract_slice %arg0[1098125312] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_134 = tensor.expand_shape %extracted_slice_133 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_135 = tensor.extract_slice %arg0[1143214080] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_136 = tensor.expand_shape %extracted_slice_135 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_137 = tensor.extract_slice %arg0[1159991296] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_138 = tensor.expand_shape %extracted_slice_137 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_139 = tensor.extract_slice %arg0[1176768512] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_140 = tensor.expand_shape %extracted_slice_139 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_141 = tensor.extract_slice %arg0[1193545728] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_142 = tensor.expand_shape %extracted_slice_141 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_143 = tensor.extract_slice %arg0[1210322944] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_144 = tensor.expand_shape %extracted_slice_143 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_145 = tensor.extract_slice %arg0[1255411712] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_146 = tensor.expand_shape %extracted_slice_145 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_147 = tensor.extract_slice %arg0[1300500480] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_148 = tensor.expand_shape %extracted_slice_147 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_149 = tensor.extract_slice %arg0[1345589248] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_150 = tensor.expand_shape %extracted_slice_149 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_151 = tensor.extract_slice %arg0[1362366464] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_152 = tensor.expand_shape %extracted_slice_151 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_153 = tensor.extract_slice %arg0[1379143680] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_154 = tensor.expand_shape %extracted_slice_153 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_155 = tensor.extract_slice %arg0[1395920896] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_156 = tensor.expand_shape %extracted_slice_155 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_157 = tensor.extract_slice %arg0[1412698112] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_158 = tensor.expand_shape %extracted_slice_157 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_159 = tensor.extract_slice %arg0[1457786880] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_160 = tensor.expand_shape %extracted_slice_159 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_161 = tensor.extract_slice %arg0[1502875648] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_162 = tensor.expand_shape %extracted_slice_161 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_163 = tensor.extract_slice %arg0[1547964416] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_164 = tensor.expand_shape %extracted_slice_163 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_165 = tensor.extract_slice %arg0[1564741632] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_166 = tensor.expand_shape %extracted_slice_165 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_167 = tensor.extract_slice %arg0[1581518848] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_168 = tensor.expand_shape %extracted_slice_167 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_169 = tensor.extract_slice %arg0[1598296064] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_170 = tensor.expand_shape %extracted_slice_169 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_171 = tensor.extract_slice %arg0[1615073280] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_172 = tensor.expand_shape %extracted_slice_171 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_173 = tensor.extract_slice %arg0[1660162048] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_174 = tensor.expand_shape %extracted_slice_173 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_175 = tensor.extract_slice %arg0[1705250816] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_176 = tensor.expand_shape %extracted_slice_175 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_177 = tensor.extract_slice %arg0[1750339584] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_178 = tensor.expand_shape %extracted_slice_177 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_179 = tensor.extract_slice %arg0[1767116800] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_180 = tensor.expand_shape %extracted_slice_179 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_181 = tensor.extract_slice %arg0[1783894016] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_182 = tensor.expand_shape %extracted_slice_181 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_183 = tensor.extract_slice %arg0[1800671232] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_184 = tensor.expand_shape %extracted_slice_183 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_185 = tensor.extract_slice %arg0[1817448448] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_186 = tensor.expand_shape %extracted_slice_185 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_187 = tensor.extract_slice %arg0[1862537216] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_188 = tensor.expand_shape %extracted_slice_187 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_189 = tensor.extract_slice %arg0[1907625984] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_190 = tensor.expand_shape %extracted_slice_189 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_191 = tensor.extract_slice %arg0[1952714752] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_192 = tensor.expand_shape %extracted_slice_191 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_193 = tensor.extract_slice %arg0[1969491968] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_194 = tensor.expand_shape %extracted_slice_193 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_195 = tensor.extract_slice %arg0[1986269184] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_196 = tensor.expand_shape %extracted_slice_195 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_197 = tensor.extract_slice %arg0[2003046400] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_198 = tensor.expand_shape %extracted_slice_197 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_199 = tensor.extract_slice %arg0[2019823616] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_200 = tensor.expand_shape %extracted_slice_199 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_201 = tensor.extract_slice %arg0[2064912384] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_202 = tensor.expand_shape %extracted_slice_201 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_203 = tensor.extract_slice %arg0[2110001152] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_204 = tensor.expand_shape %extracted_slice_203 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_205 = tensor.extract_slice %arg0[2155089920] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_206 = tensor.expand_shape %extracted_slice_205 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_207 = tensor.extract_slice %arg0[2171867136] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_208 = tensor.expand_shape %extracted_slice_207 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_209 = tensor.extract_slice %arg0[2188644352] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_210 = tensor.expand_shape %extracted_slice_209 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_211 = tensor.extract_slice %arg0[2205421568] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_212 = tensor.expand_shape %extracted_slice_211 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_213 = tensor.extract_slice %arg0[2222198784] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_214 = tensor.expand_shape %extracted_slice_213 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_215 = tensor.extract_slice %arg0[2267287552] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_216 = tensor.expand_shape %extracted_slice_215 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_217 = tensor.extract_slice %arg0[2312376320] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_218 = tensor.expand_shape %extracted_slice_217 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_219 = tensor.extract_slice %arg0[2357465088] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_220 = tensor.expand_shape %extracted_slice_219 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_221 = tensor.extract_slice %arg0[2374242304] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_222 = tensor.expand_shape %extracted_slice_221 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_223 = tensor.extract_slice %arg0[2391019520] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_224 = tensor.expand_shape %extracted_slice_223 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_225 = tensor.extract_slice %arg0[2407796736] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_226 = tensor.expand_shape %extracted_slice_225 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_227 = tensor.extract_slice %arg0[2424573952] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_228 = tensor.expand_shape %extracted_slice_227 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_229 = tensor.extract_slice %arg0[2469662720] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_230 = tensor.expand_shape %extracted_slice_229 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_231 = tensor.extract_slice %arg0[2514751488] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_232 = tensor.expand_shape %extracted_slice_231 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_233 = tensor.extract_slice %arg0[2559840256] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_234 = tensor.expand_shape %extracted_slice_233 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_235 = tensor.extract_slice %arg0[2576617472] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_236 = tensor.expand_shape %extracted_slice_235 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_237 = tensor.extract_slice %arg0[2593394688] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_238 = tensor.expand_shape %extracted_slice_237 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_239 = tensor.extract_slice %arg0[2610171904] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_240 = tensor.expand_shape %extracted_slice_239 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_241 = tensor.extract_slice %arg0[2626949120] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_242 = tensor.expand_shape %extracted_slice_241 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_243 = tensor.extract_slice %arg0[2672037888] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_244 = tensor.expand_shape %extracted_slice_243 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_245 = tensor.extract_slice %arg0[2717126656] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_246 = tensor.expand_shape %extracted_slice_245 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_247 = tensor.extract_slice %arg0[2762215424] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_248 = tensor.expand_shape %extracted_slice_247 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_249 = tensor.extract_slice %arg0[2778992640] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_250 = tensor.expand_shape %extracted_slice_249 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_251 = tensor.extract_slice %arg0[2795769856] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_252 = tensor.expand_shape %extracted_slice_251 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_253 = tensor.extract_slice %arg0[2812547072] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_254 = tensor.expand_shape %extracted_slice_253 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_255 = tensor.extract_slice %arg0[2829324288] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_256 = tensor.expand_shape %extracted_slice_255 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_257 = tensor.extract_slice %arg0[2874413056] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_258 = tensor.expand_shape %extracted_slice_257 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_259 = tensor.extract_slice %arg0[2919501824] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_260 = tensor.expand_shape %extracted_slice_259 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_261 = tensor.extract_slice %arg0[2964590592] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_262 = tensor.expand_shape %extracted_slice_261 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_263 = tensor.extract_slice %arg0[2981367808] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_264 = tensor.expand_shape %extracted_slice_263 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_265 = tensor.extract_slice %arg0[2998145024] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_266 = tensor.expand_shape %extracted_slice_265 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_267 = tensor.extract_slice %arg0[3014922240] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_268 = tensor.expand_shape %extracted_slice_267 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_269 = tensor.extract_slice %arg0[3031699456] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_270 = tensor.expand_shape %extracted_slice_269 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_271 = tensor.extract_slice %arg0[3076788224] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_272 = tensor.expand_shape %extracted_slice_271 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_273 = tensor.extract_slice %arg0[3121876992] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_274 = tensor.expand_shape %extracted_slice_273 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_275 = tensor.extract_slice %arg0[3166965760] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_276 = tensor.expand_shape %extracted_slice_275 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_277 = tensor.extract_slice %arg0[3183742976] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_278 = tensor.expand_shape %extracted_slice_277 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_279 = tensor.extract_slice %arg0[3200520192] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_280 = tensor.expand_shape %extracted_slice_279 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_281 = tensor.extract_slice %arg0[3217297408] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_282 = tensor.expand_shape %extracted_slice_281 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_283 = tensor.extract_slice %arg0[3234074624] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_284 = tensor.expand_shape %extracted_slice_283 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_285 = tensor.extract_slice %arg0[3279163392] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_286 = tensor.expand_shape %extracted_slice_285 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_287 = tensor.extract_slice %arg0[3324252160] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_288 = tensor.expand_shape %extracted_slice_287 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_289 = tensor.extract_slice %arg0[3369340928] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_290 = tensor.expand_shape %extracted_slice_289 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_291 = tensor.extract_slice %arg0[3386118144] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_292 = tensor.expand_shape %extracted_slice_291 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_293 = tensor.extract_slice %arg0[3402895360] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_294 = tensor.expand_shape %extracted_slice_293 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_295 = tensor.extract_slice %arg0[3419672576] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_296 = tensor.expand_shape %extracted_slice_295 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_297 = tensor.extract_slice %arg0[3436449792] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_298 = tensor.expand_shape %extracted_slice_297 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_299 = tensor.extract_slice %arg0[3481538560] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_300 = tensor.expand_shape %extracted_slice_299 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_301 = tensor.extract_slice %arg0[3526627328] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_302 = tensor.expand_shape %extracted_slice_301 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_303 = tensor.extract_slice %arg0[3571716096] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_304 = tensor.expand_shape %extracted_slice_303 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_305 = tensor.extract_slice %arg0[3588493312] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_306 = tensor.expand_shape %extracted_slice_305 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_307 = tensor.extract_slice %arg0[3605270528] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_308 = tensor.expand_shape %extracted_slice_307 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_309 = tensor.extract_slice %arg0[3622047744] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_310 = tensor.expand_shape %extracted_slice_309 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_311 = tensor.extract_slice %arg0[3638824960] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_312 = tensor.expand_shape %extracted_slice_311 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_313 = tensor.extract_slice %arg0[3683913728] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_314 = tensor.expand_shape %extracted_slice_313 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_315 = tensor.extract_slice %arg0[3729002496] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_316 = tensor.expand_shape %extracted_slice_315 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_317 = tensor.extract_slice %arg0[3774091264] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_318 = tensor.expand_shape %extracted_slice_317 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_319 = tensor.extract_slice %arg0[3790868480] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_320 = tensor.expand_shape %extracted_slice_319 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_321 = tensor.extract_slice %arg0[3807645696] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_322 = tensor.expand_shape %extracted_slice_321 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_323 = tensor.extract_slice %arg0[3824422912] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_324 = tensor.expand_shape %extracted_slice_323 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_325 = tensor.extract_slice %arg0[3841200128] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_326 = tensor.expand_shape %extracted_slice_325 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_327 = tensor.extract_slice %arg0[3886288896] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_328 = tensor.expand_shape %extracted_slice_327 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_329 = tensor.extract_slice %arg0[3931377664] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_330 = tensor.expand_shape %extracted_slice_329 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_331 = tensor.extract_slice %arg0[3976466432] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_332 = tensor.expand_shape %extracted_slice_331 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_333 = tensor.extract_slice %arg0[3993243648] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_334 = tensor.expand_shape %extracted_slice_333 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_335 = tensor.extract_slice %arg0[4010020864] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_336 = tensor.expand_shape %extracted_slice_335 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_337 = tensor.extract_slice %arg0[4026798080] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_338 = tensor.expand_shape %extracted_slice_337 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_339 = tensor.extract_slice %arg0[4043575296] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_340 = tensor.expand_shape %extracted_slice_339 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_341 = tensor.extract_slice %arg0[4088664064] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_342 = tensor.expand_shape %extracted_slice_341 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_343 = tensor.extract_slice %arg0[4133752832] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_344 = tensor.expand_shape %extracted_slice_343 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_345 = tensor.extract_slice %arg0[4178841600] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_346 = tensor.expand_shape %extracted_slice_345 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_347 = tensor.extract_slice %arg0[4195618816] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_348 = tensor.expand_shape %extracted_slice_347 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_349 = tensor.extract_slice %arg0[4212396032] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_350 = tensor.expand_shape %extracted_slice_349 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_351 = tensor.extract_slice %arg0[4229173248] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_352 = tensor.expand_shape %extracted_slice_351 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_353 = tensor.extract_slice %arg0[4245950464] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_354 = tensor.expand_shape %extracted_slice_353 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_355 = tensor.extract_slice %arg0[4291039232] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_356 = tensor.expand_shape %extracted_slice_355 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_357 = tensor.extract_slice %arg0[4336128000] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_358 = tensor.expand_shape %extracted_slice_357 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_359 = tensor.extract_slice %arg0[4381216768] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_360 = tensor.expand_shape %extracted_slice_359 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_361 = tensor.extract_slice %arg0[4397993984] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_362 = tensor.expand_shape %extracted_slice_361 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_363 = tensor.extract_slice %arg0[4414771200] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_364 = tensor.expand_shape %extracted_slice_363 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_365 = tensor.extract_slice %arg0[4431548416] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_366 = tensor.expand_shape %extracted_slice_365 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_367 = tensor.extract_slice %arg0[4448325632] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_368 = tensor.expand_shape %extracted_slice_367 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_369 = tensor.extract_slice %arg0[4493414400] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_370 = tensor.expand_shape %extracted_slice_369 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_371 = tensor.extract_slice %arg0[4538503168] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_372 = tensor.expand_shape %extracted_slice_371 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_373 = tensor.extract_slice %arg0[4583591936] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_374 = tensor.expand_shape %extracted_slice_373 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_375 = tensor.extract_slice %arg0[4600369152] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_376 = tensor.expand_shape %extracted_slice_375 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_377 = tensor.extract_slice %arg0[4617146368] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_378 = tensor.expand_shape %extracted_slice_377 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_379 = tensor.extract_slice %arg0[4633923584] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_380 = tensor.expand_shape %extracted_slice_379 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_381 = tensor.extract_slice %arg0[4650700800] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_382 = tensor.expand_shape %extracted_slice_381 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_383 = tensor.extract_slice %arg0[4695789568] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_384 = tensor.expand_shape %extracted_slice_383 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_385 = tensor.extract_slice %arg0[4740878336] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_386 = tensor.expand_shape %extracted_slice_385 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_387 = tensor.extract_slice %arg0[4785967104] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_388 = tensor.expand_shape %extracted_slice_387 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_389 = tensor.extract_slice %arg0[4802744320] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_390 = tensor.expand_shape %extracted_slice_389 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_391 = tensor.extract_slice %arg0[4819521536] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_392 = tensor.expand_shape %extracted_slice_391 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_393 = tensor.extract_slice %arg0[4836298752] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_394 = tensor.expand_shape %extracted_slice_393 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_395 = tensor.extract_slice %arg0[4853075968] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_396 = tensor.expand_shape %extracted_slice_395 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_397 = tensor.extract_slice %arg0[4898164736] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_398 = tensor.expand_shape %extracted_slice_397 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_399 = tensor.extract_slice %arg0[4943253504] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_400 = tensor.expand_shape %extracted_slice_399 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_401 = tensor.extract_slice %arg0[4988342272] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_402 = tensor.expand_shape %extracted_slice_401 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_403 = tensor.extract_slice %arg0[5005119488] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_404 = tensor.expand_shape %extracted_slice_403 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_405 = tensor.extract_slice %arg0[5021896704] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_406 = tensor.expand_shape %extracted_slice_405 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_407 = tensor.extract_slice %arg0[5038673920] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_408 = tensor.expand_shape %extracted_slice_407 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_409 = tensor.extract_slice %arg0[5055451136] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_410 = tensor.expand_shape %extracted_slice_409 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_411 = tensor.extract_slice %arg0[5100539904] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_412 = tensor.expand_shape %extracted_slice_411 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_413 = tensor.extract_slice %arg0[5145628672] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_414 = tensor.expand_shape %extracted_slice_413 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_415 = tensor.extract_slice %arg0[5190717440] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_416 = tensor.expand_shape %extracted_slice_415 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_417 = tensor.extract_slice %arg0[5207494656] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_418 = tensor.expand_shape %extracted_slice_417 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_419 = tensor.extract_slice %arg0[5224271872] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_420 = tensor.expand_shape %extracted_slice_419 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_421 = tensor.extract_slice %arg0[5241049088] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_422 = tensor.expand_shape %extracted_slice_421 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_423 = tensor.extract_slice %arg0[5257826304] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_424 = tensor.expand_shape %extracted_slice_423 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_425 = tensor.extract_slice %arg0[5302915072] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_426 = tensor.expand_shape %extracted_slice_425 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_427 = tensor.extract_slice %arg0[5348003840] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_428 = tensor.expand_shape %extracted_slice_427 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_429 = tensor.extract_slice %arg0[5393092608] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_430 = tensor.expand_shape %extracted_slice_429 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_431 = tensor.extract_slice %arg0[5409869824] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_432 = tensor.expand_shape %extracted_slice_431 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_433 = tensor.extract_slice %arg0[5426647040] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_434 = tensor.expand_shape %extracted_slice_433 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_435 = tensor.extract_slice %arg0[5443424256] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_436 = tensor.expand_shape %extracted_slice_435 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_437 = tensor.extract_slice %arg0[5460201472] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_438 = tensor.expand_shape %extracted_slice_437 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_439 = tensor.extract_slice %arg0[5505290240] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_440 = tensor.expand_shape %extracted_slice_439 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_441 = tensor.extract_slice %arg0[5550379008] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_442 = tensor.expand_shape %extracted_slice_441 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_443 = tensor.extract_slice %arg0[5595467776] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_444 = tensor.expand_shape %extracted_slice_443 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_445 = tensor.extract_slice %arg0[5612244992] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_446 = tensor.expand_shape %extracted_slice_445 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_447 = tensor.extract_slice %arg0[5629022208] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_448 = tensor.expand_shape %extracted_slice_447 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_449 = tensor.extract_slice %arg0[5645799424] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_450 = tensor.expand_shape %extracted_slice_449 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_451 = tensor.extract_slice %arg0[5662576640] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_452 = tensor.expand_shape %extracted_slice_451 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_453 = tensor.extract_slice %arg0[5707665408] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_454 = tensor.expand_shape %extracted_slice_453 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_455 = tensor.extract_slice %arg0[5752754176] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_456 = tensor.expand_shape %extracted_slice_455 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_457 = tensor.extract_slice %arg0[5797842944] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_458 = tensor.expand_shape %extracted_slice_457 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_459 = tensor.extract_slice %arg0[5814620160] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_460 = tensor.expand_shape %extracted_slice_459 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_461 = tensor.extract_slice %arg0[5831397376] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_462 = tensor.expand_shape %extracted_slice_461 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_463 = tensor.extract_slice %arg0[5848174592] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_464 = tensor.expand_shape %extracted_slice_463 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_465 = tensor.extract_slice %arg0[5864951808] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_466 = tensor.expand_shape %extracted_slice_465 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_467 = tensor.extract_slice %arg0[5910040576] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_468 = tensor.expand_shape %extracted_slice_467 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_469 = tensor.extract_slice %arg0[5955129344] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_470 = tensor.expand_shape %extracted_slice_469 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_471 = tensor.extract_slice %arg0[6000218112] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_472 = tensor.expand_shape %extracted_slice_471 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_473 = tensor.extract_slice %arg0[6016995328] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_474 = tensor.expand_shape %extracted_slice_473 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_475 = tensor.extract_slice %arg0[6033772544] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_476 = tensor.expand_shape %extracted_slice_475 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_477 = tensor.extract_slice %arg0[6050549760] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_478 = tensor.expand_shape %extracted_slice_477 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_479 = tensor.extract_slice %arg0[6067326976] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_480 = tensor.expand_shape %extracted_slice_479 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_481 = tensor.extract_slice %arg0[6112415744] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_482 = tensor.expand_shape %extracted_slice_481 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_483 = tensor.extract_slice %arg0[6157504512] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_484 = tensor.expand_shape %extracted_slice_483 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_485 = tensor.extract_slice %arg0[6202593280] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_486 = tensor.expand_shape %extracted_slice_485 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_487 = tensor.extract_slice %arg0[6219370496] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_488 = tensor.expand_shape %extracted_slice_487 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_489 = tensor.extract_slice %arg0[6236147712] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_490 = tensor.expand_shape %extracted_slice_489 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_491 = tensor.extract_slice %arg0[6252924928] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_492 = tensor.expand_shape %extracted_slice_491 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_493 = tensor.extract_slice %arg0[6269702144] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_494 = tensor.expand_shape %extracted_slice_493 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_495 = tensor.extract_slice %arg0[6314790912] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_496 = tensor.expand_shape %extracted_slice_495 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_497 = tensor.extract_slice %arg0[6359879680] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_498 = tensor.expand_shape %extracted_slice_497 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_499 = tensor.extract_slice %arg0[6404968448] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_500 = tensor.expand_shape %extracted_slice_499 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_501 = tensor.extract_slice %arg0[6421745664] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_502 = tensor.expand_shape %extracted_slice_501 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_503 = tensor.extract_slice %arg0[6438522880] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_504 = tensor.expand_shape %extracted_slice_503 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_505 = tensor.extract_slice %arg0[6455300096] [16777216] [1] : tensor<6755192832xf32> to tensor<16777216xf32>
    %expanded_506 = tensor.expand_shape %extracted_slice_505 [[0, 1]] : tensor<16777216xf32> into tensor<4096x4096xf32>
    %extracted_slice_507 = tensor.extract_slice %arg0[6472077312] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_508 = tensor.expand_shape %extracted_slice_507 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_509 = tensor.extract_slice %arg0[6517166080] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_510 = tensor.expand_shape %extracted_slice_509 [[0, 1]] : tensor<45088768xf32> into tensor<11008x4096xf32>
    %extracted_slice_511 = tensor.extract_slice %arg0[6562254848] [45088768] [1] : tensor<6755192832xf32> to tensor<45088768xf32>
    %expanded_512 = tensor.expand_shape %extracted_slice_511 [[0, 1]] : tensor<45088768xf32> into tensor<4096x11008xf32>
    %extracted_slice_513 = tensor.extract_slice %arg0[6607343616] [131072000] [1] : tensor<6755192832xf32> to tensor<131072000xf32>
    %expanded_514 = tensor.expand_shape %extracted_slice_513 [[0, 1]] : tensor<131072000xf32> into tensor<32000x4096xf32>
    %extracted_slice_515 = tensor.extract_slice %arg0[6738415616] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_516 = tensor.expand_shape %extracted_slice_515 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_517 = tensor.extract_slice %arg0[6738677760] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_518 = tensor.expand_shape %extracted_slice_517 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_519 = tensor.extract_slice %arg0[6738939904] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_520 = tensor.expand_shape %extracted_slice_519 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_521 = tensor.extract_slice %arg0[6739202048] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_522 = tensor.expand_shape %extracted_slice_521 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_523 = tensor.extract_slice %arg0[6739464192] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_524 = tensor.expand_shape %extracted_slice_523 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_525 = tensor.extract_slice %arg0[6739726336] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_526 = tensor.expand_shape %extracted_slice_525 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_527 = tensor.extract_slice %arg0[6739988480] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_528 = tensor.expand_shape %extracted_slice_527 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_529 = tensor.extract_slice %arg0[6740250624] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_530 = tensor.expand_shape %extracted_slice_529 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_531 = tensor.extract_slice %arg0[6740512768] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_532 = tensor.expand_shape %extracted_slice_531 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_533 = tensor.extract_slice %arg0[6740774912] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_534 = tensor.expand_shape %extracted_slice_533 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_535 = tensor.extract_slice %arg0[6741037056] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_536 = tensor.expand_shape %extracted_slice_535 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_537 = tensor.extract_slice %arg0[6741299200] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_538 = tensor.expand_shape %extracted_slice_537 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_539 = tensor.extract_slice %arg0[6741561344] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_540 = tensor.expand_shape %extracted_slice_539 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_541 = tensor.extract_slice %arg0[6741823488] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_542 = tensor.expand_shape %extracted_slice_541 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_543 = tensor.extract_slice %arg0[6742085632] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_544 = tensor.expand_shape %extracted_slice_543 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_545 = tensor.extract_slice %arg0[6742347776] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_546 = tensor.expand_shape %extracted_slice_545 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_547 = tensor.extract_slice %arg0[6742609920] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_548 = tensor.expand_shape %extracted_slice_547 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_549 = tensor.extract_slice %arg0[6742872064] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_550 = tensor.expand_shape %extracted_slice_549 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_551 = tensor.extract_slice %arg0[6743134208] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_552 = tensor.expand_shape %extracted_slice_551 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_553 = tensor.extract_slice %arg0[6743396352] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_554 = tensor.expand_shape %extracted_slice_553 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_555 = tensor.extract_slice %arg0[6743658496] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_556 = tensor.expand_shape %extracted_slice_555 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_557 = tensor.extract_slice %arg0[6743920640] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_558 = tensor.expand_shape %extracted_slice_557 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_559 = tensor.extract_slice %arg0[6744182784] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_560 = tensor.expand_shape %extracted_slice_559 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_561 = tensor.extract_slice %arg0[6744444928] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_562 = tensor.expand_shape %extracted_slice_561 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_563 = tensor.extract_slice %arg0[6744707072] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_564 = tensor.expand_shape %extracted_slice_563 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_565 = tensor.extract_slice %arg0[6744969216] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_566 = tensor.expand_shape %extracted_slice_565 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_567 = tensor.extract_slice %arg0[6745231360] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_568 = tensor.expand_shape %extracted_slice_567 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_569 = tensor.extract_slice %arg0[6745493504] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_570 = tensor.expand_shape %extracted_slice_569 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_571 = tensor.extract_slice %arg0[6745755648] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_572 = tensor.expand_shape %extracted_slice_571 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_573 = tensor.extract_slice %arg0[6746017792] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_574 = tensor.expand_shape %extracted_slice_573 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_575 = tensor.extract_slice %arg0[6746279936] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_576 = tensor.expand_shape %extracted_slice_575 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_577 = tensor.extract_slice %arg0[6746542080] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_578 = tensor.expand_shape %extracted_slice_577 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_579 = tensor.extract_slice %arg0[6746804224] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_580 = tensor.expand_shape %extracted_slice_579 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_581 = tensor.extract_slice %arg0[6747066368] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_582 = tensor.expand_shape %extracted_slice_581 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_583 = tensor.extract_slice %arg0[6747328512] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_584 = tensor.expand_shape %extracted_slice_583 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_585 = tensor.extract_slice %arg0[6747590656] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_586 = tensor.expand_shape %extracted_slice_585 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_587 = tensor.extract_slice %arg0[6747852800] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_588 = tensor.expand_shape %extracted_slice_587 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_589 = tensor.extract_slice %arg0[6748114944] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_590 = tensor.expand_shape %extracted_slice_589 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_591 = tensor.extract_slice %arg0[6748377088] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_592 = tensor.expand_shape %extracted_slice_591 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_593 = tensor.extract_slice %arg0[6748639232] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_594 = tensor.expand_shape %extracted_slice_593 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_595 = tensor.extract_slice %arg0[6748901376] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_596 = tensor.expand_shape %extracted_slice_595 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_597 = tensor.extract_slice %arg0[6749163520] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_598 = tensor.expand_shape %extracted_slice_597 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_599 = tensor.extract_slice %arg0[6749425664] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_600 = tensor.expand_shape %extracted_slice_599 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_601 = tensor.extract_slice %arg0[6749687808] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_602 = tensor.expand_shape %extracted_slice_601 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_603 = tensor.extract_slice %arg0[6749949952] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_604 = tensor.expand_shape %extracted_slice_603 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_605 = tensor.extract_slice %arg0[6750212096] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_606 = tensor.expand_shape %extracted_slice_605 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_607 = tensor.extract_slice %arg0[6750474240] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_608 = tensor.expand_shape %extracted_slice_607 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_609 = tensor.extract_slice %arg0[6750736384] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_610 = tensor.expand_shape %extracted_slice_609 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_611 = tensor.extract_slice %arg0[6750998528] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_612 = tensor.expand_shape %extracted_slice_611 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_613 = tensor.extract_slice %arg0[6751260672] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_614 = tensor.expand_shape %extracted_slice_613 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_615 = tensor.extract_slice %arg0[6751522816] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_616 = tensor.expand_shape %extracted_slice_615 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_617 = tensor.extract_slice %arg0[6751784960] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_618 = tensor.expand_shape %extracted_slice_617 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_619 = tensor.extract_slice %arg0[6752047104] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_620 = tensor.expand_shape %extracted_slice_619 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_621 = tensor.extract_slice %arg0[6752309248] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_622 = tensor.expand_shape %extracted_slice_621 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_623 = tensor.extract_slice %arg0[6752571392] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_624 = tensor.expand_shape %extracted_slice_623 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_625 = tensor.extract_slice %arg0[6752833536] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_626 = tensor.expand_shape %extracted_slice_625 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_627 = tensor.extract_slice %arg0[6753095680] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_628 = tensor.expand_shape %extracted_slice_627 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_629 = tensor.extract_slice %arg0[6753357824] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_630 = tensor.expand_shape %extracted_slice_629 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_631 = tensor.extract_slice %arg0[6753619968] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_632 = tensor.expand_shape %extracted_slice_631 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_633 = tensor.extract_slice %arg0[6753882112] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_634 = tensor.expand_shape %extracted_slice_633 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_635 = tensor.extract_slice %arg0[6754144256] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_636 = tensor.expand_shape %extracted_slice_635 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_637 = tensor.extract_slice %arg0[6754406400] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_638 = tensor.expand_shape %extracted_slice_637 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_639 = tensor.extract_slice %arg0[6754668544] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_640 = tensor.expand_shape %extracted_slice_639 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %extracted_slice_641 = tensor.extract_slice %arg0[6754930688] [262144] [1] : tensor<6755192832xf32> to tensor<262144xf32>
    %expanded_642 = tensor.expand_shape %extracted_slice_641 [[0, 1, 2, 3]] : tensor<262144xf32> into tensor<1x1x2048x128xf32>
    %cst = arith.constant dense<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]> : tensor<80xi64>
    %0 = "tosa.reshape"(%cst) {new_shape = array<i64: 1, 80>} : (tensor<80xi64>) -> tensor<1x80xi64>
    %1 = "tosa.reshape"(%0) {new_shape = array<i64: 1, 80>} : (tensor<1x80xi64>) -> tensor<1x80xi64>
    %2 = tensor.empty() : tensor<1x80x4096xf32>
    %3 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg1 : tensor<1x80xi64>) outs(%2 : tensor<1x80x4096xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %expanded[%4844, %4845] : tensor<32000x4096xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x4096xf32>
    %cst_643 = arith.constant dense<true> : tensor<1x80xi1>
    %cst_644 = arith.constant dense<-3.40282347E+38> : tensor<80x80xf32>
    %cst_645 = arith.constant dense<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]> : tensor<80xi64>
    %cst_646 = arith.constant dense<1> : tensor<i64>
    %4 = "tosa.add"(%cst_645, %cst_646) : (tensor<80xi64>, tensor<i64>) -> tensor<80xi64>
    %5 = "tosa.reshape"(%4) {new_shape = array<i64: 80, 1>} : (tensor<80xi64>) -> tensor<80x1xi64>
    %6 = tensor.empty() : tensor<80x80xi1>
    %7 = linalg.generic {indexing_maps = [#map2, #map3, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%cst_645, %5 : tensor<80xi64>, tensor<80x1xi64>) outs(%6 : tensor<80x80xi1>) {
    ^bb0(%in: i64, %in_2002: i64, %out: i1):
      %4844 = arith.cmpi slt, %in, %in_2002 : i64
      linalg.yield %4844 : i1
    } -> tensor<80x80xi1>
    %cst_647 = arith.constant 0.000000e+00 : f32
    %8 = tensor.empty() : tensor<80x80xf32>
    %9 = linalg.generic {indexing_maps = [#map4, #map4, #map4], iterator_types = ["parallel", "parallel"]} ins(%cst_644, %7 : tensor<80x80xf32>, tensor<80x80xi1>) outs(%8 : tensor<80x80xf32>) {
    ^bb0(%in: f32, %in_2002: i1, %out: f32):
      %4844 = arith.select %in_2002, %cst_647, %in : f32
      linalg.yield %4844 : f32
    } -> tensor<80x80xf32>
    %extracted_slice_648 = tensor.extract_slice %cst_643[0, 0] [1, 80] [1, 1] : tensor<1x80xi1> to tensor<1x80xi1>
    %10 = "tosa.reshape"(%extracted_slice_648) {new_shape = array<i64: 1, 1, 80>} : (tensor<1x80xi1>) -> tensor<1x1x80xi1>
    %11 = "tosa.reshape"(%10) {new_shape = array<i64: 1, 1, 1, 80>} : (tensor<1x1x80xi1>) -> tensor<1x1x1x80xi1>
    %extracted_slice_649 = tensor.extract_slice %11[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %12 = tensor.empty() : tensor<1x1x80x80xi1>
    %extracted_slice_650 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice = tensor.insert_slice %extracted_slice_650 into %12[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_651 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_652 = tensor.insert_slice %extracted_slice_651 into %inserted_slice[0, 0, 1, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_653 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_654 = tensor.insert_slice %extracted_slice_653 into %inserted_slice_652[0, 0, 2, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_655 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_656 = tensor.insert_slice %extracted_slice_655 into %inserted_slice_654[0, 0, 3, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_657 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_658 = tensor.insert_slice %extracted_slice_657 into %inserted_slice_656[0, 0, 4, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_659 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_660 = tensor.insert_slice %extracted_slice_659 into %inserted_slice_658[0, 0, 5, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_661 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_662 = tensor.insert_slice %extracted_slice_661 into %inserted_slice_660[0, 0, 6, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_663 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_664 = tensor.insert_slice %extracted_slice_663 into %inserted_slice_662[0, 0, 7, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_665 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_666 = tensor.insert_slice %extracted_slice_665 into %inserted_slice_664[0, 0, 8, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_667 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_668 = tensor.insert_slice %extracted_slice_667 into %inserted_slice_666[0, 0, 9, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_669 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_670 = tensor.insert_slice %extracted_slice_669 into %inserted_slice_668[0, 0, 10, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_671 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_672 = tensor.insert_slice %extracted_slice_671 into %inserted_slice_670[0, 0, 11, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_673 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_674 = tensor.insert_slice %extracted_slice_673 into %inserted_slice_672[0, 0, 12, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_675 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_676 = tensor.insert_slice %extracted_slice_675 into %inserted_slice_674[0, 0, 13, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_677 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_678 = tensor.insert_slice %extracted_slice_677 into %inserted_slice_676[0, 0, 14, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_679 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_680 = tensor.insert_slice %extracted_slice_679 into %inserted_slice_678[0, 0, 15, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_681 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_682 = tensor.insert_slice %extracted_slice_681 into %inserted_slice_680[0, 0, 16, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_683 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_684 = tensor.insert_slice %extracted_slice_683 into %inserted_slice_682[0, 0, 17, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_685 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_686 = tensor.insert_slice %extracted_slice_685 into %inserted_slice_684[0, 0, 18, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_687 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_688 = tensor.insert_slice %extracted_slice_687 into %inserted_slice_686[0, 0, 19, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_689 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_690 = tensor.insert_slice %extracted_slice_689 into %inserted_slice_688[0, 0, 20, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_691 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_692 = tensor.insert_slice %extracted_slice_691 into %inserted_slice_690[0, 0, 21, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_693 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_694 = tensor.insert_slice %extracted_slice_693 into %inserted_slice_692[0, 0, 22, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_695 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_696 = tensor.insert_slice %extracted_slice_695 into %inserted_slice_694[0, 0, 23, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_697 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_698 = tensor.insert_slice %extracted_slice_697 into %inserted_slice_696[0, 0, 24, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_699 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_700 = tensor.insert_slice %extracted_slice_699 into %inserted_slice_698[0, 0, 25, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_701 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_702 = tensor.insert_slice %extracted_slice_701 into %inserted_slice_700[0, 0, 26, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_703 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_704 = tensor.insert_slice %extracted_slice_703 into %inserted_slice_702[0, 0, 27, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_705 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_706 = tensor.insert_slice %extracted_slice_705 into %inserted_slice_704[0, 0, 28, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_707 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_708 = tensor.insert_slice %extracted_slice_707 into %inserted_slice_706[0, 0, 29, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_709 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_710 = tensor.insert_slice %extracted_slice_709 into %inserted_slice_708[0, 0, 30, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_711 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_712 = tensor.insert_slice %extracted_slice_711 into %inserted_slice_710[0, 0, 31, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_713 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_714 = tensor.insert_slice %extracted_slice_713 into %inserted_slice_712[0, 0, 32, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_715 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_716 = tensor.insert_slice %extracted_slice_715 into %inserted_slice_714[0, 0, 33, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_717 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_718 = tensor.insert_slice %extracted_slice_717 into %inserted_slice_716[0, 0, 34, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_719 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_720 = tensor.insert_slice %extracted_slice_719 into %inserted_slice_718[0, 0, 35, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_721 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_722 = tensor.insert_slice %extracted_slice_721 into %inserted_slice_720[0, 0, 36, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_723 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_724 = tensor.insert_slice %extracted_slice_723 into %inserted_slice_722[0, 0, 37, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_725 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_726 = tensor.insert_slice %extracted_slice_725 into %inserted_slice_724[0, 0, 38, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_727 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_728 = tensor.insert_slice %extracted_slice_727 into %inserted_slice_726[0, 0, 39, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_729 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_730 = tensor.insert_slice %extracted_slice_729 into %inserted_slice_728[0, 0, 40, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_731 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_732 = tensor.insert_slice %extracted_slice_731 into %inserted_slice_730[0, 0, 41, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_733 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_734 = tensor.insert_slice %extracted_slice_733 into %inserted_slice_732[0, 0, 42, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_735 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_736 = tensor.insert_slice %extracted_slice_735 into %inserted_slice_734[0, 0, 43, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_737 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_738 = tensor.insert_slice %extracted_slice_737 into %inserted_slice_736[0, 0, 44, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_739 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_740 = tensor.insert_slice %extracted_slice_739 into %inserted_slice_738[0, 0, 45, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_741 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_742 = tensor.insert_slice %extracted_slice_741 into %inserted_slice_740[0, 0, 46, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_743 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_744 = tensor.insert_slice %extracted_slice_743 into %inserted_slice_742[0, 0, 47, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_745 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_746 = tensor.insert_slice %extracted_slice_745 into %inserted_slice_744[0, 0, 48, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_747 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_748 = tensor.insert_slice %extracted_slice_747 into %inserted_slice_746[0, 0, 49, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_749 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_750 = tensor.insert_slice %extracted_slice_749 into %inserted_slice_748[0, 0, 50, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_751 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_752 = tensor.insert_slice %extracted_slice_751 into %inserted_slice_750[0, 0, 51, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_753 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_754 = tensor.insert_slice %extracted_slice_753 into %inserted_slice_752[0, 0, 52, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_755 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_756 = tensor.insert_slice %extracted_slice_755 into %inserted_slice_754[0, 0, 53, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_757 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_758 = tensor.insert_slice %extracted_slice_757 into %inserted_slice_756[0, 0, 54, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_759 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_760 = tensor.insert_slice %extracted_slice_759 into %inserted_slice_758[0, 0, 55, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_761 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_762 = tensor.insert_slice %extracted_slice_761 into %inserted_slice_760[0, 0, 56, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_763 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_764 = tensor.insert_slice %extracted_slice_763 into %inserted_slice_762[0, 0, 57, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_765 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_766 = tensor.insert_slice %extracted_slice_765 into %inserted_slice_764[0, 0, 58, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_767 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_768 = tensor.insert_slice %extracted_slice_767 into %inserted_slice_766[0, 0, 59, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_769 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_770 = tensor.insert_slice %extracted_slice_769 into %inserted_slice_768[0, 0, 60, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_771 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_772 = tensor.insert_slice %extracted_slice_771 into %inserted_slice_770[0, 0, 61, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_773 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_774 = tensor.insert_slice %extracted_slice_773 into %inserted_slice_772[0, 0, 62, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_775 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_776 = tensor.insert_slice %extracted_slice_775 into %inserted_slice_774[0, 0, 63, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_777 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_778 = tensor.insert_slice %extracted_slice_777 into %inserted_slice_776[0, 0, 64, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_779 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_780 = tensor.insert_slice %extracted_slice_779 into %inserted_slice_778[0, 0, 65, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_781 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_782 = tensor.insert_slice %extracted_slice_781 into %inserted_slice_780[0, 0, 66, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_783 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_784 = tensor.insert_slice %extracted_slice_783 into %inserted_slice_782[0, 0, 67, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_785 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_786 = tensor.insert_slice %extracted_slice_785 into %inserted_slice_784[0, 0, 68, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_787 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_788 = tensor.insert_slice %extracted_slice_787 into %inserted_slice_786[0, 0, 69, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_789 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_790 = tensor.insert_slice %extracted_slice_789 into %inserted_slice_788[0, 0, 70, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_791 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_792 = tensor.insert_slice %extracted_slice_791 into %inserted_slice_790[0, 0, 71, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_793 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_794 = tensor.insert_slice %extracted_slice_793 into %inserted_slice_792[0, 0, 72, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_795 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_796 = tensor.insert_slice %extracted_slice_795 into %inserted_slice_794[0, 0, 73, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_797 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_798 = tensor.insert_slice %extracted_slice_797 into %inserted_slice_796[0, 0, 74, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_799 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_800 = tensor.insert_slice %extracted_slice_799 into %inserted_slice_798[0, 0, 75, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_801 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_802 = tensor.insert_slice %extracted_slice_801 into %inserted_slice_800[0, 0, 76, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_803 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_804 = tensor.insert_slice %extracted_slice_803 into %inserted_slice_802[0, 0, 77, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_805 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_806 = tensor.insert_slice %extracted_slice_805 into %inserted_slice_804[0, 0, 78, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %extracted_slice_807 = tensor.extract_slice %extracted_slice_649[0, 0, 0, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> to tensor<1x1x1x80xi1>
    %inserted_slice_808 = tensor.insert_slice %extracted_slice_807 into %inserted_slice_806[0, 0, 79, 0] [1, 1, 1, 80] [1, 1, 1, 1] : tensor<1x1x1x80xi1> into tensor<1x1x80x80xi1>
    %13 = tensor.empty() : tensor<1x1x80x80xf32>
    %14 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_808 : tensor<1x1x80x80xi1>) outs(%13 : tensor<1x1x80x80xf32>) {
    ^bb0(%in: i1, %out: f32):
      %4844 = arith.extui %in : i1 to i32
      %4845 = arith.sitofp %4844 : i32 to f32
      linalg.yield %4845 : f32
    } -> tensor<1x1x80x80xf32>
    %cst_809 = arith.constant 1.000000e+00 : f32
    %15 = tensor.empty() : tensor<1x1x80x80xf32>
    %16 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%14 : tensor<1x1x80x80xf32>) outs(%15 : tensor<1x1x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.subf %cst_809, %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x1x80x80xf32>
    %17 = tensor.empty() : tensor<1x1x80x80xi1>
    %18 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%16 : tensor<1x1x80x80xf32>) outs(%17 : tensor<1x1x80x80xi1>) {
    ^bb0(%in: f32, %out: i1):
      %4844 = arith.fptosi %in : f32 to i32
      %4845 = arith.trunci %4844 : i32 to i1
      linalg.yield %4845 : i1
    } -> tensor<1x1x80x80xi1>
    %cst_810 = arith.constant -3.40282347E+38 : f32
    %19 = tensor.empty() : tensor<1x1x80x80xf32>
    %20 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%16, %18 : tensor<1x1x80x80xf32>, tensor<1x1x80x80xi1>) outs(%19 : tensor<1x1x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: i1, %out: f32):
      %4844 = arith.select %in_2002, %cst_810, %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x1x80x80xf32>
    %21 = "tosa.reshape"(%9) {new_shape = array<i64: 1, 80, 80>} : (tensor<80x80xf32>) -> tensor<1x80x80xf32>
    %22 = "tosa.reshape"(%21) {new_shape = array<i64: 1, 1, 80, 80>} : (tensor<1x80x80xf32>) -> tensor<1x1x80x80xf32>
    %extracted_slice_811 = tensor.extract_slice %22[0, 0, 0, 0] [1, 1, 80, 80] [1, 1, 1, 1] : tensor<1x1x80x80xf32> to tensor<1x1x80x80xf32>
    %extracted_slice_812 = tensor.extract_slice %extracted_slice_811[0, 0, 0, 0] [1, 1, 80, 80] [1, 1, 1, 1] : tensor<1x1x80x80xf32> to tensor<1x1x80x80xf32>
    %23 = tensor.empty() : tensor<1x1x80x80xf32>
    %extracted_slice_813 = tensor.extract_slice %extracted_slice_812[0, 0, 0, 0] [1, 1, 80, 80] [1, 1, 1, 1] : tensor<1x1x80x80xf32> to tensor<1x1x80x80xf32>
    %inserted_slice_814 = tensor.insert_slice %extracted_slice_813 into %23[0, 0, 0, 0] [1, 1, 80, 80] [1, 1, 1, 1] : tensor<1x1x80x80xf32> into tensor<1x1x80x80xf32>
    %24 = "tosa.add"(%20, %inserted_slice_814) : (tensor<1x1x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x1x80x80xf32>
    %25 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32 = arith.constant 2 : i32
    %26 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3 : tensor<1x80x4096xf32>) outs(%25 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_815 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %27 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%26 : tensor<1x80x4096xf32>) outs(%cst_815 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_816 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %28 = "tosa.add"(%27, %cst_816) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %29 = tensor.empty() : tensor<1x80x1xf32>
    %30 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%28 : tensor<1x80x1xf32>) outs(%29 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %31 = tensor.empty() : tensor<1x80x4096xf32>
    %32 = tensor.empty() : tensor<1x80x4096xf32>
    %33 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%30 : tensor<1x80x1xf32>) outs(%32 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %34 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3, %33 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%31 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %35 = tensor.empty() : tensor<1x80x4096xf32>
    %36 = tensor.empty() : tensor<1x80x4096xf32>
    %37 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice : tensor<4096xf32>) outs(%36 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %38 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%37, %34 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%35 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %39 = tensor.empty() : tensor<4096x4096xf32>
    %40 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_66 : tensor<4096x4096xf32>) outs(%39 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %41 = "tosa.reshape"(%38) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_817 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %42 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%41, %40 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_817 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %43 = "tosa.reshape"(%42) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %44 = tensor.empty() : tensor<4096x4096xf32>
    %45 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_68 : tensor<4096x4096xf32>) outs(%44 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %46 = "tosa.reshape"(%38) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_818 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %47 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%46, %45 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_818 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %48 = "tosa.reshape"(%47) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %49 = tensor.empty() : tensor<4096x4096xf32>
    %50 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_70 : tensor<4096x4096xf32>) outs(%49 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %51 = "tosa.reshape"(%38) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_819 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %52 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%51, %50 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_819 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %53 = "tosa.reshape"(%52) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %54 = "tosa.reshape"(%43) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %55 = tensor.empty() : tensor<1x32x80x128xf32>
    %56 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%54 : tensor<1x80x32x128xf32>) outs(%55 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %57 = "tosa.reshape"(%48) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %58 = tensor.empty() : tensor<1x32x80x128xf32>
    %59 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%57 : tensor<1x80x32x128xf32>) outs(%58 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %60 = "tosa.reshape"(%53) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %61 = tensor.empty() : tensor<1x32x80x128xf32>
    %62 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%60 : tensor<1x80x32x128xf32>) outs(%61 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_820 = tensor.extract_slice %expanded_516[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_821 = tensor.extract_slice %extracted_slice_820[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_822 = tensor.extract_slice %extracted_slice_821[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_823 = tensor.extract_slice %expanded_518[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_824 = tensor.extract_slice %extracted_slice_823[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_825 = tensor.extract_slice %extracted_slice_824[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %63 = tensor.empty() : tensor<1x80x128xf32>
    %64 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_822 : tensor<1x1x80x128xf32>) outs(%63 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %65 = tensor.empty() : tensor<80x128xf32>
    %66 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%64 : tensor<1x80x128xf32>) outs(%65 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %67 = tensor.empty() : tensor<1x80x128xf32>
    %68 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_825 : tensor<1x1x80x128xf32>) outs(%67 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %69 = tensor.empty() : tensor<80x128xf32>
    %70 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%68 : tensor<1x80x128xf32>) outs(%69 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %71 = tensor.empty() : tensor<1x80x128xf32>
    %72 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%71 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %66[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %73 = "tosa.reshape"(%72) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %74 = tensor.empty() : tensor<1x80x128xf32>
    %75 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%74 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %70[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %76 = "tosa.reshape"(%75) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %77 = tensor.empty() : tensor<1x32x80x128xf32>
    %78 = tensor.empty() : tensor<1x32x80x128xf32>
    %79 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%73 : tensor<1x1x80x128xf32>) outs(%78 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %80 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%56, %79 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%77 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_826 = tensor.extract_slice %56[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_827 = tensor.extract_slice %56[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %81 = tensor.empty() : tensor<1x32x80x64xf32>
    %82 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_827 : tensor<1x32x80x64xf32>) outs(%81 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %83 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_828 = tensor.insert_slice %82 into %83[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_829 = tensor.insert_slice %extracted_slice_826 into %inserted_slice_828[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %84 = tensor.empty() : tensor<1x32x80x128xf32>
    %85 = tensor.empty() : tensor<1x32x80x128xf32>
    %86 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%76 : tensor<1x1x80x128xf32>) outs(%85 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %87 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_829, %86 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%84 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %88 = "tosa.add"(%80, %87) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %89 = tensor.empty() : tensor<1x32x80x128xf32>
    %90 = tensor.empty() : tensor<1x32x80x128xf32>
    %91 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%73 : tensor<1x1x80x128xf32>) outs(%90 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %92 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%59, %91 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%89 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_830 = tensor.extract_slice %59[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_831 = tensor.extract_slice %59[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %93 = tensor.empty() : tensor<1x32x80x64xf32>
    %94 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_831 : tensor<1x32x80x64xf32>) outs(%93 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %95 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_832 = tensor.insert_slice %94 into %95[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_833 = tensor.insert_slice %extracted_slice_830 into %inserted_slice_832[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %96 = tensor.empty() : tensor<1x32x80x128xf32>
    %97 = tensor.empty() : tensor<1x32x80x128xf32>
    %98 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%76 : tensor<1x1x80x128xf32>) outs(%97 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %99 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_833, %98 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%96 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %100 = "tosa.add"(%92, %99) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %101 = tensor.empty() : tensor<1x32x128x80xf32>
    %102 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%100 : tensor<1x32x80x128xf32>) outs(%101 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %103 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_834 = tensor.extract_slice %88[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_835 = tensor.insert_slice %extracted_slice_834 into %103[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %104 = "tosa.reshape"(%inserted_slice_835) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %105 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_836 = tensor.extract_slice %102[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_837 = tensor.insert_slice %extracted_slice_836 into %105[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %106 = "tosa.reshape"(%inserted_slice_837) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %107 = tensor.empty() : tensor<32x80x80xf32>
    %108 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%107 : tensor<32x80x80xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x80xf32>
    %109 = linalg.batch_matmul ins(%104, %106 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%108 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %110 = "tosa.reshape"(%109) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_838 = arith.constant 11.3137083 : f32
    %111 = tensor.empty() : tensor<1x32x80x80xf32>
    %112 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%110 : tensor<1x32x80x80xf32>) outs(%111 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.divf %in, %cst_838 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %113 = "tosa.add"(%112, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %114 = tensor.empty() : tensor<1x32x80x1xf32>
    %115 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%114 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %116 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%113 : tensor<1x32x80x80xf32>) outs(%114 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.maxf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %117 = tensor.empty() : tensor<1x32x80x80xf32>
    %118 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%113, %116 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%117 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.subf %in, %in_2002 : f32
      %4845 = math.exp %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<1x32x80x80xf32>
    %119 = tensor.empty() : tensor<1x32x80x1xf32>
    %120 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%119 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %121 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%118 : tensor<1x32x80x80xf32>) outs(%120 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.addf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %122 = tensor.empty() : tensor<1x32x80x80xf32>
    %123 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%118, %121 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%122 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.divf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %124 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_839 = tensor.extract_slice %123[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_840 = tensor.insert_slice %extracted_slice_839 into %124[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %125 = "tosa.reshape"(%inserted_slice_840) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %126 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_841 = tensor.extract_slice %62[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_842 = tensor.insert_slice %extracted_slice_841 into %126[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %127 = "tosa.reshape"(%inserted_slice_842) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %128 = tensor.empty() : tensor<32x80x128xf32>
    %129 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%128 : tensor<32x80x128xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x128xf32>
    %130 = linalg.batch_matmul ins(%125, %127 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%129 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %131 = "tosa.reshape"(%130) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %132 = tensor.empty() : tensor<1x80x32x128xf32>
    %133 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%131 : tensor<1x32x80x128xf32>) outs(%132 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_843 = tensor.extract_slice %133[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %134 = "tosa.reshape"(%extracted_slice_843) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %135 = tensor.empty() : tensor<4096x4096xf32>
    %136 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_72 : tensor<4096x4096xf32>) outs(%135 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %137 = "tosa.reshape"(%134) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_844 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %138 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%137, %136 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_844 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %139 = "tosa.reshape"(%138) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %140 = "tosa.add"(%3, %139) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %141 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_845 = arith.constant 2 : i32
    %142 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%140 : tensor<1x80x4096xf32>) outs(%141 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_845 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_846 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %143 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%142 : tensor<1x80x4096xf32>) outs(%cst_846 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_847 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %144 = "tosa.add"(%143, %cst_847) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %145 = tensor.empty() : tensor<1x80x1xf32>
    %146 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%144 : tensor<1x80x1xf32>) outs(%145 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %147 = tensor.empty() : tensor<1x80x4096xf32>
    %148 = tensor.empty() : tensor<1x80x4096xf32>
    %149 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%146 : tensor<1x80x1xf32>) outs(%148 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %150 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%140, %149 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%147 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %151 = tensor.empty() : tensor<1x80x4096xf32>
    %152 = tensor.empty() : tensor<1x80x4096xf32>
    %153 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_0 : tensor<4096xf32>) outs(%152 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %154 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%153, %150 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%151 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %155 = tensor.empty() : tensor<4096x11008xf32>
    %156 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_74 : tensor<11008x4096xf32>) outs(%155 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %157 = "tosa.reshape"(%154) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_848 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %158 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%157, %156 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_848 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %159 = "tosa.reshape"(%158) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %160 = tensor.empty() : tensor<1x80x11008xf32>
    %161 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%159 : tensor<1x80x11008xf32>) outs(%160 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      %4845 = math.exp %4844 : f32
      %cst_2002 = arith.constant 1.000000e+00 : f32
      %4846 = arith.addf %cst_2002, %4845 : f32
      %4847 = arith.divf %in, %4846 : f32
      linalg.yield %4847 : f32
    } -> tensor<1x80x11008xf32>
    %162 = tensor.empty() : tensor<4096x11008xf32>
    %163 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_76 : tensor<11008x4096xf32>) outs(%162 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %164 = "tosa.reshape"(%154) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_849 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %165 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%164, %163 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_849 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %166 = "tosa.reshape"(%165) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %167 = tensor.empty() : tensor<1x80x11008xf32>
    %168 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%161, %166 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%167 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x11008xf32>
    %169 = tensor.empty() : tensor<11008x4096xf32>
    %170 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_78 : tensor<4096x11008xf32>) outs(%169 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %171 = "tosa.reshape"(%168) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %cst_850 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %172 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%171, %170 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%cst_850 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %173 = "tosa.reshape"(%172) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %174 = "tosa.add"(%140, %173) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %175 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_851 = arith.constant 2 : i32
    %176 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%174 : tensor<1x80x4096xf32>) outs(%175 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_851 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_852 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %177 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%176 : tensor<1x80x4096xf32>) outs(%cst_852 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_853 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %178 = "tosa.add"(%177, %cst_853) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %179 = tensor.empty() : tensor<1x80x1xf32>
    %180 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%178 : tensor<1x80x1xf32>) outs(%179 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %181 = tensor.empty() : tensor<1x80x4096xf32>
    %182 = tensor.empty() : tensor<1x80x4096xf32>
    %183 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%180 : tensor<1x80x1xf32>) outs(%182 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %184 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%174, %183 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%181 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %185 = tensor.empty() : tensor<1x80x4096xf32>
    %186 = tensor.empty() : tensor<1x80x4096xf32>
    %187 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1 : tensor<4096xf32>) outs(%186 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %188 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%187, %184 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%185 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %189 = tensor.empty() : tensor<4096x4096xf32>
    %190 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_80 : tensor<4096x4096xf32>) outs(%189 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %191 = "tosa.reshape"(%188) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_854 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %192 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%191, %190 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_854 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %193 = "tosa.reshape"(%192) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %194 = tensor.empty() : tensor<4096x4096xf32>
    %195 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_82 : tensor<4096x4096xf32>) outs(%194 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %196 = "tosa.reshape"(%188) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_855 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %197 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%196, %195 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_855 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %198 = "tosa.reshape"(%197) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %199 = tensor.empty() : tensor<4096x4096xf32>
    %200 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_84 : tensor<4096x4096xf32>) outs(%199 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %201 = "tosa.reshape"(%188) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_856 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %202 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%201, %200 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_856 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %203 = "tosa.reshape"(%202) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %204 = "tosa.reshape"(%193) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %205 = tensor.empty() : tensor<1x32x80x128xf32>
    %206 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%204 : tensor<1x80x32x128xf32>) outs(%205 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %207 = "tosa.reshape"(%198) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %208 = tensor.empty() : tensor<1x32x80x128xf32>
    %209 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%207 : tensor<1x80x32x128xf32>) outs(%208 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %210 = "tosa.reshape"(%203) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %211 = tensor.empty() : tensor<1x32x80x128xf32>
    %212 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%210 : tensor<1x80x32x128xf32>) outs(%211 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_857 = tensor.extract_slice %expanded_520[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_858 = tensor.extract_slice %extracted_slice_857[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_859 = tensor.extract_slice %extracted_slice_858[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_860 = tensor.extract_slice %expanded_522[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_861 = tensor.extract_slice %extracted_slice_860[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_862 = tensor.extract_slice %extracted_slice_861[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %213 = tensor.empty() : tensor<1x80x128xf32>
    %214 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_859 : tensor<1x1x80x128xf32>) outs(%213 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %215 = tensor.empty() : tensor<80x128xf32>
    %216 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%214 : tensor<1x80x128xf32>) outs(%215 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %217 = tensor.empty() : tensor<1x80x128xf32>
    %218 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_862 : tensor<1x1x80x128xf32>) outs(%217 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %219 = tensor.empty() : tensor<80x128xf32>
    %220 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%218 : tensor<1x80x128xf32>) outs(%219 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %221 = tensor.empty() : tensor<1x80x128xf32>
    %222 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%221 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %216[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %223 = "tosa.reshape"(%222) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %224 = tensor.empty() : tensor<1x80x128xf32>
    %225 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%224 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %220[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %226 = "tosa.reshape"(%225) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %227 = tensor.empty() : tensor<1x32x80x128xf32>
    %228 = tensor.empty() : tensor<1x32x80x128xf32>
    %229 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%223 : tensor<1x1x80x128xf32>) outs(%228 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %230 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%206, %229 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%227 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_863 = tensor.extract_slice %206[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_864 = tensor.extract_slice %206[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %231 = tensor.empty() : tensor<1x32x80x64xf32>
    %232 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_864 : tensor<1x32x80x64xf32>) outs(%231 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %233 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_865 = tensor.insert_slice %232 into %233[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_866 = tensor.insert_slice %extracted_slice_863 into %inserted_slice_865[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %234 = tensor.empty() : tensor<1x32x80x128xf32>
    %235 = tensor.empty() : tensor<1x32x80x128xf32>
    %236 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%226 : tensor<1x1x80x128xf32>) outs(%235 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %237 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_866, %236 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%234 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %238 = "tosa.add"(%230, %237) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %239 = tensor.empty() : tensor<1x32x80x128xf32>
    %240 = tensor.empty() : tensor<1x32x80x128xf32>
    %241 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%223 : tensor<1x1x80x128xf32>) outs(%240 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %242 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%209, %241 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%239 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_867 = tensor.extract_slice %209[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_868 = tensor.extract_slice %209[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %243 = tensor.empty() : tensor<1x32x80x64xf32>
    %244 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_868 : tensor<1x32x80x64xf32>) outs(%243 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %245 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_869 = tensor.insert_slice %244 into %245[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_870 = tensor.insert_slice %extracted_slice_867 into %inserted_slice_869[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %246 = tensor.empty() : tensor<1x32x80x128xf32>
    %247 = tensor.empty() : tensor<1x32x80x128xf32>
    %248 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%226 : tensor<1x1x80x128xf32>) outs(%247 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %249 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_870, %248 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%246 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %250 = "tosa.add"(%242, %249) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %251 = tensor.empty() : tensor<1x32x128x80xf32>
    %252 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%250 : tensor<1x32x80x128xf32>) outs(%251 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %253 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_871 = tensor.extract_slice %238[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_872 = tensor.insert_slice %extracted_slice_871 into %253[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %254 = "tosa.reshape"(%inserted_slice_872) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %255 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_873 = tensor.extract_slice %252[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_874 = tensor.insert_slice %extracted_slice_873 into %255[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %256 = "tosa.reshape"(%inserted_slice_874) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %257 = tensor.empty() : tensor<32x80x80xf32>
    %258 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%257 : tensor<32x80x80xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x80xf32>
    %259 = linalg.batch_matmul ins(%254, %256 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%258 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %260 = "tosa.reshape"(%259) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_875 = arith.constant 11.3137083 : f32
    %261 = tensor.empty() : tensor<1x32x80x80xf32>
    %262 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%260 : tensor<1x32x80x80xf32>) outs(%261 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.divf %in, %cst_875 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %263 = "tosa.add"(%262, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %264 = tensor.empty() : tensor<1x32x80x1xf32>
    %265 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%264 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %266 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%263 : tensor<1x32x80x80xf32>) outs(%264 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.maxf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %267 = tensor.empty() : tensor<1x32x80x80xf32>
    %268 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%263, %266 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%267 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.subf %in, %in_2002 : f32
      %4845 = math.exp %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<1x32x80x80xf32>
    %269 = tensor.empty() : tensor<1x32x80x1xf32>
    %270 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%269 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %271 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%268 : tensor<1x32x80x80xf32>) outs(%270 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.addf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %272 = tensor.empty() : tensor<1x32x80x80xf32>
    %273 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%268, %271 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%272 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.divf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %274 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_876 = tensor.extract_slice %273[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_877 = tensor.insert_slice %extracted_slice_876 into %274[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %275 = "tosa.reshape"(%inserted_slice_877) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %276 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_878 = tensor.extract_slice %212[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_879 = tensor.insert_slice %extracted_slice_878 into %276[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %277 = "tosa.reshape"(%inserted_slice_879) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %278 = tensor.empty() : tensor<32x80x128xf32>
    %279 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%278 : tensor<32x80x128xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x128xf32>
    %280 = linalg.batch_matmul ins(%275, %277 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%279 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %281 = "tosa.reshape"(%280) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %282 = tensor.empty() : tensor<1x80x32x128xf32>
    %283 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%281 : tensor<1x32x80x128xf32>) outs(%282 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_880 = tensor.extract_slice %283[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %284 = "tosa.reshape"(%extracted_slice_880) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %285 = tensor.empty() : tensor<4096x4096xf32>
    %286 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_86 : tensor<4096x4096xf32>) outs(%285 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %287 = "tosa.reshape"(%284) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_881 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %288 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%287, %286 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_881 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %289 = "tosa.reshape"(%288) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %290 = "tosa.add"(%174, %289) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %291 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_882 = arith.constant 2 : i32
    %292 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%290 : tensor<1x80x4096xf32>) outs(%291 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_882 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_883 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %293 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%292 : tensor<1x80x4096xf32>) outs(%cst_883 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_884 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %294 = "tosa.add"(%293, %cst_884) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %295 = tensor.empty() : tensor<1x80x1xf32>
    %296 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%294 : tensor<1x80x1xf32>) outs(%295 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %297 = tensor.empty() : tensor<1x80x4096xf32>
    %298 = tensor.empty() : tensor<1x80x4096xf32>
    %299 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%296 : tensor<1x80x1xf32>) outs(%298 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %300 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%290, %299 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%297 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %301 = tensor.empty() : tensor<1x80x4096xf32>
    %302 = tensor.empty() : tensor<1x80x4096xf32>
    %303 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_2 : tensor<4096xf32>) outs(%302 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %304 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%303, %300 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%301 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %305 = tensor.empty() : tensor<4096x11008xf32>
    %306 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_88 : tensor<11008x4096xf32>) outs(%305 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %307 = "tosa.reshape"(%304) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_885 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %308 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%307, %306 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_885 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %309 = "tosa.reshape"(%308) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %310 = tensor.empty() : tensor<1x80x11008xf32>
    %311 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%309 : tensor<1x80x11008xf32>) outs(%310 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      %4845 = math.exp %4844 : f32
      %cst_2002 = arith.constant 1.000000e+00 : f32
      %4846 = arith.addf %cst_2002, %4845 : f32
      %4847 = arith.divf %in, %4846 : f32
      linalg.yield %4847 : f32
    } -> tensor<1x80x11008xf32>
    %312 = tensor.empty() : tensor<4096x11008xf32>
    %313 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_90 : tensor<11008x4096xf32>) outs(%312 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %314 = "tosa.reshape"(%304) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_886 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %315 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%314, %313 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_886 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %316 = "tosa.reshape"(%315) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %317 = tensor.empty() : tensor<1x80x11008xf32>
    %318 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%311, %316 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%317 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x11008xf32>
    %319 = tensor.empty() : tensor<11008x4096xf32>
    %320 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_92 : tensor<4096x11008xf32>) outs(%319 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %321 = "tosa.reshape"(%318) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %cst_887 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %322 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%321, %320 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%cst_887 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %323 = "tosa.reshape"(%322) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %324 = "tosa.add"(%290, %323) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %325 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_888 = arith.constant 2 : i32
    %326 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%324 : tensor<1x80x4096xf32>) outs(%325 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_888 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_889 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %327 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%326 : tensor<1x80x4096xf32>) outs(%cst_889 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_890 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %328 = "tosa.add"(%327, %cst_890) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %329 = tensor.empty() : tensor<1x80x1xf32>
    %330 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%328 : tensor<1x80x1xf32>) outs(%329 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %331 = tensor.empty() : tensor<1x80x4096xf32>
    %332 = tensor.empty() : tensor<1x80x4096xf32>
    %333 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%330 : tensor<1x80x1xf32>) outs(%332 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %334 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%324, %333 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%331 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %335 = tensor.empty() : tensor<1x80x4096xf32>
    %336 = tensor.empty() : tensor<1x80x4096xf32>
    %337 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_3 : tensor<4096xf32>) outs(%336 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %338 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%337, %334 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%335 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %339 = tensor.empty() : tensor<4096x4096xf32>
    %340 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_94 : tensor<4096x4096xf32>) outs(%339 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %341 = "tosa.reshape"(%338) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_891 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %342 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%341, %340 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_891 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %343 = "tosa.reshape"(%342) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %344 = tensor.empty() : tensor<4096x4096xf32>
    %345 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_96 : tensor<4096x4096xf32>) outs(%344 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %346 = "tosa.reshape"(%338) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_892 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %347 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%346, %345 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_892 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %348 = "tosa.reshape"(%347) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %349 = tensor.empty() : tensor<4096x4096xf32>
    %350 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_98 : tensor<4096x4096xf32>) outs(%349 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %351 = "tosa.reshape"(%338) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_893 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %352 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%351, %350 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_893 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %353 = "tosa.reshape"(%352) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %354 = "tosa.reshape"(%343) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %355 = tensor.empty() : tensor<1x32x80x128xf32>
    %356 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%354 : tensor<1x80x32x128xf32>) outs(%355 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %357 = "tosa.reshape"(%348) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %358 = tensor.empty() : tensor<1x32x80x128xf32>
    %359 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%357 : tensor<1x80x32x128xf32>) outs(%358 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %360 = "tosa.reshape"(%353) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %361 = tensor.empty() : tensor<1x32x80x128xf32>
    %362 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%360 : tensor<1x80x32x128xf32>) outs(%361 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_894 = tensor.extract_slice %expanded_524[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_895 = tensor.extract_slice %extracted_slice_894[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_896 = tensor.extract_slice %extracted_slice_895[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_897 = tensor.extract_slice %expanded_526[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_898 = tensor.extract_slice %extracted_slice_897[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_899 = tensor.extract_slice %extracted_slice_898[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %363 = tensor.empty() : tensor<1x80x128xf32>
    %364 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_896 : tensor<1x1x80x128xf32>) outs(%363 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %365 = tensor.empty() : tensor<80x128xf32>
    %366 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%364 : tensor<1x80x128xf32>) outs(%365 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %367 = tensor.empty() : tensor<1x80x128xf32>
    %368 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_899 : tensor<1x1x80x128xf32>) outs(%367 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %369 = tensor.empty() : tensor<80x128xf32>
    %370 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%368 : tensor<1x80x128xf32>) outs(%369 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %371 = tensor.empty() : tensor<1x80x128xf32>
    %372 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%371 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %366[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %373 = "tosa.reshape"(%372) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %374 = tensor.empty() : tensor<1x80x128xf32>
    %375 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%374 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %370[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %376 = "tosa.reshape"(%375) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %377 = tensor.empty() : tensor<1x32x80x128xf32>
    %378 = tensor.empty() : tensor<1x32x80x128xf32>
    %379 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%373 : tensor<1x1x80x128xf32>) outs(%378 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %380 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%356, %379 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%377 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_900 = tensor.extract_slice %356[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_901 = tensor.extract_slice %356[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %381 = tensor.empty() : tensor<1x32x80x64xf32>
    %382 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_901 : tensor<1x32x80x64xf32>) outs(%381 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %383 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_902 = tensor.insert_slice %382 into %383[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_903 = tensor.insert_slice %extracted_slice_900 into %inserted_slice_902[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %384 = tensor.empty() : tensor<1x32x80x128xf32>
    %385 = tensor.empty() : tensor<1x32x80x128xf32>
    %386 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%376 : tensor<1x1x80x128xf32>) outs(%385 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %387 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_903, %386 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%384 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %388 = "tosa.add"(%380, %387) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %389 = tensor.empty() : tensor<1x32x80x128xf32>
    %390 = tensor.empty() : tensor<1x32x80x128xf32>
    %391 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%373 : tensor<1x1x80x128xf32>) outs(%390 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %392 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%359, %391 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%389 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_904 = tensor.extract_slice %359[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_905 = tensor.extract_slice %359[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %393 = tensor.empty() : tensor<1x32x80x64xf32>
    %394 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_905 : tensor<1x32x80x64xf32>) outs(%393 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %395 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_906 = tensor.insert_slice %394 into %395[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_907 = tensor.insert_slice %extracted_slice_904 into %inserted_slice_906[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %396 = tensor.empty() : tensor<1x32x80x128xf32>
    %397 = tensor.empty() : tensor<1x32x80x128xf32>
    %398 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%376 : tensor<1x1x80x128xf32>) outs(%397 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %399 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_907, %398 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%396 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %400 = "tosa.add"(%392, %399) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %401 = tensor.empty() : tensor<1x32x128x80xf32>
    %402 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%400 : tensor<1x32x80x128xf32>) outs(%401 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %403 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_908 = tensor.extract_slice %388[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_909 = tensor.insert_slice %extracted_slice_908 into %403[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %404 = "tosa.reshape"(%inserted_slice_909) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %405 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_910 = tensor.extract_slice %402[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_911 = tensor.insert_slice %extracted_slice_910 into %405[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %406 = "tosa.reshape"(%inserted_slice_911) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %407 = tensor.empty() : tensor<32x80x80xf32>
    %408 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%407 : tensor<32x80x80xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x80xf32>
    %409 = linalg.batch_matmul ins(%404, %406 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%408 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %410 = "tosa.reshape"(%409) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_912 = arith.constant 11.3137083 : f32
    %411 = tensor.empty() : tensor<1x32x80x80xf32>
    %412 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%410 : tensor<1x32x80x80xf32>) outs(%411 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.divf %in, %cst_912 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %413 = "tosa.add"(%412, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %414 = tensor.empty() : tensor<1x32x80x1xf32>
    %415 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%414 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %416 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%413 : tensor<1x32x80x80xf32>) outs(%414 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.maxf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %417 = tensor.empty() : tensor<1x32x80x80xf32>
    %418 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%413, %416 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%417 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.subf %in, %in_2002 : f32
      %4845 = math.exp %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<1x32x80x80xf32>
    %419 = tensor.empty() : tensor<1x32x80x1xf32>
    %420 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%419 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %421 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%418 : tensor<1x32x80x80xf32>) outs(%420 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.addf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %422 = tensor.empty() : tensor<1x32x80x80xf32>
    %423 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%418, %421 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%422 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.divf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %424 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_913 = tensor.extract_slice %423[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_914 = tensor.insert_slice %extracted_slice_913 into %424[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %425 = "tosa.reshape"(%inserted_slice_914) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %426 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_915 = tensor.extract_slice %362[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_916 = tensor.insert_slice %extracted_slice_915 into %426[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %427 = "tosa.reshape"(%inserted_slice_916) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %428 = tensor.empty() : tensor<32x80x128xf32>
    %429 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%428 : tensor<32x80x128xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x128xf32>
    %430 = linalg.batch_matmul ins(%425, %427 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%429 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %431 = "tosa.reshape"(%430) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %432 = tensor.empty() : tensor<1x80x32x128xf32>
    %433 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%431 : tensor<1x32x80x128xf32>) outs(%432 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_917 = tensor.extract_slice %433[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %434 = "tosa.reshape"(%extracted_slice_917) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %435 = tensor.empty() : tensor<4096x4096xf32>
    %436 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_100 : tensor<4096x4096xf32>) outs(%435 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %437 = "tosa.reshape"(%434) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_918 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %438 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%437, %436 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_918 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %439 = "tosa.reshape"(%438) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %440 = "tosa.add"(%324, %439) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %441 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_919 = arith.constant 2 : i32
    %442 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%440 : tensor<1x80x4096xf32>) outs(%441 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_919 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_920 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %443 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%442 : tensor<1x80x4096xf32>) outs(%cst_920 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_921 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %444 = "tosa.add"(%443, %cst_921) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %445 = tensor.empty() : tensor<1x80x1xf32>
    %446 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%444 : tensor<1x80x1xf32>) outs(%445 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %447 = tensor.empty() : tensor<1x80x4096xf32>
    %448 = tensor.empty() : tensor<1x80x4096xf32>
    %449 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%446 : tensor<1x80x1xf32>) outs(%448 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %450 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%440, %449 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%447 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %451 = tensor.empty() : tensor<1x80x4096xf32>
    %452 = tensor.empty() : tensor<1x80x4096xf32>
    %453 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_4 : tensor<4096xf32>) outs(%452 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %454 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%453, %450 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%451 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %455 = tensor.empty() : tensor<4096x11008xf32>
    %456 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_102 : tensor<11008x4096xf32>) outs(%455 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %457 = "tosa.reshape"(%454) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_922 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %458 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%457, %456 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_922 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %459 = "tosa.reshape"(%458) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %460 = tensor.empty() : tensor<1x80x11008xf32>
    %461 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%459 : tensor<1x80x11008xf32>) outs(%460 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      %4845 = math.exp %4844 : f32
      %cst_2002 = arith.constant 1.000000e+00 : f32
      %4846 = arith.addf %cst_2002, %4845 : f32
      %4847 = arith.divf %in, %4846 : f32
      linalg.yield %4847 : f32
    } -> tensor<1x80x11008xf32>
    %462 = tensor.empty() : tensor<4096x11008xf32>
    %463 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_104 : tensor<11008x4096xf32>) outs(%462 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %464 = "tosa.reshape"(%454) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_923 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %465 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%464, %463 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_923 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %466 = "tosa.reshape"(%465) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %467 = tensor.empty() : tensor<1x80x11008xf32>
    %468 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%461, %466 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%467 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x11008xf32>
    %469 = tensor.empty() : tensor<11008x4096xf32>
    %470 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_106 : tensor<4096x11008xf32>) outs(%469 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %471 = "tosa.reshape"(%468) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %cst_924 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %472 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%471, %470 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%cst_924 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %473 = "tosa.reshape"(%472) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %474 = "tosa.add"(%440, %473) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %475 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_925 = arith.constant 2 : i32
    %476 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%474 : tensor<1x80x4096xf32>) outs(%475 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_925 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_926 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %477 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%476 : tensor<1x80x4096xf32>) outs(%cst_926 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_927 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %478 = "tosa.add"(%477, %cst_927) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %479 = tensor.empty() : tensor<1x80x1xf32>
    %480 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%478 : tensor<1x80x1xf32>) outs(%479 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %481 = tensor.empty() : tensor<1x80x4096xf32>
    %482 = tensor.empty() : tensor<1x80x4096xf32>
    %483 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%480 : tensor<1x80x1xf32>) outs(%482 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %484 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%474, %483 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%481 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %485 = tensor.empty() : tensor<1x80x4096xf32>
    %486 = tensor.empty() : tensor<1x80x4096xf32>
    %487 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_5 : tensor<4096xf32>) outs(%486 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %488 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%487, %484 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%485 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %489 = tensor.empty() : tensor<4096x4096xf32>
    %490 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_108 : tensor<4096x4096xf32>) outs(%489 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %491 = "tosa.reshape"(%488) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_928 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %492 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%491, %490 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_928 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %493 = "tosa.reshape"(%492) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %494 = tensor.empty() : tensor<4096x4096xf32>
    %495 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_110 : tensor<4096x4096xf32>) outs(%494 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %496 = "tosa.reshape"(%488) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_929 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %497 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%496, %495 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_929 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %498 = "tosa.reshape"(%497) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %499 = tensor.empty() : tensor<4096x4096xf32>
    %500 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_112 : tensor<4096x4096xf32>) outs(%499 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %501 = "tosa.reshape"(%488) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_930 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %502 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%501, %500 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_930 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %503 = "tosa.reshape"(%502) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %504 = "tosa.reshape"(%493) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %505 = tensor.empty() : tensor<1x32x80x128xf32>
    %506 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%504 : tensor<1x80x32x128xf32>) outs(%505 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %507 = "tosa.reshape"(%498) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %508 = tensor.empty() : tensor<1x32x80x128xf32>
    %509 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%507 : tensor<1x80x32x128xf32>) outs(%508 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %510 = "tosa.reshape"(%503) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %511 = tensor.empty() : tensor<1x32x80x128xf32>
    %512 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%510 : tensor<1x80x32x128xf32>) outs(%511 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_931 = tensor.extract_slice %expanded_528[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_932 = tensor.extract_slice %extracted_slice_931[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_933 = tensor.extract_slice %extracted_slice_932[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_934 = tensor.extract_slice %expanded_530[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_935 = tensor.extract_slice %extracted_slice_934[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_936 = tensor.extract_slice %extracted_slice_935[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %513 = tensor.empty() : tensor<1x80x128xf32>
    %514 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_933 : tensor<1x1x80x128xf32>) outs(%513 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %515 = tensor.empty() : tensor<80x128xf32>
    %516 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%514 : tensor<1x80x128xf32>) outs(%515 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %517 = tensor.empty() : tensor<1x80x128xf32>
    %518 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_936 : tensor<1x1x80x128xf32>) outs(%517 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %519 = tensor.empty() : tensor<80x128xf32>
    %520 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%518 : tensor<1x80x128xf32>) outs(%519 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %521 = tensor.empty() : tensor<1x80x128xf32>
    %522 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%521 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %516[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %523 = "tosa.reshape"(%522) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %524 = tensor.empty() : tensor<1x80x128xf32>
    %525 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%524 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %520[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %526 = "tosa.reshape"(%525) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %527 = tensor.empty() : tensor<1x32x80x128xf32>
    %528 = tensor.empty() : tensor<1x32x80x128xf32>
    %529 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%523 : tensor<1x1x80x128xf32>) outs(%528 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %530 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%506, %529 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%527 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_937 = tensor.extract_slice %506[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_938 = tensor.extract_slice %506[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %531 = tensor.empty() : tensor<1x32x80x64xf32>
    %532 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_938 : tensor<1x32x80x64xf32>) outs(%531 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %533 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_939 = tensor.insert_slice %532 into %533[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_940 = tensor.insert_slice %extracted_slice_937 into %inserted_slice_939[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %534 = tensor.empty() : tensor<1x32x80x128xf32>
    %535 = tensor.empty() : tensor<1x32x80x128xf32>
    %536 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%526 : tensor<1x1x80x128xf32>) outs(%535 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %537 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_940, %536 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%534 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %538 = "tosa.add"(%530, %537) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %539 = tensor.empty() : tensor<1x32x80x128xf32>
    %540 = tensor.empty() : tensor<1x32x80x128xf32>
    %541 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%523 : tensor<1x1x80x128xf32>) outs(%540 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %542 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%509, %541 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%539 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_941 = tensor.extract_slice %509[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_942 = tensor.extract_slice %509[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %543 = tensor.empty() : tensor<1x32x80x64xf32>
    %544 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_942 : tensor<1x32x80x64xf32>) outs(%543 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %545 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_943 = tensor.insert_slice %544 into %545[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_944 = tensor.insert_slice %extracted_slice_941 into %inserted_slice_943[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %546 = tensor.empty() : tensor<1x32x80x128xf32>
    %547 = tensor.empty() : tensor<1x32x80x128xf32>
    %548 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%526 : tensor<1x1x80x128xf32>) outs(%547 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %549 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_944, %548 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%546 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %550 = "tosa.add"(%542, %549) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %551 = tensor.empty() : tensor<1x32x128x80xf32>
    %552 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%550 : tensor<1x32x80x128xf32>) outs(%551 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %553 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_945 = tensor.extract_slice %538[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_946 = tensor.insert_slice %extracted_slice_945 into %553[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %554 = "tosa.reshape"(%inserted_slice_946) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %555 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_947 = tensor.extract_slice %552[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_948 = tensor.insert_slice %extracted_slice_947 into %555[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %556 = "tosa.reshape"(%inserted_slice_948) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %557 = tensor.empty() : tensor<32x80x80xf32>
    %558 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%557 : tensor<32x80x80xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x80xf32>
    %559 = linalg.batch_matmul ins(%554, %556 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%558 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %560 = "tosa.reshape"(%559) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_949 = arith.constant 11.3137083 : f32
    %561 = tensor.empty() : tensor<1x32x80x80xf32>
    %562 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%560 : tensor<1x32x80x80xf32>) outs(%561 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.divf %in, %cst_949 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %563 = "tosa.add"(%562, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %564 = tensor.empty() : tensor<1x32x80x1xf32>
    %565 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%564 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %566 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%563 : tensor<1x32x80x80xf32>) outs(%564 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.maxf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %567 = tensor.empty() : tensor<1x32x80x80xf32>
    %568 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%563, %566 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%567 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.subf %in, %in_2002 : f32
      %4845 = math.exp %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<1x32x80x80xf32>
    %569 = tensor.empty() : tensor<1x32x80x1xf32>
    %570 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%569 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %571 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%568 : tensor<1x32x80x80xf32>) outs(%570 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.addf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %572 = tensor.empty() : tensor<1x32x80x80xf32>
    %573 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%568, %571 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%572 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.divf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %574 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_950 = tensor.extract_slice %573[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_951 = tensor.insert_slice %extracted_slice_950 into %574[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %575 = "tosa.reshape"(%inserted_slice_951) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %576 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_952 = tensor.extract_slice %512[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_953 = tensor.insert_slice %extracted_slice_952 into %576[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %577 = "tosa.reshape"(%inserted_slice_953) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %578 = tensor.empty() : tensor<32x80x128xf32>
    %579 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%578 : tensor<32x80x128xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x128xf32>
    %580 = linalg.batch_matmul ins(%575, %577 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%579 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %581 = "tosa.reshape"(%580) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %582 = tensor.empty() : tensor<1x80x32x128xf32>
    %583 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%581 : tensor<1x32x80x128xf32>) outs(%582 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_954 = tensor.extract_slice %583[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %584 = "tosa.reshape"(%extracted_slice_954) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %585 = tensor.empty() : tensor<4096x4096xf32>
    %586 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_114 : tensor<4096x4096xf32>) outs(%585 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %587 = "tosa.reshape"(%584) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_955 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %588 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%587, %586 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_955 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %589 = "tosa.reshape"(%588) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %590 = "tosa.add"(%474, %589) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %591 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_956 = arith.constant 2 : i32
    %592 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%590 : tensor<1x80x4096xf32>) outs(%591 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_956 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_957 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %593 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%592 : tensor<1x80x4096xf32>) outs(%cst_957 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_958 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %594 = "tosa.add"(%593, %cst_958) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %595 = tensor.empty() : tensor<1x80x1xf32>
    %596 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%594 : tensor<1x80x1xf32>) outs(%595 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %597 = tensor.empty() : tensor<1x80x4096xf32>
    %598 = tensor.empty() : tensor<1x80x4096xf32>
    %599 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%596 : tensor<1x80x1xf32>) outs(%598 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %600 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%590, %599 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%597 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %601 = tensor.empty() : tensor<1x80x4096xf32>
    %602 = tensor.empty() : tensor<1x80x4096xf32>
    %603 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_6 : tensor<4096xf32>) outs(%602 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %604 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%603, %600 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%601 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %605 = tensor.empty() : tensor<4096x11008xf32>
    %606 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_116 : tensor<11008x4096xf32>) outs(%605 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %607 = "tosa.reshape"(%604) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_959 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %608 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%607, %606 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_959 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %609 = "tosa.reshape"(%608) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %610 = tensor.empty() : tensor<1x80x11008xf32>
    %611 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%609 : tensor<1x80x11008xf32>) outs(%610 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      %4845 = math.exp %4844 : f32
      %cst_2002 = arith.constant 1.000000e+00 : f32
      %4846 = arith.addf %cst_2002, %4845 : f32
      %4847 = arith.divf %in, %4846 : f32
      linalg.yield %4847 : f32
    } -> tensor<1x80x11008xf32>
    %612 = tensor.empty() : tensor<4096x11008xf32>
    %613 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_118 : tensor<11008x4096xf32>) outs(%612 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %614 = "tosa.reshape"(%604) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_960 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %615 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%614, %613 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_960 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %616 = "tosa.reshape"(%615) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %617 = tensor.empty() : tensor<1x80x11008xf32>
    %618 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%611, %616 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%617 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x11008xf32>
    %619 = tensor.empty() : tensor<11008x4096xf32>
    %620 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_120 : tensor<4096x11008xf32>) outs(%619 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %621 = "tosa.reshape"(%618) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %cst_961 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %622 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%621, %620 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%cst_961 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %623 = "tosa.reshape"(%622) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %624 = "tosa.add"(%590, %623) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %625 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_962 = arith.constant 2 : i32
    %626 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%624 : tensor<1x80x4096xf32>) outs(%625 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_962 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_963 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %627 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%626 : tensor<1x80x4096xf32>) outs(%cst_963 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_964 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %628 = "tosa.add"(%627, %cst_964) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %629 = tensor.empty() : tensor<1x80x1xf32>
    %630 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%628 : tensor<1x80x1xf32>) outs(%629 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %631 = tensor.empty() : tensor<1x80x4096xf32>
    %632 = tensor.empty() : tensor<1x80x4096xf32>
    %633 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%630 : tensor<1x80x1xf32>) outs(%632 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %634 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%624, %633 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%631 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %635 = tensor.empty() : tensor<1x80x4096xf32>
    %636 = tensor.empty() : tensor<1x80x4096xf32>
    %637 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_7 : tensor<4096xf32>) outs(%636 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %638 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%637, %634 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%635 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %639 = tensor.empty() : tensor<4096x4096xf32>
    %640 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_122 : tensor<4096x4096xf32>) outs(%639 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %641 = "tosa.reshape"(%638) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_965 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %642 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%641, %640 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_965 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %643 = "tosa.reshape"(%642) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %644 = tensor.empty() : tensor<4096x4096xf32>
    %645 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_124 : tensor<4096x4096xf32>) outs(%644 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %646 = "tosa.reshape"(%638) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_966 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %647 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%646, %645 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_966 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %648 = "tosa.reshape"(%647) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %649 = tensor.empty() : tensor<4096x4096xf32>
    %650 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_126 : tensor<4096x4096xf32>) outs(%649 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %651 = "tosa.reshape"(%638) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_967 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %652 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%651, %650 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_967 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %653 = "tosa.reshape"(%652) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %654 = "tosa.reshape"(%643) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %655 = tensor.empty() : tensor<1x32x80x128xf32>
    %656 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%654 : tensor<1x80x32x128xf32>) outs(%655 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %657 = "tosa.reshape"(%648) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %658 = tensor.empty() : tensor<1x32x80x128xf32>
    %659 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%657 : tensor<1x80x32x128xf32>) outs(%658 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %660 = "tosa.reshape"(%653) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %661 = tensor.empty() : tensor<1x32x80x128xf32>
    %662 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%660 : tensor<1x80x32x128xf32>) outs(%661 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_968 = tensor.extract_slice %expanded_532[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_969 = tensor.extract_slice %extracted_slice_968[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_970 = tensor.extract_slice %extracted_slice_969[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_971 = tensor.extract_slice %expanded_534[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_972 = tensor.extract_slice %extracted_slice_971[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_973 = tensor.extract_slice %extracted_slice_972[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %663 = tensor.empty() : tensor<1x80x128xf32>
    %664 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_970 : tensor<1x1x80x128xf32>) outs(%663 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %665 = tensor.empty() : tensor<80x128xf32>
    %666 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%664 : tensor<1x80x128xf32>) outs(%665 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %667 = tensor.empty() : tensor<1x80x128xf32>
    %668 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_973 : tensor<1x1x80x128xf32>) outs(%667 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %669 = tensor.empty() : tensor<80x128xf32>
    %670 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%668 : tensor<1x80x128xf32>) outs(%669 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %671 = tensor.empty() : tensor<1x80x128xf32>
    %672 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%671 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %666[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %673 = "tosa.reshape"(%672) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %674 = tensor.empty() : tensor<1x80x128xf32>
    %675 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%674 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %670[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %676 = "tosa.reshape"(%675) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %677 = tensor.empty() : tensor<1x32x80x128xf32>
    %678 = tensor.empty() : tensor<1x32x80x128xf32>
    %679 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%673 : tensor<1x1x80x128xf32>) outs(%678 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %680 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%656, %679 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%677 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_974 = tensor.extract_slice %656[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_975 = tensor.extract_slice %656[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %681 = tensor.empty() : tensor<1x32x80x64xf32>
    %682 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_975 : tensor<1x32x80x64xf32>) outs(%681 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %683 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_976 = tensor.insert_slice %682 into %683[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_977 = tensor.insert_slice %extracted_slice_974 into %inserted_slice_976[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %684 = tensor.empty() : tensor<1x32x80x128xf32>
    %685 = tensor.empty() : tensor<1x32x80x128xf32>
    %686 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%676 : tensor<1x1x80x128xf32>) outs(%685 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %687 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_977, %686 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%684 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %688 = "tosa.add"(%680, %687) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %689 = tensor.empty() : tensor<1x32x80x128xf32>
    %690 = tensor.empty() : tensor<1x32x80x128xf32>
    %691 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%673 : tensor<1x1x80x128xf32>) outs(%690 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %692 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%659, %691 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%689 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_978 = tensor.extract_slice %659[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_979 = tensor.extract_slice %659[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %693 = tensor.empty() : tensor<1x32x80x64xf32>
    %694 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_979 : tensor<1x32x80x64xf32>) outs(%693 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %695 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_980 = tensor.insert_slice %694 into %695[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_981 = tensor.insert_slice %extracted_slice_978 into %inserted_slice_980[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %696 = tensor.empty() : tensor<1x32x80x128xf32>
    %697 = tensor.empty() : tensor<1x32x80x128xf32>
    %698 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%676 : tensor<1x1x80x128xf32>) outs(%697 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %699 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_981, %698 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%696 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %700 = "tosa.add"(%692, %699) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %701 = tensor.empty() : tensor<1x32x128x80xf32>
    %702 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%700 : tensor<1x32x80x128xf32>) outs(%701 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %703 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_982 = tensor.extract_slice %688[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_983 = tensor.insert_slice %extracted_slice_982 into %703[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %704 = "tosa.reshape"(%inserted_slice_983) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %705 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_984 = tensor.extract_slice %702[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_985 = tensor.insert_slice %extracted_slice_984 into %705[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %706 = "tosa.reshape"(%inserted_slice_985) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %707 = tensor.empty() : tensor<32x80x80xf32>
    %708 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%707 : tensor<32x80x80xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x80xf32>
    %709 = linalg.batch_matmul ins(%704, %706 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%708 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %710 = "tosa.reshape"(%709) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_986 = arith.constant 11.3137083 : f32
    %711 = tensor.empty() : tensor<1x32x80x80xf32>
    %712 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%710 : tensor<1x32x80x80xf32>) outs(%711 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.divf %in, %cst_986 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %713 = "tosa.add"(%712, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %714 = tensor.empty() : tensor<1x32x80x1xf32>
    %715 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%714 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %716 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%713 : tensor<1x32x80x80xf32>) outs(%714 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.maxf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %717 = tensor.empty() : tensor<1x32x80x80xf32>
    %718 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%713, %716 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%717 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.subf %in, %in_2002 : f32
      %4845 = math.exp %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<1x32x80x80xf32>
    %719 = tensor.empty() : tensor<1x32x80x1xf32>
    %720 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%719 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %721 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%718 : tensor<1x32x80x80xf32>) outs(%720 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.addf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %722 = tensor.empty() : tensor<1x32x80x80xf32>
    %723 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%718, %721 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%722 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.divf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %724 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_987 = tensor.extract_slice %723[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_988 = tensor.insert_slice %extracted_slice_987 into %724[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %725 = "tosa.reshape"(%inserted_slice_988) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %726 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_989 = tensor.extract_slice %662[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_990 = tensor.insert_slice %extracted_slice_989 into %726[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %727 = "tosa.reshape"(%inserted_slice_990) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %728 = tensor.empty() : tensor<32x80x128xf32>
    %729 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%728 : tensor<32x80x128xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x128xf32>
    %730 = linalg.batch_matmul ins(%725, %727 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%729 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %731 = "tosa.reshape"(%730) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %732 = tensor.empty() : tensor<1x80x32x128xf32>
    %733 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%731 : tensor<1x32x80x128xf32>) outs(%732 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_991 = tensor.extract_slice %733[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %734 = "tosa.reshape"(%extracted_slice_991) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %735 = tensor.empty() : tensor<4096x4096xf32>
    %736 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_128 : tensor<4096x4096xf32>) outs(%735 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %737 = "tosa.reshape"(%734) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_992 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %738 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%737, %736 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_992 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %739 = "tosa.reshape"(%738) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %740 = "tosa.add"(%624, %739) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %741 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_993 = arith.constant 2 : i32
    %742 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%740 : tensor<1x80x4096xf32>) outs(%741 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_993 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_994 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %743 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%742 : tensor<1x80x4096xf32>) outs(%cst_994 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_995 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %744 = "tosa.add"(%743, %cst_995) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %745 = tensor.empty() : tensor<1x80x1xf32>
    %746 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%744 : tensor<1x80x1xf32>) outs(%745 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %747 = tensor.empty() : tensor<1x80x4096xf32>
    %748 = tensor.empty() : tensor<1x80x4096xf32>
    %749 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%746 : tensor<1x80x1xf32>) outs(%748 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %750 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%740, %749 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%747 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %751 = tensor.empty() : tensor<1x80x4096xf32>
    %752 = tensor.empty() : tensor<1x80x4096xf32>
    %753 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_8 : tensor<4096xf32>) outs(%752 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %754 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%753, %750 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%751 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %755 = tensor.empty() : tensor<4096x11008xf32>
    %756 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_130 : tensor<11008x4096xf32>) outs(%755 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %757 = "tosa.reshape"(%754) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_996 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %758 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%757, %756 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_996 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %759 = "tosa.reshape"(%758) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %760 = tensor.empty() : tensor<1x80x11008xf32>
    %761 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%759 : tensor<1x80x11008xf32>) outs(%760 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      %4845 = math.exp %4844 : f32
      %cst_2002 = arith.constant 1.000000e+00 : f32
      %4846 = arith.addf %cst_2002, %4845 : f32
      %4847 = arith.divf %in, %4846 : f32
      linalg.yield %4847 : f32
    } -> tensor<1x80x11008xf32>
    %762 = tensor.empty() : tensor<4096x11008xf32>
    %763 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_132 : tensor<11008x4096xf32>) outs(%762 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %764 = "tosa.reshape"(%754) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_997 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %765 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%764, %763 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_997 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %766 = "tosa.reshape"(%765) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %767 = tensor.empty() : tensor<1x80x11008xf32>
    %768 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%761, %766 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%767 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x11008xf32>
    %769 = tensor.empty() : tensor<11008x4096xf32>
    %770 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_134 : tensor<4096x11008xf32>) outs(%769 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %771 = "tosa.reshape"(%768) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %cst_998 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %772 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%771, %770 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%cst_998 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %773 = "tosa.reshape"(%772) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %774 = "tosa.add"(%740, %773) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %775 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_999 = arith.constant 2 : i32
    %776 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%774 : tensor<1x80x4096xf32>) outs(%775 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_999 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1000 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %777 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%776 : tensor<1x80x4096xf32>) outs(%cst_1000 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1001 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %778 = "tosa.add"(%777, %cst_1001) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %779 = tensor.empty() : tensor<1x80x1xf32>
    %780 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%778 : tensor<1x80x1xf32>) outs(%779 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %781 = tensor.empty() : tensor<1x80x4096xf32>
    %782 = tensor.empty() : tensor<1x80x4096xf32>
    %783 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%780 : tensor<1x80x1xf32>) outs(%782 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %784 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%774, %783 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%781 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %785 = tensor.empty() : tensor<1x80x4096xf32>
    %786 = tensor.empty() : tensor<1x80x4096xf32>
    %787 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_9 : tensor<4096xf32>) outs(%786 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %788 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%787, %784 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%785 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %789 = tensor.empty() : tensor<4096x4096xf32>
    %790 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_136 : tensor<4096x4096xf32>) outs(%789 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %791 = "tosa.reshape"(%788) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1002 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %792 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%791, %790 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1002 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %793 = "tosa.reshape"(%792) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %794 = tensor.empty() : tensor<4096x4096xf32>
    %795 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_138 : tensor<4096x4096xf32>) outs(%794 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %796 = "tosa.reshape"(%788) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1003 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %797 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%796, %795 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1003 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %798 = "tosa.reshape"(%797) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %799 = tensor.empty() : tensor<4096x4096xf32>
    %800 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_140 : tensor<4096x4096xf32>) outs(%799 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %801 = "tosa.reshape"(%788) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1004 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %802 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%801, %800 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1004 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %803 = "tosa.reshape"(%802) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %804 = "tosa.reshape"(%793) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %805 = tensor.empty() : tensor<1x32x80x128xf32>
    %806 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%804 : tensor<1x80x32x128xf32>) outs(%805 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %807 = "tosa.reshape"(%798) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %808 = tensor.empty() : tensor<1x32x80x128xf32>
    %809 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%807 : tensor<1x80x32x128xf32>) outs(%808 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %810 = "tosa.reshape"(%803) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %811 = tensor.empty() : tensor<1x32x80x128xf32>
    %812 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%810 : tensor<1x80x32x128xf32>) outs(%811 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1005 = tensor.extract_slice %expanded_536[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1006 = tensor.extract_slice %extracted_slice_1005[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1007 = tensor.extract_slice %extracted_slice_1006[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1008 = tensor.extract_slice %expanded_538[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1009 = tensor.extract_slice %extracted_slice_1008[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1010 = tensor.extract_slice %extracted_slice_1009[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %813 = tensor.empty() : tensor<1x80x128xf32>
    %814 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1007 : tensor<1x1x80x128xf32>) outs(%813 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %815 = tensor.empty() : tensor<80x128xf32>
    %816 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%814 : tensor<1x80x128xf32>) outs(%815 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %817 = tensor.empty() : tensor<1x80x128xf32>
    %818 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1010 : tensor<1x1x80x128xf32>) outs(%817 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %819 = tensor.empty() : tensor<80x128xf32>
    %820 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%818 : tensor<1x80x128xf32>) outs(%819 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %821 = tensor.empty() : tensor<1x80x128xf32>
    %822 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%821 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %816[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %823 = "tosa.reshape"(%822) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %824 = tensor.empty() : tensor<1x80x128xf32>
    %825 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%824 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %820[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %826 = "tosa.reshape"(%825) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %827 = tensor.empty() : tensor<1x32x80x128xf32>
    %828 = tensor.empty() : tensor<1x32x80x128xf32>
    %829 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%823 : tensor<1x1x80x128xf32>) outs(%828 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %830 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%806, %829 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%827 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1011 = tensor.extract_slice %806[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1012 = tensor.extract_slice %806[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %831 = tensor.empty() : tensor<1x32x80x64xf32>
    %832 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1012 : tensor<1x32x80x64xf32>) outs(%831 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %833 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1013 = tensor.insert_slice %832 into %833[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1014 = tensor.insert_slice %extracted_slice_1011 into %inserted_slice_1013[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %834 = tensor.empty() : tensor<1x32x80x128xf32>
    %835 = tensor.empty() : tensor<1x32x80x128xf32>
    %836 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%826 : tensor<1x1x80x128xf32>) outs(%835 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %837 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1014, %836 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%834 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %838 = "tosa.add"(%830, %837) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %839 = tensor.empty() : tensor<1x32x80x128xf32>
    %840 = tensor.empty() : tensor<1x32x80x128xf32>
    %841 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%823 : tensor<1x1x80x128xf32>) outs(%840 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %842 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%809, %841 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%839 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1015 = tensor.extract_slice %809[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1016 = tensor.extract_slice %809[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %843 = tensor.empty() : tensor<1x32x80x64xf32>
    %844 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1016 : tensor<1x32x80x64xf32>) outs(%843 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %845 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1017 = tensor.insert_slice %844 into %845[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1018 = tensor.insert_slice %extracted_slice_1015 into %inserted_slice_1017[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %846 = tensor.empty() : tensor<1x32x80x128xf32>
    %847 = tensor.empty() : tensor<1x32x80x128xf32>
    %848 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%826 : tensor<1x1x80x128xf32>) outs(%847 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %849 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1018, %848 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%846 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %850 = "tosa.add"(%842, %849) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %851 = tensor.empty() : tensor<1x32x128x80xf32>
    %852 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%850 : tensor<1x32x80x128xf32>) outs(%851 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %853 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1019 = tensor.extract_slice %838[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1020 = tensor.insert_slice %extracted_slice_1019 into %853[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %854 = "tosa.reshape"(%inserted_slice_1020) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %855 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1021 = tensor.extract_slice %852[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1022 = tensor.insert_slice %extracted_slice_1021 into %855[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %856 = "tosa.reshape"(%inserted_slice_1022) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %857 = tensor.empty() : tensor<32x80x80xf32>
    %858 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%857 : tensor<32x80x80xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x80xf32>
    %859 = linalg.batch_matmul ins(%854, %856 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%858 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %860 = "tosa.reshape"(%859) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1023 = arith.constant 11.3137083 : f32
    %861 = tensor.empty() : tensor<1x32x80x80xf32>
    %862 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%860 : tensor<1x32x80x80xf32>) outs(%861 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.divf %in, %cst_1023 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %863 = "tosa.add"(%862, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %864 = tensor.empty() : tensor<1x32x80x1xf32>
    %865 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%864 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %866 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%863 : tensor<1x32x80x80xf32>) outs(%864 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.maxf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %867 = tensor.empty() : tensor<1x32x80x80xf32>
    %868 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%863, %866 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%867 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.subf %in, %in_2002 : f32
      %4845 = math.exp %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<1x32x80x80xf32>
    %869 = tensor.empty() : tensor<1x32x80x1xf32>
    %870 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%869 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %871 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%868 : tensor<1x32x80x80xf32>) outs(%870 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.addf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %872 = tensor.empty() : tensor<1x32x80x80xf32>
    %873 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%868, %871 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%872 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.divf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %874 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1024 = tensor.extract_slice %873[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1025 = tensor.insert_slice %extracted_slice_1024 into %874[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %875 = "tosa.reshape"(%inserted_slice_1025) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %876 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1026 = tensor.extract_slice %812[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1027 = tensor.insert_slice %extracted_slice_1026 into %876[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %877 = "tosa.reshape"(%inserted_slice_1027) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %878 = tensor.empty() : tensor<32x80x128xf32>
    %879 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%878 : tensor<32x80x128xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x128xf32>
    %880 = linalg.batch_matmul ins(%875, %877 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%879 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %881 = "tosa.reshape"(%880) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %882 = tensor.empty() : tensor<1x80x32x128xf32>
    %883 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%881 : tensor<1x32x80x128xf32>) outs(%882 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1028 = tensor.extract_slice %883[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %884 = "tosa.reshape"(%extracted_slice_1028) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %885 = tensor.empty() : tensor<4096x4096xf32>
    %886 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_142 : tensor<4096x4096xf32>) outs(%885 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %887 = "tosa.reshape"(%884) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1029 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %888 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%887, %886 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1029 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %889 = "tosa.reshape"(%888) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %890 = "tosa.add"(%774, %889) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %891 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1030 = arith.constant 2 : i32
    %892 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%890 : tensor<1x80x4096xf32>) outs(%891 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1030 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1031 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %893 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%892 : tensor<1x80x4096xf32>) outs(%cst_1031 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1032 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %894 = "tosa.add"(%893, %cst_1032) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %895 = tensor.empty() : tensor<1x80x1xf32>
    %896 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%894 : tensor<1x80x1xf32>) outs(%895 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %897 = tensor.empty() : tensor<1x80x4096xf32>
    %898 = tensor.empty() : tensor<1x80x4096xf32>
    %899 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%896 : tensor<1x80x1xf32>) outs(%898 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %900 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%890, %899 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%897 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %901 = tensor.empty() : tensor<1x80x4096xf32>
    %902 = tensor.empty() : tensor<1x80x4096xf32>
    %903 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_10 : tensor<4096xf32>) outs(%902 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %904 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%903, %900 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%901 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %905 = tensor.empty() : tensor<4096x11008xf32>
    %906 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_144 : tensor<11008x4096xf32>) outs(%905 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %907 = "tosa.reshape"(%904) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1033 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %908 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%907, %906 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1033 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %909 = "tosa.reshape"(%908) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %910 = tensor.empty() : tensor<1x80x11008xf32>
    %911 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%909 : tensor<1x80x11008xf32>) outs(%910 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      %4845 = math.exp %4844 : f32
      %cst_2002 = arith.constant 1.000000e+00 : f32
      %4846 = arith.addf %cst_2002, %4845 : f32
      %4847 = arith.divf %in, %4846 : f32
      linalg.yield %4847 : f32
    } -> tensor<1x80x11008xf32>
    %912 = tensor.empty() : tensor<4096x11008xf32>
    %913 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_146 : tensor<11008x4096xf32>) outs(%912 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %914 = "tosa.reshape"(%904) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1034 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %915 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%914, %913 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1034 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %916 = "tosa.reshape"(%915) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %917 = tensor.empty() : tensor<1x80x11008xf32>
    %918 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%911, %916 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%917 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x11008xf32>
    %919 = tensor.empty() : tensor<11008x4096xf32>
    %920 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_148 : tensor<4096x11008xf32>) outs(%919 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %921 = "tosa.reshape"(%918) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %cst_1035 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %922 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%921, %920 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%cst_1035 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %923 = "tosa.reshape"(%922) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %924 = "tosa.add"(%890, %923) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %925 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1036 = arith.constant 2 : i32
    %926 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%924 : tensor<1x80x4096xf32>) outs(%925 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1036 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1037 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %927 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%926 : tensor<1x80x4096xf32>) outs(%cst_1037 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1038 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %928 = "tosa.add"(%927, %cst_1038) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %929 = tensor.empty() : tensor<1x80x1xf32>
    %930 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%928 : tensor<1x80x1xf32>) outs(%929 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %931 = tensor.empty() : tensor<1x80x4096xf32>
    %932 = tensor.empty() : tensor<1x80x4096xf32>
    %933 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%930 : tensor<1x80x1xf32>) outs(%932 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %934 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%924, %933 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%931 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %935 = tensor.empty() : tensor<1x80x4096xf32>
    %936 = tensor.empty() : tensor<1x80x4096xf32>
    %937 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_11 : tensor<4096xf32>) outs(%936 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %938 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%937, %934 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%935 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %939 = tensor.empty() : tensor<4096x4096xf32>
    %940 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_150 : tensor<4096x4096xf32>) outs(%939 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %941 = "tosa.reshape"(%938) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1039 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %942 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%941, %940 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1039 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %943 = "tosa.reshape"(%942) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %944 = tensor.empty() : tensor<4096x4096xf32>
    %945 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_152 : tensor<4096x4096xf32>) outs(%944 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %946 = "tosa.reshape"(%938) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1040 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %947 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%946, %945 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1040 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %948 = "tosa.reshape"(%947) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %949 = tensor.empty() : tensor<4096x4096xf32>
    %950 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_154 : tensor<4096x4096xf32>) outs(%949 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %951 = "tosa.reshape"(%938) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1041 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %952 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%951, %950 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1041 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %953 = "tosa.reshape"(%952) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %954 = "tosa.reshape"(%943) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %955 = tensor.empty() : tensor<1x32x80x128xf32>
    %956 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%954 : tensor<1x80x32x128xf32>) outs(%955 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %957 = "tosa.reshape"(%948) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %958 = tensor.empty() : tensor<1x32x80x128xf32>
    %959 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%957 : tensor<1x80x32x128xf32>) outs(%958 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %960 = "tosa.reshape"(%953) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %961 = tensor.empty() : tensor<1x32x80x128xf32>
    %962 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%960 : tensor<1x80x32x128xf32>) outs(%961 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1042 = tensor.extract_slice %expanded_540[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1043 = tensor.extract_slice %extracted_slice_1042[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1044 = tensor.extract_slice %extracted_slice_1043[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1045 = tensor.extract_slice %expanded_542[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1046 = tensor.extract_slice %extracted_slice_1045[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1047 = tensor.extract_slice %extracted_slice_1046[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %963 = tensor.empty() : tensor<1x80x128xf32>
    %964 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1044 : tensor<1x1x80x128xf32>) outs(%963 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %965 = tensor.empty() : tensor<80x128xf32>
    %966 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%964 : tensor<1x80x128xf32>) outs(%965 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %967 = tensor.empty() : tensor<1x80x128xf32>
    %968 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1047 : tensor<1x1x80x128xf32>) outs(%967 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %969 = tensor.empty() : tensor<80x128xf32>
    %970 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%968 : tensor<1x80x128xf32>) outs(%969 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %971 = tensor.empty() : tensor<1x80x128xf32>
    %972 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%971 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %966[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %973 = "tosa.reshape"(%972) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %974 = tensor.empty() : tensor<1x80x128xf32>
    %975 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%974 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %970[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %976 = "tosa.reshape"(%975) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %977 = tensor.empty() : tensor<1x32x80x128xf32>
    %978 = tensor.empty() : tensor<1x32x80x128xf32>
    %979 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%973 : tensor<1x1x80x128xf32>) outs(%978 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %980 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%956, %979 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%977 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1048 = tensor.extract_slice %956[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1049 = tensor.extract_slice %956[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %981 = tensor.empty() : tensor<1x32x80x64xf32>
    %982 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1049 : tensor<1x32x80x64xf32>) outs(%981 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %983 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1050 = tensor.insert_slice %982 into %983[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1051 = tensor.insert_slice %extracted_slice_1048 into %inserted_slice_1050[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %984 = tensor.empty() : tensor<1x32x80x128xf32>
    %985 = tensor.empty() : tensor<1x32x80x128xf32>
    %986 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%976 : tensor<1x1x80x128xf32>) outs(%985 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %987 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1051, %986 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%984 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %988 = "tosa.add"(%980, %987) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %989 = tensor.empty() : tensor<1x32x80x128xf32>
    %990 = tensor.empty() : tensor<1x32x80x128xf32>
    %991 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%973 : tensor<1x1x80x128xf32>) outs(%990 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %992 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%959, %991 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%989 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1052 = tensor.extract_slice %959[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1053 = tensor.extract_slice %959[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %993 = tensor.empty() : tensor<1x32x80x64xf32>
    %994 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1053 : tensor<1x32x80x64xf32>) outs(%993 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %995 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1054 = tensor.insert_slice %994 into %995[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1055 = tensor.insert_slice %extracted_slice_1052 into %inserted_slice_1054[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %996 = tensor.empty() : tensor<1x32x80x128xf32>
    %997 = tensor.empty() : tensor<1x32x80x128xf32>
    %998 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%976 : tensor<1x1x80x128xf32>) outs(%997 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %999 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1055, %998 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%996 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %1000 = "tosa.add"(%992, %999) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1001 = tensor.empty() : tensor<1x32x128x80xf32>
    %1002 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1000 : tensor<1x32x80x128xf32>) outs(%1001 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %1003 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1056 = tensor.extract_slice %988[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1057 = tensor.insert_slice %extracted_slice_1056 into %1003[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %1004 = "tosa.reshape"(%inserted_slice_1057) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %1005 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1058 = tensor.extract_slice %1002[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1059 = tensor.insert_slice %extracted_slice_1058 into %1005[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %1006 = "tosa.reshape"(%inserted_slice_1059) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %1007 = tensor.empty() : tensor<32x80x80xf32>
    %1008 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%1007 : tensor<32x80x80xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x80xf32>
    %1009 = linalg.batch_matmul ins(%1004, %1006 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%1008 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %1010 = "tosa.reshape"(%1009) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1060 = arith.constant 11.3137083 : f32
    %1011 = tensor.empty() : tensor<1x32x80x80xf32>
    %1012 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1010 : tensor<1x32x80x80xf32>) outs(%1011 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.divf %in, %cst_1060 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %1013 = "tosa.add"(%1012, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %1014 = tensor.empty() : tensor<1x32x80x1xf32>
    %1015 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1014 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %1016 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1013 : tensor<1x32x80x80xf32>) outs(%1014 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.maxf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %1017 = tensor.empty() : tensor<1x32x80x80xf32>
    %1018 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1013, %1016 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%1017 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.subf %in, %in_2002 : f32
      %4845 = math.exp %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<1x32x80x80xf32>
    %1019 = tensor.empty() : tensor<1x32x80x1xf32>
    %1020 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1019 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %1021 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1018 : tensor<1x32x80x80xf32>) outs(%1020 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.addf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %1022 = tensor.empty() : tensor<1x32x80x80xf32>
    %1023 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1018, %1021 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%1022 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.divf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %1024 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1061 = tensor.extract_slice %1023[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1062 = tensor.insert_slice %extracted_slice_1061 into %1024[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %1025 = "tosa.reshape"(%inserted_slice_1062) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %1026 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1063 = tensor.extract_slice %962[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1064 = tensor.insert_slice %extracted_slice_1063 into %1026[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %1027 = "tosa.reshape"(%inserted_slice_1064) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %1028 = tensor.empty() : tensor<32x80x128xf32>
    %1029 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%1028 : tensor<32x80x128xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x128xf32>
    %1030 = linalg.batch_matmul ins(%1025, %1027 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%1029 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %1031 = "tosa.reshape"(%1030) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1032 = tensor.empty() : tensor<1x80x32x128xf32>
    %1033 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1031 : tensor<1x32x80x128xf32>) outs(%1032 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1065 = tensor.extract_slice %1033[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %1034 = "tosa.reshape"(%extracted_slice_1065) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %1035 = tensor.empty() : tensor<4096x4096xf32>
    %1036 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_156 : tensor<4096x4096xf32>) outs(%1035 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1037 = "tosa.reshape"(%1034) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1066 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %1038 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1037, %1036 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1066 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %1039 = "tosa.reshape"(%1038) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1040 = "tosa.add"(%924, %1039) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %1041 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1067 = arith.constant 2 : i32
    %1042 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1040 : tensor<1x80x4096xf32>) outs(%1041 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1067 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1068 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %1043 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1042 : tensor<1x80x4096xf32>) outs(%cst_1068 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1069 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1044 = "tosa.add"(%1043, %cst_1069) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %1045 = tensor.empty() : tensor<1x80x1xf32>
    %1046 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1044 : tensor<1x80x1xf32>) outs(%1045 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %1047 = tensor.empty() : tensor<1x80x4096xf32>
    %1048 = tensor.empty() : tensor<1x80x4096xf32>
    %1049 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1046 : tensor<1x80x1xf32>) outs(%1048 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1050 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1040, %1049 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1047 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %1051 = tensor.empty() : tensor<1x80x4096xf32>
    %1052 = tensor.empty() : tensor<1x80x4096xf32>
    %1053 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_12 : tensor<4096xf32>) outs(%1052 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1054 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1053, %1050 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1051 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %1055 = tensor.empty() : tensor<4096x11008xf32>
    %1056 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_158 : tensor<11008x4096xf32>) outs(%1055 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1057 = "tosa.reshape"(%1054) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1070 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %1058 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1057, %1056 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1070 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %1059 = "tosa.reshape"(%1058) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %1060 = tensor.empty() : tensor<1x80x11008xf32>
    %1061 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1059 : tensor<1x80x11008xf32>) outs(%1060 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      %4845 = math.exp %4844 : f32
      %cst_2002 = arith.constant 1.000000e+00 : f32
      %4846 = arith.addf %cst_2002, %4845 : f32
      %4847 = arith.divf %in, %4846 : f32
      linalg.yield %4847 : f32
    } -> tensor<1x80x11008xf32>
    %1062 = tensor.empty() : tensor<4096x11008xf32>
    %1063 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_160 : tensor<11008x4096xf32>) outs(%1062 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1064 = "tosa.reshape"(%1054) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1071 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %1065 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1064, %1063 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1071 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %1066 = "tosa.reshape"(%1065) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %1067 = tensor.empty() : tensor<1x80x11008xf32>
    %1068 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1061, %1066 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%1067 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x11008xf32>
    %1069 = tensor.empty() : tensor<11008x4096xf32>
    %1070 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_162 : tensor<4096x11008xf32>) outs(%1069 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %1071 = "tosa.reshape"(%1068) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %cst_1072 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %1072 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1071, %1070 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%cst_1072 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %1073 = "tosa.reshape"(%1072) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1074 = "tosa.add"(%1040, %1073) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %1075 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1073 = arith.constant 2 : i32
    %1076 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1074 : tensor<1x80x4096xf32>) outs(%1075 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1073 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1074 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %1077 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1076 : tensor<1x80x4096xf32>) outs(%cst_1074 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1075 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1078 = "tosa.add"(%1077, %cst_1075) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %1079 = tensor.empty() : tensor<1x80x1xf32>
    %1080 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1078 : tensor<1x80x1xf32>) outs(%1079 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %1081 = tensor.empty() : tensor<1x80x4096xf32>
    %1082 = tensor.empty() : tensor<1x80x4096xf32>
    %1083 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1080 : tensor<1x80x1xf32>) outs(%1082 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1084 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1074, %1083 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1081 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %1085 = tensor.empty() : tensor<1x80x4096xf32>
    %1086 = tensor.empty() : tensor<1x80x4096xf32>
    %1087 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_13 : tensor<4096xf32>) outs(%1086 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1088 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1087, %1084 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1085 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %1089 = tensor.empty() : tensor<4096x4096xf32>
    %1090 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_164 : tensor<4096x4096xf32>) outs(%1089 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1091 = "tosa.reshape"(%1088) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1076 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %1092 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1091, %1090 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1076 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %1093 = "tosa.reshape"(%1092) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1094 = tensor.empty() : tensor<4096x4096xf32>
    %1095 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_166 : tensor<4096x4096xf32>) outs(%1094 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1096 = "tosa.reshape"(%1088) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1077 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %1097 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1096, %1095 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1077 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %1098 = "tosa.reshape"(%1097) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1099 = tensor.empty() : tensor<4096x4096xf32>
    %1100 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_168 : tensor<4096x4096xf32>) outs(%1099 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1101 = "tosa.reshape"(%1088) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1078 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %1102 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1101, %1100 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1078 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %1103 = "tosa.reshape"(%1102) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1104 = "tosa.reshape"(%1093) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1105 = tensor.empty() : tensor<1x32x80x128xf32>
    %1106 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1104 : tensor<1x80x32x128xf32>) outs(%1105 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1107 = "tosa.reshape"(%1098) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1108 = tensor.empty() : tensor<1x32x80x128xf32>
    %1109 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1107 : tensor<1x80x32x128xf32>) outs(%1108 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1110 = "tosa.reshape"(%1103) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1111 = tensor.empty() : tensor<1x32x80x128xf32>
    %1112 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1110 : tensor<1x80x32x128xf32>) outs(%1111 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1079 = tensor.extract_slice %expanded_544[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1080 = tensor.extract_slice %extracted_slice_1079[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1081 = tensor.extract_slice %extracted_slice_1080[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1082 = tensor.extract_slice %expanded_546[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1083 = tensor.extract_slice %extracted_slice_1082[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1084 = tensor.extract_slice %extracted_slice_1083[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %1113 = tensor.empty() : tensor<1x80x128xf32>
    %1114 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1081 : tensor<1x1x80x128xf32>) outs(%1113 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %1115 = tensor.empty() : tensor<80x128xf32>
    %1116 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%1114 : tensor<1x80x128xf32>) outs(%1115 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %1117 = tensor.empty() : tensor<1x80x128xf32>
    %1118 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1084 : tensor<1x1x80x128xf32>) outs(%1117 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %1119 = tensor.empty() : tensor<80x128xf32>
    %1120 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%1118 : tensor<1x80x128xf32>) outs(%1119 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %1121 = tensor.empty() : tensor<1x80x128xf32>
    %1122 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%1121 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %1116[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %1123 = "tosa.reshape"(%1122) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %1124 = tensor.empty() : tensor<1x80x128xf32>
    %1125 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%1124 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %1120[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %1126 = "tosa.reshape"(%1125) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %1127 = tensor.empty() : tensor<1x32x80x128xf32>
    %1128 = tensor.empty() : tensor<1x32x80x128xf32>
    %1129 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1123 : tensor<1x1x80x128xf32>) outs(%1128 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1130 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1106, %1129 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1127 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1085 = tensor.extract_slice %1106[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1086 = tensor.extract_slice %1106[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %1131 = tensor.empty() : tensor<1x32x80x64xf32>
    %1132 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1086 : tensor<1x32x80x64xf32>) outs(%1131 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %1133 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1087 = tensor.insert_slice %1132 into %1133[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1088 = tensor.insert_slice %extracted_slice_1085 into %inserted_slice_1087[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %1134 = tensor.empty() : tensor<1x32x80x128xf32>
    %1135 = tensor.empty() : tensor<1x32x80x128xf32>
    %1136 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1126 : tensor<1x1x80x128xf32>) outs(%1135 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1137 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1088, %1136 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1134 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %1138 = "tosa.add"(%1130, %1137) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1139 = tensor.empty() : tensor<1x32x80x128xf32>
    %1140 = tensor.empty() : tensor<1x32x80x128xf32>
    %1141 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1123 : tensor<1x1x80x128xf32>) outs(%1140 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1142 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1109, %1141 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1139 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1089 = tensor.extract_slice %1109[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1090 = tensor.extract_slice %1109[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %1143 = tensor.empty() : tensor<1x32x80x64xf32>
    %1144 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1090 : tensor<1x32x80x64xf32>) outs(%1143 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %1145 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1091 = tensor.insert_slice %1144 into %1145[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1092 = tensor.insert_slice %extracted_slice_1089 into %inserted_slice_1091[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %1146 = tensor.empty() : tensor<1x32x80x128xf32>
    %1147 = tensor.empty() : tensor<1x32x80x128xf32>
    %1148 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1126 : tensor<1x1x80x128xf32>) outs(%1147 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1149 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1092, %1148 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1146 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %1150 = "tosa.add"(%1142, %1149) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1151 = tensor.empty() : tensor<1x32x128x80xf32>
    %1152 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1150 : tensor<1x32x80x128xf32>) outs(%1151 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %1153 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1093 = tensor.extract_slice %1138[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1094 = tensor.insert_slice %extracted_slice_1093 into %1153[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %1154 = "tosa.reshape"(%inserted_slice_1094) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %1155 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1095 = tensor.extract_slice %1152[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1096 = tensor.insert_slice %extracted_slice_1095 into %1155[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %1156 = "tosa.reshape"(%inserted_slice_1096) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %1157 = tensor.empty() : tensor<32x80x80xf32>
    %1158 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%1157 : tensor<32x80x80xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x80xf32>
    %1159 = linalg.batch_matmul ins(%1154, %1156 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%1158 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %1160 = "tosa.reshape"(%1159) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1097 = arith.constant 11.3137083 : f32
    %1161 = tensor.empty() : tensor<1x32x80x80xf32>
    %1162 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1160 : tensor<1x32x80x80xf32>) outs(%1161 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.divf %in, %cst_1097 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %1163 = "tosa.add"(%1162, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %1164 = tensor.empty() : tensor<1x32x80x1xf32>
    %1165 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1164 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %1166 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1163 : tensor<1x32x80x80xf32>) outs(%1164 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.maxf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %1167 = tensor.empty() : tensor<1x32x80x80xf32>
    %1168 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1163, %1166 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%1167 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.subf %in, %in_2002 : f32
      %4845 = math.exp %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<1x32x80x80xf32>
    %1169 = tensor.empty() : tensor<1x32x80x1xf32>
    %1170 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1169 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %1171 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1168 : tensor<1x32x80x80xf32>) outs(%1170 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.addf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %1172 = tensor.empty() : tensor<1x32x80x80xf32>
    %1173 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1168, %1171 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%1172 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.divf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %1174 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1098 = tensor.extract_slice %1173[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1099 = tensor.insert_slice %extracted_slice_1098 into %1174[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %1175 = "tosa.reshape"(%inserted_slice_1099) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %1176 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1100 = tensor.extract_slice %1112[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1101 = tensor.insert_slice %extracted_slice_1100 into %1176[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %1177 = "tosa.reshape"(%inserted_slice_1101) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %1178 = tensor.empty() : tensor<32x80x128xf32>
    %1179 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%1178 : tensor<32x80x128xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x128xf32>
    %1180 = linalg.batch_matmul ins(%1175, %1177 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%1179 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %1181 = "tosa.reshape"(%1180) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1182 = tensor.empty() : tensor<1x80x32x128xf32>
    %1183 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1181 : tensor<1x32x80x128xf32>) outs(%1182 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1102 = tensor.extract_slice %1183[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %1184 = "tosa.reshape"(%extracted_slice_1102) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %1185 = tensor.empty() : tensor<4096x4096xf32>
    %1186 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_170 : tensor<4096x4096xf32>) outs(%1185 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1187 = "tosa.reshape"(%1184) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1103 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %1188 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1187, %1186 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1103 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %1189 = "tosa.reshape"(%1188) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1190 = "tosa.add"(%1074, %1189) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %1191 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1104 = arith.constant 2 : i32
    %1192 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1190 : tensor<1x80x4096xf32>) outs(%1191 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1104 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1105 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %1193 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1192 : tensor<1x80x4096xf32>) outs(%cst_1105 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1106 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1194 = "tosa.add"(%1193, %cst_1106) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %1195 = tensor.empty() : tensor<1x80x1xf32>
    %1196 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1194 : tensor<1x80x1xf32>) outs(%1195 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %1197 = tensor.empty() : tensor<1x80x4096xf32>
    %1198 = tensor.empty() : tensor<1x80x4096xf32>
    %1199 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1196 : tensor<1x80x1xf32>) outs(%1198 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1200 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1190, %1199 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1197 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %1201 = tensor.empty() : tensor<1x80x4096xf32>
    %1202 = tensor.empty() : tensor<1x80x4096xf32>
    %1203 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_14 : tensor<4096xf32>) outs(%1202 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1204 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1203, %1200 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1201 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %1205 = tensor.empty() : tensor<4096x11008xf32>
    %1206 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_172 : tensor<11008x4096xf32>) outs(%1205 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1207 = "tosa.reshape"(%1204) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1107 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %1208 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1207, %1206 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1107 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %1209 = "tosa.reshape"(%1208) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %1210 = tensor.empty() : tensor<1x80x11008xf32>
    %1211 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1209 : tensor<1x80x11008xf32>) outs(%1210 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      %4845 = math.exp %4844 : f32
      %cst_2002 = arith.constant 1.000000e+00 : f32
      %4846 = arith.addf %cst_2002, %4845 : f32
      %4847 = arith.divf %in, %4846 : f32
      linalg.yield %4847 : f32
    } -> tensor<1x80x11008xf32>
    %1212 = tensor.empty() : tensor<4096x11008xf32>
    %1213 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_174 : tensor<11008x4096xf32>) outs(%1212 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1214 = "tosa.reshape"(%1204) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1108 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %1215 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1214, %1213 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1108 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %1216 = "tosa.reshape"(%1215) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %1217 = tensor.empty() : tensor<1x80x11008xf32>
    %1218 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1211, %1216 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%1217 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x11008xf32>
    %1219 = tensor.empty() : tensor<11008x4096xf32>
    %1220 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_176 : tensor<4096x11008xf32>) outs(%1219 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %1221 = "tosa.reshape"(%1218) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %cst_1109 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %1222 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1221, %1220 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%cst_1109 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %1223 = "tosa.reshape"(%1222) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1224 = "tosa.add"(%1190, %1223) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %1225 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1110 = arith.constant 2 : i32
    %1226 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1224 : tensor<1x80x4096xf32>) outs(%1225 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1110 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1111 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %1227 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1226 : tensor<1x80x4096xf32>) outs(%cst_1111 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1112 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1228 = "tosa.add"(%1227, %cst_1112) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %1229 = tensor.empty() : tensor<1x80x1xf32>
    %1230 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1228 : tensor<1x80x1xf32>) outs(%1229 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %1231 = tensor.empty() : tensor<1x80x4096xf32>
    %1232 = tensor.empty() : tensor<1x80x4096xf32>
    %1233 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1230 : tensor<1x80x1xf32>) outs(%1232 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1234 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1224, %1233 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1231 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %1235 = tensor.empty() : tensor<1x80x4096xf32>
    %1236 = tensor.empty() : tensor<1x80x4096xf32>
    %1237 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_15 : tensor<4096xf32>) outs(%1236 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1238 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1237, %1234 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1235 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %1239 = tensor.empty() : tensor<4096x4096xf32>
    %1240 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_178 : tensor<4096x4096xf32>) outs(%1239 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1241 = "tosa.reshape"(%1238) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1113 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %1242 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1241, %1240 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1113 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %1243 = "tosa.reshape"(%1242) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1244 = tensor.empty() : tensor<4096x4096xf32>
    %1245 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_180 : tensor<4096x4096xf32>) outs(%1244 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1246 = "tosa.reshape"(%1238) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1114 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %1247 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1246, %1245 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1114 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %1248 = "tosa.reshape"(%1247) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1249 = tensor.empty() : tensor<4096x4096xf32>
    %1250 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_182 : tensor<4096x4096xf32>) outs(%1249 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1251 = "tosa.reshape"(%1238) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1115 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %1252 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1251, %1250 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1115 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %1253 = "tosa.reshape"(%1252) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1254 = "tosa.reshape"(%1243) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1255 = tensor.empty() : tensor<1x32x80x128xf32>
    %1256 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1254 : tensor<1x80x32x128xf32>) outs(%1255 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1257 = "tosa.reshape"(%1248) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1258 = tensor.empty() : tensor<1x32x80x128xf32>
    %1259 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1257 : tensor<1x80x32x128xf32>) outs(%1258 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1260 = "tosa.reshape"(%1253) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1261 = tensor.empty() : tensor<1x32x80x128xf32>
    %1262 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1260 : tensor<1x80x32x128xf32>) outs(%1261 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1116 = tensor.extract_slice %expanded_548[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1117 = tensor.extract_slice %extracted_slice_1116[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1118 = tensor.extract_slice %extracted_slice_1117[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1119 = tensor.extract_slice %expanded_550[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1120 = tensor.extract_slice %extracted_slice_1119[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1121 = tensor.extract_slice %extracted_slice_1120[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %1263 = tensor.empty() : tensor<1x80x128xf32>
    %1264 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1118 : tensor<1x1x80x128xf32>) outs(%1263 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %1265 = tensor.empty() : tensor<80x128xf32>
    %1266 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%1264 : tensor<1x80x128xf32>) outs(%1265 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %1267 = tensor.empty() : tensor<1x80x128xf32>
    %1268 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1121 : tensor<1x1x80x128xf32>) outs(%1267 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %1269 = tensor.empty() : tensor<80x128xf32>
    %1270 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%1268 : tensor<1x80x128xf32>) outs(%1269 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %1271 = tensor.empty() : tensor<1x80x128xf32>
    %1272 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%1271 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %1266[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %1273 = "tosa.reshape"(%1272) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %1274 = tensor.empty() : tensor<1x80x128xf32>
    %1275 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%1274 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %1270[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %1276 = "tosa.reshape"(%1275) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %1277 = tensor.empty() : tensor<1x32x80x128xf32>
    %1278 = tensor.empty() : tensor<1x32x80x128xf32>
    %1279 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1273 : tensor<1x1x80x128xf32>) outs(%1278 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1280 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1256, %1279 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1277 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1122 = tensor.extract_slice %1256[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1123 = tensor.extract_slice %1256[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %1281 = tensor.empty() : tensor<1x32x80x64xf32>
    %1282 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1123 : tensor<1x32x80x64xf32>) outs(%1281 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %1283 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1124 = tensor.insert_slice %1282 into %1283[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1125 = tensor.insert_slice %extracted_slice_1122 into %inserted_slice_1124[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %1284 = tensor.empty() : tensor<1x32x80x128xf32>
    %1285 = tensor.empty() : tensor<1x32x80x128xf32>
    %1286 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1276 : tensor<1x1x80x128xf32>) outs(%1285 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1287 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1125, %1286 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1284 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %1288 = "tosa.add"(%1280, %1287) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1289 = tensor.empty() : tensor<1x32x80x128xf32>
    %1290 = tensor.empty() : tensor<1x32x80x128xf32>
    %1291 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1273 : tensor<1x1x80x128xf32>) outs(%1290 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1292 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1259, %1291 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1289 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1126 = tensor.extract_slice %1259[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1127 = tensor.extract_slice %1259[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %1293 = tensor.empty() : tensor<1x32x80x64xf32>
    %1294 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1127 : tensor<1x32x80x64xf32>) outs(%1293 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %1295 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1128 = tensor.insert_slice %1294 into %1295[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1129 = tensor.insert_slice %extracted_slice_1126 into %inserted_slice_1128[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %1296 = tensor.empty() : tensor<1x32x80x128xf32>
    %1297 = tensor.empty() : tensor<1x32x80x128xf32>
    %1298 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1276 : tensor<1x1x80x128xf32>) outs(%1297 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1299 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1129, %1298 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1296 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %1300 = "tosa.add"(%1292, %1299) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1301 = tensor.empty() : tensor<1x32x128x80xf32>
    %1302 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1300 : tensor<1x32x80x128xf32>) outs(%1301 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %1303 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1130 = tensor.extract_slice %1288[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1131 = tensor.insert_slice %extracted_slice_1130 into %1303[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %1304 = "tosa.reshape"(%inserted_slice_1131) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %1305 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1132 = tensor.extract_slice %1302[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1133 = tensor.insert_slice %extracted_slice_1132 into %1305[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %1306 = "tosa.reshape"(%inserted_slice_1133) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %1307 = tensor.empty() : tensor<32x80x80xf32>
    %1308 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%1307 : tensor<32x80x80xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x80xf32>
    %1309 = linalg.batch_matmul ins(%1304, %1306 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%1308 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %1310 = "tosa.reshape"(%1309) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1134 = arith.constant 11.3137083 : f32
    %1311 = tensor.empty() : tensor<1x32x80x80xf32>
    %1312 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1310 : tensor<1x32x80x80xf32>) outs(%1311 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.divf %in, %cst_1134 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %1313 = "tosa.add"(%1312, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %1314 = tensor.empty() : tensor<1x32x80x1xf32>
    %1315 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1314 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %1316 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1313 : tensor<1x32x80x80xf32>) outs(%1314 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.maxf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %1317 = tensor.empty() : tensor<1x32x80x80xf32>
    %1318 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1313, %1316 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%1317 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.subf %in, %in_2002 : f32
      %4845 = math.exp %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<1x32x80x80xf32>
    %1319 = tensor.empty() : tensor<1x32x80x1xf32>
    %1320 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1319 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %1321 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1318 : tensor<1x32x80x80xf32>) outs(%1320 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.addf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %1322 = tensor.empty() : tensor<1x32x80x80xf32>
    %1323 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1318, %1321 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%1322 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.divf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %1324 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1135 = tensor.extract_slice %1323[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1136 = tensor.insert_slice %extracted_slice_1135 into %1324[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %1325 = "tosa.reshape"(%inserted_slice_1136) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %1326 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1137 = tensor.extract_slice %1262[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1138 = tensor.insert_slice %extracted_slice_1137 into %1326[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %1327 = "tosa.reshape"(%inserted_slice_1138) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %1328 = tensor.empty() : tensor<32x80x128xf32>
    %1329 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%1328 : tensor<32x80x128xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x128xf32>
    %1330 = linalg.batch_matmul ins(%1325, %1327 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%1329 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %1331 = "tosa.reshape"(%1330) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1332 = tensor.empty() : tensor<1x80x32x128xf32>
    %1333 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1331 : tensor<1x32x80x128xf32>) outs(%1332 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1139 = tensor.extract_slice %1333[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %1334 = "tosa.reshape"(%extracted_slice_1139) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %1335 = tensor.empty() : tensor<4096x4096xf32>
    %1336 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_184 : tensor<4096x4096xf32>) outs(%1335 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1337 = "tosa.reshape"(%1334) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1140 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %1338 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1337, %1336 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1140 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %1339 = "tosa.reshape"(%1338) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1340 = "tosa.add"(%1224, %1339) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %1341 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1141 = arith.constant 2 : i32
    %1342 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1340 : tensor<1x80x4096xf32>) outs(%1341 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1141 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1142 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %1343 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1342 : tensor<1x80x4096xf32>) outs(%cst_1142 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1143 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1344 = "tosa.add"(%1343, %cst_1143) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %1345 = tensor.empty() : tensor<1x80x1xf32>
    %1346 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1344 : tensor<1x80x1xf32>) outs(%1345 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %1347 = tensor.empty() : tensor<1x80x4096xf32>
    %1348 = tensor.empty() : tensor<1x80x4096xf32>
    %1349 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1346 : tensor<1x80x1xf32>) outs(%1348 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1350 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1340, %1349 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1347 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %1351 = tensor.empty() : tensor<1x80x4096xf32>
    %1352 = tensor.empty() : tensor<1x80x4096xf32>
    %1353 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_16 : tensor<4096xf32>) outs(%1352 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1354 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1353, %1350 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1351 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %1355 = tensor.empty() : tensor<4096x11008xf32>
    %1356 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_186 : tensor<11008x4096xf32>) outs(%1355 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1357 = "tosa.reshape"(%1354) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1144 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %1358 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1357, %1356 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1144 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %1359 = "tosa.reshape"(%1358) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %1360 = tensor.empty() : tensor<1x80x11008xf32>
    %1361 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1359 : tensor<1x80x11008xf32>) outs(%1360 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      %4845 = math.exp %4844 : f32
      %cst_2002 = arith.constant 1.000000e+00 : f32
      %4846 = arith.addf %cst_2002, %4845 : f32
      %4847 = arith.divf %in, %4846 : f32
      linalg.yield %4847 : f32
    } -> tensor<1x80x11008xf32>
    %1362 = tensor.empty() : tensor<4096x11008xf32>
    %1363 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_188 : tensor<11008x4096xf32>) outs(%1362 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1364 = "tosa.reshape"(%1354) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1145 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %1365 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1364, %1363 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1145 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %1366 = "tosa.reshape"(%1365) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %1367 = tensor.empty() : tensor<1x80x11008xf32>
    %1368 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1361, %1366 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%1367 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x11008xf32>
    %1369 = tensor.empty() : tensor<11008x4096xf32>
    %1370 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_190 : tensor<4096x11008xf32>) outs(%1369 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %1371 = "tosa.reshape"(%1368) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %cst_1146 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %1372 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1371, %1370 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%cst_1146 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %1373 = "tosa.reshape"(%1372) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1374 = "tosa.add"(%1340, %1373) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %1375 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1147 = arith.constant 2 : i32
    %1376 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1374 : tensor<1x80x4096xf32>) outs(%1375 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1147 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1148 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %1377 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1376 : tensor<1x80x4096xf32>) outs(%cst_1148 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1149 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1378 = "tosa.add"(%1377, %cst_1149) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %1379 = tensor.empty() : tensor<1x80x1xf32>
    %1380 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1378 : tensor<1x80x1xf32>) outs(%1379 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %1381 = tensor.empty() : tensor<1x80x4096xf32>
    %1382 = tensor.empty() : tensor<1x80x4096xf32>
    %1383 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1380 : tensor<1x80x1xf32>) outs(%1382 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1384 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1374, %1383 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1381 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %1385 = tensor.empty() : tensor<1x80x4096xf32>
    %1386 = tensor.empty() : tensor<1x80x4096xf32>
    %1387 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_17 : tensor<4096xf32>) outs(%1386 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1388 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1387, %1384 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1385 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %1389 = tensor.empty() : tensor<4096x4096xf32>
    %1390 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_192 : tensor<4096x4096xf32>) outs(%1389 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1391 = "tosa.reshape"(%1388) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1150 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %1392 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1391, %1390 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1150 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %1393 = "tosa.reshape"(%1392) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1394 = tensor.empty() : tensor<4096x4096xf32>
    %1395 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_194 : tensor<4096x4096xf32>) outs(%1394 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1396 = "tosa.reshape"(%1388) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1151 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %1397 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1396, %1395 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1151 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %1398 = "tosa.reshape"(%1397) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1399 = tensor.empty() : tensor<4096x4096xf32>
    %1400 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_196 : tensor<4096x4096xf32>) outs(%1399 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1401 = "tosa.reshape"(%1388) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1152 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %1402 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1401, %1400 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1152 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %1403 = "tosa.reshape"(%1402) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1404 = "tosa.reshape"(%1393) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1405 = tensor.empty() : tensor<1x32x80x128xf32>
    %1406 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1404 : tensor<1x80x32x128xf32>) outs(%1405 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1407 = "tosa.reshape"(%1398) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1408 = tensor.empty() : tensor<1x32x80x128xf32>
    %1409 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1407 : tensor<1x80x32x128xf32>) outs(%1408 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1410 = "tosa.reshape"(%1403) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1411 = tensor.empty() : tensor<1x32x80x128xf32>
    %1412 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1410 : tensor<1x80x32x128xf32>) outs(%1411 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1153 = tensor.extract_slice %expanded_552[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1154 = tensor.extract_slice %extracted_slice_1153[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1155 = tensor.extract_slice %extracted_slice_1154[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1156 = tensor.extract_slice %expanded_554[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1157 = tensor.extract_slice %extracted_slice_1156[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1158 = tensor.extract_slice %extracted_slice_1157[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %1413 = tensor.empty() : tensor<1x80x128xf32>
    %1414 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1155 : tensor<1x1x80x128xf32>) outs(%1413 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %1415 = tensor.empty() : tensor<80x128xf32>
    %1416 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%1414 : tensor<1x80x128xf32>) outs(%1415 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %1417 = tensor.empty() : tensor<1x80x128xf32>
    %1418 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1158 : tensor<1x1x80x128xf32>) outs(%1417 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %1419 = tensor.empty() : tensor<80x128xf32>
    %1420 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%1418 : tensor<1x80x128xf32>) outs(%1419 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %1421 = tensor.empty() : tensor<1x80x128xf32>
    %1422 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%1421 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %1416[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %1423 = "tosa.reshape"(%1422) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %1424 = tensor.empty() : tensor<1x80x128xf32>
    %1425 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%1424 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %1420[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %1426 = "tosa.reshape"(%1425) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %1427 = tensor.empty() : tensor<1x32x80x128xf32>
    %1428 = tensor.empty() : tensor<1x32x80x128xf32>
    %1429 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1423 : tensor<1x1x80x128xf32>) outs(%1428 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1430 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1406, %1429 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1427 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1159 = tensor.extract_slice %1406[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1160 = tensor.extract_slice %1406[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %1431 = tensor.empty() : tensor<1x32x80x64xf32>
    %1432 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1160 : tensor<1x32x80x64xf32>) outs(%1431 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %1433 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1161 = tensor.insert_slice %1432 into %1433[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1162 = tensor.insert_slice %extracted_slice_1159 into %inserted_slice_1161[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %1434 = tensor.empty() : tensor<1x32x80x128xf32>
    %1435 = tensor.empty() : tensor<1x32x80x128xf32>
    %1436 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1426 : tensor<1x1x80x128xf32>) outs(%1435 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1437 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1162, %1436 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1434 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %1438 = "tosa.add"(%1430, %1437) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1439 = tensor.empty() : tensor<1x32x80x128xf32>
    %1440 = tensor.empty() : tensor<1x32x80x128xf32>
    %1441 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1423 : tensor<1x1x80x128xf32>) outs(%1440 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1442 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1409, %1441 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1439 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1163 = tensor.extract_slice %1409[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1164 = tensor.extract_slice %1409[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %1443 = tensor.empty() : tensor<1x32x80x64xf32>
    %1444 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1164 : tensor<1x32x80x64xf32>) outs(%1443 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %1445 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1165 = tensor.insert_slice %1444 into %1445[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1166 = tensor.insert_slice %extracted_slice_1163 into %inserted_slice_1165[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %1446 = tensor.empty() : tensor<1x32x80x128xf32>
    %1447 = tensor.empty() : tensor<1x32x80x128xf32>
    %1448 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1426 : tensor<1x1x80x128xf32>) outs(%1447 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1449 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1166, %1448 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1446 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %1450 = "tosa.add"(%1442, %1449) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1451 = tensor.empty() : tensor<1x32x128x80xf32>
    %1452 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1450 : tensor<1x32x80x128xf32>) outs(%1451 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %1453 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1167 = tensor.extract_slice %1438[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1168 = tensor.insert_slice %extracted_slice_1167 into %1453[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %1454 = "tosa.reshape"(%inserted_slice_1168) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %1455 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1169 = tensor.extract_slice %1452[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1170 = tensor.insert_slice %extracted_slice_1169 into %1455[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %1456 = "tosa.reshape"(%inserted_slice_1170) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %1457 = tensor.empty() : tensor<32x80x80xf32>
    %1458 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%1457 : tensor<32x80x80xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x80xf32>
    %1459 = linalg.batch_matmul ins(%1454, %1456 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%1458 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %1460 = "tosa.reshape"(%1459) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1171 = arith.constant 11.3137083 : f32
    %1461 = tensor.empty() : tensor<1x32x80x80xf32>
    %1462 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1460 : tensor<1x32x80x80xf32>) outs(%1461 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.divf %in, %cst_1171 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %1463 = "tosa.add"(%1462, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %1464 = tensor.empty() : tensor<1x32x80x1xf32>
    %1465 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1464 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %1466 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1463 : tensor<1x32x80x80xf32>) outs(%1464 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.maxf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %1467 = tensor.empty() : tensor<1x32x80x80xf32>
    %1468 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1463, %1466 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%1467 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.subf %in, %in_2002 : f32
      %4845 = math.exp %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<1x32x80x80xf32>
    %1469 = tensor.empty() : tensor<1x32x80x1xf32>
    %1470 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1469 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %1471 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1468 : tensor<1x32x80x80xf32>) outs(%1470 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.addf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %1472 = tensor.empty() : tensor<1x32x80x80xf32>
    %1473 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1468, %1471 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%1472 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.divf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %1474 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1172 = tensor.extract_slice %1473[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1173 = tensor.insert_slice %extracted_slice_1172 into %1474[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %1475 = "tosa.reshape"(%inserted_slice_1173) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %1476 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1174 = tensor.extract_slice %1412[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1175 = tensor.insert_slice %extracted_slice_1174 into %1476[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %1477 = "tosa.reshape"(%inserted_slice_1175) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %1478 = tensor.empty() : tensor<32x80x128xf32>
    %1479 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%1478 : tensor<32x80x128xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x128xf32>
    %1480 = linalg.batch_matmul ins(%1475, %1477 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%1479 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %1481 = "tosa.reshape"(%1480) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1482 = tensor.empty() : tensor<1x80x32x128xf32>
    %1483 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1481 : tensor<1x32x80x128xf32>) outs(%1482 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1176 = tensor.extract_slice %1483[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %1484 = "tosa.reshape"(%extracted_slice_1176) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %1485 = tensor.empty() : tensor<4096x4096xf32>
    %1486 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_198 : tensor<4096x4096xf32>) outs(%1485 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1487 = "tosa.reshape"(%1484) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1177 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %1488 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1487, %1486 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1177 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %1489 = "tosa.reshape"(%1488) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1490 = "tosa.add"(%1374, %1489) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %1491 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1178 = arith.constant 2 : i32
    %1492 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1490 : tensor<1x80x4096xf32>) outs(%1491 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1178 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1179 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %1493 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1492 : tensor<1x80x4096xf32>) outs(%cst_1179 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1180 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1494 = "tosa.add"(%1493, %cst_1180) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %1495 = tensor.empty() : tensor<1x80x1xf32>
    %1496 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1494 : tensor<1x80x1xf32>) outs(%1495 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %1497 = tensor.empty() : tensor<1x80x4096xf32>
    %1498 = tensor.empty() : tensor<1x80x4096xf32>
    %1499 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1496 : tensor<1x80x1xf32>) outs(%1498 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1500 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1490, %1499 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1497 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %1501 = tensor.empty() : tensor<1x80x4096xf32>
    %1502 = tensor.empty() : tensor<1x80x4096xf32>
    %1503 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_18 : tensor<4096xf32>) outs(%1502 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1504 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1503, %1500 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1501 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %1505 = tensor.empty() : tensor<4096x11008xf32>
    %1506 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_200 : tensor<11008x4096xf32>) outs(%1505 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1507 = "tosa.reshape"(%1504) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1181 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %1508 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1507, %1506 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1181 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %1509 = "tosa.reshape"(%1508) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %1510 = tensor.empty() : tensor<1x80x11008xf32>
    %1511 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1509 : tensor<1x80x11008xf32>) outs(%1510 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      %4845 = math.exp %4844 : f32
      %cst_2002 = arith.constant 1.000000e+00 : f32
      %4846 = arith.addf %cst_2002, %4845 : f32
      %4847 = arith.divf %in, %4846 : f32
      linalg.yield %4847 : f32
    } -> tensor<1x80x11008xf32>
    %1512 = tensor.empty() : tensor<4096x11008xf32>
    %1513 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_202 : tensor<11008x4096xf32>) outs(%1512 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1514 = "tosa.reshape"(%1504) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1182 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %1515 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1514, %1513 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1182 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %1516 = "tosa.reshape"(%1515) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %1517 = tensor.empty() : tensor<1x80x11008xf32>
    %1518 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1511, %1516 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%1517 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x11008xf32>
    %1519 = tensor.empty() : tensor<11008x4096xf32>
    %1520 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_204 : tensor<4096x11008xf32>) outs(%1519 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %1521 = "tosa.reshape"(%1518) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %cst_1183 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %1522 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1521, %1520 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%cst_1183 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %1523 = "tosa.reshape"(%1522) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1524 = "tosa.add"(%1490, %1523) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %1525 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1184 = arith.constant 2 : i32
    %1526 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1524 : tensor<1x80x4096xf32>) outs(%1525 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1184 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1185 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %1527 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1526 : tensor<1x80x4096xf32>) outs(%cst_1185 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1186 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1528 = "tosa.add"(%1527, %cst_1186) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %1529 = tensor.empty() : tensor<1x80x1xf32>
    %1530 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1528 : tensor<1x80x1xf32>) outs(%1529 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %1531 = tensor.empty() : tensor<1x80x4096xf32>
    %1532 = tensor.empty() : tensor<1x80x4096xf32>
    %1533 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1530 : tensor<1x80x1xf32>) outs(%1532 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1534 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1524, %1533 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1531 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %1535 = tensor.empty() : tensor<1x80x4096xf32>
    %1536 = tensor.empty() : tensor<1x80x4096xf32>
    %1537 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_19 : tensor<4096xf32>) outs(%1536 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1538 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1537, %1534 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1535 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %1539 = tensor.empty() : tensor<4096x4096xf32>
    %1540 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_206 : tensor<4096x4096xf32>) outs(%1539 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1541 = "tosa.reshape"(%1538) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1187 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %1542 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1541, %1540 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1187 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %1543 = "tosa.reshape"(%1542) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1544 = tensor.empty() : tensor<4096x4096xf32>
    %1545 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_208 : tensor<4096x4096xf32>) outs(%1544 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1546 = "tosa.reshape"(%1538) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1188 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %1547 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1546, %1545 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1188 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %1548 = "tosa.reshape"(%1547) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1549 = tensor.empty() : tensor<4096x4096xf32>
    %1550 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_210 : tensor<4096x4096xf32>) outs(%1549 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1551 = "tosa.reshape"(%1538) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1189 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %1552 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1551, %1550 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1189 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %1553 = "tosa.reshape"(%1552) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1554 = "tosa.reshape"(%1543) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1555 = tensor.empty() : tensor<1x32x80x128xf32>
    %1556 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1554 : tensor<1x80x32x128xf32>) outs(%1555 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1557 = "tosa.reshape"(%1548) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1558 = tensor.empty() : tensor<1x32x80x128xf32>
    %1559 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1557 : tensor<1x80x32x128xf32>) outs(%1558 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1560 = "tosa.reshape"(%1553) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1561 = tensor.empty() : tensor<1x32x80x128xf32>
    %1562 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1560 : tensor<1x80x32x128xf32>) outs(%1561 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1190 = tensor.extract_slice %expanded_556[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1191 = tensor.extract_slice %extracted_slice_1190[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1192 = tensor.extract_slice %extracted_slice_1191[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1193 = tensor.extract_slice %expanded_558[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1194 = tensor.extract_slice %extracted_slice_1193[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1195 = tensor.extract_slice %extracted_slice_1194[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %1563 = tensor.empty() : tensor<1x80x128xf32>
    %1564 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1192 : tensor<1x1x80x128xf32>) outs(%1563 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %1565 = tensor.empty() : tensor<80x128xf32>
    %1566 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%1564 : tensor<1x80x128xf32>) outs(%1565 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %1567 = tensor.empty() : tensor<1x80x128xf32>
    %1568 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1195 : tensor<1x1x80x128xf32>) outs(%1567 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %1569 = tensor.empty() : tensor<80x128xf32>
    %1570 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%1568 : tensor<1x80x128xf32>) outs(%1569 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %1571 = tensor.empty() : tensor<1x80x128xf32>
    %1572 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%1571 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %1566[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %1573 = "tosa.reshape"(%1572) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %1574 = tensor.empty() : tensor<1x80x128xf32>
    %1575 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%1574 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %1570[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %1576 = "tosa.reshape"(%1575) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %1577 = tensor.empty() : tensor<1x32x80x128xf32>
    %1578 = tensor.empty() : tensor<1x32x80x128xf32>
    %1579 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1573 : tensor<1x1x80x128xf32>) outs(%1578 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1580 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1556, %1579 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1577 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1196 = tensor.extract_slice %1556[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1197 = tensor.extract_slice %1556[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %1581 = tensor.empty() : tensor<1x32x80x64xf32>
    %1582 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1197 : tensor<1x32x80x64xf32>) outs(%1581 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %1583 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1198 = tensor.insert_slice %1582 into %1583[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1199 = tensor.insert_slice %extracted_slice_1196 into %inserted_slice_1198[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %1584 = tensor.empty() : tensor<1x32x80x128xf32>
    %1585 = tensor.empty() : tensor<1x32x80x128xf32>
    %1586 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1576 : tensor<1x1x80x128xf32>) outs(%1585 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1587 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1199, %1586 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1584 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %1588 = "tosa.add"(%1580, %1587) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1589 = tensor.empty() : tensor<1x32x80x128xf32>
    %1590 = tensor.empty() : tensor<1x32x80x128xf32>
    %1591 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1573 : tensor<1x1x80x128xf32>) outs(%1590 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1592 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1559, %1591 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1589 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1200 = tensor.extract_slice %1559[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1201 = tensor.extract_slice %1559[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %1593 = tensor.empty() : tensor<1x32x80x64xf32>
    %1594 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1201 : tensor<1x32x80x64xf32>) outs(%1593 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %1595 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1202 = tensor.insert_slice %1594 into %1595[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1203 = tensor.insert_slice %extracted_slice_1200 into %inserted_slice_1202[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %1596 = tensor.empty() : tensor<1x32x80x128xf32>
    %1597 = tensor.empty() : tensor<1x32x80x128xf32>
    %1598 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1576 : tensor<1x1x80x128xf32>) outs(%1597 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1599 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1203, %1598 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1596 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %1600 = "tosa.add"(%1592, %1599) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1601 = tensor.empty() : tensor<1x32x128x80xf32>
    %1602 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1600 : tensor<1x32x80x128xf32>) outs(%1601 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %1603 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1204 = tensor.extract_slice %1588[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1205 = tensor.insert_slice %extracted_slice_1204 into %1603[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %1604 = "tosa.reshape"(%inserted_slice_1205) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %1605 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1206 = tensor.extract_slice %1602[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1207 = tensor.insert_slice %extracted_slice_1206 into %1605[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %1606 = "tosa.reshape"(%inserted_slice_1207) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %1607 = tensor.empty() : tensor<32x80x80xf32>
    %1608 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%1607 : tensor<32x80x80xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x80xf32>
    %1609 = linalg.batch_matmul ins(%1604, %1606 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%1608 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %1610 = "tosa.reshape"(%1609) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1208 = arith.constant 11.3137083 : f32
    %1611 = tensor.empty() : tensor<1x32x80x80xf32>
    %1612 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1610 : tensor<1x32x80x80xf32>) outs(%1611 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.divf %in, %cst_1208 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %1613 = "tosa.add"(%1612, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %1614 = tensor.empty() : tensor<1x32x80x1xf32>
    %1615 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1614 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %1616 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1613 : tensor<1x32x80x80xf32>) outs(%1614 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.maxf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %1617 = tensor.empty() : tensor<1x32x80x80xf32>
    %1618 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1613, %1616 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%1617 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.subf %in, %in_2002 : f32
      %4845 = math.exp %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<1x32x80x80xf32>
    %1619 = tensor.empty() : tensor<1x32x80x1xf32>
    %1620 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1619 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %1621 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1618 : tensor<1x32x80x80xf32>) outs(%1620 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.addf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %1622 = tensor.empty() : tensor<1x32x80x80xf32>
    %1623 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1618, %1621 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%1622 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.divf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %1624 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1209 = tensor.extract_slice %1623[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1210 = tensor.insert_slice %extracted_slice_1209 into %1624[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %1625 = "tosa.reshape"(%inserted_slice_1210) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %1626 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1211 = tensor.extract_slice %1562[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1212 = tensor.insert_slice %extracted_slice_1211 into %1626[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %1627 = "tosa.reshape"(%inserted_slice_1212) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %1628 = tensor.empty() : tensor<32x80x128xf32>
    %1629 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%1628 : tensor<32x80x128xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x128xf32>
    %1630 = linalg.batch_matmul ins(%1625, %1627 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%1629 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %1631 = "tosa.reshape"(%1630) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1632 = tensor.empty() : tensor<1x80x32x128xf32>
    %1633 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1631 : tensor<1x32x80x128xf32>) outs(%1632 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1213 = tensor.extract_slice %1633[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %1634 = "tosa.reshape"(%extracted_slice_1213) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %1635 = tensor.empty() : tensor<4096x4096xf32>
    %1636 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_212 : tensor<4096x4096xf32>) outs(%1635 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1637 = "tosa.reshape"(%1634) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1214 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %1638 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1637, %1636 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1214 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %1639 = "tosa.reshape"(%1638) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1640 = "tosa.add"(%1524, %1639) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %1641 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1215 = arith.constant 2 : i32
    %1642 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1640 : tensor<1x80x4096xf32>) outs(%1641 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1215 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1216 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %1643 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1642 : tensor<1x80x4096xf32>) outs(%cst_1216 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1217 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1644 = "tosa.add"(%1643, %cst_1217) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %1645 = tensor.empty() : tensor<1x80x1xf32>
    %1646 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1644 : tensor<1x80x1xf32>) outs(%1645 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %1647 = tensor.empty() : tensor<1x80x4096xf32>
    %1648 = tensor.empty() : tensor<1x80x4096xf32>
    %1649 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1646 : tensor<1x80x1xf32>) outs(%1648 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1650 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1640, %1649 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1647 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %1651 = tensor.empty() : tensor<1x80x4096xf32>
    %1652 = tensor.empty() : tensor<1x80x4096xf32>
    %1653 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_20 : tensor<4096xf32>) outs(%1652 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1654 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1653, %1650 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1651 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %1655 = tensor.empty() : tensor<4096x11008xf32>
    %1656 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_214 : tensor<11008x4096xf32>) outs(%1655 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1657 = "tosa.reshape"(%1654) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1218 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %1658 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1657, %1656 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1218 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %1659 = "tosa.reshape"(%1658) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %1660 = tensor.empty() : tensor<1x80x11008xf32>
    %1661 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1659 : tensor<1x80x11008xf32>) outs(%1660 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      %4845 = math.exp %4844 : f32
      %cst_2002 = arith.constant 1.000000e+00 : f32
      %4846 = arith.addf %cst_2002, %4845 : f32
      %4847 = arith.divf %in, %4846 : f32
      linalg.yield %4847 : f32
    } -> tensor<1x80x11008xf32>
    %1662 = tensor.empty() : tensor<4096x11008xf32>
    %1663 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_216 : tensor<11008x4096xf32>) outs(%1662 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1664 = "tosa.reshape"(%1654) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1219 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %1665 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1664, %1663 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1219 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %1666 = "tosa.reshape"(%1665) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %1667 = tensor.empty() : tensor<1x80x11008xf32>
    %1668 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1661, %1666 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%1667 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x11008xf32>
    %1669 = tensor.empty() : tensor<11008x4096xf32>
    %1670 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_218 : tensor<4096x11008xf32>) outs(%1669 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %1671 = "tosa.reshape"(%1668) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %cst_1220 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %1672 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1671, %1670 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%cst_1220 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %1673 = "tosa.reshape"(%1672) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1674 = "tosa.add"(%1640, %1673) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %1675 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1221 = arith.constant 2 : i32
    %1676 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1674 : tensor<1x80x4096xf32>) outs(%1675 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1221 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1222 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %1677 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1676 : tensor<1x80x4096xf32>) outs(%cst_1222 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1223 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1678 = "tosa.add"(%1677, %cst_1223) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %1679 = tensor.empty() : tensor<1x80x1xf32>
    %1680 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1678 : tensor<1x80x1xf32>) outs(%1679 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %1681 = tensor.empty() : tensor<1x80x4096xf32>
    %1682 = tensor.empty() : tensor<1x80x4096xf32>
    %1683 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1680 : tensor<1x80x1xf32>) outs(%1682 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1684 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1674, %1683 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1681 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %1685 = tensor.empty() : tensor<1x80x4096xf32>
    %1686 = tensor.empty() : tensor<1x80x4096xf32>
    %1687 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_21 : tensor<4096xf32>) outs(%1686 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1688 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1687, %1684 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1685 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %1689 = tensor.empty() : tensor<4096x4096xf32>
    %1690 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_220 : tensor<4096x4096xf32>) outs(%1689 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1691 = "tosa.reshape"(%1688) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1224 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %1692 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1691, %1690 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1224 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %1693 = "tosa.reshape"(%1692) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1694 = tensor.empty() : tensor<4096x4096xf32>
    %1695 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_222 : tensor<4096x4096xf32>) outs(%1694 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1696 = "tosa.reshape"(%1688) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1225 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %1697 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1696, %1695 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1225 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %1698 = "tosa.reshape"(%1697) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1699 = tensor.empty() : tensor<4096x4096xf32>
    %1700 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_224 : tensor<4096x4096xf32>) outs(%1699 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1701 = "tosa.reshape"(%1688) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1226 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %1702 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1701, %1700 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1226 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %1703 = "tosa.reshape"(%1702) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1704 = "tosa.reshape"(%1693) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1705 = tensor.empty() : tensor<1x32x80x128xf32>
    %1706 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1704 : tensor<1x80x32x128xf32>) outs(%1705 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1707 = "tosa.reshape"(%1698) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1708 = tensor.empty() : tensor<1x32x80x128xf32>
    %1709 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1707 : tensor<1x80x32x128xf32>) outs(%1708 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1710 = "tosa.reshape"(%1703) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1711 = tensor.empty() : tensor<1x32x80x128xf32>
    %1712 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1710 : tensor<1x80x32x128xf32>) outs(%1711 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1227 = tensor.extract_slice %expanded_560[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1228 = tensor.extract_slice %extracted_slice_1227[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1229 = tensor.extract_slice %extracted_slice_1228[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1230 = tensor.extract_slice %expanded_562[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1231 = tensor.extract_slice %extracted_slice_1230[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1232 = tensor.extract_slice %extracted_slice_1231[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %1713 = tensor.empty() : tensor<1x80x128xf32>
    %1714 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1229 : tensor<1x1x80x128xf32>) outs(%1713 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %1715 = tensor.empty() : tensor<80x128xf32>
    %1716 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%1714 : tensor<1x80x128xf32>) outs(%1715 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %1717 = tensor.empty() : tensor<1x80x128xf32>
    %1718 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1232 : tensor<1x1x80x128xf32>) outs(%1717 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %1719 = tensor.empty() : tensor<80x128xf32>
    %1720 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%1718 : tensor<1x80x128xf32>) outs(%1719 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %1721 = tensor.empty() : tensor<1x80x128xf32>
    %1722 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%1721 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %1716[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %1723 = "tosa.reshape"(%1722) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %1724 = tensor.empty() : tensor<1x80x128xf32>
    %1725 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%1724 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %1720[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %1726 = "tosa.reshape"(%1725) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %1727 = tensor.empty() : tensor<1x32x80x128xf32>
    %1728 = tensor.empty() : tensor<1x32x80x128xf32>
    %1729 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1723 : tensor<1x1x80x128xf32>) outs(%1728 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1730 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1706, %1729 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1727 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1233 = tensor.extract_slice %1706[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1234 = tensor.extract_slice %1706[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %1731 = tensor.empty() : tensor<1x32x80x64xf32>
    %1732 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1234 : tensor<1x32x80x64xf32>) outs(%1731 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %1733 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1235 = tensor.insert_slice %1732 into %1733[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1236 = tensor.insert_slice %extracted_slice_1233 into %inserted_slice_1235[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %1734 = tensor.empty() : tensor<1x32x80x128xf32>
    %1735 = tensor.empty() : tensor<1x32x80x128xf32>
    %1736 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1726 : tensor<1x1x80x128xf32>) outs(%1735 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1737 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1236, %1736 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1734 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %1738 = "tosa.add"(%1730, %1737) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1739 = tensor.empty() : tensor<1x32x80x128xf32>
    %1740 = tensor.empty() : tensor<1x32x80x128xf32>
    %1741 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1723 : tensor<1x1x80x128xf32>) outs(%1740 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1742 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1709, %1741 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1739 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1237 = tensor.extract_slice %1709[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1238 = tensor.extract_slice %1709[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %1743 = tensor.empty() : tensor<1x32x80x64xf32>
    %1744 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1238 : tensor<1x32x80x64xf32>) outs(%1743 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %1745 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1239 = tensor.insert_slice %1744 into %1745[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1240 = tensor.insert_slice %extracted_slice_1237 into %inserted_slice_1239[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %1746 = tensor.empty() : tensor<1x32x80x128xf32>
    %1747 = tensor.empty() : tensor<1x32x80x128xf32>
    %1748 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1726 : tensor<1x1x80x128xf32>) outs(%1747 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1749 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1240, %1748 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1746 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %1750 = "tosa.add"(%1742, %1749) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1751 = tensor.empty() : tensor<1x32x128x80xf32>
    %1752 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1750 : tensor<1x32x80x128xf32>) outs(%1751 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %1753 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1241 = tensor.extract_slice %1738[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1242 = tensor.insert_slice %extracted_slice_1241 into %1753[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %1754 = "tosa.reshape"(%inserted_slice_1242) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %1755 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1243 = tensor.extract_slice %1752[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1244 = tensor.insert_slice %extracted_slice_1243 into %1755[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %1756 = "tosa.reshape"(%inserted_slice_1244) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %1757 = tensor.empty() : tensor<32x80x80xf32>
    %1758 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%1757 : tensor<32x80x80xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x80xf32>
    %1759 = linalg.batch_matmul ins(%1754, %1756 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%1758 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %1760 = "tosa.reshape"(%1759) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1245 = arith.constant 11.3137083 : f32
    %1761 = tensor.empty() : tensor<1x32x80x80xf32>
    %1762 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1760 : tensor<1x32x80x80xf32>) outs(%1761 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.divf %in, %cst_1245 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %1763 = "tosa.add"(%1762, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %1764 = tensor.empty() : tensor<1x32x80x1xf32>
    %1765 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1764 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %1766 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1763 : tensor<1x32x80x80xf32>) outs(%1764 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.maxf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %1767 = tensor.empty() : tensor<1x32x80x80xf32>
    %1768 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1763, %1766 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%1767 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.subf %in, %in_2002 : f32
      %4845 = math.exp %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<1x32x80x80xf32>
    %1769 = tensor.empty() : tensor<1x32x80x1xf32>
    %1770 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1769 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %1771 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1768 : tensor<1x32x80x80xf32>) outs(%1770 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.addf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %1772 = tensor.empty() : tensor<1x32x80x80xf32>
    %1773 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1768, %1771 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%1772 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.divf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %1774 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1246 = tensor.extract_slice %1773[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1247 = tensor.insert_slice %extracted_slice_1246 into %1774[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %1775 = "tosa.reshape"(%inserted_slice_1247) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %1776 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1248 = tensor.extract_slice %1712[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1249 = tensor.insert_slice %extracted_slice_1248 into %1776[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %1777 = "tosa.reshape"(%inserted_slice_1249) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %1778 = tensor.empty() : tensor<32x80x128xf32>
    %1779 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%1778 : tensor<32x80x128xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x128xf32>
    %1780 = linalg.batch_matmul ins(%1775, %1777 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%1779 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %1781 = "tosa.reshape"(%1780) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1782 = tensor.empty() : tensor<1x80x32x128xf32>
    %1783 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1781 : tensor<1x32x80x128xf32>) outs(%1782 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1250 = tensor.extract_slice %1783[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %1784 = "tosa.reshape"(%extracted_slice_1250) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %1785 = tensor.empty() : tensor<4096x4096xf32>
    %1786 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_226 : tensor<4096x4096xf32>) outs(%1785 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1787 = "tosa.reshape"(%1784) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1251 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %1788 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1787, %1786 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1251 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %1789 = "tosa.reshape"(%1788) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1790 = "tosa.add"(%1674, %1789) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %1791 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1252 = arith.constant 2 : i32
    %1792 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1790 : tensor<1x80x4096xf32>) outs(%1791 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1252 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1253 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %1793 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1792 : tensor<1x80x4096xf32>) outs(%cst_1253 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1254 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1794 = "tosa.add"(%1793, %cst_1254) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %1795 = tensor.empty() : tensor<1x80x1xf32>
    %1796 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1794 : tensor<1x80x1xf32>) outs(%1795 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %1797 = tensor.empty() : tensor<1x80x4096xf32>
    %1798 = tensor.empty() : tensor<1x80x4096xf32>
    %1799 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1796 : tensor<1x80x1xf32>) outs(%1798 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1800 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1790, %1799 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1797 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %1801 = tensor.empty() : tensor<1x80x4096xf32>
    %1802 = tensor.empty() : tensor<1x80x4096xf32>
    %1803 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_22 : tensor<4096xf32>) outs(%1802 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1804 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1803, %1800 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1801 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %1805 = tensor.empty() : tensor<4096x11008xf32>
    %1806 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_228 : tensor<11008x4096xf32>) outs(%1805 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1807 = "tosa.reshape"(%1804) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1255 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %1808 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1807, %1806 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1255 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %1809 = "tosa.reshape"(%1808) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %1810 = tensor.empty() : tensor<1x80x11008xf32>
    %1811 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1809 : tensor<1x80x11008xf32>) outs(%1810 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      %4845 = math.exp %4844 : f32
      %cst_2002 = arith.constant 1.000000e+00 : f32
      %4846 = arith.addf %cst_2002, %4845 : f32
      %4847 = arith.divf %in, %4846 : f32
      linalg.yield %4847 : f32
    } -> tensor<1x80x11008xf32>
    %1812 = tensor.empty() : tensor<4096x11008xf32>
    %1813 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_230 : tensor<11008x4096xf32>) outs(%1812 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1814 = "tosa.reshape"(%1804) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1256 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %1815 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1814, %1813 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1256 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %1816 = "tosa.reshape"(%1815) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %1817 = tensor.empty() : tensor<1x80x11008xf32>
    %1818 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1811, %1816 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%1817 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x11008xf32>
    %1819 = tensor.empty() : tensor<11008x4096xf32>
    %1820 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_232 : tensor<4096x11008xf32>) outs(%1819 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %1821 = "tosa.reshape"(%1818) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %cst_1257 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %1822 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1821, %1820 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%cst_1257 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %1823 = "tosa.reshape"(%1822) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1824 = "tosa.add"(%1790, %1823) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %1825 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1258 = arith.constant 2 : i32
    %1826 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1824 : tensor<1x80x4096xf32>) outs(%1825 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1258 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1259 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %1827 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1826 : tensor<1x80x4096xf32>) outs(%cst_1259 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1260 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1828 = "tosa.add"(%1827, %cst_1260) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %1829 = tensor.empty() : tensor<1x80x1xf32>
    %1830 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1828 : tensor<1x80x1xf32>) outs(%1829 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %1831 = tensor.empty() : tensor<1x80x4096xf32>
    %1832 = tensor.empty() : tensor<1x80x4096xf32>
    %1833 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1830 : tensor<1x80x1xf32>) outs(%1832 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1834 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1824, %1833 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1831 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %1835 = tensor.empty() : tensor<1x80x4096xf32>
    %1836 = tensor.empty() : tensor<1x80x4096xf32>
    %1837 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_23 : tensor<4096xf32>) outs(%1836 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1838 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1837, %1834 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1835 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %1839 = tensor.empty() : tensor<4096x4096xf32>
    %1840 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_234 : tensor<4096x4096xf32>) outs(%1839 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1841 = "tosa.reshape"(%1838) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1261 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %1842 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1841, %1840 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1261 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %1843 = "tosa.reshape"(%1842) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1844 = tensor.empty() : tensor<4096x4096xf32>
    %1845 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_236 : tensor<4096x4096xf32>) outs(%1844 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1846 = "tosa.reshape"(%1838) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1262 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %1847 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1846, %1845 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1262 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %1848 = "tosa.reshape"(%1847) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1849 = tensor.empty() : tensor<4096x4096xf32>
    %1850 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_238 : tensor<4096x4096xf32>) outs(%1849 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1851 = "tosa.reshape"(%1838) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1263 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %1852 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1851, %1850 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1263 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %1853 = "tosa.reshape"(%1852) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1854 = "tosa.reshape"(%1843) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1855 = tensor.empty() : tensor<1x32x80x128xf32>
    %1856 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1854 : tensor<1x80x32x128xf32>) outs(%1855 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1857 = "tosa.reshape"(%1848) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1858 = tensor.empty() : tensor<1x32x80x128xf32>
    %1859 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1857 : tensor<1x80x32x128xf32>) outs(%1858 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1860 = "tosa.reshape"(%1853) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %1861 = tensor.empty() : tensor<1x32x80x128xf32>
    %1862 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1860 : tensor<1x80x32x128xf32>) outs(%1861 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1264 = tensor.extract_slice %expanded_564[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1265 = tensor.extract_slice %extracted_slice_1264[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1266 = tensor.extract_slice %extracted_slice_1265[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1267 = tensor.extract_slice %expanded_566[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1268 = tensor.extract_slice %extracted_slice_1267[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1269 = tensor.extract_slice %extracted_slice_1268[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %1863 = tensor.empty() : tensor<1x80x128xf32>
    %1864 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1266 : tensor<1x1x80x128xf32>) outs(%1863 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %1865 = tensor.empty() : tensor<80x128xf32>
    %1866 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%1864 : tensor<1x80x128xf32>) outs(%1865 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %1867 = tensor.empty() : tensor<1x80x128xf32>
    %1868 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1269 : tensor<1x1x80x128xf32>) outs(%1867 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %1869 = tensor.empty() : tensor<80x128xf32>
    %1870 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%1868 : tensor<1x80x128xf32>) outs(%1869 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %1871 = tensor.empty() : tensor<1x80x128xf32>
    %1872 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%1871 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %1866[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %1873 = "tosa.reshape"(%1872) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %1874 = tensor.empty() : tensor<1x80x128xf32>
    %1875 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%1874 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %1870[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %1876 = "tosa.reshape"(%1875) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %1877 = tensor.empty() : tensor<1x32x80x128xf32>
    %1878 = tensor.empty() : tensor<1x32x80x128xf32>
    %1879 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1873 : tensor<1x1x80x128xf32>) outs(%1878 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1880 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1856, %1879 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1877 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1270 = tensor.extract_slice %1856[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1271 = tensor.extract_slice %1856[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %1881 = tensor.empty() : tensor<1x32x80x64xf32>
    %1882 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1271 : tensor<1x32x80x64xf32>) outs(%1881 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %1883 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1272 = tensor.insert_slice %1882 into %1883[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1273 = tensor.insert_slice %extracted_slice_1270 into %inserted_slice_1272[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %1884 = tensor.empty() : tensor<1x32x80x128xf32>
    %1885 = tensor.empty() : tensor<1x32x80x128xf32>
    %1886 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1876 : tensor<1x1x80x128xf32>) outs(%1885 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1887 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1273, %1886 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1884 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %1888 = "tosa.add"(%1880, %1887) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1889 = tensor.empty() : tensor<1x32x80x128xf32>
    %1890 = tensor.empty() : tensor<1x32x80x128xf32>
    %1891 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1873 : tensor<1x1x80x128xf32>) outs(%1890 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1892 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1859, %1891 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1889 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1274 = tensor.extract_slice %1859[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1275 = tensor.extract_slice %1859[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %1893 = tensor.empty() : tensor<1x32x80x64xf32>
    %1894 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1275 : tensor<1x32x80x64xf32>) outs(%1893 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %1895 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1276 = tensor.insert_slice %1894 into %1895[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1277 = tensor.insert_slice %extracted_slice_1274 into %inserted_slice_1276[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %1896 = tensor.empty() : tensor<1x32x80x128xf32>
    %1897 = tensor.empty() : tensor<1x32x80x128xf32>
    %1898 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1876 : tensor<1x1x80x128xf32>) outs(%1897 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %1899 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1277, %1898 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%1896 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %1900 = "tosa.add"(%1892, %1899) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1901 = tensor.empty() : tensor<1x32x128x80xf32>
    %1902 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1900 : tensor<1x32x80x128xf32>) outs(%1901 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %1903 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1278 = tensor.extract_slice %1888[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1279 = tensor.insert_slice %extracted_slice_1278 into %1903[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %1904 = "tosa.reshape"(%inserted_slice_1279) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %1905 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1280 = tensor.extract_slice %1902[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1281 = tensor.insert_slice %extracted_slice_1280 into %1905[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %1906 = "tosa.reshape"(%inserted_slice_1281) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %1907 = tensor.empty() : tensor<32x80x80xf32>
    %1908 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%1907 : tensor<32x80x80xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x80xf32>
    %1909 = linalg.batch_matmul ins(%1904, %1906 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%1908 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %1910 = "tosa.reshape"(%1909) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1282 = arith.constant 11.3137083 : f32
    %1911 = tensor.empty() : tensor<1x32x80x80xf32>
    %1912 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1910 : tensor<1x32x80x80xf32>) outs(%1911 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.divf %in, %cst_1282 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %1913 = "tosa.add"(%1912, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %1914 = tensor.empty() : tensor<1x32x80x1xf32>
    %1915 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1914 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %1916 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1913 : tensor<1x32x80x80xf32>) outs(%1914 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.maxf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %1917 = tensor.empty() : tensor<1x32x80x80xf32>
    %1918 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1913, %1916 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%1917 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.subf %in, %in_2002 : f32
      %4845 = math.exp %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<1x32x80x80xf32>
    %1919 = tensor.empty() : tensor<1x32x80x1xf32>
    %1920 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1919 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %1921 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1918 : tensor<1x32x80x80xf32>) outs(%1920 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.addf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %1922 = tensor.empty() : tensor<1x32x80x80xf32>
    %1923 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1918, %1921 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%1922 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.divf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %1924 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1283 = tensor.extract_slice %1923[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1284 = tensor.insert_slice %extracted_slice_1283 into %1924[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %1925 = "tosa.reshape"(%inserted_slice_1284) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %1926 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1285 = tensor.extract_slice %1862[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1286 = tensor.insert_slice %extracted_slice_1285 into %1926[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %1927 = "tosa.reshape"(%inserted_slice_1286) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %1928 = tensor.empty() : tensor<32x80x128xf32>
    %1929 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%1928 : tensor<32x80x128xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x128xf32>
    %1930 = linalg.batch_matmul ins(%1925, %1927 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%1929 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %1931 = "tosa.reshape"(%1930) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %1932 = tensor.empty() : tensor<1x80x32x128xf32>
    %1933 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1931 : tensor<1x32x80x128xf32>) outs(%1932 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1287 = tensor.extract_slice %1933[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %1934 = "tosa.reshape"(%extracted_slice_1287) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %1935 = tensor.empty() : tensor<4096x4096xf32>
    %1936 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_240 : tensor<4096x4096xf32>) outs(%1935 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1937 = "tosa.reshape"(%1934) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1288 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %1938 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1937, %1936 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1288 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %1939 = "tosa.reshape"(%1938) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1940 = "tosa.add"(%1824, %1939) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %1941 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1289 = arith.constant 2 : i32
    %1942 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1940 : tensor<1x80x4096xf32>) outs(%1941 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1289 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1290 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %1943 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1942 : tensor<1x80x4096xf32>) outs(%cst_1290 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1291 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1944 = "tosa.add"(%1943, %cst_1291) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %1945 = tensor.empty() : tensor<1x80x1xf32>
    %1946 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1944 : tensor<1x80x1xf32>) outs(%1945 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %1947 = tensor.empty() : tensor<1x80x4096xf32>
    %1948 = tensor.empty() : tensor<1x80x4096xf32>
    %1949 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1946 : tensor<1x80x1xf32>) outs(%1948 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1950 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1940, %1949 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1947 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %1951 = tensor.empty() : tensor<1x80x4096xf32>
    %1952 = tensor.empty() : tensor<1x80x4096xf32>
    %1953 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_24 : tensor<4096xf32>) outs(%1952 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1954 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1953, %1950 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1951 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %1955 = tensor.empty() : tensor<4096x11008xf32>
    %1956 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_242 : tensor<11008x4096xf32>) outs(%1955 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1957 = "tosa.reshape"(%1954) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1292 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %1958 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1957, %1956 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1292 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %1959 = "tosa.reshape"(%1958) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %1960 = tensor.empty() : tensor<1x80x11008xf32>
    %1961 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1959 : tensor<1x80x11008xf32>) outs(%1960 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      %4845 = math.exp %4844 : f32
      %cst_2002 = arith.constant 1.000000e+00 : f32
      %4846 = arith.addf %cst_2002, %4845 : f32
      %4847 = arith.divf %in, %4846 : f32
      linalg.yield %4847 : f32
    } -> tensor<1x80x11008xf32>
    %1962 = tensor.empty() : tensor<4096x11008xf32>
    %1963 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_244 : tensor<11008x4096xf32>) outs(%1962 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1964 = "tosa.reshape"(%1954) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1293 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %1965 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1964, %1963 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1293 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %1966 = "tosa.reshape"(%1965) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %1967 = tensor.empty() : tensor<1x80x11008xf32>
    %1968 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1961, %1966 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%1967 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x11008xf32>
    %1969 = tensor.empty() : tensor<11008x4096xf32>
    %1970 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_246 : tensor<4096x11008xf32>) outs(%1969 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %1971 = "tosa.reshape"(%1968) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %cst_1294 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %1972 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1971, %1970 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%cst_1294 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %1973 = "tosa.reshape"(%1972) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1974 = "tosa.add"(%1940, %1973) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %1975 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1295 = arith.constant 2 : i32
    %1976 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1974 : tensor<1x80x4096xf32>) outs(%1975 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1295 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1296 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %1977 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1976 : tensor<1x80x4096xf32>) outs(%cst_1296 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1297 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1978 = "tosa.add"(%1977, %cst_1297) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %1979 = tensor.empty() : tensor<1x80x1xf32>
    %1980 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1978 : tensor<1x80x1xf32>) outs(%1979 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %1981 = tensor.empty() : tensor<1x80x4096xf32>
    %1982 = tensor.empty() : tensor<1x80x4096xf32>
    %1983 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1980 : tensor<1x80x1xf32>) outs(%1982 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1984 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1974, %1983 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1981 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %1985 = tensor.empty() : tensor<1x80x4096xf32>
    %1986 = tensor.empty() : tensor<1x80x4096xf32>
    %1987 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_25 : tensor<4096xf32>) outs(%1986 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %1988 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1987, %1984 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%1985 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %1989 = tensor.empty() : tensor<4096x4096xf32>
    %1990 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_248 : tensor<4096x4096xf32>) outs(%1989 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1991 = "tosa.reshape"(%1988) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1298 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %1992 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1991, %1990 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1298 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %1993 = "tosa.reshape"(%1992) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1994 = tensor.empty() : tensor<4096x4096xf32>
    %1995 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_250 : tensor<4096x4096xf32>) outs(%1994 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1996 = "tosa.reshape"(%1988) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1299 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %1997 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1996, %1995 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1299 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %1998 = "tosa.reshape"(%1997) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %1999 = tensor.empty() : tensor<4096x4096xf32>
    %2000 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_252 : tensor<4096x4096xf32>) outs(%1999 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2001 = "tosa.reshape"(%1988) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1300 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %2002 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2001, %2000 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1300 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %2003 = "tosa.reshape"(%2002) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2004 = "tosa.reshape"(%1993) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2005 = tensor.empty() : tensor<1x32x80x128xf32>
    %2006 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2004 : tensor<1x80x32x128xf32>) outs(%2005 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2007 = "tosa.reshape"(%1998) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2008 = tensor.empty() : tensor<1x32x80x128xf32>
    %2009 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2007 : tensor<1x80x32x128xf32>) outs(%2008 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2010 = "tosa.reshape"(%2003) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2011 = tensor.empty() : tensor<1x32x80x128xf32>
    %2012 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2010 : tensor<1x80x32x128xf32>) outs(%2011 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1301 = tensor.extract_slice %expanded_568[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1302 = tensor.extract_slice %extracted_slice_1301[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1303 = tensor.extract_slice %extracted_slice_1302[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1304 = tensor.extract_slice %expanded_570[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1305 = tensor.extract_slice %extracted_slice_1304[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1306 = tensor.extract_slice %extracted_slice_1305[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %2013 = tensor.empty() : tensor<1x80x128xf32>
    %2014 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1303 : tensor<1x1x80x128xf32>) outs(%2013 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %2015 = tensor.empty() : tensor<80x128xf32>
    %2016 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%2014 : tensor<1x80x128xf32>) outs(%2015 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %2017 = tensor.empty() : tensor<1x80x128xf32>
    %2018 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1306 : tensor<1x1x80x128xf32>) outs(%2017 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %2019 = tensor.empty() : tensor<80x128xf32>
    %2020 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%2018 : tensor<1x80x128xf32>) outs(%2019 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %2021 = tensor.empty() : tensor<1x80x128xf32>
    %2022 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%2021 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %2016[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %2023 = "tosa.reshape"(%2022) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %2024 = tensor.empty() : tensor<1x80x128xf32>
    %2025 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%2024 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %2020[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %2026 = "tosa.reshape"(%2025) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %2027 = tensor.empty() : tensor<1x32x80x128xf32>
    %2028 = tensor.empty() : tensor<1x32x80x128xf32>
    %2029 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2023 : tensor<1x1x80x128xf32>) outs(%2028 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2030 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2006, %2029 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2027 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1307 = tensor.extract_slice %2006[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1308 = tensor.extract_slice %2006[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %2031 = tensor.empty() : tensor<1x32x80x64xf32>
    %2032 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1308 : tensor<1x32x80x64xf32>) outs(%2031 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %2033 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1309 = tensor.insert_slice %2032 into %2033[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1310 = tensor.insert_slice %extracted_slice_1307 into %inserted_slice_1309[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %2034 = tensor.empty() : tensor<1x32x80x128xf32>
    %2035 = tensor.empty() : tensor<1x32x80x128xf32>
    %2036 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2026 : tensor<1x1x80x128xf32>) outs(%2035 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2037 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1310, %2036 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2034 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %2038 = "tosa.add"(%2030, %2037) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2039 = tensor.empty() : tensor<1x32x80x128xf32>
    %2040 = tensor.empty() : tensor<1x32x80x128xf32>
    %2041 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2023 : tensor<1x1x80x128xf32>) outs(%2040 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2042 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2009, %2041 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2039 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1311 = tensor.extract_slice %2009[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1312 = tensor.extract_slice %2009[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %2043 = tensor.empty() : tensor<1x32x80x64xf32>
    %2044 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1312 : tensor<1x32x80x64xf32>) outs(%2043 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %2045 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1313 = tensor.insert_slice %2044 into %2045[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1314 = tensor.insert_slice %extracted_slice_1311 into %inserted_slice_1313[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %2046 = tensor.empty() : tensor<1x32x80x128xf32>
    %2047 = tensor.empty() : tensor<1x32x80x128xf32>
    %2048 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2026 : tensor<1x1x80x128xf32>) outs(%2047 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2049 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1314, %2048 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2046 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %2050 = "tosa.add"(%2042, %2049) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2051 = tensor.empty() : tensor<1x32x128x80xf32>
    %2052 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2050 : tensor<1x32x80x128xf32>) outs(%2051 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %2053 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1315 = tensor.extract_slice %2038[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1316 = tensor.insert_slice %extracted_slice_1315 into %2053[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %2054 = "tosa.reshape"(%inserted_slice_1316) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %2055 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1317 = tensor.extract_slice %2052[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1318 = tensor.insert_slice %extracted_slice_1317 into %2055[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %2056 = "tosa.reshape"(%inserted_slice_1318) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %2057 = tensor.empty() : tensor<32x80x80xf32>
    %2058 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%2057 : tensor<32x80x80xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x80xf32>
    %2059 = linalg.batch_matmul ins(%2054, %2056 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%2058 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %2060 = "tosa.reshape"(%2059) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1319 = arith.constant 11.3137083 : f32
    %2061 = tensor.empty() : tensor<1x32x80x80xf32>
    %2062 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2060 : tensor<1x32x80x80xf32>) outs(%2061 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.divf %in, %cst_1319 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %2063 = "tosa.add"(%2062, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %2064 = tensor.empty() : tensor<1x32x80x1xf32>
    %2065 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2064 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %2066 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2063 : tensor<1x32x80x80xf32>) outs(%2064 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.maxf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %2067 = tensor.empty() : tensor<1x32x80x80xf32>
    %2068 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2063, %2066 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%2067 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.subf %in, %in_2002 : f32
      %4845 = math.exp %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<1x32x80x80xf32>
    %2069 = tensor.empty() : tensor<1x32x80x1xf32>
    %2070 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2069 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %2071 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2068 : tensor<1x32x80x80xf32>) outs(%2070 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.addf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %2072 = tensor.empty() : tensor<1x32x80x80xf32>
    %2073 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2068, %2071 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%2072 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.divf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %2074 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1320 = tensor.extract_slice %2073[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1321 = tensor.insert_slice %extracted_slice_1320 into %2074[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %2075 = "tosa.reshape"(%inserted_slice_1321) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %2076 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1322 = tensor.extract_slice %2012[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1323 = tensor.insert_slice %extracted_slice_1322 into %2076[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %2077 = "tosa.reshape"(%inserted_slice_1323) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %2078 = tensor.empty() : tensor<32x80x128xf32>
    %2079 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%2078 : tensor<32x80x128xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x128xf32>
    %2080 = linalg.batch_matmul ins(%2075, %2077 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%2079 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %2081 = "tosa.reshape"(%2080) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2082 = tensor.empty() : tensor<1x80x32x128xf32>
    %2083 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2081 : tensor<1x32x80x128xf32>) outs(%2082 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1324 = tensor.extract_slice %2083[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %2084 = "tosa.reshape"(%extracted_slice_1324) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %2085 = tensor.empty() : tensor<4096x4096xf32>
    %2086 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_254 : tensor<4096x4096xf32>) outs(%2085 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2087 = "tosa.reshape"(%2084) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1325 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %2088 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2087, %2086 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1325 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %2089 = "tosa.reshape"(%2088) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2090 = "tosa.add"(%1974, %2089) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %2091 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1326 = arith.constant 2 : i32
    %2092 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2090 : tensor<1x80x4096xf32>) outs(%2091 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1326 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1327 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %2093 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2092 : tensor<1x80x4096xf32>) outs(%cst_1327 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1328 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2094 = "tosa.add"(%2093, %cst_1328) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %2095 = tensor.empty() : tensor<1x80x1xf32>
    %2096 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2094 : tensor<1x80x1xf32>) outs(%2095 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %2097 = tensor.empty() : tensor<1x80x4096xf32>
    %2098 = tensor.empty() : tensor<1x80x4096xf32>
    %2099 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2096 : tensor<1x80x1xf32>) outs(%2098 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2100 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2090, %2099 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2097 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %2101 = tensor.empty() : tensor<1x80x4096xf32>
    %2102 = tensor.empty() : tensor<1x80x4096xf32>
    %2103 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_26 : tensor<4096xf32>) outs(%2102 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2104 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2103, %2100 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2101 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %2105 = tensor.empty() : tensor<4096x11008xf32>
    %2106 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_256 : tensor<11008x4096xf32>) outs(%2105 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2107 = "tosa.reshape"(%2104) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1329 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %2108 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2107, %2106 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1329 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %2109 = "tosa.reshape"(%2108) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %2110 = tensor.empty() : tensor<1x80x11008xf32>
    %2111 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2109 : tensor<1x80x11008xf32>) outs(%2110 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      %4845 = math.exp %4844 : f32
      %cst_2002 = arith.constant 1.000000e+00 : f32
      %4846 = arith.addf %cst_2002, %4845 : f32
      %4847 = arith.divf %in, %4846 : f32
      linalg.yield %4847 : f32
    } -> tensor<1x80x11008xf32>
    %2112 = tensor.empty() : tensor<4096x11008xf32>
    %2113 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_258 : tensor<11008x4096xf32>) outs(%2112 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2114 = "tosa.reshape"(%2104) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1330 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %2115 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2114, %2113 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1330 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %2116 = "tosa.reshape"(%2115) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %2117 = tensor.empty() : tensor<1x80x11008xf32>
    %2118 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2111, %2116 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%2117 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x11008xf32>
    %2119 = tensor.empty() : tensor<11008x4096xf32>
    %2120 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_260 : tensor<4096x11008xf32>) outs(%2119 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %2121 = "tosa.reshape"(%2118) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %cst_1331 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %2122 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2121, %2120 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%cst_1331 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %2123 = "tosa.reshape"(%2122) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2124 = "tosa.add"(%2090, %2123) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %2125 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1332 = arith.constant 2 : i32
    %2126 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2124 : tensor<1x80x4096xf32>) outs(%2125 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1332 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1333 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %2127 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2126 : tensor<1x80x4096xf32>) outs(%cst_1333 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1334 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2128 = "tosa.add"(%2127, %cst_1334) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %2129 = tensor.empty() : tensor<1x80x1xf32>
    %2130 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2128 : tensor<1x80x1xf32>) outs(%2129 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %2131 = tensor.empty() : tensor<1x80x4096xf32>
    %2132 = tensor.empty() : tensor<1x80x4096xf32>
    %2133 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2130 : tensor<1x80x1xf32>) outs(%2132 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2134 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2124, %2133 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2131 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %2135 = tensor.empty() : tensor<1x80x4096xf32>
    %2136 = tensor.empty() : tensor<1x80x4096xf32>
    %2137 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_27 : tensor<4096xf32>) outs(%2136 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2138 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2137, %2134 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2135 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %2139 = tensor.empty() : tensor<4096x4096xf32>
    %2140 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_262 : tensor<4096x4096xf32>) outs(%2139 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2141 = "tosa.reshape"(%2138) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1335 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %2142 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2141, %2140 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1335 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %2143 = "tosa.reshape"(%2142) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2144 = tensor.empty() : tensor<4096x4096xf32>
    %2145 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_264 : tensor<4096x4096xf32>) outs(%2144 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2146 = "tosa.reshape"(%2138) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1336 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %2147 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2146, %2145 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1336 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %2148 = "tosa.reshape"(%2147) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2149 = tensor.empty() : tensor<4096x4096xf32>
    %2150 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_266 : tensor<4096x4096xf32>) outs(%2149 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2151 = "tosa.reshape"(%2138) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1337 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %2152 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2151, %2150 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1337 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %2153 = "tosa.reshape"(%2152) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2154 = "tosa.reshape"(%2143) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2155 = tensor.empty() : tensor<1x32x80x128xf32>
    %2156 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2154 : tensor<1x80x32x128xf32>) outs(%2155 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2157 = "tosa.reshape"(%2148) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2158 = tensor.empty() : tensor<1x32x80x128xf32>
    %2159 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2157 : tensor<1x80x32x128xf32>) outs(%2158 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2160 = "tosa.reshape"(%2153) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2161 = tensor.empty() : tensor<1x32x80x128xf32>
    %2162 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2160 : tensor<1x80x32x128xf32>) outs(%2161 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1338 = tensor.extract_slice %expanded_572[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1339 = tensor.extract_slice %extracted_slice_1338[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1340 = tensor.extract_slice %extracted_slice_1339[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1341 = tensor.extract_slice %expanded_574[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1342 = tensor.extract_slice %extracted_slice_1341[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1343 = tensor.extract_slice %extracted_slice_1342[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %2163 = tensor.empty() : tensor<1x80x128xf32>
    %2164 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1340 : tensor<1x1x80x128xf32>) outs(%2163 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %2165 = tensor.empty() : tensor<80x128xf32>
    %2166 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%2164 : tensor<1x80x128xf32>) outs(%2165 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %2167 = tensor.empty() : tensor<1x80x128xf32>
    %2168 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1343 : tensor<1x1x80x128xf32>) outs(%2167 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %2169 = tensor.empty() : tensor<80x128xf32>
    %2170 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%2168 : tensor<1x80x128xf32>) outs(%2169 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %2171 = tensor.empty() : tensor<1x80x128xf32>
    %2172 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%2171 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %2166[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %2173 = "tosa.reshape"(%2172) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %2174 = tensor.empty() : tensor<1x80x128xf32>
    %2175 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%2174 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %2170[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %2176 = "tosa.reshape"(%2175) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %2177 = tensor.empty() : tensor<1x32x80x128xf32>
    %2178 = tensor.empty() : tensor<1x32x80x128xf32>
    %2179 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2173 : tensor<1x1x80x128xf32>) outs(%2178 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2180 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2156, %2179 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2177 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1344 = tensor.extract_slice %2156[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1345 = tensor.extract_slice %2156[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %2181 = tensor.empty() : tensor<1x32x80x64xf32>
    %2182 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1345 : tensor<1x32x80x64xf32>) outs(%2181 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %2183 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1346 = tensor.insert_slice %2182 into %2183[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1347 = tensor.insert_slice %extracted_slice_1344 into %inserted_slice_1346[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %2184 = tensor.empty() : tensor<1x32x80x128xf32>
    %2185 = tensor.empty() : tensor<1x32x80x128xf32>
    %2186 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2176 : tensor<1x1x80x128xf32>) outs(%2185 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2187 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1347, %2186 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2184 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %2188 = "tosa.add"(%2180, %2187) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2189 = tensor.empty() : tensor<1x32x80x128xf32>
    %2190 = tensor.empty() : tensor<1x32x80x128xf32>
    %2191 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2173 : tensor<1x1x80x128xf32>) outs(%2190 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2192 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2159, %2191 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2189 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1348 = tensor.extract_slice %2159[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1349 = tensor.extract_slice %2159[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %2193 = tensor.empty() : tensor<1x32x80x64xf32>
    %2194 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1349 : tensor<1x32x80x64xf32>) outs(%2193 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %2195 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1350 = tensor.insert_slice %2194 into %2195[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1351 = tensor.insert_slice %extracted_slice_1348 into %inserted_slice_1350[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %2196 = tensor.empty() : tensor<1x32x80x128xf32>
    %2197 = tensor.empty() : tensor<1x32x80x128xf32>
    %2198 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2176 : tensor<1x1x80x128xf32>) outs(%2197 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2199 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1351, %2198 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2196 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %2200 = "tosa.add"(%2192, %2199) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2201 = tensor.empty() : tensor<1x32x128x80xf32>
    %2202 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2200 : tensor<1x32x80x128xf32>) outs(%2201 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %2203 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1352 = tensor.extract_slice %2188[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1353 = tensor.insert_slice %extracted_slice_1352 into %2203[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %2204 = "tosa.reshape"(%inserted_slice_1353) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %2205 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1354 = tensor.extract_slice %2202[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1355 = tensor.insert_slice %extracted_slice_1354 into %2205[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %2206 = "tosa.reshape"(%inserted_slice_1355) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %2207 = tensor.empty() : tensor<32x80x80xf32>
    %2208 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%2207 : tensor<32x80x80xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x80xf32>
    %2209 = linalg.batch_matmul ins(%2204, %2206 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%2208 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %2210 = "tosa.reshape"(%2209) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1356 = arith.constant 11.3137083 : f32
    %2211 = tensor.empty() : tensor<1x32x80x80xf32>
    %2212 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2210 : tensor<1x32x80x80xf32>) outs(%2211 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.divf %in, %cst_1356 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %2213 = "tosa.add"(%2212, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %2214 = tensor.empty() : tensor<1x32x80x1xf32>
    %2215 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2214 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %2216 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2213 : tensor<1x32x80x80xf32>) outs(%2214 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.maxf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %2217 = tensor.empty() : tensor<1x32x80x80xf32>
    %2218 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2213, %2216 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%2217 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.subf %in, %in_2002 : f32
      %4845 = math.exp %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<1x32x80x80xf32>
    %2219 = tensor.empty() : tensor<1x32x80x1xf32>
    %2220 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2219 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %2221 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2218 : tensor<1x32x80x80xf32>) outs(%2220 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.addf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %2222 = tensor.empty() : tensor<1x32x80x80xf32>
    %2223 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2218, %2221 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%2222 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.divf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %2224 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1357 = tensor.extract_slice %2223[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1358 = tensor.insert_slice %extracted_slice_1357 into %2224[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %2225 = "tosa.reshape"(%inserted_slice_1358) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %2226 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1359 = tensor.extract_slice %2162[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1360 = tensor.insert_slice %extracted_slice_1359 into %2226[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %2227 = "tosa.reshape"(%inserted_slice_1360) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %2228 = tensor.empty() : tensor<32x80x128xf32>
    %2229 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%2228 : tensor<32x80x128xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x128xf32>
    %2230 = linalg.batch_matmul ins(%2225, %2227 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%2229 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %2231 = "tosa.reshape"(%2230) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2232 = tensor.empty() : tensor<1x80x32x128xf32>
    %2233 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2231 : tensor<1x32x80x128xf32>) outs(%2232 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1361 = tensor.extract_slice %2233[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %2234 = "tosa.reshape"(%extracted_slice_1361) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %2235 = tensor.empty() : tensor<4096x4096xf32>
    %2236 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_268 : tensor<4096x4096xf32>) outs(%2235 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2237 = "tosa.reshape"(%2234) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1362 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %2238 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2237, %2236 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1362 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %2239 = "tosa.reshape"(%2238) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2240 = "tosa.add"(%2124, %2239) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %2241 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1363 = arith.constant 2 : i32
    %2242 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2240 : tensor<1x80x4096xf32>) outs(%2241 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1363 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1364 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %2243 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2242 : tensor<1x80x4096xf32>) outs(%cst_1364 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1365 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2244 = "tosa.add"(%2243, %cst_1365) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %2245 = tensor.empty() : tensor<1x80x1xf32>
    %2246 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2244 : tensor<1x80x1xf32>) outs(%2245 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %2247 = tensor.empty() : tensor<1x80x4096xf32>
    %2248 = tensor.empty() : tensor<1x80x4096xf32>
    %2249 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2246 : tensor<1x80x1xf32>) outs(%2248 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2250 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2240, %2249 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2247 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %2251 = tensor.empty() : tensor<1x80x4096xf32>
    %2252 = tensor.empty() : tensor<1x80x4096xf32>
    %2253 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_28 : tensor<4096xf32>) outs(%2252 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2254 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2253, %2250 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2251 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %2255 = tensor.empty() : tensor<4096x11008xf32>
    %2256 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_270 : tensor<11008x4096xf32>) outs(%2255 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2257 = "tosa.reshape"(%2254) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1366 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %2258 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2257, %2256 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1366 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %2259 = "tosa.reshape"(%2258) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %2260 = tensor.empty() : tensor<1x80x11008xf32>
    %2261 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2259 : tensor<1x80x11008xf32>) outs(%2260 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      %4845 = math.exp %4844 : f32
      %cst_2002 = arith.constant 1.000000e+00 : f32
      %4846 = arith.addf %cst_2002, %4845 : f32
      %4847 = arith.divf %in, %4846 : f32
      linalg.yield %4847 : f32
    } -> tensor<1x80x11008xf32>
    %2262 = tensor.empty() : tensor<4096x11008xf32>
    %2263 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_272 : tensor<11008x4096xf32>) outs(%2262 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2264 = "tosa.reshape"(%2254) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1367 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %2265 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2264, %2263 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1367 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %2266 = "tosa.reshape"(%2265) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %2267 = tensor.empty() : tensor<1x80x11008xf32>
    %2268 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2261, %2266 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%2267 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x11008xf32>
    %2269 = tensor.empty() : tensor<11008x4096xf32>
    %2270 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_274 : tensor<4096x11008xf32>) outs(%2269 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %2271 = "tosa.reshape"(%2268) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %cst_1368 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %2272 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2271, %2270 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%cst_1368 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %2273 = "tosa.reshape"(%2272) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2274 = "tosa.add"(%2240, %2273) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %2275 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1369 = arith.constant 2 : i32
    %2276 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2274 : tensor<1x80x4096xf32>) outs(%2275 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1369 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1370 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %2277 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2276 : tensor<1x80x4096xf32>) outs(%cst_1370 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1371 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2278 = "tosa.add"(%2277, %cst_1371) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %2279 = tensor.empty() : tensor<1x80x1xf32>
    %2280 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2278 : tensor<1x80x1xf32>) outs(%2279 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %2281 = tensor.empty() : tensor<1x80x4096xf32>
    %2282 = tensor.empty() : tensor<1x80x4096xf32>
    %2283 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2280 : tensor<1x80x1xf32>) outs(%2282 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2284 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2274, %2283 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2281 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %2285 = tensor.empty() : tensor<1x80x4096xf32>
    %2286 = tensor.empty() : tensor<1x80x4096xf32>
    %2287 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_29 : tensor<4096xf32>) outs(%2286 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2288 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2287, %2284 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2285 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %2289 = tensor.empty() : tensor<4096x4096xf32>
    %2290 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_276 : tensor<4096x4096xf32>) outs(%2289 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2291 = "tosa.reshape"(%2288) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1372 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %2292 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2291, %2290 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1372 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %2293 = "tosa.reshape"(%2292) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2294 = tensor.empty() : tensor<4096x4096xf32>
    %2295 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_278 : tensor<4096x4096xf32>) outs(%2294 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2296 = "tosa.reshape"(%2288) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1373 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %2297 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2296, %2295 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1373 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %2298 = "tosa.reshape"(%2297) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2299 = tensor.empty() : tensor<4096x4096xf32>
    %2300 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_280 : tensor<4096x4096xf32>) outs(%2299 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2301 = "tosa.reshape"(%2288) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1374 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %2302 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2301, %2300 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1374 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %2303 = "tosa.reshape"(%2302) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2304 = "tosa.reshape"(%2293) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2305 = tensor.empty() : tensor<1x32x80x128xf32>
    %2306 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2304 : tensor<1x80x32x128xf32>) outs(%2305 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2307 = "tosa.reshape"(%2298) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2308 = tensor.empty() : tensor<1x32x80x128xf32>
    %2309 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2307 : tensor<1x80x32x128xf32>) outs(%2308 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2310 = "tosa.reshape"(%2303) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2311 = tensor.empty() : tensor<1x32x80x128xf32>
    %2312 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2310 : tensor<1x80x32x128xf32>) outs(%2311 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1375 = tensor.extract_slice %expanded_576[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1376 = tensor.extract_slice %extracted_slice_1375[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1377 = tensor.extract_slice %extracted_slice_1376[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1378 = tensor.extract_slice %expanded_578[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1379 = tensor.extract_slice %extracted_slice_1378[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1380 = tensor.extract_slice %extracted_slice_1379[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %2313 = tensor.empty() : tensor<1x80x128xf32>
    %2314 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1377 : tensor<1x1x80x128xf32>) outs(%2313 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %2315 = tensor.empty() : tensor<80x128xf32>
    %2316 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%2314 : tensor<1x80x128xf32>) outs(%2315 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %2317 = tensor.empty() : tensor<1x80x128xf32>
    %2318 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1380 : tensor<1x1x80x128xf32>) outs(%2317 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %2319 = tensor.empty() : tensor<80x128xf32>
    %2320 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%2318 : tensor<1x80x128xf32>) outs(%2319 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %2321 = tensor.empty() : tensor<1x80x128xf32>
    %2322 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%2321 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %2316[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %2323 = "tosa.reshape"(%2322) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %2324 = tensor.empty() : tensor<1x80x128xf32>
    %2325 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%2324 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %2320[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %2326 = "tosa.reshape"(%2325) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %2327 = tensor.empty() : tensor<1x32x80x128xf32>
    %2328 = tensor.empty() : tensor<1x32x80x128xf32>
    %2329 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2323 : tensor<1x1x80x128xf32>) outs(%2328 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2330 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2306, %2329 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2327 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1381 = tensor.extract_slice %2306[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1382 = tensor.extract_slice %2306[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %2331 = tensor.empty() : tensor<1x32x80x64xf32>
    %2332 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1382 : tensor<1x32x80x64xf32>) outs(%2331 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %2333 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1383 = tensor.insert_slice %2332 into %2333[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1384 = tensor.insert_slice %extracted_slice_1381 into %inserted_slice_1383[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %2334 = tensor.empty() : tensor<1x32x80x128xf32>
    %2335 = tensor.empty() : tensor<1x32x80x128xf32>
    %2336 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2326 : tensor<1x1x80x128xf32>) outs(%2335 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2337 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1384, %2336 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2334 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %2338 = "tosa.add"(%2330, %2337) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2339 = tensor.empty() : tensor<1x32x80x128xf32>
    %2340 = tensor.empty() : tensor<1x32x80x128xf32>
    %2341 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2323 : tensor<1x1x80x128xf32>) outs(%2340 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2342 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2309, %2341 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2339 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1385 = tensor.extract_slice %2309[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1386 = tensor.extract_slice %2309[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %2343 = tensor.empty() : tensor<1x32x80x64xf32>
    %2344 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1386 : tensor<1x32x80x64xf32>) outs(%2343 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %2345 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1387 = tensor.insert_slice %2344 into %2345[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1388 = tensor.insert_slice %extracted_slice_1385 into %inserted_slice_1387[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %2346 = tensor.empty() : tensor<1x32x80x128xf32>
    %2347 = tensor.empty() : tensor<1x32x80x128xf32>
    %2348 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2326 : tensor<1x1x80x128xf32>) outs(%2347 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2349 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1388, %2348 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2346 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %2350 = "tosa.add"(%2342, %2349) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2351 = tensor.empty() : tensor<1x32x128x80xf32>
    %2352 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2350 : tensor<1x32x80x128xf32>) outs(%2351 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %2353 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1389 = tensor.extract_slice %2338[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1390 = tensor.insert_slice %extracted_slice_1389 into %2353[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %2354 = "tosa.reshape"(%inserted_slice_1390) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %2355 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1391 = tensor.extract_slice %2352[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1392 = tensor.insert_slice %extracted_slice_1391 into %2355[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %2356 = "tosa.reshape"(%inserted_slice_1392) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %2357 = tensor.empty() : tensor<32x80x80xf32>
    %2358 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%2357 : tensor<32x80x80xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x80xf32>
    %2359 = linalg.batch_matmul ins(%2354, %2356 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%2358 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %2360 = "tosa.reshape"(%2359) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1393 = arith.constant 11.3137083 : f32
    %2361 = tensor.empty() : tensor<1x32x80x80xf32>
    %2362 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2360 : tensor<1x32x80x80xf32>) outs(%2361 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.divf %in, %cst_1393 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %2363 = "tosa.add"(%2362, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %2364 = tensor.empty() : tensor<1x32x80x1xf32>
    %2365 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2364 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %2366 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2363 : tensor<1x32x80x80xf32>) outs(%2364 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.maxf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %2367 = tensor.empty() : tensor<1x32x80x80xf32>
    %2368 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2363, %2366 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%2367 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.subf %in, %in_2002 : f32
      %4845 = math.exp %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<1x32x80x80xf32>
    %2369 = tensor.empty() : tensor<1x32x80x1xf32>
    %2370 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2369 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %2371 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2368 : tensor<1x32x80x80xf32>) outs(%2370 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.addf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %2372 = tensor.empty() : tensor<1x32x80x80xf32>
    %2373 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2368, %2371 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%2372 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.divf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %2374 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1394 = tensor.extract_slice %2373[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1395 = tensor.insert_slice %extracted_slice_1394 into %2374[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %2375 = "tosa.reshape"(%inserted_slice_1395) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %2376 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1396 = tensor.extract_slice %2312[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1397 = tensor.insert_slice %extracted_slice_1396 into %2376[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %2377 = "tosa.reshape"(%inserted_slice_1397) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %2378 = tensor.empty() : tensor<32x80x128xf32>
    %2379 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%2378 : tensor<32x80x128xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x128xf32>
    %2380 = linalg.batch_matmul ins(%2375, %2377 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%2379 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %2381 = "tosa.reshape"(%2380) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2382 = tensor.empty() : tensor<1x80x32x128xf32>
    %2383 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2381 : tensor<1x32x80x128xf32>) outs(%2382 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1398 = tensor.extract_slice %2383[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %2384 = "tosa.reshape"(%extracted_slice_1398) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %2385 = tensor.empty() : tensor<4096x4096xf32>
    %2386 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_282 : tensor<4096x4096xf32>) outs(%2385 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2387 = "tosa.reshape"(%2384) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1399 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %2388 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2387, %2386 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1399 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %2389 = "tosa.reshape"(%2388) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2390 = "tosa.add"(%2274, %2389) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %2391 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1400 = arith.constant 2 : i32
    %2392 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2390 : tensor<1x80x4096xf32>) outs(%2391 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1400 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1401 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %2393 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2392 : tensor<1x80x4096xf32>) outs(%cst_1401 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1402 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2394 = "tosa.add"(%2393, %cst_1402) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %2395 = tensor.empty() : tensor<1x80x1xf32>
    %2396 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2394 : tensor<1x80x1xf32>) outs(%2395 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %2397 = tensor.empty() : tensor<1x80x4096xf32>
    %2398 = tensor.empty() : tensor<1x80x4096xf32>
    %2399 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2396 : tensor<1x80x1xf32>) outs(%2398 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2400 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2390, %2399 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2397 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %2401 = tensor.empty() : tensor<1x80x4096xf32>
    %2402 = tensor.empty() : tensor<1x80x4096xf32>
    %2403 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_30 : tensor<4096xf32>) outs(%2402 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2404 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2403, %2400 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2401 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %2405 = tensor.empty() : tensor<4096x11008xf32>
    %2406 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_284 : tensor<11008x4096xf32>) outs(%2405 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2407 = "tosa.reshape"(%2404) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1403 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %2408 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2407, %2406 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1403 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %2409 = "tosa.reshape"(%2408) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %2410 = tensor.empty() : tensor<1x80x11008xf32>
    %2411 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2409 : tensor<1x80x11008xf32>) outs(%2410 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      %4845 = math.exp %4844 : f32
      %cst_2002 = arith.constant 1.000000e+00 : f32
      %4846 = arith.addf %cst_2002, %4845 : f32
      %4847 = arith.divf %in, %4846 : f32
      linalg.yield %4847 : f32
    } -> tensor<1x80x11008xf32>
    %2412 = tensor.empty() : tensor<4096x11008xf32>
    %2413 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_286 : tensor<11008x4096xf32>) outs(%2412 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2414 = "tosa.reshape"(%2404) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1404 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %2415 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2414, %2413 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1404 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %2416 = "tosa.reshape"(%2415) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %2417 = tensor.empty() : tensor<1x80x11008xf32>
    %2418 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2411, %2416 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%2417 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x11008xf32>
    %2419 = tensor.empty() : tensor<11008x4096xf32>
    %2420 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_288 : tensor<4096x11008xf32>) outs(%2419 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %2421 = "tosa.reshape"(%2418) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %cst_1405 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %2422 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2421, %2420 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%cst_1405 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %2423 = "tosa.reshape"(%2422) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2424 = "tosa.add"(%2390, %2423) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %2425 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1406 = arith.constant 2 : i32
    %2426 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2424 : tensor<1x80x4096xf32>) outs(%2425 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1406 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1407 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %2427 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2426 : tensor<1x80x4096xf32>) outs(%cst_1407 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1408 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2428 = "tosa.add"(%2427, %cst_1408) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %2429 = tensor.empty() : tensor<1x80x1xf32>
    %2430 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2428 : tensor<1x80x1xf32>) outs(%2429 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %2431 = tensor.empty() : tensor<1x80x4096xf32>
    %2432 = tensor.empty() : tensor<1x80x4096xf32>
    %2433 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2430 : tensor<1x80x1xf32>) outs(%2432 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2434 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2424, %2433 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2431 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %2435 = tensor.empty() : tensor<1x80x4096xf32>
    %2436 = tensor.empty() : tensor<1x80x4096xf32>
    %2437 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_31 : tensor<4096xf32>) outs(%2436 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2438 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2437, %2434 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2435 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %2439 = tensor.empty() : tensor<4096x4096xf32>
    %2440 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_290 : tensor<4096x4096xf32>) outs(%2439 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2441 = "tosa.reshape"(%2438) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1409 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %2442 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2441, %2440 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1409 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %2443 = "tosa.reshape"(%2442) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2444 = tensor.empty() : tensor<4096x4096xf32>
    %2445 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_292 : tensor<4096x4096xf32>) outs(%2444 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2446 = "tosa.reshape"(%2438) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1410 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %2447 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2446, %2445 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1410 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %2448 = "tosa.reshape"(%2447) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2449 = tensor.empty() : tensor<4096x4096xf32>
    %2450 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_294 : tensor<4096x4096xf32>) outs(%2449 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2451 = "tosa.reshape"(%2438) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1411 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %2452 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2451, %2450 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1411 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %2453 = "tosa.reshape"(%2452) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2454 = "tosa.reshape"(%2443) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2455 = tensor.empty() : tensor<1x32x80x128xf32>
    %2456 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2454 : tensor<1x80x32x128xf32>) outs(%2455 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2457 = "tosa.reshape"(%2448) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2458 = tensor.empty() : tensor<1x32x80x128xf32>
    %2459 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2457 : tensor<1x80x32x128xf32>) outs(%2458 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2460 = "tosa.reshape"(%2453) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2461 = tensor.empty() : tensor<1x32x80x128xf32>
    %2462 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2460 : tensor<1x80x32x128xf32>) outs(%2461 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1412 = tensor.extract_slice %expanded_580[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1413 = tensor.extract_slice %extracted_slice_1412[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1414 = tensor.extract_slice %extracted_slice_1413[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1415 = tensor.extract_slice %expanded_582[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1416 = tensor.extract_slice %extracted_slice_1415[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1417 = tensor.extract_slice %extracted_slice_1416[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %2463 = tensor.empty() : tensor<1x80x128xf32>
    %2464 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1414 : tensor<1x1x80x128xf32>) outs(%2463 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %2465 = tensor.empty() : tensor<80x128xf32>
    %2466 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%2464 : tensor<1x80x128xf32>) outs(%2465 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %2467 = tensor.empty() : tensor<1x80x128xf32>
    %2468 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1417 : tensor<1x1x80x128xf32>) outs(%2467 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %2469 = tensor.empty() : tensor<80x128xf32>
    %2470 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%2468 : tensor<1x80x128xf32>) outs(%2469 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %2471 = tensor.empty() : tensor<1x80x128xf32>
    %2472 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%2471 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %2466[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %2473 = "tosa.reshape"(%2472) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %2474 = tensor.empty() : tensor<1x80x128xf32>
    %2475 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%2474 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %2470[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %2476 = "tosa.reshape"(%2475) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %2477 = tensor.empty() : tensor<1x32x80x128xf32>
    %2478 = tensor.empty() : tensor<1x32x80x128xf32>
    %2479 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2473 : tensor<1x1x80x128xf32>) outs(%2478 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2480 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2456, %2479 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2477 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1418 = tensor.extract_slice %2456[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1419 = tensor.extract_slice %2456[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %2481 = tensor.empty() : tensor<1x32x80x64xf32>
    %2482 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1419 : tensor<1x32x80x64xf32>) outs(%2481 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %2483 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1420 = tensor.insert_slice %2482 into %2483[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1421 = tensor.insert_slice %extracted_slice_1418 into %inserted_slice_1420[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %2484 = tensor.empty() : tensor<1x32x80x128xf32>
    %2485 = tensor.empty() : tensor<1x32x80x128xf32>
    %2486 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2476 : tensor<1x1x80x128xf32>) outs(%2485 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2487 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1421, %2486 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2484 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %2488 = "tosa.add"(%2480, %2487) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2489 = tensor.empty() : tensor<1x32x80x128xf32>
    %2490 = tensor.empty() : tensor<1x32x80x128xf32>
    %2491 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2473 : tensor<1x1x80x128xf32>) outs(%2490 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2492 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2459, %2491 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2489 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1422 = tensor.extract_slice %2459[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1423 = tensor.extract_slice %2459[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %2493 = tensor.empty() : tensor<1x32x80x64xf32>
    %2494 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1423 : tensor<1x32x80x64xf32>) outs(%2493 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %2495 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1424 = tensor.insert_slice %2494 into %2495[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1425 = tensor.insert_slice %extracted_slice_1422 into %inserted_slice_1424[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %2496 = tensor.empty() : tensor<1x32x80x128xf32>
    %2497 = tensor.empty() : tensor<1x32x80x128xf32>
    %2498 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2476 : tensor<1x1x80x128xf32>) outs(%2497 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2499 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1425, %2498 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2496 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %2500 = "tosa.add"(%2492, %2499) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2501 = tensor.empty() : tensor<1x32x128x80xf32>
    %2502 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2500 : tensor<1x32x80x128xf32>) outs(%2501 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %2503 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1426 = tensor.extract_slice %2488[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1427 = tensor.insert_slice %extracted_slice_1426 into %2503[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %2504 = "tosa.reshape"(%inserted_slice_1427) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %2505 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1428 = tensor.extract_slice %2502[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1429 = tensor.insert_slice %extracted_slice_1428 into %2505[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %2506 = "tosa.reshape"(%inserted_slice_1429) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %2507 = tensor.empty() : tensor<32x80x80xf32>
    %2508 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%2507 : tensor<32x80x80xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x80xf32>
    %2509 = linalg.batch_matmul ins(%2504, %2506 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%2508 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %2510 = "tosa.reshape"(%2509) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1430 = arith.constant 11.3137083 : f32
    %2511 = tensor.empty() : tensor<1x32x80x80xf32>
    %2512 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2510 : tensor<1x32x80x80xf32>) outs(%2511 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.divf %in, %cst_1430 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %2513 = "tosa.add"(%2512, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %2514 = tensor.empty() : tensor<1x32x80x1xf32>
    %2515 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2514 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %2516 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2513 : tensor<1x32x80x80xf32>) outs(%2514 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.maxf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %2517 = tensor.empty() : tensor<1x32x80x80xf32>
    %2518 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2513, %2516 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%2517 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.subf %in, %in_2002 : f32
      %4845 = math.exp %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<1x32x80x80xf32>
    %2519 = tensor.empty() : tensor<1x32x80x1xf32>
    %2520 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2519 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %2521 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2518 : tensor<1x32x80x80xf32>) outs(%2520 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.addf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %2522 = tensor.empty() : tensor<1x32x80x80xf32>
    %2523 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2518, %2521 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%2522 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.divf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %2524 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1431 = tensor.extract_slice %2523[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1432 = tensor.insert_slice %extracted_slice_1431 into %2524[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %2525 = "tosa.reshape"(%inserted_slice_1432) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %2526 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1433 = tensor.extract_slice %2462[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1434 = tensor.insert_slice %extracted_slice_1433 into %2526[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %2527 = "tosa.reshape"(%inserted_slice_1434) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %2528 = tensor.empty() : tensor<32x80x128xf32>
    %2529 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%2528 : tensor<32x80x128xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x128xf32>
    %2530 = linalg.batch_matmul ins(%2525, %2527 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%2529 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %2531 = "tosa.reshape"(%2530) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2532 = tensor.empty() : tensor<1x80x32x128xf32>
    %2533 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2531 : tensor<1x32x80x128xf32>) outs(%2532 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1435 = tensor.extract_slice %2533[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %2534 = "tosa.reshape"(%extracted_slice_1435) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %2535 = tensor.empty() : tensor<4096x4096xf32>
    %2536 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_296 : tensor<4096x4096xf32>) outs(%2535 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2537 = "tosa.reshape"(%2534) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1436 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %2538 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2537, %2536 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1436 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %2539 = "tosa.reshape"(%2538) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2540 = "tosa.add"(%2424, %2539) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %2541 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1437 = arith.constant 2 : i32
    %2542 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2540 : tensor<1x80x4096xf32>) outs(%2541 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1437 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1438 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %2543 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2542 : tensor<1x80x4096xf32>) outs(%cst_1438 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1439 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2544 = "tosa.add"(%2543, %cst_1439) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %2545 = tensor.empty() : tensor<1x80x1xf32>
    %2546 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2544 : tensor<1x80x1xf32>) outs(%2545 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %2547 = tensor.empty() : tensor<1x80x4096xf32>
    %2548 = tensor.empty() : tensor<1x80x4096xf32>
    %2549 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2546 : tensor<1x80x1xf32>) outs(%2548 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2550 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2540, %2549 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2547 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %2551 = tensor.empty() : tensor<1x80x4096xf32>
    %2552 = tensor.empty() : tensor<1x80x4096xf32>
    %2553 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_32 : tensor<4096xf32>) outs(%2552 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2554 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2553, %2550 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2551 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %2555 = tensor.empty() : tensor<4096x11008xf32>
    %2556 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_298 : tensor<11008x4096xf32>) outs(%2555 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2557 = "tosa.reshape"(%2554) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1440 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %2558 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2557, %2556 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1440 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %2559 = "tosa.reshape"(%2558) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %2560 = tensor.empty() : tensor<1x80x11008xf32>
    %2561 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2559 : tensor<1x80x11008xf32>) outs(%2560 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      %4845 = math.exp %4844 : f32
      %cst_2002 = arith.constant 1.000000e+00 : f32
      %4846 = arith.addf %cst_2002, %4845 : f32
      %4847 = arith.divf %in, %4846 : f32
      linalg.yield %4847 : f32
    } -> tensor<1x80x11008xf32>
    %2562 = tensor.empty() : tensor<4096x11008xf32>
    %2563 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_300 : tensor<11008x4096xf32>) outs(%2562 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2564 = "tosa.reshape"(%2554) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1441 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %2565 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2564, %2563 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1441 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %2566 = "tosa.reshape"(%2565) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %2567 = tensor.empty() : tensor<1x80x11008xf32>
    %2568 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2561, %2566 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%2567 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x11008xf32>
    %2569 = tensor.empty() : tensor<11008x4096xf32>
    %2570 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_302 : tensor<4096x11008xf32>) outs(%2569 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %2571 = "tosa.reshape"(%2568) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %cst_1442 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %2572 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2571, %2570 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%cst_1442 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %2573 = "tosa.reshape"(%2572) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2574 = "tosa.add"(%2540, %2573) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %2575 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1443 = arith.constant 2 : i32
    %2576 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2574 : tensor<1x80x4096xf32>) outs(%2575 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1443 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1444 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %2577 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2576 : tensor<1x80x4096xf32>) outs(%cst_1444 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1445 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2578 = "tosa.add"(%2577, %cst_1445) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %2579 = tensor.empty() : tensor<1x80x1xf32>
    %2580 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2578 : tensor<1x80x1xf32>) outs(%2579 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %2581 = tensor.empty() : tensor<1x80x4096xf32>
    %2582 = tensor.empty() : tensor<1x80x4096xf32>
    %2583 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2580 : tensor<1x80x1xf32>) outs(%2582 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2584 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2574, %2583 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2581 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %2585 = tensor.empty() : tensor<1x80x4096xf32>
    %2586 = tensor.empty() : tensor<1x80x4096xf32>
    %2587 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_33 : tensor<4096xf32>) outs(%2586 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2588 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2587, %2584 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2585 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %2589 = tensor.empty() : tensor<4096x4096xf32>
    %2590 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_304 : tensor<4096x4096xf32>) outs(%2589 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2591 = "tosa.reshape"(%2588) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1446 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %2592 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2591, %2590 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1446 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %2593 = "tosa.reshape"(%2592) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2594 = tensor.empty() : tensor<4096x4096xf32>
    %2595 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_306 : tensor<4096x4096xf32>) outs(%2594 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2596 = "tosa.reshape"(%2588) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1447 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %2597 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2596, %2595 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1447 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %2598 = "tosa.reshape"(%2597) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2599 = tensor.empty() : tensor<4096x4096xf32>
    %2600 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_308 : tensor<4096x4096xf32>) outs(%2599 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2601 = "tosa.reshape"(%2588) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1448 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %2602 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2601, %2600 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1448 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %2603 = "tosa.reshape"(%2602) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2604 = "tosa.reshape"(%2593) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2605 = tensor.empty() : tensor<1x32x80x128xf32>
    %2606 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2604 : tensor<1x80x32x128xf32>) outs(%2605 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2607 = "tosa.reshape"(%2598) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2608 = tensor.empty() : tensor<1x32x80x128xf32>
    %2609 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2607 : tensor<1x80x32x128xf32>) outs(%2608 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2610 = "tosa.reshape"(%2603) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2611 = tensor.empty() : tensor<1x32x80x128xf32>
    %2612 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2610 : tensor<1x80x32x128xf32>) outs(%2611 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1449 = tensor.extract_slice %expanded_584[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1450 = tensor.extract_slice %extracted_slice_1449[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1451 = tensor.extract_slice %extracted_slice_1450[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1452 = tensor.extract_slice %expanded_586[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1453 = tensor.extract_slice %extracted_slice_1452[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1454 = tensor.extract_slice %extracted_slice_1453[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %2613 = tensor.empty() : tensor<1x80x128xf32>
    %2614 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1451 : tensor<1x1x80x128xf32>) outs(%2613 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %2615 = tensor.empty() : tensor<80x128xf32>
    %2616 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%2614 : tensor<1x80x128xf32>) outs(%2615 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %2617 = tensor.empty() : tensor<1x80x128xf32>
    %2618 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1454 : tensor<1x1x80x128xf32>) outs(%2617 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %2619 = tensor.empty() : tensor<80x128xf32>
    %2620 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%2618 : tensor<1x80x128xf32>) outs(%2619 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %2621 = tensor.empty() : tensor<1x80x128xf32>
    %2622 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%2621 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %2616[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %2623 = "tosa.reshape"(%2622) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %2624 = tensor.empty() : tensor<1x80x128xf32>
    %2625 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%2624 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %2620[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %2626 = "tosa.reshape"(%2625) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %2627 = tensor.empty() : tensor<1x32x80x128xf32>
    %2628 = tensor.empty() : tensor<1x32x80x128xf32>
    %2629 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2623 : tensor<1x1x80x128xf32>) outs(%2628 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2630 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2606, %2629 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2627 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1455 = tensor.extract_slice %2606[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1456 = tensor.extract_slice %2606[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %2631 = tensor.empty() : tensor<1x32x80x64xf32>
    %2632 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1456 : tensor<1x32x80x64xf32>) outs(%2631 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %2633 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1457 = tensor.insert_slice %2632 into %2633[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1458 = tensor.insert_slice %extracted_slice_1455 into %inserted_slice_1457[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %2634 = tensor.empty() : tensor<1x32x80x128xf32>
    %2635 = tensor.empty() : tensor<1x32x80x128xf32>
    %2636 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2626 : tensor<1x1x80x128xf32>) outs(%2635 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2637 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1458, %2636 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2634 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %2638 = "tosa.add"(%2630, %2637) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2639 = tensor.empty() : tensor<1x32x80x128xf32>
    %2640 = tensor.empty() : tensor<1x32x80x128xf32>
    %2641 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2623 : tensor<1x1x80x128xf32>) outs(%2640 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2642 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2609, %2641 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2639 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1459 = tensor.extract_slice %2609[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1460 = tensor.extract_slice %2609[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %2643 = tensor.empty() : tensor<1x32x80x64xf32>
    %2644 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1460 : tensor<1x32x80x64xf32>) outs(%2643 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %2645 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1461 = tensor.insert_slice %2644 into %2645[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1462 = tensor.insert_slice %extracted_slice_1459 into %inserted_slice_1461[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %2646 = tensor.empty() : tensor<1x32x80x128xf32>
    %2647 = tensor.empty() : tensor<1x32x80x128xf32>
    %2648 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2626 : tensor<1x1x80x128xf32>) outs(%2647 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2649 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1462, %2648 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2646 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %2650 = "tosa.add"(%2642, %2649) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2651 = tensor.empty() : tensor<1x32x128x80xf32>
    %2652 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2650 : tensor<1x32x80x128xf32>) outs(%2651 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %2653 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1463 = tensor.extract_slice %2638[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1464 = tensor.insert_slice %extracted_slice_1463 into %2653[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %2654 = "tosa.reshape"(%inserted_slice_1464) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %2655 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1465 = tensor.extract_slice %2652[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1466 = tensor.insert_slice %extracted_slice_1465 into %2655[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %2656 = "tosa.reshape"(%inserted_slice_1466) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %2657 = tensor.empty() : tensor<32x80x80xf32>
    %2658 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%2657 : tensor<32x80x80xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x80xf32>
    %2659 = linalg.batch_matmul ins(%2654, %2656 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%2658 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %2660 = "tosa.reshape"(%2659) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1467 = arith.constant 11.3137083 : f32
    %2661 = tensor.empty() : tensor<1x32x80x80xf32>
    %2662 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2660 : tensor<1x32x80x80xf32>) outs(%2661 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.divf %in, %cst_1467 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %2663 = "tosa.add"(%2662, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %2664 = tensor.empty() : tensor<1x32x80x1xf32>
    %2665 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2664 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %2666 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2663 : tensor<1x32x80x80xf32>) outs(%2664 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.maxf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %2667 = tensor.empty() : tensor<1x32x80x80xf32>
    %2668 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2663, %2666 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%2667 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.subf %in, %in_2002 : f32
      %4845 = math.exp %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<1x32x80x80xf32>
    %2669 = tensor.empty() : tensor<1x32x80x1xf32>
    %2670 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2669 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %2671 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2668 : tensor<1x32x80x80xf32>) outs(%2670 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.addf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %2672 = tensor.empty() : tensor<1x32x80x80xf32>
    %2673 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2668, %2671 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%2672 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.divf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %2674 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1468 = tensor.extract_slice %2673[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1469 = tensor.insert_slice %extracted_slice_1468 into %2674[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %2675 = "tosa.reshape"(%inserted_slice_1469) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %2676 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1470 = tensor.extract_slice %2612[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1471 = tensor.insert_slice %extracted_slice_1470 into %2676[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %2677 = "tosa.reshape"(%inserted_slice_1471) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %2678 = tensor.empty() : tensor<32x80x128xf32>
    %2679 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%2678 : tensor<32x80x128xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x128xf32>
    %2680 = linalg.batch_matmul ins(%2675, %2677 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%2679 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %2681 = "tosa.reshape"(%2680) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2682 = tensor.empty() : tensor<1x80x32x128xf32>
    %2683 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2681 : tensor<1x32x80x128xf32>) outs(%2682 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1472 = tensor.extract_slice %2683[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %2684 = "tosa.reshape"(%extracted_slice_1472) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %2685 = tensor.empty() : tensor<4096x4096xf32>
    %2686 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_310 : tensor<4096x4096xf32>) outs(%2685 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2687 = "tosa.reshape"(%2684) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1473 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %2688 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2687, %2686 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1473 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %2689 = "tosa.reshape"(%2688) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2690 = "tosa.add"(%2574, %2689) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %2691 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1474 = arith.constant 2 : i32
    %2692 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2690 : tensor<1x80x4096xf32>) outs(%2691 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1474 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1475 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %2693 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2692 : tensor<1x80x4096xf32>) outs(%cst_1475 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1476 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2694 = "tosa.add"(%2693, %cst_1476) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %2695 = tensor.empty() : tensor<1x80x1xf32>
    %2696 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2694 : tensor<1x80x1xf32>) outs(%2695 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %2697 = tensor.empty() : tensor<1x80x4096xf32>
    %2698 = tensor.empty() : tensor<1x80x4096xf32>
    %2699 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2696 : tensor<1x80x1xf32>) outs(%2698 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2700 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2690, %2699 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2697 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %2701 = tensor.empty() : tensor<1x80x4096xf32>
    %2702 = tensor.empty() : tensor<1x80x4096xf32>
    %2703 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_34 : tensor<4096xf32>) outs(%2702 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2704 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2703, %2700 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2701 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %2705 = tensor.empty() : tensor<4096x11008xf32>
    %2706 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_312 : tensor<11008x4096xf32>) outs(%2705 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2707 = "tosa.reshape"(%2704) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1477 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %2708 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2707, %2706 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1477 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %2709 = "tosa.reshape"(%2708) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %2710 = tensor.empty() : tensor<1x80x11008xf32>
    %2711 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2709 : tensor<1x80x11008xf32>) outs(%2710 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      %4845 = math.exp %4844 : f32
      %cst_2002 = arith.constant 1.000000e+00 : f32
      %4846 = arith.addf %cst_2002, %4845 : f32
      %4847 = arith.divf %in, %4846 : f32
      linalg.yield %4847 : f32
    } -> tensor<1x80x11008xf32>
    %2712 = tensor.empty() : tensor<4096x11008xf32>
    %2713 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_314 : tensor<11008x4096xf32>) outs(%2712 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2714 = "tosa.reshape"(%2704) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1478 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %2715 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2714, %2713 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1478 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %2716 = "tosa.reshape"(%2715) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %2717 = tensor.empty() : tensor<1x80x11008xf32>
    %2718 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2711, %2716 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%2717 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x11008xf32>
    %2719 = tensor.empty() : tensor<11008x4096xf32>
    %2720 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_316 : tensor<4096x11008xf32>) outs(%2719 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %2721 = "tosa.reshape"(%2718) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %cst_1479 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %2722 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2721, %2720 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%cst_1479 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %2723 = "tosa.reshape"(%2722) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2724 = "tosa.add"(%2690, %2723) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %2725 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1480 = arith.constant 2 : i32
    %2726 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2724 : tensor<1x80x4096xf32>) outs(%2725 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1480 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1481 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %2727 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2726 : tensor<1x80x4096xf32>) outs(%cst_1481 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1482 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2728 = "tosa.add"(%2727, %cst_1482) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %2729 = tensor.empty() : tensor<1x80x1xf32>
    %2730 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2728 : tensor<1x80x1xf32>) outs(%2729 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %2731 = tensor.empty() : tensor<1x80x4096xf32>
    %2732 = tensor.empty() : tensor<1x80x4096xf32>
    %2733 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2730 : tensor<1x80x1xf32>) outs(%2732 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2734 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2724, %2733 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2731 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %2735 = tensor.empty() : tensor<1x80x4096xf32>
    %2736 = tensor.empty() : tensor<1x80x4096xf32>
    %2737 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_35 : tensor<4096xf32>) outs(%2736 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2738 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2737, %2734 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2735 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %2739 = tensor.empty() : tensor<4096x4096xf32>
    %2740 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_318 : tensor<4096x4096xf32>) outs(%2739 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2741 = "tosa.reshape"(%2738) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1483 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %2742 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2741, %2740 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1483 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %2743 = "tosa.reshape"(%2742) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2744 = tensor.empty() : tensor<4096x4096xf32>
    %2745 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_320 : tensor<4096x4096xf32>) outs(%2744 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2746 = "tosa.reshape"(%2738) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1484 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %2747 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2746, %2745 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1484 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %2748 = "tosa.reshape"(%2747) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2749 = tensor.empty() : tensor<4096x4096xf32>
    %2750 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_322 : tensor<4096x4096xf32>) outs(%2749 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2751 = "tosa.reshape"(%2738) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1485 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %2752 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2751, %2750 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1485 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %2753 = "tosa.reshape"(%2752) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2754 = "tosa.reshape"(%2743) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2755 = tensor.empty() : tensor<1x32x80x128xf32>
    %2756 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2754 : tensor<1x80x32x128xf32>) outs(%2755 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2757 = "tosa.reshape"(%2748) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2758 = tensor.empty() : tensor<1x32x80x128xf32>
    %2759 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2757 : tensor<1x80x32x128xf32>) outs(%2758 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2760 = "tosa.reshape"(%2753) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2761 = tensor.empty() : tensor<1x32x80x128xf32>
    %2762 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2760 : tensor<1x80x32x128xf32>) outs(%2761 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1486 = tensor.extract_slice %expanded_588[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1487 = tensor.extract_slice %extracted_slice_1486[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1488 = tensor.extract_slice %extracted_slice_1487[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1489 = tensor.extract_slice %expanded_590[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1490 = tensor.extract_slice %extracted_slice_1489[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1491 = tensor.extract_slice %extracted_slice_1490[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %2763 = tensor.empty() : tensor<1x80x128xf32>
    %2764 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1488 : tensor<1x1x80x128xf32>) outs(%2763 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %2765 = tensor.empty() : tensor<80x128xf32>
    %2766 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%2764 : tensor<1x80x128xf32>) outs(%2765 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %2767 = tensor.empty() : tensor<1x80x128xf32>
    %2768 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1491 : tensor<1x1x80x128xf32>) outs(%2767 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %2769 = tensor.empty() : tensor<80x128xf32>
    %2770 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%2768 : tensor<1x80x128xf32>) outs(%2769 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %2771 = tensor.empty() : tensor<1x80x128xf32>
    %2772 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%2771 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %2766[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %2773 = "tosa.reshape"(%2772) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %2774 = tensor.empty() : tensor<1x80x128xf32>
    %2775 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%2774 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %2770[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %2776 = "tosa.reshape"(%2775) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %2777 = tensor.empty() : tensor<1x32x80x128xf32>
    %2778 = tensor.empty() : tensor<1x32x80x128xf32>
    %2779 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2773 : tensor<1x1x80x128xf32>) outs(%2778 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2780 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2756, %2779 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2777 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1492 = tensor.extract_slice %2756[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1493 = tensor.extract_slice %2756[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %2781 = tensor.empty() : tensor<1x32x80x64xf32>
    %2782 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1493 : tensor<1x32x80x64xf32>) outs(%2781 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %2783 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1494 = tensor.insert_slice %2782 into %2783[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1495 = tensor.insert_slice %extracted_slice_1492 into %inserted_slice_1494[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %2784 = tensor.empty() : tensor<1x32x80x128xf32>
    %2785 = tensor.empty() : tensor<1x32x80x128xf32>
    %2786 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2776 : tensor<1x1x80x128xf32>) outs(%2785 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2787 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1495, %2786 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2784 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %2788 = "tosa.add"(%2780, %2787) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2789 = tensor.empty() : tensor<1x32x80x128xf32>
    %2790 = tensor.empty() : tensor<1x32x80x128xf32>
    %2791 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2773 : tensor<1x1x80x128xf32>) outs(%2790 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2792 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2759, %2791 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2789 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1496 = tensor.extract_slice %2759[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1497 = tensor.extract_slice %2759[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %2793 = tensor.empty() : tensor<1x32x80x64xf32>
    %2794 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1497 : tensor<1x32x80x64xf32>) outs(%2793 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %2795 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1498 = tensor.insert_slice %2794 into %2795[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1499 = tensor.insert_slice %extracted_slice_1496 into %inserted_slice_1498[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %2796 = tensor.empty() : tensor<1x32x80x128xf32>
    %2797 = tensor.empty() : tensor<1x32x80x128xf32>
    %2798 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2776 : tensor<1x1x80x128xf32>) outs(%2797 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2799 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1499, %2798 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2796 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %2800 = "tosa.add"(%2792, %2799) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2801 = tensor.empty() : tensor<1x32x128x80xf32>
    %2802 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2800 : tensor<1x32x80x128xf32>) outs(%2801 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %2803 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1500 = tensor.extract_slice %2788[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1501 = tensor.insert_slice %extracted_slice_1500 into %2803[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %2804 = "tosa.reshape"(%inserted_slice_1501) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %2805 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1502 = tensor.extract_slice %2802[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1503 = tensor.insert_slice %extracted_slice_1502 into %2805[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %2806 = "tosa.reshape"(%inserted_slice_1503) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %2807 = tensor.empty() : tensor<32x80x80xf32>
    %2808 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%2807 : tensor<32x80x80xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x80xf32>
    %2809 = linalg.batch_matmul ins(%2804, %2806 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%2808 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %2810 = "tosa.reshape"(%2809) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1504 = arith.constant 11.3137083 : f32
    %2811 = tensor.empty() : tensor<1x32x80x80xf32>
    %2812 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2810 : tensor<1x32x80x80xf32>) outs(%2811 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.divf %in, %cst_1504 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %2813 = "tosa.add"(%2812, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %2814 = tensor.empty() : tensor<1x32x80x1xf32>
    %2815 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2814 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %2816 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2813 : tensor<1x32x80x80xf32>) outs(%2814 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.maxf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %2817 = tensor.empty() : tensor<1x32x80x80xf32>
    %2818 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2813, %2816 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%2817 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.subf %in, %in_2002 : f32
      %4845 = math.exp %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<1x32x80x80xf32>
    %2819 = tensor.empty() : tensor<1x32x80x1xf32>
    %2820 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2819 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %2821 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2818 : tensor<1x32x80x80xf32>) outs(%2820 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.addf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %2822 = tensor.empty() : tensor<1x32x80x80xf32>
    %2823 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2818, %2821 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%2822 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.divf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %2824 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1505 = tensor.extract_slice %2823[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1506 = tensor.insert_slice %extracted_slice_1505 into %2824[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %2825 = "tosa.reshape"(%inserted_slice_1506) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %2826 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1507 = tensor.extract_slice %2762[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1508 = tensor.insert_slice %extracted_slice_1507 into %2826[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %2827 = "tosa.reshape"(%inserted_slice_1508) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %2828 = tensor.empty() : tensor<32x80x128xf32>
    %2829 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%2828 : tensor<32x80x128xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x128xf32>
    %2830 = linalg.batch_matmul ins(%2825, %2827 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%2829 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %2831 = "tosa.reshape"(%2830) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2832 = tensor.empty() : tensor<1x80x32x128xf32>
    %2833 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2831 : tensor<1x32x80x128xf32>) outs(%2832 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1509 = tensor.extract_slice %2833[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %2834 = "tosa.reshape"(%extracted_slice_1509) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %2835 = tensor.empty() : tensor<4096x4096xf32>
    %2836 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_324 : tensor<4096x4096xf32>) outs(%2835 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2837 = "tosa.reshape"(%2834) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1510 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %2838 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2837, %2836 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1510 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %2839 = "tosa.reshape"(%2838) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2840 = "tosa.add"(%2724, %2839) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %2841 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1511 = arith.constant 2 : i32
    %2842 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2840 : tensor<1x80x4096xf32>) outs(%2841 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1511 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1512 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %2843 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2842 : tensor<1x80x4096xf32>) outs(%cst_1512 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1513 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2844 = "tosa.add"(%2843, %cst_1513) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %2845 = tensor.empty() : tensor<1x80x1xf32>
    %2846 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2844 : tensor<1x80x1xf32>) outs(%2845 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %2847 = tensor.empty() : tensor<1x80x4096xf32>
    %2848 = tensor.empty() : tensor<1x80x4096xf32>
    %2849 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2846 : tensor<1x80x1xf32>) outs(%2848 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2850 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2840, %2849 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2847 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %2851 = tensor.empty() : tensor<1x80x4096xf32>
    %2852 = tensor.empty() : tensor<1x80x4096xf32>
    %2853 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_36 : tensor<4096xf32>) outs(%2852 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2854 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2853, %2850 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2851 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %2855 = tensor.empty() : tensor<4096x11008xf32>
    %2856 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_326 : tensor<11008x4096xf32>) outs(%2855 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2857 = "tosa.reshape"(%2854) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1514 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %2858 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2857, %2856 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1514 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %2859 = "tosa.reshape"(%2858) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %2860 = tensor.empty() : tensor<1x80x11008xf32>
    %2861 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2859 : tensor<1x80x11008xf32>) outs(%2860 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      %4845 = math.exp %4844 : f32
      %cst_2002 = arith.constant 1.000000e+00 : f32
      %4846 = arith.addf %cst_2002, %4845 : f32
      %4847 = arith.divf %in, %4846 : f32
      linalg.yield %4847 : f32
    } -> tensor<1x80x11008xf32>
    %2862 = tensor.empty() : tensor<4096x11008xf32>
    %2863 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_328 : tensor<11008x4096xf32>) outs(%2862 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2864 = "tosa.reshape"(%2854) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1515 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %2865 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2864, %2863 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1515 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %2866 = "tosa.reshape"(%2865) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %2867 = tensor.empty() : tensor<1x80x11008xf32>
    %2868 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2861, %2866 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%2867 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x11008xf32>
    %2869 = tensor.empty() : tensor<11008x4096xf32>
    %2870 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_330 : tensor<4096x11008xf32>) outs(%2869 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %2871 = "tosa.reshape"(%2868) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %cst_1516 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %2872 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2871, %2870 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%cst_1516 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %2873 = "tosa.reshape"(%2872) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2874 = "tosa.add"(%2840, %2873) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %2875 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1517 = arith.constant 2 : i32
    %2876 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2874 : tensor<1x80x4096xf32>) outs(%2875 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1517 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1518 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %2877 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2876 : tensor<1x80x4096xf32>) outs(%cst_1518 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1519 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2878 = "tosa.add"(%2877, %cst_1519) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %2879 = tensor.empty() : tensor<1x80x1xf32>
    %2880 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2878 : tensor<1x80x1xf32>) outs(%2879 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %2881 = tensor.empty() : tensor<1x80x4096xf32>
    %2882 = tensor.empty() : tensor<1x80x4096xf32>
    %2883 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2880 : tensor<1x80x1xf32>) outs(%2882 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2884 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2874, %2883 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2881 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %2885 = tensor.empty() : tensor<1x80x4096xf32>
    %2886 = tensor.empty() : tensor<1x80x4096xf32>
    %2887 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_37 : tensor<4096xf32>) outs(%2886 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %2888 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2887, %2884 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2885 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %2889 = tensor.empty() : tensor<4096x4096xf32>
    %2890 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_332 : tensor<4096x4096xf32>) outs(%2889 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2891 = "tosa.reshape"(%2888) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1520 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %2892 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2891, %2890 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1520 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %2893 = "tosa.reshape"(%2892) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2894 = tensor.empty() : tensor<4096x4096xf32>
    %2895 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_334 : tensor<4096x4096xf32>) outs(%2894 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2896 = "tosa.reshape"(%2888) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1521 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %2897 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2896, %2895 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1521 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %2898 = "tosa.reshape"(%2897) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2899 = tensor.empty() : tensor<4096x4096xf32>
    %2900 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_336 : tensor<4096x4096xf32>) outs(%2899 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2901 = "tosa.reshape"(%2888) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1522 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %2902 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2901, %2900 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1522 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %2903 = "tosa.reshape"(%2902) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2904 = "tosa.reshape"(%2893) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2905 = tensor.empty() : tensor<1x32x80x128xf32>
    %2906 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2904 : tensor<1x80x32x128xf32>) outs(%2905 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2907 = "tosa.reshape"(%2898) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2908 = tensor.empty() : tensor<1x32x80x128xf32>
    %2909 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2907 : tensor<1x80x32x128xf32>) outs(%2908 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2910 = "tosa.reshape"(%2903) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %2911 = tensor.empty() : tensor<1x32x80x128xf32>
    %2912 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2910 : tensor<1x80x32x128xf32>) outs(%2911 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1523 = tensor.extract_slice %expanded_592[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1524 = tensor.extract_slice %extracted_slice_1523[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1525 = tensor.extract_slice %extracted_slice_1524[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1526 = tensor.extract_slice %expanded_594[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1527 = tensor.extract_slice %extracted_slice_1526[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1528 = tensor.extract_slice %extracted_slice_1527[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %2913 = tensor.empty() : tensor<1x80x128xf32>
    %2914 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1525 : tensor<1x1x80x128xf32>) outs(%2913 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %2915 = tensor.empty() : tensor<80x128xf32>
    %2916 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%2914 : tensor<1x80x128xf32>) outs(%2915 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %2917 = tensor.empty() : tensor<1x80x128xf32>
    %2918 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1528 : tensor<1x1x80x128xf32>) outs(%2917 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %2919 = tensor.empty() : tensor<80x128xf32>
    %2920 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%2918 : tensor<1x80x128xf32>) outs(%2919 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %2921 = tensor.empty() : tensor<1x80x128xf32>
    %2922 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%2921 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %2916[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %2923 = "tosa.reshape"(%2922) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %2924 = tensor.empty() : tensor<1x80x128xf32>
    %2925 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%2924 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %2920[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %2926 = "tosa.reshape"(%2925) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %2927 = tensor.empty() : tensor<1x32x80x128xf32>
    %2928 = tensor.empty() : tensor<1x32x80x128xf32>
    %2929 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2923 : tensor<1x1x80x128xf32>) outs(%2928 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2930 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2906, %2929 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2927 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1529 = tensor.extract_slice %2906[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1530 = tensor.extract_slice %2906[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %2931 = tensor.empty() : tensor<1x32x80x64xf32>
    %2932 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1530 : tensor<1x32x80x64xf32>) outs(%2931 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %2933 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1531 = tensor.insert_slice %2932 into %2933[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1532 = tensor.insert_slice %extracted_slice_1529 into %inserted_slice_1531[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %2934 = tensor.empty() : tensor<1x32x80x128xf32>
    %2935 = tensor.empty() : tensor<1x32x80x128xf32>
    %2936 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2926 : tensor<1x1x80x128xf32>) outs(%2935 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2937 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1532, %2936 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2934 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %2938 = "tosa.add"(%2930, %2937) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2939 = tensor.empty() : tensor<1x32x80x128xf32>
    %2940 = tensor.empty() : tensor<1x32x80x128xf32>
    %2941 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2923 : tensor<1x1x80x128xf32>) outs(%2940 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2942 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2909, %2941 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2939 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1533 = tensor.extract_slice %2909[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1534 = tensor.extract_slice %2909[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %2943 = tensor.empty() : tensor<1x32x80x64xf32>
    %2944 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1534 : tensor<1x32x80x64xf32>) outs(%2943 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %2945 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1535 = tensor.insert_slice %2944 into %2945[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1536 = tensor.insert_slice %extracted_slice_1533 into %inserted_slice_1535[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %2946 = tensor.empty() : tensor<1x32x80x128xf32>
    %2947 = tensor.empty() : tensor<1x32x80x128xf32>
    %2948 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2926 : tensor<1x1x80x128xf32>) outs(%2947 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %2949 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1536, %2948 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%2946 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %2950 = "tosa.add"(%2942, %2949) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2951 = tensor.empty() : tensor<1x32x128x80xf32>
    %2952 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2950 : tensor<1x32x80x128xf32>) outs(%2951 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %2953 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1537 = tensor.extract_slice %2938[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1538 = tensor.insert_slice %extracted_slice_1537 into %2953[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %2954 = "tosa.reshape"(%inserted_slice_1538) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %2955 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1539 = tensor.extract_slice %2952[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1540 = tensor.insert_slice %extracted_slice_1539 into %2955[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %2956 = "tosa.reshape"(%inserted_slice_1540) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %2957 = tensor.empty() : tensor<32x80x80xf32>
    %2958 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%2957 : tensor<32x80x80xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x80xf32>
    %2959 = linalg.batch_matmul ins(%2954, %2956 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%2958 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %2960 = "tosa.reshape"(%2959) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1541 = arith.constant 11.3137083 : f32
    %2961 = tensor.empty() : tensor<1x32x80x80xf32>
    %2962 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2960 : tensor<1x32x80x80xf32>) outs(%2961 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.divf %in, %cst_1541 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %2963 = "tosa.add"(%2962, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %2964 = tensor.empty() : tensor<1x32x80x1xf32>
    %2965 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2964 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %2966 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2963 : tensor<1x32x80x80xf32>) outs(%2964 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.maxf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %2967 = tensor.empty() : tensor<1x32x80x80xf32>
    %2968 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2963, %2966 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%2967 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.subf %in, %in_2002 : f32
      %4845 = math.exp %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<1x32x80x80xf32>
    %2969 = tensor.empty() : tensor<1x32x80x1xf32>
    %2970 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2969 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %2971 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2968 : tensor<1x32x80x80xf32>) outs(%2970 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.addf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %2972 = tensor.empty() : tensor<1x32x80x80xf32>
    %2973 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2968, %2971 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%2972 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.divf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %2974 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1542 = tensor.extract_slice %2973[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1543 = tensor.insert_slice %extracted_slice_1542 into %2974[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %2975 = "tosa.reshape"(%inserted_slice_1543) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %2976 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1544 = tensor.extract_slice %2912[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1545 = tensor.insert_slice %extracted_slice_1544 into %2976[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %2977 = "tosa.reshape"(%inserted_slice_1545) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %2978 = tensor.empty() : tensor<32x80x128xf32>
    %2979 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%2978 : tensor<32x80x128xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x128xf32>
    %2980 = linalg.batch_matmul ins(%2975, %2977 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%2979 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %2981 = "tosa.reshape"(%2980) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %2982 = tensor.empty() : tensor<1x80x32x128xf32>
    %2983 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2981 : tensor<1x32x80x128xf32>) outs(%2982 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1546 = tensor.extract_slice %2983[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %2984 = "tosa.reshape"(%extracted_slice_1546) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %2985 = tensor.empty() : tensor<4096x4096xf32>
    %2986 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_338 : tensor<4096x4096xf32>) outs(%2985 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2987 = "tosa.reshape"(%2984) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1547 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %2988 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2987, %2986 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1547 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %2989 = "tosa.reshape"(%2988) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %2990 = "tosa.add"(%2874, %2989) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %2991 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1548 = arith.constant 2 : i32
    %2992 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2990 : tensor<1x80x4096xf32>) outs(%2991 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1548 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1549 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %2993 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2992 : tensor<1x80x4096xf32>) outs(%cst_1549 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1550 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2994 = "tosa.add"(%2993, %cst_1550) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %2995 = tensor.empty() : tensor<1x80x1xf32>
    %2996 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2994 : tensor<1x80x1xf32>) outs(%2995 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %2997 = tensor.empty() : tensor<1x80x4096xf32>
    %2998 = tensor.empty() : tensor<1x80x4096xf32>
    %2999 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2996 : tensor<1x80x1xf32>) outs(%2998 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3000 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2990, %2999 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%2997 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %3001 = tensor.empty() : tensor<1x80x4096xf32>
    %3002 = tensor.empty() : tensor<1x80x4096xf32>
    %3003 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_38 : tensor<4096xf32>) outs(%3002 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3004 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3003, %3000 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3001 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %3005 = tensor.empty() : tensor<4096x11008xf32>
    %3006 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_340 : tensor<11008x4096xf32>) outs(%3005 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3007 = "tosa.reshape"(%3004) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1551 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %3008 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3007, %3006 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1551 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %3009 = "tosa.reshape"(%3008) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %3010 = tensor.empty() : tensor<1x80x11008xf32>
    %3011 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3009 : tensor<1x80x11008xf32>) outs(%3010 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      %4845 = math.exp %4844 : f32
      %cst_2002 = arith.constant 1.000000e+00 : f32
      %4846 = arith.addf %cst_2002, %4845 : f32
      %4847 = arith.divf %in, %4846 : f32
      linalg.yield %4847 : f32
    } -> tensor<1x80x11008xf32>
    %3012 = tensor.empty() : tensor<4096x11008xf32>
    %3013 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_342 : tensor<11008x4096xf32>) outs(%3012 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3014 = "tosa.reshape"(%3004) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1552 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %3015 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3014, %3013 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1552 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %3016 = "tosa.reshape"(%3015) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %3017 = tensor.empty() : tensor<1x80x11008xf32>
    %3018 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3011, %3016 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%3017 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x11008xf32>
    %3019 = tensor.empty() : tensor<11008x4096xf32>
    %3020 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_344 : tensor<4096x11008xf32>) outs(%3019 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %3021 = "tosa.reshape"(%3018) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %cst_1553 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %3022 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3021, %3020 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%cst_1553 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %3023 = "tosa.reshape"(%3022) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3024 = "tosa.add"(%2990, %3023) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %3025 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1554 = arith.constant 2 : i32
    %3026 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3024 : tensor<1x80x4096xf32>) outs(%3025 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1554 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1555 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %3027 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%3026 : tensor<1x80x4096xf32>) outs(%cst_1555 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1556 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %3028 = "tosa.add"(%3027, %cst_1556) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %3029 = tensor.empty() : tensor<1x80x1xf32>
    %3030 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3028 : tensor<1x80x1xf32>) outs(%3029 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %3031 = tensor.empty() : tensor<1x80x4096xf32>
    %3032 = tensor.empty() : tensor<1x80x4096xf32>
    %3033 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3030 : tensor<1x80x1xf32>) outs(%3032 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3034 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3024, %3033 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3031 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %3035 = tensor.empty() : tensor<1x80x4096xf32>
    %3036 = tensor.empty() : tensor<1x80x4096xf32>
    %3037 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_39 : tensor<4096xf32>) outs(%3036 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3038 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3037, %3034 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3035 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %3039 = tensor.empty() : tensor<4096x4096xf32>
    %3040 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_346 : tensor<4096x4096xf32>) outs(%3039 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3041 = "tosa.reshape"(%3038) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1557 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %3042 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3041, %3040 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1557 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %3043 = "tosa.reshape"(%3042) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3044 = tensor.empty() : tensor<4096x4096xf32>
    %3045 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_348 : tensor<4096x4096xf32>) outs(%3044 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3046 = "tosa.reshape"(%3038) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1558 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %3047 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3046, %3045 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1558 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %3048 = "tosa.reshape"(%3047) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3049 = tensor.empty() : tensor<4096x4096xf32>
    %3050 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_350 : tensor<4096x4096xf32>) outs(%3049 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3051 = "tosa.reshape"(%3038) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1559 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %3052 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3051, %3050 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1559 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %3053 = "tosa.reshape"(%3052) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3054 = "tosa.reshape"(%3043) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3055 = tensor.empty() : tensor<1x32x80x128xf32>
    %3056 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3054 : tensor<1x80x32x128xf32>) outs(%3055 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3057 = "tosa.reshape"(%3048) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3058 = tensor.empty() : tensor<1x32x80x128xf32>
    %3059 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3057 : tensor<1x80x32x128xf32>) outs(%3058 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3060 = "tosa.reshape"(%3053) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3061 = tensor.empty() : tensor<1x32x80x128xf32>
    %3062 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3060 : tensor<1x80x32x128xf32>) outs(%3061 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1560 = tensor.extract_slice %expanded_596[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1561 = tensor.extract_slice %extracted_slice_1560[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1562 = tensor.extract_slice %extracted_slice_1561[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1563 = tensor.extract_slice %expanded_598[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1564 = tensor.extract_slice %extracted_slice_1563[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1565 = tensor.extract_slice %extracted_slice_1564[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %3063 = tensor.empty() : tensor<1x80x128xf32>
    %3064 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1562 : tensor<1x1x80x128xf32>) outs(%3063 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %3065 = tensor.empty() : tensor<80x128xf32>
    %3066 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%3064 : tensor<1x80x128xf32>) outs(%3065 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %3067 = tensor.empty() : tensor<1x80x128xf32>
    %3068 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1565 : tensor<1x1x80x128xf32>) outs(%3067 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %3069 = tensor.empty() : tensor<80x128xf32>
    %3070 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%3068 : tensor<1x80x128xf32>) outs(%3069 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %3071 = tensor.empty() : tensor<1x80x128xf32>
    %3072 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%3071 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %3066[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %3073 = "tosa.reshape"(%3072) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %3074 = tensor.empty() : tensor<1x80x128xf32>
    %3075 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%3074 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %3070[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %3076 = "tosa.reshape"(%3075) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %3077 = tensor.empty() : tensor<1x32x80x128xf32>
    %3078 = tensor.empty() : tensor<1x32x80x128xf32>
    %3079 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3073 : tensor<1x1x80x128xf32>) outs(%3078 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3080 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3056, %3079 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3077 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1566 = tensor.extract_slice %3056[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1567 = tensor.extract_slice %3056[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %3081 = tensor.empty() : tensor<1x32x80x64xf32>
    %3082 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1567 : tensor<1x32x80x64xf32>) outs(%3081 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %3083 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1568 = tensor.insert_slice %3082 into %3083[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1569 = tensor.insert_slice %extracted_slice_1566 into %inserted_slice_1568[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %3084 = tensor.empty() : tensor<1x32x80x128xf32>
    %3085 = tensor.empty() : tensor<1x32x80x128xf32>
    %3086 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3076 : tensor<1x1x80x128xf32>) outs(%3085 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3087 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1569, %3086 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3084 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %3088 = "tosa.add"(%3080, %3087) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3089 = tensor.empty() : tensor<1x32x80x128xf32>
    %3090 = tensor.empty() : tensor<1x32x80x128xf32>
    %3091 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3073 : tensor<1x1x80x128xf32>) outs(%3090 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3092 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3059, %3091 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3089 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1570 = tensor.extract_slice %3059[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1571 = tensor.extract_slice %3059[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %3093 = tensor.empty() : tensor<1x32x80x64xf32>
    %3094 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1571 : tensor<1x32x80x64xf32>) outs(%3093 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %3095 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1572 = tensor.insert_slice %3094 into %3095[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1573 = tensor.insert_slice %extracted_slice_1570 into %inserted_slice_1572[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %3096 = tensor.empty() : tensor<1x32x80x128xf32>
    %3097 = tensor.empty() : tensor<1x32x80x128xf32>
    %3098 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3076 : tensor<1x1x80x128xf32>) outs(%3097 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3099 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1573, %3098 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3096 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %3100 = "tosa.add"(%3092, %3099) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3101 = tensor.empty() : tensor<1x32x128x80xf32>
    %3102 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3100 : tensor<1x32x80x128xf32>) outs(%3101 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %3103 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1574 = tensor.extract_slice %3088[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1575 = tensor.insert_slice %extracted_slice_1574 into %3103[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %3104 = "tosa.reshape"(%inserted_slice_1575) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %3105 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1576 = tensor.extract_slice %3102[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1577 = tensor.insert_slice %extracted_slice_1576 into %3105[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %3106 = "tosa.reshape"(%inserted_slice_1577) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %3107 = tensor.empty() : tensor<32x80x80xf32>
    %3108 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%3107 : tensor<32x80x80xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x80xf32>
    %3109 = linalg.batch_matmul ins(%3104, %3106 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%3108 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %3110 = "tosa.reshape"(%3109) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1578 = arith.constant 11.3137083 : f32
    %3111 = tensor.empty() : tensor<1x32x80x80xf32>
    %3112 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3110 : tensor<1x32x80x80xf32>) outs(%3111 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.divf %in, %cst_1578 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %3113 = "tosa.add"(%3112, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %3114 = tensor.empty() : tensor<1x32x80x1xf32>
    %3115 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3114 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %3116 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3113 : tensor<1x32x80x80xf32>) outs(%3114 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.maxf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %3117 = tensor.empty() : tensor<1x32x80x80xf32>
    %3118 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3113, %3116 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%3117 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.subf %in, %in_2002 : f32
      %4845 = math.exp %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<1x32x80x80xf32>
    %3119 = tensor.empty() : tensor<1x32x80x1xf32>
    %3120 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3119 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %3121 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3118 : tensor<1x32x80x80xf32>) outs(%3120 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.addf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %3122 = tensor.empty() : tensor<1x32x80x80xf32>
    %3123 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3118, %3121 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%3122 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.divf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %3124 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1579 = tensor.extract_slice %3123[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1580 = tensor.insert_slice %extracted_slice_1579 into %3124[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %3125 = "tosa.reshape"(%inserted_slice_1580) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %3126 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1581 = tensor.extract_slice %3062[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1582 = tensor.insert_slice %extracted_slice_1581 into %3126[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %3127 = "tosa.reshape"(%inserted_slice_1582) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %3128 = tensor.empty() : tensor<32x80x128xf32>
    %3129 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%3128 : tensor<32x80x128xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x128xf32>
    %3130 = linalg.batch_matmul ins(%3125, %3127 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%3129 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %3131 = "tosa.reshape"(%3130) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3132 = tensor.empty() : tensor<1x80x32x128xf32>
    %3133 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3131 : tensor<1x32x80x128xf32>) outs(%3132 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1583 = tensor.extract_slice %3133[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %3134 = "tosa.reshape"(%extracted_slice_1583) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %3135 = tensor.empty() : tensor<4096x4096xf32>
    %3136 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_352 : tensor<4096x4096xf32>) outs(%3135 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3137 = "tosa.reshape"(%3134) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1584 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %3138 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3137, %3136 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1584 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %3139 = "tosa.reshape"(%3138) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3140 = "tosa.add"(%3024, %3139) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %3141 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1585 = arith.constant 2 : i32
    %3142 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3140 : tensor<1x80x4096xf32>) outs(%3141 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1585 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1586 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %3143 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%3142 : tensor<1x80x4096xf32>) outs(%cst_1586 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1587 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %3144 = "tosa.add"(%3143, %cst_1587) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %3145 = tensor.empty() : tensor<1x80x1xf32>
    %3146 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3144 : tensor<1x80x1xf32>) outs(%3145 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %3147 = tensor.empty() : tensor<1x80x4096xf32>
    %3148 = tensor.empty() : tensor<1x80x4096xf32>
    %3149 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3146 : tensor<1x80x1xf32>) outs(%3148 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3150 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3140, %3149 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3147 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %3151 = tensor.empty() : tensor<1x80x4096xf32>
    %3152 = tensor.empty() : tensor<1x80x4096xf32>
    %3153 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_40 : tensor<4096xf32>) outs(%3152 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3154 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3153, %3150 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3151 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %3155 = tensor.empty() : tensor<4096x11008xf32>
    %3156 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_354 : tensor<11008x4096xf32>) outs(%3155 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3157 = "tosa.reshape"(%3154) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1588 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %3158 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3157, %3156 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1588 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %3159 = "tosa.reshape"(%3158) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %3160 = tensor.empty() : tensor<1x80x11008xf32>
    %3161 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3159 : tensor<1x80x11008xf32>) outs(%3160 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      %4845 = math.exp %4844 : f32
      %cst_2002 = arith.constant 1.000000e+00 : f32
      %4846 = arith.addf %cst_2002, %4845 : f32
      %4847 = arith.divf %in, %4846 : f32
      linalg.yield %4847 : f32
    } -> tensor<1x80x11008xf32>
    %3162 = tensor.empty() : tensor<4096x11008xf32>
    %3163 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_356 : tensor<11008x4096xf32>) outs(%3162 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3164 = "tosa.reshape"(%3154) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1589 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %3165 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3164, %3163 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1589 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %3166 = "tosa.reshape"(%3165) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %3167 = tensor.empty() : tensor<1x80x11008xf32>
    %3168 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3161, %3166 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%3167 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x11008xf32>
    %3169 = tensor.empty() : tensor<11008x4096xf32>
    %3170 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_358 : tensor<4096x11008xf32>) outs(%3169 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %3171 = "tosa.reshape"(%3168) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %cst_1590 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %3172 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3171, %3170 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%cst_1590 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %3173 = "tosa.reshape"(%3172) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3174 = "tosa.add"(%3140, %3173) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %3175 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1591 = arith.constant 2 : i32
    %3176 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3174 : tensor<1x80x4096xf32>) outs(%3175 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1591 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1592 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %3177 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%3176 : tensor<1x80x4096xf32>) outs(%cst_1592 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1593 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %3178 = "tosa.add"(%3177, %cst_1593) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %3179 = tensor.empty() : tensor<1x80x1xf32>
    %3180 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3178 : tensor<1x80x1xf32>) outs(%3179 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %3181 = tensor.empty() : tensor<1x80x4096xf32>
    %3182 = tensor.empty() : tensor<1x80x4096xf32>
    %3183 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3180 : tensor<1x80x1xf32>) outs(%3182 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3184 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3174, %3183 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3181 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %3185 = tensor.empty() : tensor<1x80x4096xf32>
    %3186 = tensor.empty() : tensor<1x80x4096xf32>
    %3187 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_41 : tensor<4096xf32>) outs(%3186 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3188 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3187, %3184 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3185 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %3189 = tensor.empty() : tensor<4096x4096xf32>
    %3190 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_360 : tensor<4096x4096xf32>) outs(%3189 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3191 = "tosa.reshape"(%3188) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1594 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %3192 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3191, %3190 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1594 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %3193 = "tosa.reshape"(%3192) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3194 = tensor.empty() : tensor<4096x4096xf32>
    %3195 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_362 : tensor<4096x4096xf32>) outs(%3194 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3196 = "tosa.reshape"(%3188) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1595 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %3197 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3196, %3195 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1595 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %3198 = "tosa.reshape"(%3197) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3199 = tensor.empty() : tensor<4096x4096xf32>
    %3200 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_364 : tensor<4096x4096xf32>) outs(%3199 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3201 = "tosa.reshape"(%3188) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1596 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %3202 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3201, %3200 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1596 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %3203 = "tosa.reshape"(%3202) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3204 = "tosa.reshape"(%3193) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3205 = tensor.empty() : tensor<1x32x80x128xf32>
    %3206 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3204 : tensor<1x80x32x128xf32>) outs(%3205 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3207 = "tosa.reshape"(%3198) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3208 = tensor.empty() : tensor<1x32x80x128xf32>
    %3209 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3207 : tensor<1x80x32x128xf32>) outs(%3208 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3210 = "tosa.reshape"(%3203) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3211 = tensor.empty() : tensor<1x32x80x128xf32>
    %3212 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3210 : tensor<1x80x32x128xf32>) outs(%3211 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1597 = tensor.extract_slice %expanded_600[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1598 = tensor.extract_slice %extracted_slice_1597[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1599 = tensor.extract_slice %extracted_slice_1598[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1600 = tensor.extract_slice %expanded_602[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1601 = tensor.extract_slice %extracted_slice_1600[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1602 = tensor.extract_slice %extracted_slice_1601[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %3213 = tensor.empty() : tensor<1x80x128xf32>
    %3214 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1599 : tensor<1x1x80x128xf32>) outs(%3213 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %3215 = tensor.empty() : tensor<80x128xf32>
    %3216 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%3214 : tensor<1x80x128xf32>) outs(%3215 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %3217 = tensor.empty() : tensor<1x80x128xf32>
    %3218 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1602 : tensor<1x1x80x128xf32>) outs(%3217 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %3219 = tensor.empty() : tensor<80x128xf32>
    %3220 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%3218 : tensor<1x80x128xf32>) outs(%3219 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %3221 = tensor.empty() : tensor<1x80x128xf32>
    %3222 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%3221 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %3216[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %3223 = "tosa.reshape"(%3222) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %3224 = tensor.empty() : tensor<1x80x128xf32>
    %3225 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%3224 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %3220[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %3226 = "tosa.reshape"(%3225) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %3227 = tensor.empty() : tensor<1x32x80x128xf32>
    %3228 = tensor.empty() : tensor<1x32x80x128xf32>
    %3229 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3223 : tensor<1x1x80x128xf32>) outs(%3228 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3230 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3206, %3229 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3227 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1603 = tensor.extract_slice %3206[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1604 = tensor.extract_slice %3206[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %3231 = tensor.empty() : tensor<1x32x80x64xf32>
    %3232 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1604 : tensor<1x32x80x64xf32>) outs(%3231 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %3233 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1605 = tensor.insert_slice %3232 into %3233[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1606 = tensor.insert_slice %extracted_slice_1603 into %inserted_slice_1605[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %3234 = tensor.empty() : tensor<1x32x80x128xf32>
    %3235 = tensor.empty() : tensor<1x32x80x128xf32>
    %3236 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3226 : tensor<1x1x80x128xf32>) outs(%3235 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3237 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1606, %3236 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3234 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %3238 = "tosa.add"(%3230, %3237) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3239 = tensor.empty() : tensor<1x32x80x128xf32>
    %3240 = tensor.empty() : tensor<1x32x80x128xf32>
    %3241 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3223 : tensor<1x1x80x128xf32>) outs(%3240 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3242 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3209, %3241 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3239 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1607 = tensor.extract_slice %3209[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1608 = tensor.extract_slice %3209[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %3243 = tensor.empty() : tensor<1x32x80x64xf32>
    %3244 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1608 : tensor<1x32x80x64xf32>) outs(%3243 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %3245 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1609 = tensor.insert_slice %3244 into %3245[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1610 = tensor.insert_slice %extracted_slice_1607 into %inserted_slice_1609[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %3246 = tensor.empty() : tensor<1x32x80x128xf32>
    %3247 = tensor.empty() : tensor<1x32x80x128xf32>
    %3248 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3226 : tensor<1x1x80x128xf32>) outs(%3247 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3249 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1610, %3248 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3246 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %3250 = "tosa.add"(%3242, %3249) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3251 = tensor.empty() : tensor<1x32x128x80xf32>
    %3252 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3250 : tensor<1x32x80x128xf32>) outs(%3251 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %3253 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1611 = tensor.extract_slice %3238[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1612 = tensor.insert_slice %extracted_slice_1611 into %3253[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %3254 = "tosa.reshape"(%inserted_slice_1612) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %3255 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1613 = tensor.extract_slice %3252[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1614 = tensor.insert_slice %extracted_slice_1613 into %3255[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %3256 = "tosa.reshape"(%inserted_slice_1614) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %3257 = tensor.empty() : tensor<32x80x80xf32>
    %3258 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%3257 : tensor<32x80x80xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x80xf32>
    %3259 = linalg.batch_matmul ins(%3254, %3256 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%3258 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %3260 = "tosa.reshape"(%3259) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1615 = arith.constant 11.3137083 : f32
    %3261 = tensor.empty() : tensor<1x32x80x80xf32>
    %3262 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3260 : tensor<1x32x80x80xf32>) outs(%3261 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.divf %in, %cst_1615 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %3263 = "tosa.add"(%3262, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %3264 = tensor.empty() : tensor<1x32x80x1xf32>
    %3265 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3264 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %3266 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3263 : tensor<1x32x80x80xf32>) outs(%3264 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.maxf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %3267 = tensor.empty() : tensor<1x32x80x80xf32>
    %3268 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3263, %3266 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%3267 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.subf %in, %in_2002 : f32
      %4845 = math.exp %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<1x32x80x80xf32>
    %3269 = tensor.empty() : tensor<1x32x80x1xf32>
    %3270 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3269 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %3271 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3268 : tensor<1x32x80x80xf32>) outs(%3270 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.addf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %3272 = tensor.empty() : tensor<1x32x80x80xf32>
    %3273 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3268, %3271 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%3272 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.divf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %3274 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1616 = tensor.extract_slice %3273[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1617 = tensor.insert_slice %extracted_slice_1616 into %3274[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %3275 = "tosa.reshape"(%inserted_slice_1617) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %3276 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1618 = tensor.extract_slice %3212[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1619 = tensor.insert_slice %extracted_slice_1618 into %3276[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %3277 = "tosa.reshape"(%inserted_slice_1619) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %3278 = tensor.empty() : tensor<32x80x128xf32>
    %3279 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%3278 : tensor<32x80x128xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x128xf32>
    %3280 = linalg.batch_matmul ins(%3275, %3277 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%3279 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %3281 = "tosa.reshape"(%3280) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3282 = tensor.empty() : tensor<1x80x32x128xf32>
    %3283 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3281 : tensor<1x32x80x128xf32>) outs(%3282 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1620 = tensor.extract_slice %3283[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %3284 = "tosa.reshape"(%extracted_slice_1620) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %3285 = tensor.empty() : tensor<4096x4096xf32>
    %3286 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_366 : tensor<4096x4096xf32>) outs(%3285 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3287 = "tosa.reshape"(%3284) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1621 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %3288 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3287, %3286 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1621 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %3289 = "tosa.reshape"(%3288) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3290 = "tosa.add"(%3174, %3289) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %3291 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1622 = arith.constant 2 : i32
    %3292 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3290 : tensor<1x80x4096xf32>) outs(%3291 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1622 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1623 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %3293 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%3292 : tensor<1x80x4096xf32>) outs(%cst_1623 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1624 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %3294 = "tosa.add"(%3293, %cst_1624) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %3295 = tensor.empty() : tensor<1x80x1xf32>
    %3296 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3294 : tensor<1x80x1xf32>) outs(%3295 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %3297 = tensor.empty() : tensor<1x80x4096xf32>
    %3298 = tensor.empty() : tensor<1x80x4096xf32>
    %3299 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3296 : tensor<1x80x1xf32>) outs(%3298 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3300 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3290, %3299 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3297 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %3301 = tensor.empty() : tensor<1x80x4096xf32>
    %3302 = tensor.empty() : tensor<1x80x4096xf32>
    %3303 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_42 : tensor<4096xf32>) outs(%3302 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3304 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3303, %3300 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3301 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %3305 = tensor.empty() : tensor<4096x11008xf32>
    %3306 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_368 : tensor<11008x4096xf32>) outs(%3305 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3307 = "tosa.reshape"(%3304) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1625 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %3308 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3307, %3306 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1625 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %3309 = "tosa.reshape"(%3308) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %3310 = tensor.empty() : tensor<1x80x11008xf32>
    %3311 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3309 : tensor<1x80x11008xf32>) outs(%3310 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      %4845 = math.exp %4844 : f32
      %cst_2002 = arith.constant 1.000000e+00 : f32
      %4846 = arith.addf %cst_2002, %4845 : f32
      %4847 = arith.divf %in, %4846 : f32
      linalg.yield %4847 : f32
    } -> tensor<1x80x11008xf32>
    %3312 = tensor.empty() : tensor<4096x11008xf32>
    %3313 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_370 : tensor<11008x4096xf32>) outs(%3312 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3314 = "tosa.reshape"(%3304) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1626 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %3315 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3314, %3313 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1626 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %3316 = "tosa.reshape"(%3315) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %3317 = tensor.empty() : tensor<1x80x11008xf32>
    %3318 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3311, %3316 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%3317 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x11008xf32>
    %3319 = tensor.empty() : tensor<11008x4096xf32>
    %3320 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_372 : tensor<4096x11008xf32>) outs(%3319 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %3321 = "tosa.reshape"(%3318) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %cst_1627 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %3322 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3321, %3320 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%cst_1627 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %3323 = "tosa.reshape"(%3322) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3324 = "tosa.add"(%3290, %3323) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %3325 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1628 = arith.constant 2 : i32
    %3326 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3324 : tensor<1x80x4096xf32>) outs(%3325 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1628 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1629 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %3327 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%3326 : tensor<1x80x4096xf32>) outs(%cst_1629 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1630 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %3328 = "tosa.add"(%3327, %cst_1630) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %3329 = tensor.empty() : tensor<1x80x1xf32>
    %3330 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3328 : tensor<1x80x1xf32>) outs(%3329 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %3331 = tensor.empty() : tensor<1x80x4096xf32>
    %3332 = tensor.empty() : tensor<1x80x4096xf32>
    %3333 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3330 : tensor<1x80x1xf32>) outs(%3332 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3334 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3324, %3333 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3331 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %3335 = tensor.empty() : tensor<1x80x4096xf32>
    %3336 = tensor.empty() : tensor<1x80x4096xf32>
    %3337 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_43 : tensor<4096xf32>) outs(%3336 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3338 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3337, %3334 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3335 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %3339 = tensor.empty() : tensor<4096x4096xf32>
    %3340 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_374 : tensor<4096x4096xf32>) outs(%3339 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3341 = "tosa.reshape"(%3338) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1631 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %3342 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3341, %3340 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1631 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %3343 = "tosa.reshape"(%3342) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3344 = tensor.empty() : tensor<4096x4096xf32>
    %3345 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_376 : tensor<4096x4096xf32>) outs(%3344 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3346 = "tosa.reshape"(%3338) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1632 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %3347 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3346, %3345 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1632 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %3348 = "tosa.reshape"(%3347) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3349 = tensor.empty() : tensor<4096x4096xf32>
    %3350 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_378 : tensor<4096x4096xf32>) outs(%3349 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3351 = "tosa.reshape"(%3338) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1633 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %3352 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3351, %3350 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1633 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %3353 = "tosa.reshape"(%3352) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3354 = "tosa.reshape"(%3343) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3355 = tensor.empty() : tensor<1x32x80x128xf32>
    %3356 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3354 : tensor<1x80x32x128xf32>) outs(%3355 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3357 = "tosa.reshape"(%3348) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3358 = tensor.empty() : tensor<1x32x80x128xf32>
    %3359 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3357 : tensor<1x80x32x128xf32>) outs(%3358 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3360 = "tosa.reshape"(%3353) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3361 = tensor.empty() : tensor<1x32x80x128xf32>
    %3362 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3360 : tensor<1x80x32x128xf32>) outs(%3361 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1634 = tensor.extract_slice %expanded_604[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1635 = tensor.extract_slice %extracted_slice_1634[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1636 = tensor.extract_slice %extracted_slice_1635[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1637 = tensor.extract_slice %expanded_606[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1638 = tensor.extract_slice %extracted_slice_1637[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1639 = tensor.extract_slice %extracted_slice_1638[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %3363 = tensor.empty() : tensor<1x80x128xf32>
    %3364 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1636 : tensor<1x1x80x128xf32>) outs(%3363 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %3365 = tensor.empty() : tensor<80x128xf32>
    %3366 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%3364 : tensor<1x80x128xf32>) outs(%3365 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %3367 = tensor.empty() : tensor<1x80x128xf32>
    %3368 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1639 : tensor<1x1x80x128xf32>) outs(%3367 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %3369 = tensor.empty() : tensor<80x128xf32>
    %3370 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%3368 : tensor<1x80x128xf32>) outs(%3369 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %3371 = tensor.empty() : tensor<1x80x128xf32>
    %3372 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%3371 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %3366[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %3373 = "tosa.reshape"(%3372) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %3374 = tensor.empty() : tensor<1x80x128xf32>
    %3375 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%3374 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %3370[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %3376 = "tosa.reshape"(%3375) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %3377 = tensor.empty() : tensor<1x32x80x128xf32>
    %3378 = tensor.empty() : tensor<1x32x80x128xf32>
    %3379 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3373 : tensor<1x1x80x128xf32>) outs(%3378 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3380 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3356, %3379 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3377 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1640 = tensor.extract_slice %3356[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1641 = tensor.extract_slice %3356[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %3381 = tensor.empty() : tensor<1x32x80x64xf32>
    %3382 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1641 : tensor<1x32x80x64xf32>) outs(%3381 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %3383 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1642 = tensor.insert_slice %3382 into %3383[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1643 = tensor.insert_slice %extracted_slice_1640 into %inserted_slice_1642[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %3384 = tensor.empty() : tensor<1x32x80x128xf32>
    %3385 = tensor.empty() : tensor<1x32x80x128xf32>
    %3386 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3376 : tensor<1x1x80x128xf32>) outs(%3385 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3387 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1643, %3386 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3384 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %3388 = "tosa.add"(%3380, %3387) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3389 = tensor.empty() : tensor<1x32x80x128xf32>
    %3390 = tensor.empty() : tensor<1x32x80x128xf32>
    %3391 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3373 : tensor<1x1x80x128xf32>) outs(%3390 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3392 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3359, %3391 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3389 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1644 = tensor.extract_slice %3359[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1645 = tensor.extract_slice %3359[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %3393 = tensor.empty() : tensor<1x32x80x64xf32>
    %3394 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1645 : tensor<1x32x80x64xf32>) outs(%3393 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %3395 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1646 = tensor.insert_slice %3394 into %3395[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1647 = tensor.insert_slice %extracted_slice_1644 into %inserted_slice_1646[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %3396 = tensor.empty() : tensor<1x32x80x128xf32>
    %3397 = tensor.empty() : tensor<1x32x80x128xf32>
    %3398 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3376 : tensor<1x1x80x128xf32>) outs(%3397 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3399 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1647, %3398 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3396 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %3400 = "tosa.add"(%3392, %3399) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3401 = tensor.empty() : tensor<1x32x128x80xf32>
    %3402 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3400 : tensor<1x32x80x128xf32>) outs(%3401 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %3403 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1648 = tensor.extract_slice %3388[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1649 = tensor.insert_slice %extracted_slice_1648 into %3403[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %3404 = "tosa.reshape"(%inserted_slice_1649) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %3405 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1650 = tensor.extract_slice %3402[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1651 = tensor.insert_slice %extracted_slice_1650 into %3405[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %3406 = "tosa.reshape"(%inserted_slice_1651) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %3407 = tensor.empty() : tensor<32x80x80xf32>
    %3408 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%3407 : tensor<32x80x80xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x80xf32>
    %3409 = linalg.batch_matmul ins(%3404, %3406 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%3408 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %3410 = "tosa.reshape"(%3409) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1652 = arith.constant 11.3137083 : f32
    %3411 = tensor.empty() : tensor<1x32x80x80xf32>
    %3412 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3410 : tensor<1x32x80x80xf32>) outs(%3411 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.divf %in, %cst_1652 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %3413 = "tosa.add"(%3412, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %3414 = tensor.empty() : tensor<1x32x80x1xf32>
    %3415 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3414 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %3416 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3413 : tensor<1x32x80x80xf32>) outs(%3414 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.maxf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %3417 = tensor.empty() : tensor<1x32x80x80xf32>
    %3418 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3413, %3416 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%3417 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.subf %in, %in_2002 : f32
      %4845 = math.exp %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<1x32x80x80xf32>
    %3419 = tensor.empty() : tensor<1x32x80x1xf32>
    %3420 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3419 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %3421 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3418 : tensor<1x32x80x80xf32>) outs(%3420 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.addf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %3422 = tensor.empty() : tensor<1x32x80x80xf32>
    %3423 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3418, %3421 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%3422 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.divf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %3424 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1653 = tensor.extract_slice %3423[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1654 = tensor.insert_slice %extracted_slice_1653 into %3424[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %3425 = "tosa.reshape"(%inserted_slice_1654) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %3426 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1655 = tensor.extract_slice %3362[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1656 = tensor.insert_slice %extracted_slice_1655 into %3426[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %3427 = "tosa.reshape"(%inserted_slice_1656) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %3428 = tensor.empty() : tensor<32x80x128xf32>
    %3429 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%3428 : tensor<32x80x128xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x128xf32>
    %3430 = linalg.batch_matmul ins(%3425, %3427 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%3429 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %3431 = "tosa.reshape"(%3430) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3432 = tensor.empty() : tensor<1x80x32x128xf32>
    %3433 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3431 : tensor<1x32x80x128xf32>) outs(%3432 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1657 = tensor.extract_slice %3433[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %3434 = "tosa.reshape"(%extracted_slice_1657) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %3435 = tensor.empty() : tensor<4096x4096xf32>
    %3436 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_380 : tensor<4096x4096xf32>) outs(%3435 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3437 = "tosa.reshape"(%3434) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1658 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %3438 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3437, %3436 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1658 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %3439 = "tosa.reshape"(%3438) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3440 = "tosa.add"(%3324, %3439) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %3441 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1659 = arith.constant 2 : i32
    %3442 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3440 : tensor<1x80x4096xf32>) outs(%3441 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1659 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1660 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %3443 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%3442 : tensor<1x80x4096xf32>) outs(%cst_1660 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1661 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %3444 = "tosa.add"(%3443, %cst_1661) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %3445 = tensor.empty() : tensor<1x80x1xf32>
    %3446 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3444 : tensor<1x80x1xf32>) outs(%3445 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %3447 = tensor.empty() : tensor<1x80x4096xf32>
    %3448 = tensor.empty() : tensor<1x80x4096xf32>
    %3449 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3446 : tensor<1x80x1xf32>) outs(%3448 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3450 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3440, %3449 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3447 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %3451 = tensor.empty() : tensor<1x80x4096xf32>
    %3452 = tensor.empty() : tensor<1x80x4096xf32>
    %3453 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_44 : tensor<4096xf32>) outs(%3452 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3454 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3453, %3450 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3451 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %3455 = tensor.empty() : tensor<4096x11008xf32>
    %3456 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_382 : tensor<11008x4096xf32>) outs(%3455 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3457 = "tosa.reshape"(%3454) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1662 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %3458 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3457, %3456 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1662 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %3459 = "tosa.reshape"(%3458) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %3460 = tensor.empty() : tensor<1x80x11008xf32>
    %3461 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3459 : tensor<1x80x11008xf32>) outs(%3460 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      %4845 = math.exp %4844 : f32
      %cst_2002 = arith.constant 1.000000e+00 : f32
      %4846 = arith.addf %cst_2002, %4845 : f32
      %4847 = arith.divf %in, %4846 : f32
      linalg.yield %4847 : f32
    } -> tensor<1x80x11008xf32>
    %3462 = tensor.empty() : tensor<4096x11008xf32>
    %3463 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_384 : tensor<11008x4096xf32>) outs(%3462 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3464 = "tosa.reshape"(%3454) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1663 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %3465 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3464, %3463 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1663 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %3466 = "tosa.reshape"(%3465) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %3467 = tensor.empty() : tensor<1x80x11008xf32>
    %3468 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3461, %3466 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%3467 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x11008xf32>
    %3469 = tensor.empty() : tensor<11008x4096xf32>
    %3470 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_386 : tensor<4096x11008xf32>) outs(%3469 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %3471 = "tosa.reshape"(%3468) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %cst_1664 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %3472 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3471, %3470 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%cst_1664 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %3473 = "tosa.reshape"(%3472) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3474 = "tosa.add"(%3440, %3473) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %3475 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1665 = arith.constant 2 : i32
    %3476 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3474 : tensor<1x80x4096xf32>) outs(%3475 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1665 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1666 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %3477 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%3476 : tensor<1x80x4096xf32>) outs(%cst_1666 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1667 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %3478 = "tosa.add"(%3477, %cst_1667) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %3479 = tensor.empty() : tensor<1x80x1xf32>
    %3480 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3478 : tensor<1x80x1xf32>) outs(%3479 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %3481 = tensor.empty() : tensor<1x80x4096xf32>
    %3482 = tensor.empty() : tensor<1x80x4096xf32>
    %3483 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3480 : tensor<1x80x1xf32>) outs(%3482 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3484 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3474, %3483 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3481 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %3485 = tensor.empty() : tensor<1x80x4096xf32>
    %3486 = tensor.empty() : tensor<1x80x4096xf32>
    %3487 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_45 : tensor<4096xf32>) outs(%3486 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3488 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3487, %3484 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3485 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %3489 = tensor.empty() : tensor<4096x4096xf32>
    %3490 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_388 : tensor<4096x4096xf32>) outs(%3489 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3491 = "tosa.reshape"(%3488) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1668 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %3492 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3491, %3490 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1668 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %3493 = "tosa.reshape"(%3492) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3494 = tensor.empty() : tensor<4096x4096xf32>
    %3495 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_390 : tensor<4096x4096xf32>) outs(%3494 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3496 = "tosa.reshape"(%3488) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1669 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %3497 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3496, %3495 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1669 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %3498 = "tosa.reshape"(%3497) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3499 = tensor.empty() : tensor<4096x4096xf32>
    %3500 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_392 : tensor<4096x4096xf32>) outs(%3499 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3501 = "tosa.reshape"(%3488) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1670 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %3502 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3501, %3500 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1670 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %3503 = "tosa.reshape"(%3502) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3504 = "tosa.reshape"(%3493) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3505 = tensor.empty() : tensor<1x32x80x128xf32>
    %3506 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3504 : tensor<1x80x32x128xf32>) outs(%3505 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3507 = "tosa.reshape"(%3498) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3508 = tensor.empty() : tensor<1x32x80x128xf32>
    %3509 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3507 : tensor<1x80x32x128xf32>) outs(%3508 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3510 = "tosa.reshape"(%3503) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3511 = tensor.empty() : tensor<1x32x80x128xf32>
    %3512 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3510 : tensor<1x80x32x128xf32>) outs(%3511 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1671 = tensor.extract_slice %expanded_608[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1672 = tensor.extract_slice %extracted_slice_1671[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1673 = tensor.extract_slice %extracted_slice_1672[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1674 = tensor.extract_slice %expanded_610[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1675 = tensor.extract_slice %extracted_slice_1674[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1676 = tensor.extract_slice %extracted_slice_1675[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %3513 = tensor.empty() : tensor<1x80x128xf32>
    %3514 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1673 : tensor<1x1x80x128xf32>) outs(%3513 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %3515 = tensor.empty() : tensor<80x128xf32>
    %3516 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%3514 : tensor<1x80x128xf32>) outs(%3515 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %3517 = tensor.empty() : tensor<1x80x128xf32>
    %3518 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1676 : tensor<1x1x80x128xf32>) outs(%3517 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %3519 = tensor.empty() : tensor<80x128xf32>
    %3520 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%3518 : tensor<1x80x128xf32>) outs(%3519 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %3521 = tensor.empty() : tensor<1x80x128xf32>
    %3522 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%3521 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %3516[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %3523 = "tosa.reshape"(%3522) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %3524 = tensor.empty() : tensor<1x80x128xf32>
    %3525 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%3524 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %3520[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %3526 = "tosa.reshape"(%3525) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %3527 = tensor.empty() : tensor<1x32x80x128xf32>
    %3528 = tensor.empty() : tensor<1x32x80x128xf32>
    %3529 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3523 : tensor<1x1x80x128xf32>) outs(%3528 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3530 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3506, %3529 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3527 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1677 = tensor.extract_slice %3506[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1678 = tensor.extract_slice %3506[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %3531 = tensor.empty() : tensor<1x32x80x64xf32>
    %3532 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1678 : tensor<1x32x80x64xf32>) outs(%3531 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %3533 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1679 = tensor.insert_slice %3532 into %3533[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1680 = tensor.insert_slice %extracted_slice_1677 into %inserted_slice_1679[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %3534 = tensor.empty() : tensor<1x32x80x128xf32>
    %3535 = tensor.empty() : tensor<1x32x80x128xf32>
    %3536 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3526 : tensor<1x1x80x128xf32>) outs(%3535 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3537 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1680, %3536 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3534 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %3538 = "tosa.add"(%3530, %3537) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3539 = tensor.empty() : tensor<1x32x80x128xf32>
    %3540 = tensor.empty() : tensor<1x32x80x128xf32>
    %3541 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3523 : tensor<1x1x80x128xf32>) outs(%3540 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3542 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3509, %3541 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3539 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1681 = tensor.extract_slice %3509[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1682 = tensor.extract_slice %3509[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %3543 = tensor.empty() : tensor<1x32x80x64xf32>
    %3544 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1682 : tensor<1x32x80x64xf32>) outs(%3543 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %3545 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1683 = tensor.insert_slice %3544 into %3545[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1684 = tensor.insert_slice %extracted_slice_1681 into %inserted_slice_1683[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %3546 = tensor.empty() : tensor<1x32x80x128xf32>
    %3547 = tensor.empty() : tensor<1x32x80x128xf32>
    %3548 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3526 : tensor<1x1x80x128xf32>) outs(%3547 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3549 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1684, %3548 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3546 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %3550 = "tosa.add"(%3542, %3549) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3551 = tensor.empty() : tensor<1x32x128x80xf32>
    %3552 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3550 : tensor<1x32x80x128xf32>) outs(%3551 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %3553 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1685 = tensor.extract_slice %3538[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1686 = tensor.insert_slice %extracted_slice_1685 into %3553[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %3554 = "tosa.reshape"(%inserted_slice_1686) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %3555 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1687 = tensor.extract_slice %3552[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1688 = tensor.insert_slice %extracted_slice_1687 into %3555[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %3556 = "tosa.reshape"(%inserted_slice_1688) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %3557 = tensor.empty() : tensor<32x80x80xf32>
    %3558 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%3557 : tensor<32x80x80xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x80xf32>
    %3559 = linalg.batch_matmul ins(%3554, %3556 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%3558 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %3560 = "tosa.reshape"(%3559) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1689 = arith.constant 11.3137083 : f32
    %3561 = tensor.empty() : tensor<1x32x80x80xf32>
    %3562 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3560 : tensor<1x32x80x80xf32>) outs(%3561 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.divf %in, %cst_1689 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %3563 = "tosa.add"(%3562, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %3564 = tensor.empty() : tensor<1x32x80x1xf32>
    %3565 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3564 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %3566 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3563 : tensor<1x32x80x80xf32>) outs(%3564 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.maxf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %3567 = tensor.empty() : tensor<1x32x80x80xf32>
    %3568 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3563, %3566 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%3567 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.subf %in, %in_2002 : f32
      %4845 = math.exp %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<1x32x80x80xf32>
    %3569 = tensor.empty() : tensor<1x32x80x1xf32>
    %3570 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3569 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %3571 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3568 : tensor<1x32x80x80xf32>) outs(%3570 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.addf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %3572 = tensor.empty() : tensor<1x32x80x80xf32>
    %3573 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3568, %3571 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%3572 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.divf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %3574 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1690 = tensor.extract_slice %3573[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1691 = tensor.insert_slice %extracted_slice_1690 into %3574[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %3575 = "tosa.reshape"(%inserted_slice_1691) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %3576 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1692 = tensor.extract_slice %3512[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1693 = tensor.insert_slice %extracted_slice_1692 into %3576[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %3577 = "tosa.reshape"(%inserted_slice_1693) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %3578 = tensor.empty() : tensor<32x80x128xf32>
    %3579 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%3578 : tensor<32x80x128xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x128xf32>
    %3580 = linalg.batch_matmul ins(%3575, %3577 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%3579 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %3581 = "tosa.reshape"(%3580) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3582 = tensor.empty() : tensor<1x80x32x128xf32>
    %3583 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3581 : tensor<1x32x80x128xf32>) outs(%3582 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1694 = tensor.extract_slice %3583[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %3584 = "tosa.reshape"(%extracted_slice_1694) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %3585 = tensor.empty() : tensor<4096x4096xf32>
    %3586 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_394 : tensor<4096x4096xf32>) outs(%3585 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3587 = "tosa.reshape"(%3584) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1695 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %3588 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3587, %3586 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1695 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %3589 = "tosa.reshape"(%3588) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3590 = "tosa.add"(%3474, %3589) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %3591 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1696 = arith.constant 2 : i32
    %3592 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3590 : tensor<1x80x4096xf32>) outs(%3591 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1696 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1697 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %3593 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%3592 : tensor<1x80x4096xf32>) outs(%cst_1697 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1698 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %3594 = "tosa.add"(%3593, %cst_1698) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %3595 = tensor.empty() : tensor<1x80x1xf32>
    %3596 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3594 : tensor<1x80x1xf32>) outs(%3595 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %3597 = tensor.empty() : tensor<1x80x4096xf32>
    %3598 = tensor.empty() : tensor<1x80x4096xf32>
    %3599 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3596 : tensor<1x80x1xf32>) outs(%3598 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3600 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3590, %3599 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3597 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %3601 = tensor.empty() : tensor<1x80x4096xf32>
    %3602 = tensor.empty() : tensor<1x80x4096xf32>
    %3603 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_46 : tensor<4096xf32>) outs(%3602 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3604 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3603, %3600 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3601 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %3605 = tensor.empty() : tensor<4096x11008xf32>
    %3606 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_396 : tensor<11008x4096xf32>) outs(%3605 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3607 = "tosa.reshape"(%3604) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1699 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %3608 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3607, %3606 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1699 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %3609 = "tosa.reshape"(%3608) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %3610 = tensor.empty() : tensor<1x80x11008xf32>
    %3611 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3609 : tensor<1x80x11008xf32>) outs(%3610 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      %4845 = math.exp %4844 : f32
      %cst_2002 = arith.constant 1.000000e+00 : f32
      %4846 = arith.addf %cst_2002, %4845 : f32
      %4847 = arith.divf %in, %4846 : f32
      linalg.yield %4847 : f32
    } -> tensor<1x80x11008xf32>
    %3612 = tensor.empty() : tensor<4096x11008xf32>
    %3613 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_398 : tensor<11008x4096xf32>) outs(%3612 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3614 = "tosa.reshape"(%3604) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1700 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %3615 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3614, %3613 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1700 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %3616 = "tosa.reshape"(%3615) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %3617 = tensor.empty() : tensor<1x80x11008xf32>
    %3618 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3611, %3616 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%3617 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x11008xf32>
    %3619 = tensor.empty() : tensor<11008x4096xf32>
    %3620 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_400 : tensor<4096x11008xf32>) outs(%3619 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %3621 = "tosa.reshape"(%3618) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %cst_1701 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %3622 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3621, %3620 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%cst_1701 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %3623 = "tosa.reshape"(%3622) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3624 = "tosa.add"(%3590, %3623) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %3625 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1702 = arith.constant 2 : i32
    %3626 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3624 : tensor<1x80x4096xf32>) outs(%3625 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1702 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1703 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %3627 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%3626 : tensor<1x80x4096xf32>) outs(%cst_1703 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1704 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %3628 = "tosa.add"(%3627, %cst_1704) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %3629 = tensor.empty() : tensor<1x80x1xf32>
    %3630 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3628 : tensor<1x80x1xf32>) outs(%3629 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %3631 = tensor.empty() : tensor<1x80x4096xf32>
    %3632 = tensor.empty() : tensor<1x80x4096xf32>
    %3633 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3630 : tensor<1x80x1xf32>) outs(%3632 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3634 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3624, %3633 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3631 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %3635 = tensor.empty() : tensor<1x80x4096xf32>
    %3636 = tensor.empty() : tensor<1x80x4096xf32>
    %3637 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_47 : tensor<4096xf32>) outs(%3636 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3638 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3637, %3634 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3635 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %3639 = tensor.empty() : tensor<4096x4096xf32>
    %3640 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_402 : tensor<4096x4096xf32>) outs(%3639 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3641 = "tosa.reshape"(%3638) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1705 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %3642 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3641, %3640 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1705 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %3643 = "tosa.reshape"(%3642) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3644 = tensor.empty() : tensor<4096x4096xf32>
    %3645 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_404 : tensor<4096x4096xf32>) outs(%3644 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3646 = "tosa.reshape"(%3638) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1706 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %3647 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3646, %3645 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1706 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %3648 = "tosa.reshape"(%3647) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3649 = tensor.empty() : tensor<4096x4096xf32>
    %3650 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_406 : tensor<4096x4096xf32>) outs(%3649 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3651 = "tosa.reshape"(%3638) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1707 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %3652 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3651, %3650 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1707 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %3653 = "tosa.reshape"(%3652) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3654 = "tosa.reshape"(%3643) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3655 = tensor.empty() : tensor<1x32x80x128xf32>
    %3656 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3654 : tensor<1x80x32x128xf32>) outs(%3655 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3657 = "tosa.reshape"(%3648) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3658 = tensor.empty() : tensor<1x32x80x128xf32>
    %3659 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3657 : tensor<1x80x32x128xf32>) outs(%3658 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3660 = "tosa.reshape"(%3653) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3661 = tensor.empty() : tensor<1x32x80x128xf32>
    %3662 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3660 : tensor<1x80x32x128xf32>) outs(%3661 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1708 = tensor.extract_slice %expanded_612[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1709 = tensor.extract_slice %extracted_slice_1708[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1710 = tensor.extract_slice %extracted_slice_1709[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1711 = tensor.extract_slice %expanded_614[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1712 = tensor.extract_slice %extracted_slice_1711[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1713 = tensor.extract_slice %extracted_slice_1712[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %3663 = tensor.empty() : tensor<1x80x128xf32>
    %3664 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1710 : tensor<1x1x80x128xf32>) outs(%3663 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %3665 = tensor.empty() : tensor<80x128xf32>
    %3666 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%3664 : tensor<1x80x128xf32>) outs(%3665 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %3667 = tensor.empty() : tensor<1x80x128xf32>
    %3668 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1713 : tensor<1x1x80x128xf32>) outs(%3667 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %3669 = tensor.empty() : tensor<80x128xf32>
    %3670 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%3668 : tensor<1x80x128xf32>) outs(%3669 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %3671 = tensor.empty() : tensor<1x80x128xf32>
    %3672 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%3671 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %3666[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %3673 = "tosa.reshape"(%3672) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %3674 = tensor.empty() : tensor<1x80x128xf32>
    %3675 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%3674 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %3670[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %3676 = "tosa.reshape"(%3675) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %3677 = tensor.empty() : tensor<1x32x80x128xf32>
    %3678 = tensor.empty() : tensor<1x32x80x128xf32>
    %3679 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3673 : tensor<1x1x80x128xf32>) outs(%3678 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3680 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3656, %3679 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3677 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1714 = tensor.extract_slice %3656[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1715 = tensor.extract_slice %3656[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %3681 = tensor.empty() : tensor<1x32x80x64xf32>
    %3682 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1715 : tensor<1x32x80x64xf32>) outs(%3681 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %3683 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1716 = tensor.insert_slice %3682 into %3683[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1717 = tensor.insert_slice %extracted_slice_1714 into %inserted_slice_1716[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %3684 = tensor.empty() : tensor<1x32x80x128xf32>
    %3685 = tensor.empty() : tensor<1x32x80x128xf32>
    %3686 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3676 : tensor<1x1x80x128xf32>) outs(%3685 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3687 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1717, %3686 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3684 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %3688 = "tosa.add"(%3680, %3687) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3689 = tensor.empty() : tensor<1x32x80x128xf32>
    %3690 = tensor.empty() : tensor<1x32x80x128xf32>
    %3691 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3673 : tensor<1x1x80x128xf32>) outs(%3690 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3692 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3659, %3691 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3689 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1718 = tensor.extract_slice %3659[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1719 = tensor.extract_slice %3659[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %3693 = tensor.empty() : tensor<1x32x80x64xf32>
    %3694 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1719 : tensor<1x32x80x64xf32>) outs(%3693 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %3695 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1720 = tensor.insert_slice %3694 into %3695[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1721 = tensor.insert_slice %extracted_slice_1718 into %inserted_slice_1720[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %3696 = tensor.empty() : tensor<1x32x80x128xf32>
    %3697 = tensor.empty() : tensor<1x32x80x128xf32>
    %3698 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3676 : tensor<1x1x80x128xf32>) outs(%3697 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3699 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1721, %3698 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3696 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %3700 = "tosa.add"(%3692, %3699) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3701 = tensor.empty() : tensor<1x32x128x80xf32>
    %3702 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3700 : tensor<1x32x80x128xf32>) outs(%3701 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %3703 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1722 = tensor.extract_slice %3688[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1723 = tensor.insert_slice %extracted_slice_1722 into %3703[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %3704 = "tosa.reshape"(%inserted_slice_1723) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %3705 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1724 = tensor.extract_slice %3702[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1725 = tensor.insert_slice %extracted_slice_1724 into %3705[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %3706 = "tosa.reshape"(%inserted_slice_1725) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %3707 = tensor.empty() : tensor<32x80x80xf32>
    %3708 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%3707 : tensor<32x80x80xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x80xf32>
    %3709 = linalg.batch_matmul ins(%3704, %3706 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%3708 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %3710 = "tosa.reshape"(%3709) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1726 = arith.constant 11.3137083 : f32
    %3711 = tensor.empty() : tensor<1x32x80x80xf32>
    %3712 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3710 : tensor<1x32x80x80xf32>) outs(%3711 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.divf %in, %cst_1726 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %3713 = "tosa.add"(%3712, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %3714 = tensor.empty() : tensor<1x32x80x1xf32>
    %3715 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3714 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %3716 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3713 : tensor<1x32x80x80xf32>) outs(%3714 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.maxf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %3717 = tensor.empty() : tensor<1x32x80x80xf32>
    %3718 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3713, %3716 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%3717 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.subf %in, %in_2002 : f32
      %4845 = math.exp %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<1x32x80x80xf32>
    %3719 = tensor.empty() : tensor<1x32x80x1xf32>
    %3720 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3719 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %3721 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3718 : tensor<1x32x80x80xf32>) outs(%3720 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.addf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %3722 = tensor.empty() : tensor<1x32x80x80xf32>
    %3723 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3718, %3721 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%3722 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.divf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %3724 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1727 = tensor.extract_slice %3723[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1728 = tensor.insert_slice %extracted_slice_1727 into %3724[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %3725 = "tosa.reshape"(%inserted_slice_1728) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %3726 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1729 = tensor.extract_slice %3662[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1730 = tensor.insert_slice %extracted_slice_1729 into %3726[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %3727 = "tosa.reshape"(%inserted_slice_1730) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %3728 = tensor.empty() : tensor<32x80x128xf32>
    %3729 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%3728 : tensor<32x80x128xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x128xf32>
    %3730 = linalg.batch_matmul ins(%3725, %3727 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%3729 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %3731 = "tosa.reshape"(%3730) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3732 = tensor.empty() : tensor<1x80x32x128xf32>
    %3733 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3731 : tensor<1x32x80x128xf32>) outs(%3732 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1731 = tensor.extract_slice %3733[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %3734 = "tosa.reshape"(%extracted_slice_1731) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %3735 = tensor.empty() : tensor<4096x4096xf32>
    %3736 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_408 : tensor<4096x4096xf32>) outs(%3735 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3737 = "tosa.reshape"(%3734) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1732 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %3738 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3737, %3736 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1732 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %3739 = "tosa.reshape"(%3738) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3740 = "tosa.add"(%3624, %3739) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %3741 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1733 = arith.constant 2 : i32
    %3742 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3740 : tensor<1x80x4096xf32>) outs(%3741 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1733 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1734 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %3743 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%3742 : tensor<1x80x4096xf32>) outs(%cst_1734 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1735 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %3744 = "tosa.add"(%3743, %cst_1735) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %3745 = tensor.empty() : tensor<1x80x1xf32>
    %3746 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3744 : tensor<1x80x1xf32>) outs(%3745 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %3747 = tensor.empty() : tensor<1x80x4096xf32>
    %3748 = tensor.empty() : tensor<1x80x4096xf32>
    %3749 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3746 : tensor<1x80x1xf32>) outs(%3748 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3750 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3740, %3749 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3747 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %3751 = tensor.empty() : tensor<1x80x4096xf32>
    %3752 = tensor.empty() : tensor<1x80x4096xf32>
    %3753 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_48 : tensor<4096xf32>) outs(%3752 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3754 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3753, %3750 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3751 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %3755 = tensor.empty() : tensor<4096x11008xf32>
    %3756 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_410 : tensor<11008x4096xf32>) outs(%3755 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3757 = "tosa.reshape"(%3754) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1736 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %3758 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3757, %3756 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1736 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %3759 = "tosa.reshape"(%3758) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %3760 = tensor.empty() : tensor<1x80x11008xf32>
    %3761 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3759 : tensor<1x80x11008xf32>) outs(%3760 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      %4845 = math.exp %4844 : f32
      %cst_2002 = arith.constant 1.000000e+00 : f32
      %4846 = arith.addf %cst_2002, %4845 : f32
      %4847 = arith.divf %in, %4846 : f32
      linalg.yield %4847 : f32
    } -> tensor<1x80x11008xf32>
    %3762 = tensor.empty() : tensor<4096x11008xf32>
    %3763 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_412 : tensor<11008x4096xf32>) outs(%3762 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3764 = "tosa.reshape"(%3754) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1737 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %3765 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3764, %3763 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1737 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %3766 = "tosa.reshape"(%3765) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %3767 = tensor.empty() : tensor<1x80x11008xf32>
    %3768 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3761, %3766 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%3767 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x11008xf32>
    %3769 = tensor.empty() : tensor<11008x4096xf32>
    %3770 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_414 : tensor<4096x11008xf32>) outs(%3769 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %3771 = "tosa.reshape"(%3768) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %cst_1738 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %3772 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3771, %3770 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%cst_1738 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %3773 = "tosa.reshape"(%3772) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3774 = "tosa.add"(%3740, %3773) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %3775 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1739 = arith.constant 2 : i32
    %3776 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3774 : tensor<1x80x4096xf32>) outs(%3775 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1739 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1740 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %3777 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%3776 : tensor<1x80x4096xf32>) outs(%cst_1740 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1741 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %3778 = "tosa.add"(%3777, %cst_1741) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %3779 = tensor.empty() : tensor<1x80x1xf32>
    %3780 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3778 : tensor<1x80x1xf32>) outs(%3779 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %3781 = tensor.empty() : tensor<1x80x4096xf32>
    %3782 = tensor.empty() : tensor<1x80x4096xf32>
    %3783 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3780 : tensor<1x80x1xf32>) outs(%3782 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3784 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3774, %3783 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3781 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %3785 = tensor.empty() : tensor<1x80x4096xf32>
    %3786 = tensor.empty() : tensor<1x80x4096xf32>
    %3787 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_49 : tensor<4096xf32>) outs(%3786 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3788 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3787, %3784 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3785 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %3789 = tensor.empty() : tensor<4096x4096xf32>
    %3790 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_416 : tensor<4096x4096xf32>) outs(%3789 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3791 = "tosa.reshape"(%3788) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1742 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %3792 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3791, %3790 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1742 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %3793 = "tosa.reshape"(%3792) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3794 = tensor.empty() : tensor<4096x4096xf32>
    %3795 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_418 : tensor<4096x4096xf32>) outs(%3794 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3796 = "tosa.reshape"(%3788) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1743 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %3797 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3796, %3795 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1743 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %3798 = "tosa.reshape"(%3797) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3799 = tensor.empty() : tensor<4096x4096xf32>
    %3800 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_420 : tensor<4096x4096xf32>) outs(%3799 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3801 = "tosa.reshape"(%3788) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1744 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %3802 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3801, %3800 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1744 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %3803 = "tosa.reshape"(%3802) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3804 = "tosa.reshape"(%3793) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3805 = tensor.empty() : tensor<1x32x80x128xf32>
    %3806 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3804 : tensor<1x80x32x128xf32>) outs(%3805 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3807 = "tosa.reshape"(%3798) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3808 = tensor.empty() : tensor<1x32x80x128xf32>
    %3809 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3807 : tensor<1x80x32x128xf32>) outs(%3808 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3810 = "tosa.reshape"(%3803) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3811 = tensor.empty() : tensor<1x32x80x128xf32>
    %3812 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3810 : tensor<1x80x32x128xf32>) outs(%3811 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1745 = tensor.extract_slice %expanded_616[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1746 = tensor.extract_slice %extracted_slice_1745[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1747 = tensor.extract_slice %extracted_slice_1746[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1748 = tensor.extract_slice %expanded_618[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1749 = tensor.extract_slice %extracted_slice_1748[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1750 = tensor.extract_slice %extracted_slice_1749[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %3813 = tensor.empty() : tensor<1x80x128xf32>
    %3814 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1747 : tensor<1x1x80x128xf32>) outs(%3813 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %3815 = tensor.empty() : tensor<80x128xf32>
    %3816 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%3814 : tensor<1x80x128xf32>) outs(%3815 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %3817 = tensor.empty() : tensor<1x80x128xf32>
    %3818 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1750 : tensor<1x1x80x128xf32>) outs(%3817 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %3819 = tensor.empty() : tensor<80x128xf32>
    %3820 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%3818 : tensor<1x80x128xf32>) outs(%3819 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %3821 = tensor.empty() : tensor<1x80x128xf32>
    %3822 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%3821 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %3816[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %3823 = "tosa.reshape"(%3822) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %3824 = tensor.empty() : tensor<1x80x128xf32>
    %3825 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%3824 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %3820[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %3826 = "tosa.reshape"(%3825) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %3827 = tensor.empty() : tensor<1x32x80x128xf32>
    %3828 = tensor.empty() : tensor<1x32x80x128xf32>
    %3829 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3823 : tensor<1x1x80x128xf32>) outs(%3828 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3830 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3806, %3829 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3827 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1751 = tensor.extract_slice %3806[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1752 = tensor.extract_slice %3806[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %3831 = tensor.empty() : tensor<1x32x80x64xf32>
    %3832 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1752 : tensor<1x32x80x64xf32>) outs(%3831 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %3833 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1753 = tensor.insert_slice %3832 into %3833[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1754 = tensor.insert_slice %extracted_slice_1751 into %inserted_slice_1753[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %3834 = tensor.empty() : tensor<1x32x80x128xf32>
    %3835 = tensor.empty() : tensor<1x32x80x128xf32>
    %3836 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3826 : tensor<1x1x80x128xf32>) outs(%3835 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3837 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1754, %3836 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3834 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %3838 = "tosa.add"(%3830, %3837) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3839 = tensor.empty() : tensor<1x32x80x128xf32>
    %3840 = tensor.empty() : tensor<1x32x80x128xf32>
    %3841 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3823 : tensor<1x1x80x128xf32>) outs(%3840 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3842 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3809, %3841 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3839 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1755 = tensor.extract_slice %3809[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1756 = tensor.extract_slice %3809[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %3843 = tensor.empty() : tensor<1x32x80x64xf32>
    %3844 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1756 : tensor<1x32x80x64xf32>) outs(%3843 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %3845 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1757 = tensor.insert_slice %3844 into %3845[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1758 = tensor.insert_slice %extracted_slice_1755 into %inserted_slice_1757[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %3846 = tensor.empty() : tensor<1x32x80x128xf32>
    %3847 = tensor.empty() : tensor<1x32x80x128xf32>
    %3848 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3826 : tensor<1x1x80x128xf32>) outs(%3847 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3849 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1758, %3848 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3846 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %3850 = "tosa.add"(%3842, %3849) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3851 = tensor.empty() : tensor<1x32x128x80xf32>
    %3852 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3850 : tensor<1x32x80x128xf32>) outs(%3851 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %3853 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1759 = tensor.extract_slice %3838[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1760 = tensor.insert_slice %extracted_slice_1759 into %3853[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %3854 = "tosa.reshape"(%inserted_slice_1760) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %3855 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1761 = tensor.extract_slice %3852[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1762 = tensor.insert_slice %extracted_slice_1761 into %3855[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %3856 = "tosa.reshape"(%inserted_slice_1762) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %3857 = tensor.empty() : tensor<32x80x80xf32>
    %3858 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%3857 : tensor<32x80x80xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x80xf32>
    %3859 = linalg.batch_matmul ins(%3854, %3856 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%3858 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %3860 = "tosa.reshape"(%3859) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1763 = arith.constant 11.3137083 : f32
    %3861 = tensor.empty() : tensor<1x32x80x80xf32>
    %3862 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3860 : tensor<1x32x80x80xf32>) outs(%3861 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.divf %in, %cst_1763 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %3863 = "tosa.add"(%3862, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %3864 = tensor.empty() : tensor<1x32x80x1xf32>
    %3865 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3864 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %3866 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3863 : tensor<1x32x80x80xf32>) outs(%3864 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.maxf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %3867 = tensor.empty() : tensor<1x32x80x80xf32>
    %3868 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3863, %3866 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%3867 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.subf %in, %in_2002 : f32
      %4845 = math.exp %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<1x32x80x80xf32>
    %3869 = tensor.empty() : tensor<1x32x80x1xf32>
    %3870 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3869 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %3871 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3868 : tensor<1x32x80x80xf32>) outs(%3870 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.addf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %3872 = tensor.empty() : tensor<1x32x80x80xf32>
    %3873 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3868, %3871 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%3872 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.divf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %3874 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1764 = tensor.extract_slice %3873[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1765 = tensor.insert_slice %extracted_slice_1764 into %3874[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %3875 = "tosa.reshape"(%inserted_slice_1765) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %3876 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1766 = tensor.extract_slice %3812[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1767 = tensor.insert_slice %extracted_slice_1766 into %3876[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %3877 = "tosa.reshape"(%inserted_slice_1767) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %3878 = tensor.empty() : tensor<32x80x128xf32>
    %3879 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%3878 : tensor<32x80x128xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x128xf32>
    %3880 = linalg.batch_matmul ins(%3875, %3877 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%3879 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %3881 = "tosa.reshape"(%3880) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3882 = tensor.empty() : tensor<1x80x32x128xf32>
    %3883 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3881 : tensor<1x32x80x128xf32>) outs(%3882 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1768 = tensor.extract_slice %3883[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %3884 = "tosa.reshape"(%extracted_slice_1768) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %3885 = tensor.empty() : tensor<4096x4096xf32>
    %3886 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_422 : tensor<4096x4096xf32>) outs(%3885 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3887 = "tosa.reshape"(%3884) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1769 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %3888 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3887, %3886 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1769 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %3889 = "tosa.reshape"(%3888) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3890 = "tosa.add"(%3774, %3889) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %3891 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1770 = arith.constant 2 : i32
    %3892 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3890 : tensor<1x80x4096xf32>) outs(%3891 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1770 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1771 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %3893 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%3892 : tensor<1x80x4096xf32>) outs(%cst_1771 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1772 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %3894 = "tosa.add"(%3893, %cst_1772) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %3895 = tensor.empty() : tensor<1x80x1xf32>
    %3896 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3894 : tensor<1x80x1xf32>) outs(%3895 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %3897 = tensor.empty() : tensor<1x80x4096xf32>
    %3898 = tensor.empty() : tensor<1x80x4096xf32>
    %3899 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3896 : tensor<1x80x1xf32>) outs(%3898 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3900 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3890, %3899 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3897 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %3901 = tensor.empty() : tensor<1x80x4096xf32>
    %3902 = tensor.empty() : tensor<1x80x4096xf32>
    %3903 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_50 : tensor<4096xf32>) outs(%3902 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3904 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3903, %3900 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3901 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %3905 = tensor.empty() : tensor<4096x11008xf32>
    %3906 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_424 : tensor<11008x4096xf32>) outs(%3905 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3907 = "tosa.reshape"(%3904) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1773 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %3908 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3907, %3906 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1773 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %3909 = "tosa.reshape"(%3908) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %3910 = tensor.empty() : tensor<1x80x11008xf32>
    %3911 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3909 : tensor<1x80x11008xf32>) outs(%3910 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      %4845 = math.exp %4844 : f32
      %cst_2002 = arith.constant 1.000000e+00 : f32
      %4846 = arith.addf %cst_2002, %4845 : f32
      %4847 = arith.divf %in, %4846 : f32
      linalg.yield %4847 : f32
    } -> tensor<1x80x11008xf32>
    %3912 = tensor.empty() : tensor<4096x11008xf32>
    %3913 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_426 : tensor<11008x4096xf32>) outs(%3912 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3914 = "tosa.reshape"(%3904) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1774 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %3915 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3914, %3913 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1774 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %3916 = "tosa.reshape"(%3915) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %3917 = tensor.empty() : tensor<1x80x11008xf32>
    %3918 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3911, %3916 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%3917 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x11008xf32>
    %3919 = tensor.empty() : tensor<11008x4096xf32>
    %3920 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_428 : tensor<4096x11008xf32>) outs(%3919 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %3921 = "tosa.reshape"(%3918) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %cst_1775 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %3922 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3921, %3920 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%cst_1775 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %3923 = "tosa.reshape"(%3922) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3924 = "tosa.add"(%3890, %3923) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %3925 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1776 = arith.constant 2 : i32
    %3926 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3924 : tensor<1x80x4096xf32>) outs(%3925 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1776 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1777 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %3927 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%3926 : tensor<1x80x4096xf32>) outs(%cst_1777 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1778 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %3928 = "tosa.add"(%3927, %cst_1778) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %3929 = tensor.empty() : tensor<1x80x1xf32>
    %3930 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3928 : tensor<1x80x1xf32>) outs(%3929 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %3931 = tensor.empty() : tensor<1x80x4096xf32>
    %3932 = tensor.empty() : tensor<1x80x4096xf32>
    %3933 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3930 : tensor<1x80x1xf32>) outs(%3932 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3934 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3924, %3933 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3931 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %3935 = tensor.empty() : tensor<1x80x4096xf32>
    %3936 = tensor.empty() : tensor<1x80x4096xf32>
    %3937 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_51 : tensor<4096xf32>) outs(%3936 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %3938 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3937, %3934 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%3935 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %3939 = tensor.empty() : tensor<4096x4096xf32>
    %3940 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_430 : tensor<4096x4096xf32>) outs(%3939 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3941 = "tosa.reshape"(%3938) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1779 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %3942 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3941, %3940 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1779 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %3943 = "tosa.reshape"(%3942) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3944 = tensor.empty() : tensor<4096x4096xf32>
    %3945 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_432 : tensor<4096x4096xf32>) outs(%3944 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3946 = "tosa.reshape"(%3938) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1780 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %3947 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3946, %3945 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1780 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %3948 = "tosa.reshape"(%3947) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3949 = tensor.empty() : tensor<4096x4096xf32>
    %3950 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_434 : tensor<4096x4096xf32>) outs(%3949 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3951 = "tosa.reshape"(%3938) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1781 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %3952 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3951, %3950 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1781 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %3953 = "tosa.reshape"(%3952) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %3954 = "tosa.reshape"(%3943) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3955 = tensor.empty() : tensor<1x32x80x128xf32>
    %3956 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3954 : tensor<1x80x32x128xf32>) outs(%3955 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3957 = "tosa.reshape"(%3948) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3958 = tensor.empty() : tensor<1x32x80x128xf32>
    %3959 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3957 : tensor<1x80x32x128xf32>) outs(%3958 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3960 = "tosa.reshape"(%3953) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %3961 = tensor.empty() : tensor<1x32x80x128xf32>
    %3962 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3960 : tensor<1x80x32x128xf32>) outs(%3961 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1782 = tensor.extract_slice %expanded_620[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1783 = tensor.extract_slice %extracted_slice_1782[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1784 = tensor.extract_slice %extracted_slice_1783[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1785 = tensor.extract_slice %expanded_622[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1786 = tensor.extract_slice %extracted_slice_1785[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1787 = tensor.extract_slice %extracted_slice_1786[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %3963 = tensor.empty() : tensor<1x80x128xf32>
    %3964 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1784 : tensor<1x1x80x128xf32>) outs(%3963 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %3965 = tensor.empty() : tensor<80x128xf32>
    %3966 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%3964 : tensor<1x80x128xf32>) outs(%3965 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %3967 = tensor.empty() : tensor<1x80x128xf32>
    %3968 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1787 : tensor<1x1x80x128xf32>) outs(%3967 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %3969 = tensor.empty() : tensor<80x128xf32>
    %3970 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%3968 : tensor<1x80x128xf32>) outs(%3969 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %3971 = tensor.empty() : tensor<1x80x128xf32>
    %3972 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%3971 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %3966[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %3973 = "tosa.reshape"(%3972) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %3974 = tensor.empty() : tensor<1x80x128xf32>
    %3975 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%3974 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %3970[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %3976 = "tosa.reshape"(%3975) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %3977 = tensor.empty() : tensor<1x32x80x128xf32>
    %3978 = tensor.empty() : tensor<1x32x80x128xf32>
    %3979 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3973 : tensor<1x1x80x128xf32>) outs(%3978 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3980 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3956, %3979 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3977 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1788 = tensor.extract_slice %3956[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1789 = tensor.extract_slice %3956[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %3981 = tensor.empty() : tensor<1x32x80x64xf32>
    %3982 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1789 : tensor<1x32x80x64xf32>) outs(%3981 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %3983 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1790 = tensor.insert_slice %3982 into %3983[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1791 = tensor.insert_slice %extracted_slice_1788 into %inserted_slice_1790[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %3984 = tensor.empty() : tensor<1x32x80x128xf32>
    %3985 = tensor.empty() : tensor<1x32x80x128xf32>
    %3986 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3976 : tensor<1x1x80x128xf32>) outs(%3985 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3987 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1791, %3986 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3984 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %3988 = "tosa.add"(%3980, %3987) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %3989 = tensor.empty() : tensor<1x32x80x128xf32>
    %3990 = tensor.empty() : tensor<1x32x80x128xf32>
    %3991 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3973 : tensor<1x1x80x128xf32>) outs(%3990 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3992 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3959, %3991 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3989 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1792 = tensor.extract_slice %3959[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1793 = tensor.extract_slice %3959[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %3993 = tensor.empty() : tensor<1x32x80x64xf32>
    %3994 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1793 : tensor<1x32x80x64xf32>) outs(%3993 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %3995 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1794 = tensor.insert_slice %3994 into %3995[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1795 = tensor.insert_slice %extracted_slice_1792 into %inserted_slice_1794[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %3996 = tensor.empty() : tensor<1x32x80x128xf32>
    %3997 = tensor.empty() : tensor<1x32x80x128xf32>
    %3998 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3976 : tensor<1x1x80x128xf32>) outs(%3997 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %3999 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1795, %3998 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%3996 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %4000 = "tosa.add"(%3992, %3999) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4001 = tensor.empty() : tensor<1x32x128x80xf32>
    %4002 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4000 : tensor<1x32x80x128xf32>) outs(%4001 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %4003 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1796 = tensor.extract_slice %3988[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1797 = tensor.insert_slice %extracted_slice_1796 into %4003[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %4004 = "tosa.reshape"(%inserted_slice_1797) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %4005 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1798 = tensor.extract_slice %4002[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1799 = tensor.insert_slice %extracted_slice_1798 into %4005[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %4006 = "tosa.reshape"(%inserted_slice_1799) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %4007 = tensor.empty() : tensor<32x80x80xf32>
    %4008 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%4007 : tensor<32x80x80xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x80xf32>
    %4009 = linalg.batch_matmul ins(%4004, %4006 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%4008 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %4010 = "tosa.reshape"(%4009) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1800 = arith.constant 11.3137083 : f32
    %4011 = tensor.empty() : tensor<1x32x80x80xf32>
    %4012 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4010 : tensor<1x32x80x80xf32>) outs(%4011 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.divf %in, %cst_1800 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %4013 = "tosa.add"(%4012, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %4014 = tensor.empty() : tensor<1x32x80x1xf32>
    %4015 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4014 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %4016 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4013 : tensor<1x32x80x80xf32>) outs(%4014 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.maxf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %4017 = tensor.empty() : tensor<1x32x80x80xf32>
    %4018 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4013, %4016 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%4017 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.subf %in, %in_2002 : f32
      %4845 = math.exp %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<1x32x80x80xf32>
    %4019 = tensor.empty() : tensor<1x32x80x1xf32>
    %4020 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4019 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %4021 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4018 : tensor<1x32x80x80xf32>) outs(%4020 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.addf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %4022 = tensor.empty() : tensor<1x32x80x80xf32>
    %4023 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4018, %4021 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%4022 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.divf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %4024 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1801 = tensor.extract_slice %4023[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1802 = tensor.insert_slice %extracted_slice_1801 into %4024[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %4025 = "tosa.reshape"(%inserted_slice_1802) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %4026 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1803 = tensor.extract_slice %3962[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1804 = tensor.insert_slice %extracted_slice_1803 into %4026[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %4027 = "tosa.reshape"(%inserted_slice_1804) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %4028 = tensor.empty() : tensor<32x80x128xf32>
    %4029 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%4028 : tensor<32x80x128xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x128xf32>
    %4030 = linalg.batch_matmul ins(%4025, %4027 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%4029 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %4031 = "tosa.reshape"(%4030) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4032 = tensor.empty() : tensor<1x80x32x128xf32>
    %4033 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4031 : tensor<1x32x80x128xf32>) outs(%4032 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1805 = tensor.extract_slice %4033[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %4034 = "tosa.reshape"(%extracted_slice_1805) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %4035 = tensor.empty() : tensor<4096x4096xf32>
    %4036 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_436 : tensor<4096x4096xf32>) outs(%4035 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4037 = "tosa.reshape"(%4034) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1806 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %4038 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4037, %4036 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1806 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %4039 = "tosa.reshape"(%4038) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4040 = "tosa.add"(%3924, %4039) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %4041 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1807 = arith.constant 2 : i32
    %4042 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4040 : tensor<1x80x4096xf32>) outs(%4041 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1807 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1808 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %4043 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4042 : tensor<1x80x4096xf32>) outs(%cst_1808 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1809 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4044 = "tosa.add"(%4043, %cst_1809) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %4045 = tensor.empty() : tensor<1x80x1xf32>
    %4046 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4044 : tensor<1x80x1xf32>) outs(%4045 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %4047 = tensor.empty() : tensor<1x80x4096xf32>
    %4048 = tensor.empty() : tensor<1x80x4096xf32>
    %4049 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4046 : tensor<1x80x1xf32>) outs(%4048 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4050 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4040, %4049 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4047 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %4051 = tensor.empty() : tensor<1x80x4096xf32>
    %4052 = tensor.empty() : tensor<1x80x4096xf32>
    %4053 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_52 : tensor<4096xf32>) outs(%4052 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4054 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4053, %4050 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4051 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %4055 = tensor.empty() : tensor<4096x11008xf32>
    %4056 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_438 : tensor<11008x4096xf32>) outs(%4055 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4057 = "tosa.reshape"(%4054) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1810 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %4058 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4057, %4056 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1810 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %4059 = "tosa.reshape"(%4058) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %4060 = tensor.empty() : tensor<1x80x11008xf32>
    %4061 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4059 : tensor<1x80x11008xf32>) outs(%4060 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      %4845 = math.exp %4844 : f32
      %cst_2002 = arith.constant 1.000000e+00 : f32
      %4846 = arith.addf %cst_2002, %4845 : f32
      %4847 = arith.divf %in, %4846 : f32
      linalg.yield %4847 : f32
    } -> tensor<1x80x11008xf32>
    %4062 = tensor.empty() : tensor<4096x11008xf32>
    %4063 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_440 : tensor<11008x4096xf32>) outs(%4062 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4064 = "tosa.reshape"(%4054) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1811 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %4065 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4064, %4063 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1811 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %4066 = "tosa.reshape"(%4065) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %4067 = tensor.empty() : tensor<1x80x11008xf32>
    %4068 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4061, %4066 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%4067 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x11008xf32>
    %4069 = tensor.empty() : tensor<11008x4096xf32>
    %4070 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_442 : tensor<4096x11008xf32>) outs(%4069 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %4071 = "tosa.reshape"(%4068) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %cst_1812 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %4072 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4071, %4070 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%cst_1812 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %4073 = "tosa.reshape"(%4072) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4074 = "tosa.add"(%4040, %4073) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %4075 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1813 = arith.constant 2 : i32
    %4076 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4074 : tensor<1x80x4096xf32>) outs(%4075 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1813 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1814 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %4077 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4076 : tensor<1x80x4096xf32>) outs(%cst_1814 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1815 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4078 = "tosa.add"(%4077, %cst_1815) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %4079 = tensor.empty() : tensor<1x80x1xf32>
    %4080 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4078 : tensor<1x80x1xf32>) outs(%4079 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %4081 = tensor.empty() : tensor<1x80x4096xf32>
    %4082 = tensor.empty() : tensor<1x80x4096xf32>
    %4083 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4080 : tensor<1x80x1xf32>) outs(%4082 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4084 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4074, %4083 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4081 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %4085 = tensor.empty() : tensor<1x80x4096xf32>
    %4086 = tensor.empty() : tensor<1x80x4096xf32>
    %4087 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_53 : tensor<4096xf32>) outs(%4086 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4088 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4087, %4084 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4085 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %4089 = tensor.empty() : tensor<4096x4096xf32>
    %4090 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_444 : tensor<4096x4096xf32>) outs(%4089 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4091 = "tosa.reshape"(%4088) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1816 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %4092 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4091, %4090 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1816 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %4093 = "tosa.reshape"(%4092) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4094 = tensor.empty() : tensor<4096x4096xf32>
    %4095 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_446 : tensor<4096x4096xf32>) outs(%4094 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4096 = "tosa.reshape"(%4088) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1817 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %4097 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4096, %4095 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1817 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %4098 = "tosa.reshape"(%4097) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4099 = tensor.empty() : tensor<4096x4096xf32>
    %4100 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_448 : tensor<4096x4096xf32>) outs(%4099 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4101 = "tosa.reshape"(%4088) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1818 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %4102 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4101, %4100 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1818 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %4103 = "tosa.reshape"(%4102) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4104 = "tosa.reshape"(%4093) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4105 = tensor.empty() : tensor<1x32x80x128xf32>
    %4106 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4104 : tensor<1x80x32x128xf32>) outs(%4105 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4107 = "tosa.reshape"(%4098) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4108 = tensor.empty() : tensor<1x32x80x128xf32>
    %4109 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4107 : tensor<1x80x32x128xf32>) outs(%4108 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4110 = "tosa.reshape"(%4103) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4111 = tensor.empty() : tensor<1x32x80x128xf32>
    %4112 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4110 : tensor<1x80x32x128xf32>) outs(%4111 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1819 = tensor.extract_slice %expanded_624[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1820 = tensor.extract_slice %extracted_slice_1819[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1821 = tensor.extract_slice %extracted_slice_1820[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1822 = tensor.extract_slice %expanded_626[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1823 = tensor.extract_slice %extracted_slice_1822[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1824 = tensor.extract_slice %extracted_slice_1823[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %4113 = tensor.empty() : tensor<1x80x128xf32>
    %4114 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1821 : tensor<1x1x80x128xf32>) outs(%4113 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %4115 = tensor.empty() : tensor<80x128xf32>
    %4116 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%4114 : tensor<1x80x128xf32>) outs(%4115 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %4117 = tensor.empty() : tensor<1x80x128xf32>
    %4118 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1824 : tensor<1x1x80x128xf32>) outs(%4117 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %4119 = tensor.empty() : tensor<80x128xf32>
    %4120 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%4118 : tensor<1x80x128xf32>) outs(%4119 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %4121 = tensor.empty() : tensor<1x80x128xf32>
    %4122 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%4121 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %4116[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %4123 = "tosa.reshape"(%4122) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %4124 = tensor.empty() : tensor<1x80x128xf32>
    %4125 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%4124 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %4120[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %4126 = "tosa.reshape"(%4125) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %4127 = tensor.empty() : tensor<1x32x80x128xf32>
    %4128 = tensor.empty() : tensor<1x32x80x128xf32>
    %4129 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4123 : tensor<1x1x80x128xf32>) outs(%4128 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4130 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4106, %4129 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4127 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1825 = tensor.extract_slice %4106[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1826 = tensor.extract_slice %4106[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %4131 = tensor.empty() : tensor<1x32x80x64xf32>
    %4132 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1826 : tensor<1x32x80x64xf32>) outs(%4131 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %4133 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1827 = tensor.insert_slice %4132 into %4133[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1828 = tensor.insert_slice %extracted_slice_1825 into %inserted_slice_1827[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %4134 = tensor.empty() : tensor<1x32x80x128xf32>
    %4135 = tensor.empty() : tensor<1x32x80x128xf32>
    %4136 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4126 : tensor<1x1x80x128xf32>) outs(%4135 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4137 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1828, %4136 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4134 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %4138 = "tosa.add"(%4130, %4137) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4139 = tensor.empty() : tensor<1x32x80x128xf32>
    %4140 = tensor.empty() : tensor<1x32x80x128xf32>
    %4141 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4123 : tensor<1x1x80x128xf32>) outs(%4140 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4142 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4109, %4141 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4139 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1829 = tensor.extract_slice %4109[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1830 = tensor.extract_slice %4109[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %4143 = tensor.empty() : tensor<1x32x80x64xf32>
    %4144 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1830 : tensor<1x32x80x64xf32>) outs(%4143 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %4145 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1831 = tensor.insert_slice %4144 into %4145[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1832 = tensor.insert_slice %extracted_slice_1829 into %inserted_slice_1831[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %4146 = tensor.empty() : tensor<1x32x80x128xf32>
    %4147 = tensor.empty() : tensor<1x32x80x128xf32>
    %4148 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4126 : tensor<1x1x80x128xf32>) outs(%4147 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4149 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1832, %4148 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4146 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %4150 = "tosa.add"(%4142, %4149) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4151 = tensor.empty() : tensor<1x32x128x80xf32>
    %4152 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4150 : tensor<1x32x80x128xf32>) outs(%4151 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %4153 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1833 = tensor.extract_slice %4138[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1834 = tensor.insert_slice %extracted_slice_1833 into %4153[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %4154 = "tosa.reshape"(%inserted_slice_1834) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %4155 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1835 = tensor.extract_slice %4152[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1836 = tensor.insert_slice %extracted_slice_1835 into %4155[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %4156 = "tosa.reshape"(%inserted_slice_1836) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %4157 = tensor.empty() : tensor<32x80x80xf32>
    %4158 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%4157 : tensor<32x80x80xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x80xf32>
    %4159 = linalg.batch_matmul ins(%4154, %4156 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%4158 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %4160 = "tosa.reshape"(%4159) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1837 = arith.constant 11.3137083 : f32
    %4161 = tensor.empty() : tensor<1x32x80x80xf32>
    %4162 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4160 : tensor<1x32x80x80xf32>) outs(%4161 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.divf %in, %cst_1837 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %4163 = "tosa.add"(%4162, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %4164 = tensor.empty() : tensor<1x32x80x1xf32>
    %4165 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4164 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %4166 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4163 : tensor<1x32x80x80xf32>) outs(%4164 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.maxf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %4167 = tensor.empty() : tensor<1x32x80x80xf32>
    %4168 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4163, %4166 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%4167 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.subf %in, %in_2002 : f32
      %4845 = math.exp %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<1x32x80x80xf32>
    %4169 = tensor.empty() : tensor<1x32x80x1xf32>
    %4170 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4169 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %4171 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4168 : tensor<1x32x80x80xf32>) outs(%4170 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.addf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %4172 = tensor.empty() : tensor<1x32x80x80xf32>
    %4173 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4168, %4171 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%4172 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.divf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %4174 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1838 = tensor.extract_slice %4173[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1839 = tensor.insert_slice %extracted_slice_1838 into %4174[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %4175 = "tosa.reshape"(%inserted_slice_1839) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %4176 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1840 = tensor.extract_slice %4112[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1841 = tensor.insert_slice %extracted_slice_1840 into %4176[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %4177 = "tosa.reshape"(%inserted_slice_1841) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %4178 = tensor.empty() : tensor<32x80x128xf32>
    %4179 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%4178 : tensor<32x80x128xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x128xf32>
    %4180 = linalg.batch_matmul ins(%4175, %4177 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%4179 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %4181 = "tosa.reshape"(%4180) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4182 = tensor.empty() : tensor<1x80x32x128xf32>
    %4183 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4181 : tensor<1x32x80x128xf32>) outs(%4182 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1842 = tensor.extract_slice %4183[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %4184 = "tosa.reshape"(%extracted_slice_1842) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %4185 = tensor.empty() : tensor<4096x4096xf32>
    %4186 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_450 : tensor<4096x4096xf32>) outs(%4185 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4187 = "tosa.reshape"(%4184) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1843 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %4188 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4187, %4186 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1843 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %4189 = "tosa.reshape"(%4188) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4190 = "tosa.add"(%4074, %4189) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %4191 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1844 = arith.constant 2 : i32
    %4192 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4190 : tensor<1x80x4096xf32>) outs(%4191 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1844 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1845 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %4193 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4192 : tensor<1x80x4096xf32>) outs(%cst_1845 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1846 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4194 = "tosa.add"(%4193, %cst_1846) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %4195 = tensor.empty() : tensor<1x80x1xf32>
    %4196 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4194 : tensor<1x80x1xf32>) outs(%4195 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %4197 = tensor.empty() : tensor<1x80x4096xf32>
    %4198 = tensor.empty() : tensor<1x80x4096xf32>
    %4199 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4196 : tensor<1x80x1xf32>) outs(%4198 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4200 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4190, %4199 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4197 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %4201 = tensor.empty() : tensor<1x80x4096xf32>
    %4202 = tensor.empty() : tensor<1x80x4096xf32>
    %4203 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_54 : tensor<4096xf32>) outs(%4202 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4204 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4203, %4200 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4201 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %4205 = tensor.empty() : tensor<4096x11008xf32>
    %4206 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_452 : tensor<11008x4096xf32>) outs(%4205 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4207 = "tosa.reshape"(%4204) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1847 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %4208 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4207, %4206 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1847 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %4209 = "tosa.reshape"(%4208) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %4210 = tensor.empty() : tensor<1x80x11008xf32>
    %4211 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4209 : tensor<1x80x11008xf32>) outs(%4210 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      %4845 = math.exp %4844 : f32
      %cst_2002 = arith.constant 1.000000e+00 : f32
      %4846 = arith.addf %cst_2002, %4845 : f32
      %4847 = arith.divf %in, %4846 : f32
      linalg.yield %4847 : f32
    } -> tensor<1x80x11008xf32>
    %4212 = tensor.empty() : tensor<4096x11008xf32>
    %4213 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_454 : tensor<11008x4096xf32>) outs(%4212 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4214 = "tosa.reshape"(%4204) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1848 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %4215 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4214, %4213 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1848 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %4216 = "tosa.reshape"(%4215) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %4217 = tensor.empty() : tensor<1x80x11008xf32>
    %4218 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4211, %4216 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%4217 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x11008xf32>
    %4219 = tensor.empty() : tensor<11008x4096xf32>
    %4220 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_456 : tensor<4096x11008xf32>) outs(%4219 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %4221 = "tosa.reshape"(%4218) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %cst_1849 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %4222 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4221, %4220 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%cst_1849 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %4223 = "tosa.reshape"(%4222) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4224 = "tosa.add"(%4190, %4223) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %4225 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1850 = arith.constant 2 : i32
    %4226 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4224 : tensor<1x80x4096xf32>) outs(%4225 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1850 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1851 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %4227 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4226 : tensor<1x80x4096xf32>) outs(%cst_1851 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1852 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4228 = "tosa.add"(%4227, %cst_1852) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %4229 = tensor.empty() : tensor<1x80x1xf32>
    %4230 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4228 : tensor<1x80x1xf32>) outs(%4229 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %4231 = tensor.empty() : tensor<1x80x4096xf32>
    %4232 = tensor.empty() : tensor<1x80x4096xf32>
    %4233 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4230 : tensor<1x80x1xf32>) outs(%4232 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4234 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4224, %4233 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4231 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %4235 = tensor.empty() : tensor<1x80x4096xf32>
    %4236 = tensor.empty() : tensor<1x80x4096xf32>
    %4237 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_55 : tensor<4096xf32>) outs(%4236 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4238 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4237, %4234 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4235 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %4239 = tensor.empty() : tensor<4096x4096xf32>
    %4240 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_458 : tensor<4096x4096xf32>) outs(%4239 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4241 = "tosa.reshape"(%4238) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1853 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %4242 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4241, %4240 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1853 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %4243 = "tosa.reshape"(%4242) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4244 = tensor.empty() : tensor<4096x4096xf32>
    %4245 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_460 : tensor<4096x4096xf32>) outs(%4244 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4246 = "tosa.reshape"(%4238) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1854 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %4247 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4246, %4245 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1854 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %4248 = "tosa.reshape"(%4247) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4249 = tensor.empty() : tensor<4096x4096xf32>
    %4250 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_462 : tensor<4096x4096xf32>) outs(%4249 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4251 = "tosa.reshape"(%4238) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1855 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %4252 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4251, %4250 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1855 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %4253 = "tosa.reshape"(%4252) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4254 = "tosa.reshape"(%4243) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4255 = tensor.empty() : tensor<1x32x80x128xf32>
    %4256 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4254 : tensor<1x80x32x128xf32>) outs(%4255 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4257 = "tosa.reshape"(%4248) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4258 = tensor.empty() : tensor<1x32x80x128xf32>
    %4259 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4257 : tensor<1x80x32x128xf32>) outs(%4258 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4260 = "tosa.reshape"(%4253) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4261 = tensor.empty() : tensor<1x32x80x128xf32>
    %4262 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4260 : tensor<1x80x32x128xf32>) outs(%4261 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1856 = tensor.extract_slice %expanded_628[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1857 = tensor.extract_slice %extracted_slice_1856[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1858 = tensor.extract_slice %extracted_slice_1857[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1859 = tensor.extract_slice %expanded_630[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1860 = tensor.extract_slice %extracted_slice_1859[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1861 = tensor.extract_slice %extracted_slice_1860[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %4263 = tensor.empty() : tensor<1x80x128xf32>
    %4264 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1858 : tensor<1x1x80x128xf32>) outs(%4263 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %4265 = tensor.empty() : tensor<80x128xf32>
    %4266 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%4264 : tensor<1x80x128xf32>) outs(%4265 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %4267 = tensor.empty() : tensor<1x80x128xf32>
    %4268 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1861 : tensor<1x1x80x128xf32>) outs(%4267 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %4269 = tensor.empty() : tensor<80x128xf32>
    %4270 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%4268 : tensor<1x80x128xf32>) outs(%4269 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %4271 = tensor.empty() : tensor<1x80x128xf32>
    %4272 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%4271 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %4266[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %4273 = "tosa.reshape"(%4272) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %4274 = tensor.empty() : tensor<1x80x128xf32>
    %4275 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%4274 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %4270[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %4276 = "tosa.reshape"(%4275) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %4277 = tensor.empty() : tensor<1x32x80x128xf32>
    %4278 = tensor.empty() : tensor<1x32x80x128xf32>
    %4279 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4273 : tensor<1x1x80x128xf32>) outs(%4278 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4280 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4256, %4279 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4277 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1862 = tensor.extract_slice %4256[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1863 = tensor.extract_slice %4256[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %4281 = tensor.empty() : tensor<1x32x80x64xf32>
    %4282 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1863 : tensor<1x32x80x64xf32>) outs(%4281 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %4283 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1864 = tensor.insert_slice %4282 into %4283[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1865 = tensor.insert_slice %extracted_slice_1862 into %inserted_slice_1864[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %4284 = tensor.empty() : tensor<1x32x80x128xf32>
    %4285 = tensor.empty() : tensor<1x32x80x128xf32>
    %4286 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4276 : tensor<1x1x80x128xf32>) outs(%4285 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4287 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1865, %4286 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4284 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %4288 = "tosa.add"(%4280, %4287) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4289 = tensor.empty() : tensor<1x32x80x128xf32>
    %4290 = tensor.empty() : tensor<1x32x80x128xf32>
    %4291 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4273 : tensor<1x1x80x128xf32>) outs(%4290 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4292 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4259, %4291 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4289 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1866 = tensor.extract_slice %4259[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1867 = tensor.extract_slice %4259[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %4293 = tensor.empty() : tensor<1x32x80x64xf32>
    %4294 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1867 : tensor<1x32x80x64xf32>) outs(%4293 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %4295 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1868 = tensor.insert_slice %4294 into %4295[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1869 = tensor.insert_slice %extracted_slice_1866 into %inserted_slice_1868[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %4296 = tensor.empty() : tensor<1x32x80x128xf32>
    %4297 = tensor.empty() : tensor<1x32x80x128xf32>
    %4298 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4276 : tensor<1x1x80x128xf32>) outs(%4297 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4299 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1869, %4298 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4296 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %4300 = "tosa.add"(%4292, %4299) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4301 = tensor.empty() : tensor<1x32x128x80xf32>
    %4302 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4300 : tensor<1x32x80x128xf32>) outs(%4301 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %4303 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1870 = tensor.extract_slice %4288[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1871 = tensor.insert_slice %extracted_slice_1870 into %4303[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %4304 = "tosa.reshape"(%inserted_slice_1871) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %4305 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1872 = tensor.extract_slice %4302[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1873 = tensor.insert_slice %extracted_slice_1872 into %4305[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %4306 = "tosa.reshape"(%inserted_slice_1873) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %4307 = tensor.empty() : tensor<32x80x80xf32>
    %4308 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%4307 : tensor<32x80x80xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x80xf32>
    %4309 = linalg.batch_matmul ins(%4304, %4306 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%4308 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %4310 = "tosa.reshape"(%4309) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1874 = arith.constant 11.3137083 : f32
    %4311 = tensor.empty() : tensor<1x32x80x80xf32>
    %4312 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4310 : tensor<1x32x80x80xf32>) outs(%4311 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.divf %in, %cst_1874 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %4313 = "tosa.add"(%4312, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %4314 = tensor.empty() : tensor<1x32x80x1xf32>
    %4315 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4314 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %4316 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4313 : tensor<1x32x80x80xf32>) outs(%4314 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.maxf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %4317 = tensor.empty() : tensor<1x32x80x80xf32>
    %4318 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4313, %4316 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%4317 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.subf %in, %in_2002 : f32
      %4845 = math.exp %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<1x32x80x80xf32>
    %4319 = tensor.empty() : tensor<1x32x80x1xf32>
    %4320 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4319 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %4321 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4318 : tensor<1x32x80x80xf32>) outs(%4320 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.addf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %4322 = tensor.empty() : tensor<1x32x80x80xf32>
    %4323 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4318, %4321 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%4322 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.divf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %4324 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1875 = tensor.extract_slice %4323[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1876 = tensor.insert_slice %extracted_slice_1875 into %4324[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %4325 = "tosa.reshape"(%inserted_slice_1876) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %4326 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1877 = tensor.extract_slice %4262[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1878 = tensor.insert_slice %extracted_slice_1877 into %4326[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %4327 = "tosa.reshape"(%inserted_slice_1878) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %4328 = tensor.empty() : tensor<32x80x128xf32>
    %4329 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%4328 : tensor<32x80x128xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x128xf32>
    %4330 = linalg.batch_matmul ins(%4325, %4327 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%4329 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %4331 = "tosa.reshape"(%4330) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4332 = tensor.empty() : tensor<1x80x32x128xf32>
    %4333 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4331 : tensor<1x32x80x128xf32>) outs(%4332 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1879 = tensor.extract_slice %4333[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %4334 = "tosa.reshape"(%extracted_slice_1879) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %4335 = tensor.empty() : tensor<4096x4096xf32>
    %4336 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_464 : tensor<4096x4096xf32>) outs(%4335 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4337 = "tosa.reshape"(%4334) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1880 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %4338 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4337, %4336 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1880 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %4339 = "tosa.reshape"(%4338) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4340 = "tosa.add"(%4224, %4339) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %4341 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1881 = arith.constant 2 : i32
    %4342 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4340 : tensor<1x80x4096xf32>) outs(%4341 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1881 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1882 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %4343 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4342 : tensor<1x80x4096xf32>) outs(%cst_1882 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1883 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4344 = "tosa.add"(%4343, %cst_1883) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %4345 = tensor.empty() : tensor<1x80x1xf32>
    %4346 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4344 : tensor<1x80x1xf32>) outs(%4345 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %4347 = tensor.empty() : tensor<1x80x4096xf32>
    %4348 = tensor.empty() : tensor<1x80x4096xf32>
    %4349 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4346 : tensor<1x80x1xf32>) outs(%4348 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4350 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4340, %4349 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4347 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %4351 = tensor.empty() : tensor<1x80x4096xf32>
    %4352 = tensor.empty() : tensor<1x80x4096xf32>
    %4353 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_56 : tensor<4096xf32>) outs(%4352 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4354 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4353, %4350 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4351 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %4355 = tensor.empty() : tensor<4096x11008xf32>
    %4356 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_466 : tensor<11008x4096xf32>) outs(%4355 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4357 = "tosa.reshape"(%4354) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1884 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %4358 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4357, %4356 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1884 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %4359 = "tosa.reshape"(%4358) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %4360 = tensor.empty() : tensor<1x80x11008xf32>
    %4361 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4359 : tensor<1x80x11008xf32>) outs(%4360 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      %4845 = math.exp %4844 : f32
      %cst_2002 = arith.constant 1.000000e+00 : f32
      %4846 = arith.addf %cst_2002, %4845 : f32
      %4847 = arith.divf %in, %4846 : f32
      linalg.yield %4847 : f32
    } -> tensor<1x80x11008xf32>
    %4362 = tensor.empty() : tensor<4096x11008xf32>
    %4363 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_468 : tensor<11008x4096xf32>) outs(%4362 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4364 = "tosa.reshape"(%4354) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1885 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %4365 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4364, %4363 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1885 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %4366 = "tosa.reshape"(%4365) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %4367 = tensor.empty() : tensor<1x80x11008xf32>
    %4368 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4361, %4366 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%4367 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x11008xf32>
    %4369 = tensor.empty() : tensor<11008x4096xf32>
    %4370 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_470 : tensor<4096x11008xf32>) outs(%4369 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %4371 = "tosa.reshape"(%4368) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %cst_1886 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %4372 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4371, %4370 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%cst_1886 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %4373 = "tosa.reshape"(%4372) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4374 = "tosa.add"(%4340, %4373) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %4375 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1887 = arith.constant 2 : i32
    %4376 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4374 : tensor<1x80x4096xf32>) outs(%4375 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1887 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1888 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %4377 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4376 : tensor<1x80x4096xf32>) outs(%cst_1888 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1889 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4378 = "tosa.add"(%4377, %cst_1889) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %4379 = tensor.empty() : tensor<1x80x1xf32>
    %4380 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4378 : tensor<1x80x1xf32>) outs(%4379 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %4381 = tensor.empty() : tensor<1x80x4096xf32>
    %4382 = tensor.empty() : tensor<1x80x4096xf32>
    %4383 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4380 : tensor<1x80x1xf32>) outs(%4382 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4384 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4374, %4383 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4381 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %4385 = tensor.empty() : tensor<1x80x4096xf32>
    %4386 = tensor.empty() : tensor<1x80x4096xf32>
    %4387 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_57 : tensor<4096xf32>) outs(%4386 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4388 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4387, %4384 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4385 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %4389 = tensor.empty() : tensor<4096x4096xf32>
    %4390 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_472 : tensor<4096x4096xf32>) outs(%4389 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4391 = "tosa.reshape"(%4388) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1890 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %4392 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4391, %4390 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1890 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %4393 = "tosa.reshape"(%4392) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4394 = tensor.empty() : tensor<4096x4096xf32>
    %4395 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_474 : tensor<4096x4096xf32>) outs(%4394 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4396 = "tosa.reshape"(%4388) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1891 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %4397 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4396, %4395 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1891 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %4398 = "tosa.reshape"(%4397) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4399 = tensor.empty() : tensor<4096x4096xf32>
    %4400 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_476 : tensor<4096x4096xf32>) outs(%4399 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4401 = "tosa.reshape"(%4388) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1892 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %4402 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4401, %4400 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1892 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %4403 = "tosa.reshape"(%4402) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4404 = "tosa.reshape"(%4393) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4405 = tensor.empty() : tensor<1x32x80x128xf32>
    %4406 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4404 : tensor<1x80x32x128xf32>) outs(%4405 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4407 = "tosa.reshape"(%4398) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4408 = tensor.empty() : tensor<1x32x80x128xf32>
    %4409 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4407 : tensor<1x80x32x128xf32>) outs(%4408 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4410 = "tosa.reshape"(%4403) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4411 = tensor.empty() : tensor<1x32x80x128xf32>
    %4412 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4410 : tensor<1x80x32x128xf32>) outs(%4411 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1893 = tensor.extract_slice %expanded_632[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1894 = tensor.extract_slice %extracted_slice_1893[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1895 = tensor.extract_slice %extracted_slice_1894[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1896 = tensor.extract_slice %expanded_634[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1897 = tensor.extract_slice %extracted_slice_1896[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1898 = tensor.extract_slice %extracted_slice_1897[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %4413 = tensor.empty() : tensor<1x80x128xf32>
    %4414 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1895 : tensor<1x1x80x128xf32>) outs(%4413 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %4415 = tensor.empty() : tensor<80x128xf32>
    %4416 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%4414 : tensor<1x80x128xf32>) outs(%4415 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %4417 = tensor.empty() : tensor<1x80x128xf32>
    %4418 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1898 : tensor<1x1x80x128xf32>) outs(%4417 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %4419 = tensor.empty() : tensor<80x128xf32>
    %4420 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%4418 : tensor<1x80x128xf32>) outs(%4419 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %4421 = tensor.empty() : tensor<1x80x128xf32>
    %4422 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%4421 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %4416[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %4423 = "tosa.reshape"(%4422) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %4424 = tensor.empty() : tensor<1x80x128xf32>
    %4425 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%4424 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %4420[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %4426 = "tosa.reshape"(%4425) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %4427 = tensor.empty() : tensor<1x32x80x128xf32>
    %4428 = tensor.empty() : tensor<1x32x80x128xf32>
    %4429 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4423 : tensor<1x1x80x128xf32>) outs(%4428 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4430 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4406, %4429 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4427 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1899 = tensor.extract_slice %4406[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1900 = tensor.extract_slice %4406[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %4431 = tensor.empty() : tensor<1x32x80x64xf32>
    %4432 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1900 : tensor<1x32x80x64xf32>) outs(%4431 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %4433 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1901 = tensor.insert_slice %4432 into %4433[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1902 = tensor.insert_slice %extracted_slice_1899 into %inserted_slice_1901[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %4434 = tensor.empty() : tensor<1x32x80x128xf32>
    %4435 = tensor.empty() : tensor<1x32x80x128xf32>
    %4436 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4426 : tensor<1x1x80x128xf32>) outs(%4435 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4437 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1902, %4436 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4434 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %4438 = "tosa.add"(%4430, %4437) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4439 = tensor.empty() : tensor<1x32x80x128xf32>
    %4440 = tensor.empty() : tensor<1x32x80x128xf32>
    %4441 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4423 : tensor<1x1x80x128xf32>) outs(%4440 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4442 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4409, %4441 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4439 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1903 = tensor.extract_slice %4409[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1904 = tensor.extract_slice %4409[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %4443 = tensor.empty() : tensor<1x32x80x64xf32>
    %4444 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1904 : tensor<1x32x80x64xf32>) outs(%4443 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %4445 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1905 = tensor.insert_slice %4444 into %4445[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1906 = tensor.insert_slice %extracted_slice_1903 into %inserted_slice_1905[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %4446 = tensor.empty() : tensor<1x32x80x128xf32>
    %4447 = tensor.empty() : tensor<1x32x80x128xf32>
    %4448 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4426 : tensor<1x1x80x128xf32>) outs(%4447 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4449 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1906, %4448 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4446 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %4450 = "tosa.add"(%4442, %4449) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4451 = tensor.empty() : tensor<1x32x128x80xf32>
    %4452 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4450 : tensor<1x32x80x128xf32>) outs(%4451 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %4453 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1907 = tensor.extract_slice %4438[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1908 = tensor.insert_slice %extracted_slice_1907 into %4453[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %4454 = "tosa.reshape"(%inserted_slice_1908) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %4455 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1909 = tensor.extract_slice %4452[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1910 = tensor.insert_slice %extracted_slice_1909 into %4455[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %4456 = "tosa.reshape"(%inserted_slice_1910) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %4457 = tensor.empty() : tensor<32x80x80xf32>
    %4458 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%4457 : tensor<32x80x80xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x80xf32>
    %4459 = linalg.batch_matmul ins(%4454, %4456 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%4458 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %4460 = "tosa.reshape"(%4459) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1911 = arith.constant 11.3137083 : f32
    %4461 = tensor.empty() : tensor<1x32x80x80xf32>
    %4462 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4460 : tensor<1x32x80x80xf32>) outs(%4461 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.divf %in, %cst_1911 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %4463 = "tosa.add"(%4462, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %4464 = tensor.empty() : tensor<1x32x80x1xf32>
    %4465 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4464 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %4466 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4463 : tensor<1x32x80x80xf32>) outs(%4464 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.maxf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %4467 = tensor.empty() : tensor<1x32x80x80xf32>
    %4468 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4463, %4466 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%4467 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.subf %in, %in_2002 : f32
      %4845 = math.exp %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<1x32x80x80xf32>
    %4469 = tensor.empty() : tensor<1x32x80x1xf32>
    %4470 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4469 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %4471 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4468 : tensor<1x32x80x80xf32>) outs(%4470 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.addf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %4472 = tensor.empty() : tensor<1x32x80x80xf32>
    %4473 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4468, %4471 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%4472 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.divf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %4474 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1912 = tensor.extract_slice %4473[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1913 = tensor.insert_slice %extracted_slice_1912 into %4474[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %4475 = "tosa.reshape"(%inserted_slice_1913) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %4476 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1914 = tensor.extract_slice %4412[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1915 = tensor.insert_slice %extracted_slice_1914 into %4476[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %4477 = "tosa.reshape"(%inserted_slice_1915) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %4478 = tensor.empty() : tensor<32x80x128xf32>
    %4479 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%4478 : tensor<32x80x128xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x128xf32>
    %4480 = linalg.batch_matmul ins(%4475, %4477 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%4479 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %4481 = "tosa.reshape"(%4480) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4482 = tensor.empty() : tensor<1x80x32x128xf32>
    %4483 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4481 : tensor<1x32x80x128xf32>) outs(%4482 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1916 = tensor.extract_slice %4483[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %4484 = "tosa.reshape"(%extracted_slice_1916) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %4485 = tensor.empty() : tensor<4096x4096xf32>
    %4486 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_478 : tensor<4096x4096xf32>) outs(%4485 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4487 = "tosa.reshape"(%4484) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1917 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %4488 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4487, %4486 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1917 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %4489 = "tosa.reshape"(%4488) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4490 = "tosa.add"(%4374, %4489) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %4491 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1918 = arith.constant 2 : i32
    %4492 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4490 : tensor<1x80x4096xf32>) outs(%4491 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1918 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1919 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %4493 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4492 : tensor<1x80x4096xf32>) outs(%cst_1919 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1920 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4494 = "tosa.add"(%4493, %cst_1920) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %4495 = tensor.empty() : tensor<1x80x1xf32>
    %4496 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4494 : tensor<1x80x1xf32>) outs(%4495 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %4497 = tensor.empty() : tensor<1x80x4096xf32>
    %4498 = tensor.empty() : tensor<1x80x4096xf32>
    %4499 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4496 : tensor<1x80x1xf32>) outs(%4498 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4500 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4490, %4499 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4497 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %4501 = tensor.empty() : tensor<1x80x4096xf32>
    %4502 = tensor.empty() : tensor<1x80x4096xf32>
    %4503 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_58 : tensor<4096xf32>) outs(%4502 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4504 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4503, %4500 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4501 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %4505 = tensor.empty() : tensor<4096x11008xf32>
    %4506 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_480 : tensor<11008x4096xf32>) outs(%4505 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4507 = "tosa.reshape"(%4504) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1921 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %4508 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4507, %4506 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1921 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %4509 = "tosa.reshape"(%4508) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %4510 = tensor.empty() : tensor<1x80x11008xf32>
    %4511 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4509 : tensor<1x80x11008xf32>) outs(%4510 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      %4845 = math.exp %4844 : f32
      %cst_2002 = arith.constant 1.000000e+00 : f32
      %4846 = arith.addf %cst_2002, %4845 : f32
      %4847 = arith.divf %in, %4846 : f32
      linalg.yield %4847 : f32
    } -> tensor<1x80x11008xf32>
    %4512 = tensor.empty() : tensor<4096x11008xf32>
    %4513 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_482 : tensor<11008x4096xf32>) outs(%4512 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4514 = "tosa.reshape"(%4504) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1922 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %4515 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4514, %4513 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1922 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %4516 = "tosa.reshape"(%4515) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %4517 = tensor.empty() : tensor<1x80x11008xf32>
    %4518 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4511, %4516 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%4517 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x11008xf32>
    %4519 = tensor.empty() : tensor<11008x4096xf32>
    %4520 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_484 : tensor<4096x11008xf32>) outs(%4519 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %4521 = "tosa.reshape"(%4518) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %cst_1923 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %4522 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4521, %4520 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%cst_1923 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %4523 = "tosa.reshape"(%4522) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4524 = "tosa.add"(%4490, %4523) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %4525 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1924 = arith.constant 2 : i32
    %4526 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4524 : tensor<1x80x4096xf32>) outs(%4525 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1924 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1925 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %4527 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4526 : tensor<1x80x4096xf32>) outs(%cst_1925 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1926 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4528 = "tosa.add"(%4527, %cst_1926) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %4529 = tensor.empty() : tensor<1x80x1xf32>
    %4530 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4528 : tensor<1x80x1xf32>) outs(%4529 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %4531 = tensor.empty() : tensor<1x80x4096xf32>
    %4532 = tensor.empty() : tensor<1x80x4096xf32>
    %4533 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4530 : tensor<1x80x1xf32>) outs(%4532 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4534 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4524, %4533 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4531 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %4535 = tensor.empty() : tensor<1x80x4096xf32>
    %4536 = tensor.empty() : tensor<1x80x4096xf32>
    %4537 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_59 : tensor<4096xf32>) outs(%4536 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4538 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4537, %4534 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4535 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %4539 = tensor.empty() : tensor<4096x4096xf32>
    %4540 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_486 : tensor<4096x4096xf32>) outs(%4539 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4541 = "tosa.reshape"(%4538) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1927 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %4542 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4541, %4540 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1927 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %4543 = "tosa.reshape"(%4542) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4544 = tensor.empty() : tensor<4096x4096xf32>
    %4545 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_488 : tensor<4096x4096xf32>) outs(%4544 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4546 = "tosa.reshape"(%4538) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1928 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %4547 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4546, %4545 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1928 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %4548 = "tosa.reshape"(%4547) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4549 = tensor.empty() : tensor<4096x4096xf32>
    %4550 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_490 : tensor<4096x4096xf32>) outs(%4549 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4551 = "tosa.reshape"(%4538) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1929 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %4552 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4551, %4550 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1929 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %4553 = "tosa.reshape"(%4552) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4554 = "tosa.reshape"(%4543) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4555 = tensor.empty() : tensor<1x32x80x128xf32>
    %4556 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4554 : tensor<1x80x32x128xf32>) outs(%4555 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4557 = "tosa.reshape"(%4548) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4558 = tensor.empty() : tensor<1x32x80x128xf32>
    %4559 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4557 : tensor<1x80x32x128xf32>) outs(%4558 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4560 = "tosa.reshape"(%4553) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4561 = tensor.empty() : tensor<1x32x80x128xf32>
    %4562 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4560 : tensor<1x80x32x128xf32>) outs(%4561 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1930 = tensor.extract_slice %expanded_636[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1931 = tensor.extract_slice %extracted_slice_1930[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1932 = tensor.extract_slice %extracted_slice_1931[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1933 = tensor.extract_slice %expanded_638[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1934 = tensor.extract_slice %extracted_slice_1933[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1935 = tensor.extract_slice %extracted_slice_1934[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %4563 = tensor.empty() : tensor<1x80x128xf32>
    %4564 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1932 : tensor<1x1x80x128xf32>) outs(%4563 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %4565 = tensor.empty() : tensor<80x128xf32>
    %4566 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%4564 : tensor<1x80x128xf32>) outs(%4565 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %4567 = tensor.empty() : tensor<1x80x128xf32>
    %4568 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1935 : tensor<1x1x80x128xf32>) outs(%4567 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %4569 = tensor.empty() : tensor<80x128xf32>
    %4570 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%4568 : tensor<1x80x128xf32>) outs(%4569 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %4571 = tensor.empty() : tensor<1x80x128xf32>
    %4572 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%4571 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %4566[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %4573 = "tosa.reshape"(%4572) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %4574 = tensor.empty() : tensor<1x80x128xf32>
    %4575 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%4574 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %4570[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %4576 = "tosa.reshape"(%4575) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %4577 = tensor.empty() : tensor<1x32x80x128xf32>
    %4578 = tensor.empty() : tensor<1x32x80x128xf32>
    %4579 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4573 : tensor<1x1x80x128xf32>) outs(%4578 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4580 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4556, %4579 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4577 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1936 = tensor.extract_slice %4556[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1937 = tensor.extract_slice %4556[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %4581 = tensor.empty() : tensor<1x32x80x64xf32>
    %4582 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1937 : tensor<1x32x80x64xf32>) outs(%4581 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %4583 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1938 = tensor.insert_slice %4582 into %4583[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1939 = tensor.insert_slice %extracted_slice_1936 into %inserted_slice_1938[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %4584 = tensor.empty() : tensor<1x32x80x128xf32>
    %4585 = tensor.empty() : tensor<1x32x80x128xf32>
    %4586 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4576 : tensor<1x1x80x128xf32>) outs(%4585 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4587 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1939, %4586 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4584 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %4588 = "tosa.add"(%4580, %4587) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4589 = tensor.empty() : tensor<1x32x80x128xf32>
    %4590 = tensor.empty() : tensor<1x32x80x128xf32>
    %4591 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4573 : tensor<1x1x80x128xf32>) outs(%4590 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4592 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4559, %4591 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4589 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1940 = tensor.extract_slice %4559[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1941 = tensor.extract_slice %4559[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %4593 = tensor.empty() : tensor<1x32x80x64xf32>
    %4594 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1941 : tensor<1x32x80x64xf32>) outs(%4593 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %4595 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1942 = tensor.insert_slice %4594 into %4595[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1943 = tensor.insert_slice %extracted_slice_1940 into %inserted_slice_1942[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %4596 = tensor.empty() : tensor<1x32x80x128xf32>
    %4597 = tensor.empty() : tensor<1x32x80x128xf32>
    %4598 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4576 : tensor<1x1x80x128xf32>) outs(%4597 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4599 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1943, %4598 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4596 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %4600 = "tosa.add"(%4592, %4599) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4601 = tensor.empty() : tensor<1x32x128x80xf32>
    %4602 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4600 : tensor<1x32x80x128xf32>) outs(%4601 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %4603 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1944 = tensor.extract_slice %4588[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1945 = tensor.insert_slice %extracted_slice_1944 into %4603[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %4604 = "tosa.reshape"(%inserted_slice_1945) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %4605 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1946 = tensor.extract_slice %4602[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1947 = tensor.insert_slice %extracted_slice_1946 into %4605[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %4606 = "tosa.reshape"(%inserted_slice_1947) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %4607 = tensor.empty() : tensor<32x80x80xf32>
    %4608 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%4607 : tensor<32x80x80xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x80xf32>
    %4609 = linalg.batch_matmul ins(%4604, %4606 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%4608 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %4610 = "tosa.reshape"(%4609) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1948 = arith.constant 11.3137083 : f32
    %4611 = tensor.empty() : tensor<1x32x80x80xf32>
    %4612 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4610 : tensor<1x32x80x80xf32>) outs(%4611 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.divf %in, %cst_1948 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %4613 = "tosa.add"(%4612, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %4614 = tensor.empty() : tensor<1x32x80x1xf32>
    %4615 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4614 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %4616 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4613 : tensor<1x32x80x80xf32>) outs(%4614 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.maxf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %4617 = tensor.empty() : tensor<1x32x80x80xf32>
    %4618 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4613, %4616 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%4617 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.subf %in, %in_2002 : f32
      %4845 = math.exp %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<1x32x80x80xf32>
    %4619 = tensor.empty() : tensor<1x32x80x1xf32>
    %4620 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4619 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %4621 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4618 : tensor<1x32x80x80xf32>) outs(%4620 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.addf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %4622 = tensor.empty() : tensor<1x32x80x80xf32>
    %4623 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4618, %4621 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%4622 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.divf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %4624 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1949 = tensor.extract_slice %4623[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1950 = tensor.insert_slice %extracted_slice_1949 into %4624[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %4625 = "tosa.reshape"(%inserted_slice_1950) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %4626 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1951 = tensor.extract_slice %4562[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1952 = tensor.insert_slice %extracted_slice_1951 into %4626[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %4627 = "tosa.reshape"(%inserted_slice_1952) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %4628 = tensor.empty() : tensor<32x80x128xf32>
    %4629 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%4628 : tensor<32x80x128xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x128xf32>
    %4630 = linalg.batch_matmul ins(%4625, %4627 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%4629 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %4631 = "tosa.reshape"(%4630) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4632 = tensor.empty() : tensor<1x80x32x128xf32>
    %4633 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4631 : tensor<1x32x80x128xf32>) outs(%4632 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1953 = tensor.extract_slice %4633[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %4634 = "tosa.reshape"(%extracted_slice_1953) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %4635 = tensor.empty() : tensor<4096x4096xf32>
    %4636 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_492 : tensor<4096x4096xf32>) outs(%4635 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4637 = "tosa.reshape"(%4634) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1954 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %4638 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4637, %4636 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1954 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %4639 = "tosa.reshape"(%4638) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4640 = "tosa.add"(%4524, %4639) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %4641 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1955 = arith.constant 2 : i32
    %4642 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4640 : tensor<1x80x4096xf32>) outs(%4641 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1955 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1956 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %4643 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4642 : tensor<1x80x4096xf32>) outs(%cst_1956 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1957 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4644 = "tosa.add"(%4643, %cst_1957) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %4645 = tensor.empty() : tensor<1x80x1xf32>
    %4646 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4644 : tensor<1x80x1xf32>) outs(%4645 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %4647 = tensor.empty() : tensor<1x80x4096xf32>
    %4648 = tensor.empty() : tensor<1x80x4096xf32>
    %4649 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4646 : tensor<1x80x1xf32>) outs(%4648 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4650 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4640, %4649 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4647 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %4651 = tensor.empty() : tensor<1x80x4096xf32>
    %4652 = tensor.empty() : tensor<1x80x4096xf32>
    %4653 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_60 : tensor<4096xf32>) outs(%4652 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4654 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4653, %4650 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4651 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %4655 = tensor.empty() : tensor<4096x11008xf32>
    %4656 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_494 : tensor<11008x4096xf32>) outs(%4655 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4657 = "tosa.reshape"(%4654) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1958 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %4658 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4657, %4656 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1958 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %4659 = "tosa.reshape"(%4658) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %4660 = tensor.empty() : tensor<1x80x11008xf32>
    %4661 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4659 : tensor<1x80x11008xf32>) outs(%4660 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      %4845 = math.exp %4844 : f32
      %cst_2002 = arith.constant 1.000000e+00 : f32
      %4846 = arith.addf %cst_2002, %4845 : f32
      %4847 = arith.divf %in, %4846 : f32
      linalg.yield %4847 : f32
    } -> tensor<1x80x11008xf32>
    %4662 = tensor.empty() : tensor<4096x11008xf32>
    %4663 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_496 : tensor<11008x4096xf32>) outs(%4662 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4664 = "tosa.reshape"(%4654) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1959 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %4665 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4664, %4663 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1959 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %4666 = "tosa.reshape"(%4665) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %4667 = tensor.empty() : tensor<1x80x11008xf32>
    %4668 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4661, %4666 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%4667 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x11008xf32>
    %4669 = tensor.empty() : tensor<11008x4096xf32>
    %4670 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_498 : tensor<4096x11008xf32>) outs(%4669 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %4671 = "tosa.reshape"(%4668) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %cst_1960 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %4672 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4671, %4670 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%cst_1960 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %4673 = "tosa.reshape"(%4672) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4674 = "tosa.add"(%4640, %4673) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %4675 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1961 = arith.constant 2 : i32
    %4676 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4674 : tensor<1x80x4096xf32>) outs(%4675 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1961 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1962 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %4677 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4676 : tensor<1x80x4096xf32>) outs(%cst_1962 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1963 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4678 = "tosa.add"(%4677, %cst_1963) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %4679 = tensor.empty() : tensor<1x80x1xf32>
    %4680 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4678 : tensor<1x80x1xf32>) outs(%4679 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %4681 = tensor.empty() : tensor<1x80x4096xf32>
    %4682 = tensor.empty() : tensor<1x80x4096xf32>
    %4683 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4680 : tensor<1x80x1xf32>) outs(%4682 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4684 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4674, %4683 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4681 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %4685 = tensor.empty() : tensor<1x80x4096xf32>
    %4686 = tensor.empty() : tensor<1x80x4096xf32>
    %4687 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_61 : tensor<4096xf32>) outs(%4686 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4688 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4687, %4684 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4685 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %4689 = tensor.empty() : tensor<4096x4096xf32>
    %4690 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_500 : tensor<4096x4096xf32>) outs(%4689 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4691 = "tosa.reshape"(%4688) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1964 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %4692 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4691, %4690 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1964 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %4693 = "tosa.reshape"(%4692) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4694 = tensor.empty() : tensor<4096x4096xf32>
    %4695 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_502 : tensor<4096x4096xf32>) outs(%4694 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4696 = "tosa.reshape"(%4688) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1965 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %4697 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4696, %4695 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1965 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %4698 = "tosa.reshape"(%4697) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4699 = tensor.empty() : tensor<4096x4096xf32>
    %4700 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_504 : tensor<4096x4096xf32>) outs(%4699 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4701 = "tosa.reshape"(%4688) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1966 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %4702 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4701, %4700 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1966 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %4703 = "tosa.reshape"(%4702) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4704 = "tosa.reshape"(%4693) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4705 = tensor.empty() : tensor<1x32x80x128xf32>
    %4706 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4704 : tensor<1x80x32x128xf32>) outs(%4705 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4707 = "tosa.reshape"(%4698) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4708 = tensor.empty() : tensor<1x32x80x128xf32>
    %4709 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4707 : tensor<1x80x32x128xf32>) outs(%4708 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4710 = "tosa.reshape"(%4703) {new_shape = array<i64: 1, 80, 32, 128>} : (tensor<1x80x4096xf32>) -> tensor<1x80x32x128xf32>
    %4711 = tensor.empty() : tensor<1x32x80x128xf32>
    %4712 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4710 : tensor<1x80x32x128xf32>) outs(%4711 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1967 = tensor.extract_slice %expanded_640[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1968 = tensor.extract_slice %extracted_slice_1967[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1969 = tensor.extract_slice %extracted_slice_1968[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %extracted_slice_1970 = tensor.extract_slice %expanded_642[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1971 = tensor.extract_slice %extracted_slice_1970[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_1972 = tensor.extract_slice %extracted_slice_1971[0, 0, 0, 0] [1, 1, 80, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x80x128xf32>
    %4713 = tensor.empty() : tensor<1x80x128xf32>
    %4714 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1969 : tensor<1x1x80x128xf32>) outs(%4713 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %4715 = tensor.empty() : tensor<80x128xf32>
    %4716 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%4714 : tensor<1x80x128xf32>) outs(%4715 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %4717 = tensor.empty() : tensor<1x80x128xf32>
    %4718 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_1972 : tensor<1x1x80x128xf32>) outs(%4717 : tensor<1x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x128xf32>
    %4719 = tensor.empty() : tensor<80x128xf32>
    %4720 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%4718 : tensor<1x80x128xf32>) outs(%4719 : tensor<80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<80x128xf32>
    %4721 = tensor.empty() : tensor<1x80x128xf32>
    %4722 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%4721 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %4716[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %4723 = "tosa.reshape"(%4722) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %4724 = tensor.empty() : tensor<1x80x128xf32>
    %4725 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x80xi64>) outs(%4724 : tensor<1x80x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %4844 = arith.index_cast %in : i64 to index
      %4845 = linalg.index 2 : index
      %extracted = tensor.extract %4720[%4844, %4845] : tensor<80x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x80x128xf32>
    %4726 = "tosa.reshape"(%4725) {new_shape = array<i64: 1, 1, 80, 128>} : (tensor<1x80x128xf32>) -> tensor<1x1x80x128xf32>
    %4727 = tensor.empty() : tensor<1x32x80x128xf32>
    %4728 = tensor.empty() : tensor<1x32x80x128xf32>
    %4729 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4723 : tensor<1x1x80x128xf32>) outs(%4728 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4730 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4706, %4729 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4727 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1973 = tensor.extract_slice %4706[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1974 = tensor.extract_slice %4706[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %4731 = tensor.empty() : tensor<1x32x80x64xf32>
    %4732 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1974 : tensor<1x32x80x64xf32>) outs(%4731 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %4733 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1975 = tensor.insert_slice %4732 into %4733[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1976 = tensor.insert_slice %extracted_slice_1973 into %inserted_slice_1975[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %4734 = tensor.empty() : tensor<1x32x80x128xf32>
    %4735 = tensor.empty() : tensor<1x32x80x128xf32>
    %4736 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4726 : tensor<1x1x80x128xf32>) outs(%4735 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4737 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1976, %4736 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4734 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %4738 = "tosa.add"(%4730, %4737) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4739 = tensor.empty() : tensor<1x32x80x128xf32>
    %4740 = tensor.empty() : tensor<1x32x80x128xf32>
    %4741 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4723 : tensor<1x1x80x128xf32>) outs(%4740 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4742 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4709, %4741 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4739 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %extracted_slice_1977 = tensor.extract_slice %4709[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %extracted_slice_1978 = tensor.extract_slice %4709[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x64xf32>
    %4743 = tensor.empty() : tensor<1x32x80x64xf32>
    %4744 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1978 : tensor<1x32x80x64xf32>) outs(%4743 : tensor<1x32x80x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x64xf32>
    %4745 = tensor.empty() : tensor<1x32x80x128xf32>
    %inserted_slice_1979 = tensor.insert_slice %4744 into %4745[0, 0, 0, 0] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %inserted_slice_1980 = tensor.insert_slice %extracted_slice_1977 into %inserted_slice_1979[0, 0, 0, 64] [1, 32, 80, 64] [1, 1, 1, 1] : tensor<1x32x80x64xf32> into tensor<1x32x80x128xf32>
    %4746 = tensor.empty() : tensor<1x32x80x128xf32>
    %4747 = tensor.empty() : tensor<1x32x80x128xf32>
    %4748 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4726 : tensor<1x1x80x128xf32>) outs(%4747 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x80x128xf32>
    %4749 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1980, %4748 : tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) outs(%4746 : tensor<1x32x80x128xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x128xf32>
    %4750 = "tosa.add"(%4742, %4749) : (tensor<1x32x80x128xf32>, tensor<1x32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4751 = tensor.empty() : tensor<1x32x128x80xf32>
    %4752 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4750 : tensor<1x32x80x128xf32>) outs(%4751 : tensor<1x32x128x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x80xf32>
    %4753 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1981 = tensor.extract_slice %4738[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1982 = tensor.insert_slice %extracted_slice_1981 into %4753[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %4754 = "tosa.reshape"(%inserted_slice_1982) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %4755 = tensor.empty() : tensor<1x32x128x80xf32>
    %extracted_slice_1983 = tensor.extract_slice %4752[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> to tensor<1x32x128x80xf32>
    %inserted_slice_1984 = tensor.insert_slice %extracted_slice_1983 into %4755[0, 0, 0, 0] [1, 32, 128, 80] [1, 1, 1, 1] : tensor<1x32x128x80xf32> into tensor<1x32x128x80xf32>
    %4756 = "tosa.reshape"(%inserted_slice_1984) {new_shape = array<i64: 32, 128, 80>} : (tensor<1x32x128x80xf32>) -> tensor<32x128x80xf32>
    %4757 = tensor.empty() : tensor<32x80x80xf32>
    %4758 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%4757 : tensor<32x80x80xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x80xf32>
    %4759 = linalg.batch_matmul ins(%4754, %4756 : tensor<32x80x128xf32>, tensor<32x128x80xf32>) outs(%4758 : tensor<32x80x80xf32>) -> tensor<32x80x80xf32>
    %4760 = "tosa.reshape"(%4759) {new_shape = array<i64: 1, 32, 80, 80>} : (tensor<32x80x80xf32>) -> tensor<1x32x80x80xf32>
    %cst_1985 = arith.constant 11.3137083 : f32
    %4761 = tensor.empty() : tensor<1x32x80x80xf32>
    %4762 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4760 : tensor<1x32x80x80xf32>) outs(%4761 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.divf %in, %cst_1985 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %4763 = "tosa.add"(%4762, %24) : (tensor<1x32x80x80xf32>, tensor<1x1x80x80xf32>) -> tensor<1x32x80x80xf32>
    %4764 = tensor.empty() : tensor<1x32x80x1xf32>
    %4765 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4764 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %4766 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4763 : tensor<1x32x80x80xf32>) outs(%4764 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.maxf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %4767 = tensor.empty() : tensor<1x32x80x80xf32>
    %4768 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4763, %4766 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%4767 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.subf %in, %in_2002 : f32
      %4845 = math.exp %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<1x32x80x80xf32>
    %4769 = tensor.empty() : tensor<1x32x80x1xf32>
    %4770 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4769 : tensor<1x32x80x1xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<1x32x80x1xf32>
    %4771 = linalg.generic {indexing_maps = [#map5, #map17], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4768 : tensor<1x32x80x80xf32>) outs(%4770 : tensor<1x32x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.addf %in, %out : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x1xf32>
    %4772 = tensor.empty() : tensor<1x32x80x80xf32>
    %4773 = linalg.generic {indexing_maps = [#map5, #map17, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4768, %4771 : tensor<1x32x80x80xf32>, tensor<1x32x80x1xf32>) outs(%4772 : tensor<1x32x80x80xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.divf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x32x80x80xf32>
    %4774 = tensor.empty() : tensor<1x32x80x80xf32>
    %extracted_slice_1986 = tensor.extract_slice %4773[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> to tensor<1x32x80x80xf32>
    %inserted_slice_1987 = tensor.insert_slice %extracted_slice_1986 into %4774[0, 0, 0, 0] [1, 32, 80, 80] [1, 1, 1, 1] : tensor<1x32x80x80xf32> into tensor<1x32x80x80xf32>
    %4775 = "tosa.reshape"(%inserted_slice_1987) {new_shape = array<i64: 32, 80, 80>} : (tensor<1x32x80x80xf32>) -> tensor<32x80x80xf32>
    %4776 = tensor.empty() : tensor<1x32x80x128xf32>
    %extracted_slice_1988 = tensor.extract_slice %4712[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> to tensor<1x32x80x128xf32>
    %inserted_slice_1989 = tensor.insert_slice %extracted_slice_1988 into %4776[0, 0, 0, 0] [1, 32, 80, 128] [1, 1, 1, 1] : tensor<1x32x80x128xf32> into tensor<1x32x80x128xf32>
    %4777 = "tosa.reshape"(%inserted_slice_1989) {new_shape = array<i64: 32, 80, 128>} : (tensor<1x32x80x128xf32>) -> tensor<32x80x128xf32>
    %4778 = tensor.empty() : tensor<32x80x128xf32>
    %4779 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%4778 : tensor<32x80x128xf32>) {
    ^bb0(%out: f32):
      %cst_2002 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_2002 : f32
    } -> tensor<32x80x128xf32>
    %4780 = linalg.batch_matmul ins(%4775, %4777 : tensor<32x80x80xf32>, tensor<32x80x128xf32>) outs(%4779 : tensor<32x80x128xf32>) -> tensor<32x80x128xf32>
    %4781 = "tosa.reshape"(%4780) {new_shape = array<i64: 1, 32, 80, 128>} : (tensor<32x80x128xf32>) -> tensor<1x32x80x128xf32>
    %4782 = tensor.empty() : tensor<1x80x32x128xf32>
    %4783 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4781 : tensor<1x32x80x128xf32>) outs(%4782 : tensor<1x80x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x32x128xf32>
    %extracted_slice_1990 = tensor.extract_slice %4783[0, 0, 0, 0] [1, 80, 32, 128] [1, 1, 1, 1] : tensor<1x80x32x128xf32> to tensor<1x80x32x128xf32>
    %4784 = "tosa.reshape"(%extracted_slice_1990) {new_shape = array<i64: 1, 80, 4096>} : (tensor<1x80x32x128xf32>) -> tensor<1x80x4096xf32>
    %4785 = tensor.empty() : tensor<4096x4096xf32>
    %4786 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_506 : tensor<4096x4096xf32>) outs(%4785 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4787 = "tosa.reshape"(%4784) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1991 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %4788 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4787, %4786 : tensor<80x4096xf32>, tensor<4096x4096xf32>) outs(%cst_1991 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %4789 = "tosa.reshape"(%4788) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4790 = "tosa.add"(%4674, %4789) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %4791 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1992 = arith.constant 2 : i32
    %4792 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4790 : tensor<1x80x4096xf32>) outs(%4791 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1992 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1993 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %4793 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4792 : tensor<1x80x4096xf32>) outs(%cst_1993 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_1994 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4794 = "tosa.add"(%4793, %cst_1994) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %4795 = tensor.empty() : tensor<1x80x1xf32>
    %4796 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4794 : tensor<1x80x1xf32>) outs(%4795 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %4797 = tensor.empty() : tensor<1x80x4096xf32>
    %4798 = tensor.empty() : tensor<1x80x4096xf32>
    %4799 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4796 : tensor<1x80x1xf32>) outs(%4798 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4800 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4790, %4799 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4797 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %4801 = tensor.empty() : tensor<1x80x4096xf32>
    %4802 = tensor.empty() : tensor<1x80x4096xf32>
    %4803 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_62 : tensor<4096xf32>) outs(%4802 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4804 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4803, %4800 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4801 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %4805 = tensor.empty() : tensor<4096x11008xf32>
    %4806 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_508 : tensor<11008x4096xf32>) outs(%4805 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4807 = "tosa.reshape"(%4804) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1995 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %4808 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4807, %4806 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1995 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %4809 = "tosa.reshape"(%4808) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %4810 = tensor.empty() : tensor<1x80x11008xf32>
    %4811 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4809 : tensor<1x80x11008xf32>) outs(%4810 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = arith.negf %in : f32
      %4845 = math.exp %4844 : f32
      %cst_2002 = arith.constant 1.000000e+00 : f32
      %4846 = arith.addf %cst_2002, %4845 : f32
      %4847 = arith.divf %in, %4846 : f32
      linalg.yield %4847 : f32
    } -> tensor<1x80x11008xf32>
    %4812 = tensor.empty() : tensor<4096x11008xf32>
    %4813 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_510 : tensor<11008x4096xf32>) outs(%4812 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4814 = "tosa.reshape"(%4804) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_1996 = arith.constant dense<0.000000e+00> : tensor<80x11008xf32>
    %4815 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4814, %4813 : tensor<80x4096xf32>, tensor<4096x11008xf32>) outs(%cst_1996 : tensor<80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x11008xf32>
    %4816 = "tosa.reshape"(%4815) {new_shape = array<i64: 1, 80, 11008>} : (tensor<80x11008xf32>) -> tensor<1x80x11008xf32>
    %4817 = tensor.empty() : tensor<1x80x11008xf32>
    %4818 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4811, %4816 : tensor<1x80x11008xf32>, tensor<1x80x11008xf32>) outs(%4817 : tensor<1x80x11008xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x11008xf32>
    %4819 = tensor.empty() : tensor<11008x4096xf32>
    %4820 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_512 : tensor<4096x11008xf32>) outs(%4819 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %4821 = "tosa.reshape"(%4818) {new_shape = array<i64: 80, 11008>} : (tensor<1x80x11008xf32>) -> tensor<80x11008xf32>
    %cst_1997 = arith.constant dense<0.000000e+00> : tensor<80x4096xf32>
    %4822 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4821, %4820 : tensor<80x11008xf32>, tensor<11008x4096xf32>) outs(%cst_1997 : tensor<80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x4096xf32>
    %4823 = "tosa.reshape"(%4822) {new_shape = array<i64: 1, 80, 4096>} : (tensor<80x4096xf32>) -> tensor<1x80x4096xf32>
    %4824 = "tosa.add"(%4790, %4823) : (tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) -> tensor<1x80x4096xf32>
    %4825 = tensor.empty() : tensor<1x80x4096xf32>
    %c2_i32_1998 = arith.constant 2 : i32
    %4826 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4824 : tensor<1x80x4096xf32>) outs(%4825 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.fpowi %in, %c2_i32_1998 : f32, i32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %cst_1999 = arith.constant dense<0.000000e+00> : tensor<1x80x1xf32>
    %4827 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4826 : tensor<1x80x4096xf32>) outs(%cst_1999 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_2002 = arith.constant 4.096000e+03 : f32
      %4844 = arith.divf %in, %cst_2002 : f32
      %4845 = arith.addf %4844, %out : f32
      linalg.yield %4845 : f32
    } -> tensor<1x80x1xf32>
    %cst_2000 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4828 = "tosa.add"(%4827, %cst_2000) : (tensor<1x80x1xf32>, tensor<f32>) -> tensor<1x80x1xf32>
    %4829 = tensor.empty() : tensor<1x80x1xf32>
    %4830 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4828 : tensor<1x80x1xf32>) outs(%4829 : tensor<1x80x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4844 = math.rsqrt %in : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x1xf32>
    %4831 = tensor.empty() : tensor<1x80x4096xf32>
    %4832 = tensor.empty() : tensor<1x80x4096xf32>
    %4833 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4830 : tensor<1x80x1xf32>) outs(%4832 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4834 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4824, %4833 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4831 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %4835 = tensor.empty() : tensor<1x80x4096xf32>
    %4836 = tensor.empty() : tensor<1x80x4096xf32>
    %4837 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_63 : tensor<4096xf32>) outs(%4836 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x80x4096xf32>
    %4838 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4837, %4834 : tensor<1x80x4096xf32>, tensor<1x80x4096xf32>) outs(%4835 : tensor<1x80x4096xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      linalg.yield %4844 : f32
    } -> tensor<1x80x4096xf32>
    %4839 = tensor.empty() : tensor<4096x32000xf32>
    %4840 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%expanded_514 : tensor<32000x4096xf32>) outs(%4839 : tensor<4096x32000xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x32000xf32>
    %4841 = "tosa.reshape"(%4838) {new_shape = array<i64: 80, 4096>} : (tensor<1x80x4096xf32>) -> tensor<80x4096xf32>
    %cst_2001 = arith.constant dense<0.000000e+00> : tensor<80x32000xf32>
    %4842 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4841, %4840 : tensor<80x4096xf32>, tensor<4096x32000xf32>) outs(%cst_2001 : tensor<80x32000xf32>) {
    ^bb0(%in: f32, %in_2002: f32, %out: f32):
      %4844 = arith.mulf %in, %in_2002 : f32
      %4845 = arith.addf %out, %4844 : f32
      linalg.yield %4845 : f32
    } -> tensor<80x32000xf32>
    %4843 = "tosa.reshape"(%4842) {new_shape = array<i64: 1, 80, 32000>} : (tensor<80x32000xf32>) -> tensor<1x80x32000xf32>
    return %4843 : tensor<1x80x32000xf32>
  }
}
