#map = affine_map<(d0, d1, d2) -> (d0, d1)>
#map1 = affine_map<(d0, d1, d2) -> (d0, d1, d2)>
#map2 = affine_map<(d0, d1, d2) -> (d1)>
#map3 = affine_map<(d0, d1, d2) -> (d0, d2)>
#map4 = affine_map<(d0, d1) -> (d0, d1)>
#map5 = affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>
#map6 = affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>
#map7 = affine_map<(d0, d1, d2, d3) -> (d0, d1, d3)>
#map8 = affine_map<(d0, d1, d2) -> (d2)>
#map9 = affine_map<(d0, d1) -> (d1, d0)>
#map10 = affine_map<(d0, d1, d2) -> (d2, d1)>
#map11 = affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>
#map12 = affine_map<(d0, d1, d2) -> (d0, 0, d1, d2)>
#map13 = affine_map<(d0, d1) -> (0, d0, d1)>
#map14 = affine_map<(d0, d1, d2, d3, d4) -> (d0, d4, d2, d3)>
#map15 = affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>
#map16 = affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>
#map17 = affine_map<(d0, d1, d2, d3) -> (d0, d3, d2)>
#map18 = affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>
module {
  func.func @forward(%arg0: tensor<4096xf32>, %arg1: tensor<4096xf32>, %arg2: tensor<4096xf32>, %arg3: tensor<4096xf32>, %arg4: tensor<4096xf32>, %arg5: tensor<4096xf32>, %arg6: tensor<4096xf32>, %arg7: tensor<4096xf32>, %arg8: tensor<4096xf32>, %arg9: tensor<4096xf32>, %arg10: tensor<4096xf32>, %arg11: tensor<4096xf32>, %arg12: tensor<4096xf32>, %arg13: tensor<4096xf32>, %arg14: tensor<4096xf32>, %arg15: tensor<4096xf32>, %arg16: tensor<4096xf32>, %arg17: tensor<4096xf32>, %arg18: tensor<4096xf32>, %arg19: tensor<4096xf32>, %arg20: tensor<4096xf32>, %arg21: tensor<4096xf32>, %arg22: tensor<4096xf32>, %arg23: tensor<4096xf32>, %arg24: tensor<4096xf32>, %arg25: tensor<4096xf32>, %arg26: tensor<4096xf32>, %arg27: tensor<4096xf32>, %arg28: tensor<4096xf32>, %arg29: tensor<4096xf32>, %arg30: tensor<4096xf32>, %arg31: tensor<4096xf32>, %arg32: tensor<4096xf32>, %arg33: tensor<4096xf32>, %arg34: tensor<4096xf32>, %arg35: tensor<4096xf32>, %arg36: tensor<4096xf32>, %arg37: tensor<4096xf32>, %arg38: tensor<4096xf32>, %arg39: tensor<4096xf32>, %arg40: tensor<4096xf32>, %arg41: tensor<4096xf32>, %arg42: tensor<4096xf32>, %arg43: tensor<4096xf32>, %arg44: tensor<4096xf32>, %arg45: tensor<4096xf32>, %arg46: tensor<4096xf32>, %arg47: tensor<4096xf32>, %arg48: tensor<4096xf32>, %arg49: tensor<4096xf32>, %arg50: tensor<4096xf32>, %arg51: tensor<4096xf32>, %arg52: tensor<4096xf32>, %arg53: tensor<4096xf32>, %arg54: tensor<4096xf32>, %arg55: tensor<4096xf32>, %arg56: tensor<4096xf32>, %arg57: tensor<4096xf32>, %arg58: tensor<4096xf32>, %arg59: tensor<4096xf32>, %arg60: tensor<4096xf32>, %arg61: tensor<4096xf32>, %arg62: tensor<4096xf32>, %arg63: tensor<4096xf32>, %arg64: tensor<4096xf32>, %arg65: tensor<32000x4096xf32>, %arg66: tensor<4096x4096xf32>, %arg67: tensor<4096x4096xf32>, %arg68: tensor<4096x4096xf32>, %arg69: tensor<4096x4096xf32>, %arg70: tensor<11008x4096xf32>, %arg71: tensor<11008x4096xf32>, %arg72: tensor<4096x11008xf32>, %arg73: tensor<4096x4096xf32>, %arg74: tensor<4096x4096xf32>, %arg75: tensor<4096x4096xf32>, %arg76: tensor<4096x4096xf32>, %arg77: tensor<11008x4096xf32>, %arg78: tensor<11008x4096xf32>, %arg79: tensor<4096x11008xf32>, %arg80: tensor<4096x4096xf32>, %arg81: tensor<4096x4096xf32>, %arg82: tensor<4096x4096xf32>, %arg83: tensor<4096x4096xf32>, %arg84: tensor<11008x4096xf32>, %arg85: tensor<11008x4096xf32>, %arg86: tensor<4096x11008xf32>, %arg87: tensor<4096x4096xf32>, %arg88: tensor<4096x4096xf32>, %arg89: tensor<4096x4096xf32>, %arg90: tensor<4096x4096xf32>, %arg91: tensor<11008x4096xf32>, %arg92: tensor<11008x4096xf32>, %arg93: tensor<4096x11008xf32>, %arg94: tensor<4096x4096xf32>, %arg95: tensor<4096x4096xf32>, %arg96: tensor<4096x4096xf32>, %arg97: tensor<4096x4096xf32>, %arg98: tensor<11008x4096xf32>, %arg99: tensor<11008x4096xf32>, %arg100: tensor<4096x11008xf32>, %arg101: tensor<4096x4096xf32>, %arg102: tensor<4096x4096xf32>, %arg103: tensor<4096x4096xf32>, %arg104: tensor<4096x4096xf32>, %arg105: tensor<11008x4096xf32>, %arg106: tensor<11008x4096xf32>, %arg107: tensor<4096x11008xf32>, %arg108: tensor<4096x4096xf32>, %arg109: tensor<4096x4096xf32>, %arg110: tensor<4096x4096xf32>, %arg111: tensor<4096x4096xf32>, %arg112: tensor<11008x4096xf32>, %arg113: tensor<11008x4096xf32>, %arg114: tensor<4096x11008xf32>, %arg115: tensor<4096x4096xf32>, %arg116: tensor<4096x4096xf32>, %arg117: tensor<4096x4096xf32>, %arg118: tensor<4096x4096xf32>, %arg119: tensor<11008x4096xf32>, %arg120: tensor<11008x4096xf32>, %arg121: tensor<4096x11008xf32>, %arg122: tensor<4096x4096xf32>, %arg123: tensor<4096x4096xf32>, %arg124: tensor<4096x4096xf32>, %arg125: tensor<4096x4096xf32>, %arg126: tensor<11008x4096xf32>, %arg127: tensor<11008x4096xf32>, %arg128: tensor<4096x11008xf32>, %arg129: tensor<4096x4096xf32>, %arg130: tensor<4096x4096xf32>, %arg131: tensor<4096x4096xf32>, %arg132: tensor<4096x4096xf32>, %arg133: tensor<11008x4096xf32>, %arg134: tensor<11008x4096xf32>, %arg135: tensor<4096x11008xf32>, %arg136: tensor<4096x4096xf32>, %arg137: tensor<4096x4096xf32>, %arg138: tensor<4096x4096xf32>, %arg139: tensor<4096x4096xf32>, %arg140: tensor<11008x4096xf32>, %arg141: tensor<11008x4096xf32>, %arg142: tensor<4096x11008xf32>, %arg143: tensor<4096x4096xf32>, %arg144: tensor<4096x4096xf32>, %arg145: tensor<4096x4096xf32>, %arg146: tensor<4096x4096xf32>, %arg147: tensor<11008x4096xf32>, %arg148: tensor<11008x4096xf32>, %arg149: tensor<4096x11008xf32>, %arg150: tensor<4096x4096xf32>, %arg151: tensor<4096x4096xf32>, %arg152: tensor<4096x4096xf32>, %arg153: tensor<4096x4096xf32>, %arg154: tensor<11008x4096xf32>, %arg155: tensor<11008x4096xf32>, %arg156: tensor<4096x11008xf32>, %arg157: tensor<4096x4096xf32>, %arg158: tensor<4096x4096xf32>, %arg159: tensor<4096x4096xf32>, %arg160: tensor<4096x4096xf32>, %arg161: tensor<11008x4096xf32>, %arg162: tensor<11008x4096xf32>, %arg163: tensor<4096x11008xf32>, %arg164: tensor<4096x4096xf32>, %arg165: tensor<4096x4096xf32>, %arg166: tensor<4096x4096xf32>, %arg167: tensor<4096x4096xf32>, %arg168: tensor<11008x4096xf32>, %arg169: tensor<11008x4096xf32>, %arg170: tensor<4096x11008xf32>, %arg171: tensor<4096x4096xf32>, %arg172: tensor<4096x4096xf32>, %arg173: tensor<4096x4096xf32>, %arg174: tensor<4096x4096xf32>, %arg175: tensor<11008x4096xf32>, %arg176: tensor<11008x4096xf32>, %arg177: tensor<4096x11008xf32>, %arg178: tensor<4096x4096xf32>, %arg179: tensor<4096x4096xf32>, %arg180: tensor<4096x4096xf32>, %arg181: tensor<4096x4096xf32>, %arg182: tensor<11008x4096xf32>, %arg183: tensor<11008x4096xf32>, %arg184: tensor<4096x11008xf32>, %arg185: tensor<4096x4096xf32>, %arg186: tensor<4096x4096xf32>, %arg187: tensor<4096x4096xf32>, %arg188: tensor<4096x4096xf32>, %arg189: tensor<11008x4096xf32>, %arg190: tensor<11008x4096xf32>, %arg191: tensor<4096x11008xf32>, %arg192: tensor<4096x4096xf32>, %arg193: tensor<4096x4096xf32>, %arg194: tensor<4096x4096xf32>, %arg195: tensor<4096x4096xf32>, %arg196: tensor<11008x4096xf32>, %arg197: tensor<11008x4096xf32>, %arg198: tensor<4096x11008xf32>, %arg199: tensor<4096x4096xf32>, %arg200: tensor<4096x4096xf32>, %arg201: tensor<4096x4096xf32>, %arg202: tensor<4096x4096xf32>, %arg203: tensor<11008x4096xf32>, %arg204: tensor<11008x4096xf32>, %arg205: tensor<4096x11008xf32>, %arg206: tensor<4096x4096xf32>, %arg207: tensor<4096x4096xf32>, %arg208: tensor<4096x4096xf32>, %arg209: tensor<4096x4096xf32>, %arg210: tensor<11008x4096xf32>, %arg211: tensor<11008x4096xf32>, %arg212: tensor<4096x11008xf32>, %arg213: tensor<4096x4096xf32>, %arg214: tensor<4096x4096xf32>, %arg215: tensor<4096x4096xf32>, %arg216: tensor<4096x4096xf32>, %arg217: tensor<11008x4096xf32>, %arg218: tensor<11008x4096xf32>, %arg219: tensor<4096x11008xf32>, %arg220: tensor<4096x4096xf32>, %arg221: tensor<4096x4096xf32>, %arg222: tensor<4096x4096xf32>, %arg223: tensor<4096x4096xf32>, %arg224: tensor<11008x4096xf32>, %arg225: tensor<11008x4096xf32>, %arg226: tensor<4096x11008xf32>, %arg227: tensor<4096x4096xf32>, %arg228: tensor<4096x4096xf32>, %arg229: tensor<4096x4096xf32>, %arg230: tensor<4096x4096xf32>, %arg231: tensor<11008x4096xf32>, %arg232: tensor<11008x4096xf32>, %arg233: tensor<4096x11008xf32>, %arg234: tensor<4096x4096xf32>, %arg235: tensor<4096x4096xf32>, %arg236: tensor<4096x4096xf32>, %arg237: tensor<4096x4096xf32>, %arg238: tensor<11008x4096xf32>, %arg239: tensor<11008x4096xf32>, %arg240: tensor<4096x11008xf32>, %arg241: tensor<4096x4096xf32>, %arg242: tensor<4096x4096xf32>, %arg243: tensor<4096x4096xf32>, %arg244: tensor<4096x4096xf32>, %arg245: tensor<11008x4096xf32>, %arg246: tensor<11008x4096xf32>, %arg247: tensor<4096x11008xf32>, %arg248: tensor<4096x4096xf32>, %arg249: tensor<4096x4096xf32>, %arg250: tensor<4096x4096xf32>, %arg251: tensor<4096x4096xf32>, %arg252: tensor<11008x4096xf32>, %arg253: tensor<11008x4096xf32>, %arg254: tensor<4096x11008xf32>, %arg255: tensor<4096x4096xf32>, %arg256: tensor<4096x4096xf32>, %arg257: tensor<4096x4096xf32>, %arg258: tensor<4096x4096xf32>, %arg259: tensor<11008x4096xf32>, %arg260: tensor<11008x4096xf32>, %arg261: tensor<4096x11008xf32>, %arg262: tensor<4096x4096xf32>, %arg263: tensor<4096x4096xf32>, %arg264: tensor<4096x4096xf32>, %arg265: tensor<4096x4096xf32>, %arg266: tensor<11008x4096xf32>, %arg267: tensor<11008x4096xf32>, %arg268: tensor<4096x11008xf32>, %arg269: tensor<4096x4096xf32>, %arg270: tensor<4096x4096xf32>, %arg271: tensor<4096x4096xf32>, %arg272: tensor<4096x4096xf32>, %arg273: tensor<11008x4096xf32>, %arg274: tensor<11008x4096xf32>, %arg275: tensor<4096x11008xf32>, %arg276: tensor<4096x4096xf32>, %arg277: tensor<4096x4096xf32>, %arg278: tensor<4096x4096xf32>, %arg279: tensor<4096x4096xf32>, %arg280: tensor<11008x4096xf32>, %arg281: tensor<11008x4096xf32>, %arg282: tensor<4096x11008xf32>, %arg283: tensor<4096x4096xf32>, %arg284: tensor<4096x4096xf32>, %arg285: tensor<4096x4096xf32>, %arg286: tensor<4096x4096xf32>, %arg287: tensor<11008x4096xf32>, %arg288: tensor<11008x4096xf32>, %arg289: tensor<4096x11008xf32>, %arg290: tensor<32000x4096xf32>, %arg291: tensor<1x1x2048x128xf32>, %arg292: tensor<1x1x2048x128xf32>, %arg293: tensor<1x1x2048x128xf32>, %arg294: tensor<1x1x2048x128xf32>, %arg295: tensor<1x1x2048x128xf32>, %arg296: tensor<1x1x2048x128xf32>, %arg297: tensor<1x1x2048x128xf32>, %arg298: tensor<1x1x2048x128xf32>, %arg299: tensor<1x1x2048x128xf32>, %arg300: tensor<1x1x2048x128xf32>, %arg301: tensor<1x1x2048x128xf32>, %arg302: tensor<1x1x2048x128xf32>, %arg303: tensor<1x1x2048x128xf32>, %arg304: tensor<1x1x2048x128xf32>, %arg305: tensor<1x1x2048x128xf32>, %arg306: tensor<1x1x2048x128xf32>, %arg307: tensor<1x1x2048x128xf32>, %arg308: tensor<1x1x2048x128xf32>, %arg309: tensor<1x1x2048x128xf32>, %arg310: tensor<1x1x2048x128xf32>, %arg311: tensor<1x1x2048x128xf32>, %arg312: tensor<1x1x2048x128xf32>, %arg313: tensor<1x1x2048x128xf32>, %arg314: tensor<1x1x2048x128xf32>, %arg315: tensor<1x1x2048x128xf32>, %arg316: tensor<1x1x2048x128xf32>, %arg317: tensor<1x1x2048x128xf32>, %arg318: tensor<1x1x2048x128xf32>, %arg319: tensor<1x1x2048x128xf32>, %arg320: tensor<1x1x2048x128xf32>, %arg321: tensor<1x1x2048x128xf32>, %arg322: tensor<1x1x2048x128xf32>, %arg323: tensor<1x1x2048x128xf32>, %arg324: tensor<1x1x2048x128xf32>, %arg325: tensor<1x1x2048x128xf32>, %arg326: tensor<1x1x2048x128xf32>, %arg327: tensor<1x1x2048x128xf32>, %arg328: tensor<1x1x2048x128xf32>, %arg329: tensor<1x1x2048x128xf32>, %arg330: tensor<1x1x2048x128xf32>, %arg331: tensor<1x1x2048x128xf32>, %arg332: tensor<1x1x2048x128xf32>, %arg333: tensor<1x1x2048x128xf32>, %arg334: tensor<1x1x2048x128xf32>, %arg335: tensor<1x1x2048x128xf32>, %arg336: tensor<1x1x2048x128xf32>, %arg337: tensor<1x1x2048x128xf32>, %arg338: tensor<1x1x2048x128xf32>, %arg339: tensor<1x1x2048x128xf32>, %arg340: tensor<1x1x2048x128xf32>, %arg341: tensor<1x1x2048x128xf32>, %arg342: tensor<1x1x2048x128xf32>, %arg343: tensor<1x1x2048x128xf32>, %arg344: tensor<1x1x2048x128xf32>, %arg345: tensor<1x1x2048x128xf32>, %arg346: tensor<1x1x2048x128xf32>, %arg347: tensor<1x1x2048x128xf32>, %arg348: tensor<1x1x2048x128xf32>, %arg349: tensor<1x1x2048x128xf32>, %arg350: tensor<1x1x2048x128xf32>, %arg351: tensor<1x1x2048x128xf32>, %arg352: tensor<1x1x2048x128xf32>, %arg353: tensor<1x1x2048x128xf32>, %arg354: tensor<1x1x2048x128xf32>, %arg355: tensor<1x13xi64>) -> (tensor<1x13x32000xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x13x4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<1x13xi64>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x32000xf32>, tensor<13x4096xf32>) {
    %cst = arith.constant dense<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]> : tensor<13xi64>
    %0 = "tosa.reshape"(%cst) {new_shape = array<i64: 1, 13>} : (tensor<13xi64>) -> tensor<1x13xi64>
    %1 = "tosa.reshape"(%0) {new_shape = array<i64: 1, 13>} : (tensor<1x13xi64>) -> tensor<1x13xi64>
    %2 = tensor.empty() : tensor<1x13x4096xf32>
    %3 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg355 : tensor<1x13xi64>) outs(%2 : tensor<1x13x4096xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %arg65[%5294, %5295] : tensor<32000x4096xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x4096xf32>
    %cst_0 = arith.constant dense<true> : tensor<1x13xi1>
    %cst_1 = arith.constant dense<-3.40282347E+38> : tensor<13x13xf32>
    %cst_2 = arith.constant dense<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]> : tensor<13xi64>
    %cst_3 = arith.constant dense<1> : tensor<i64>
    %4 = "tosa.add"(%cst_2, %cst_3) : (tensor<13xi64>, tensor<i64>) -> tensor<13xi64>
    %5 = "tosa.reshape"(%4) {new_shape = array<i64: 13, 1>} : (tensor<13xi64>) -> tensor<13x1xi64>
    %6 = tensor.empty() : tensor<13x13xi1>
    %7 = linalg.generic {indexing_maps = [#map2, #map3, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%cst_2, %5 : tensor<13xi64>, tensor<13x1xi64>) outs(%6 : tensor<13x13xi1>) {
    ^bb0(%in: i64, %in_999: i64, %out: i1):
      %5294 = arith.cmpi sle, %in, %in_999 : i64
      linalg.yield %5294 : i1
    } -> tensor<13x13xi1>
    %cst_4 = arith.constant 0.000000e+00 : f32
    %8 = tensor.empty() : tensor<13x13xf32>
    %9 = linalg.generic {indexing_maps = [#map4, #map4, #map4], iterator_types = ["parallel", "parallel"]} ins(%cst_1, %7 : tensor<13x13xf32>, tensor<13x13xi1>) outs(%8 : tensor<13x13xf32>) {
    ^bb0(%in: f32, %in_999: i1, %out: f32):
      %5294 = arith.select %in_999, %cst_4, %in : f32
      linalg.yield %5294 : f32
    } -> tensor<13x13xf32>
    %extracted_slice = tensor.extract_slice %cst_0[0, 0] [1, 13] [1, 1] : tensor<1x13xi1> to tensor<1x13xi1>
    %10 = "tosa.reshape"(%extracted_slice) {new_shape = array<i64: 1, 1, 13>} : (tensor<1x13xi1>) -> tensor<1x1x13xi1>
    %11 = "tosa.reshape"(%10) {new_shape = array<i64: 1, 1, 1, 13>} : (tensor<1x1x13xi1>) -> tensor<1x1x1x13xi1>
    %extracted_slice_5 = tensor.extract_slice %11[0, 0, 0, 0] [1, 1, 1, 13] [1, 1, 1, 1] : tensor<1x1x1x13xi1> to tensor<1x1x1x13xi1>
    %12 = tensor.empty() : tensor<1x1x13x13xi1>
    %extracted_slice_6 = tensor.extract_slice %extracted_slice_5[0, 0, 0, 0] [1, 1, 1, 13] [1, 1, 1, 1] : tensor<1x1x1x13xi1> to tensor<1x1x1x13xi1>
    %inserted_slice = tensor.insert_slice %extracted_slice_6 into %12[0, 0, 0, 0] [1, 1, 1, 13] [1, 1, 1, 1] : tensor<1x1x1x13xi1> into tensor<1x1x13x13xi1>
    %extracted_slice_7 = tensor.extract_slice %extracted_slice_5[0, 0, 0, 0] [1, 1, 1, 13] [1, 1, 1, 1] : tensor<1x1x1x13xi1> to tensor<1x1x1x13xi1>
    %inserted_slice_8 = tensor.insert_slice %extracted_slice_7 into %12[0, 0, 1, 0] [1, 1, 1, 13] [1, 1, 1, 1] : tensor<1x1x1x13xi1> into tensor<1x1x13x13xi1>
    %extracted_slice_9 = tensor.extract_slice %extracted_slice_5[0, 0, 0, 0] [1, 1, 1, 13] [1, 1, 1, 1] : tensor<1x1x1x13xi1> to tensor<1x1x1x13xi1>
    %inserted_slice_10 = tensor.insert_slice %extracted_slice_9 into %12[0, 0, 2, 0] [1, 1, 1, 13] [1, 1, 1, 1] : tensor<1x1x1x13xi1> into tensor<1x1x13x13xi1>
    %extracted_slice_11 = tensor.extract_slice %extracted_slice_5[0, 0, 0, 0] [1, 1, 1, 13] [1, 1, 1, 1] : tensor<1x1x1x13xi1> to tensor<1x1x1x13xi1>
    %inserted_slice_12 = tensor.insert_slice %extracted_slice_11 into %12[0, 0, 3, 0] [1, 1, 1, 13] [1, 1, 1, 1] : tensor<1x1x1x13xi1> into tensor<1x1x13x13xi1>
    %extracted_slice_13 = tensor.extract_slice %extracted_slice_5[0, 0, 0, 0] [1, 1, 1, 13] [1, 1, 1, 1] : tensor<1x1x1x13xi1> to tensor<1x1x1x13xi1>
    %inserted_slice_14 = tensor.insert_slice %extracted_slice_13 into %12[0, 0, 4, 0] [1, 1, 1, 13] [1, 1, 1, 1] : tensor<1x1x1x13xi1> into tensor<1x1x13x13xi1>
    %extracted_slice_15 = tensor.extract_slice %extracted_slice_5[0, 0, 0, 0] [1, 1, 1, 13] [1, 1, 1, 1] : tensor<1x1x1x13xi1> to tensor<1x1x1x13xi1>
    %inserted_slice_16 = tensor.insert_slice %extracted_slice_15 into %12[0, 0, 5, 0] [1, 1, 1, 13] [1, 1, 1, 1] : tensor<1x1x1x13xi1> into tensor<1x1x13x13xi1>
    %extracted_slice_17 = tensor.extract_slice %extracted_slice_5[0, 0, 0, 0] [1, 1, 1, 13] [1, 1, 1, 1] : tensor<1x1x1x13xi1> to tensor<1x1x1x13xi1>
    %inserted_slice_18 = tensor.insert_slice %extracted_slice_17 into %12[0, 0, 6, 0] [1, 1, 1, 13] [1, 1, 1, 1] : tensor<1x1x1x13xi1> into tensor<1x1x13x13xi1>
    %extracted_slice_19 = tensor.extract_slice %extracted_slice_5[0, 0, 0, 0] [1, 1, 1, 13] [1, 1, 1, 1] : tensor<1x1x1x13xi1> to tensor<1x1x1x13xi1>
    %inserted_slice_20 = tensor.insert_slice %extracted_slice_19 into %12[0, 0, 7, 0] [1, 1, 1, 13] [1, 1, 1, 1] : tensor<1x1x1x13xi1> into tensor<1x1x13x13xi1>
    %extracted_slice_21 = tensor.extract_slice %extracted_slice_5[0, 0, 0, 0] [1, 1, 1, 13] [1, 1, 1, 1] : tensor<1x1x1x13xi1> to tensor<1x1x1x13xi1>
    %inserted_slice_22 = tensor.insert_slice %extracted_slice_21 into %12[0, 0, 8, 0] [1, 1, 1, 13] [1, 1, 1, 1] : tensor<1x1x1x13xi1> into tensor<1x1x13x13xi1>
    %extracted_slice_23 = tensor.extract_slice %extracted_slice_5[0, 0, 0, 0] [1, 1, 1, 13] [1, 1, 1, 1] : tensor<1x1x1x13xi1> to tensor<1x1x1x13xi1>
    %inserted_slice_24 = tensor.insert_slice %extracted_slice_23 into %12[0, 0, 9, 0] [1, 1, 1, 13] [1, 1, 1, 1] : tensor<1x1x1x13xi1> into tensor<1x1x13x13xi1>
    %extracted_slice_25 = tensor.extract_slice %extracted_slice_5[0, 0, 0, 0] [1, 1, 1, 13] [1, 1, 1, 1] : tensor<1x1x1x13xi1> to tensor<1x1x1x13xi1>
    %inserted_slice_26 = tensor.insert_slice %extracted_slice_25 into %12[0, 0, 10, 0] [1, 1, 1, 13] [1, 1, 1, 1] : tensor<1x1x1x13xi1> into tensor<1x1x13x13xi1>
    %extracted_slice_27 = tensor.extract_slice %extracted_slice_5[0, 0, 0, 0] [1, 1, 1, 13] [1, 1, 1, 1] : tensor<1x1x1x13xi1> to tensor<1x1x1x13xi1>
    %inserted_slice_28 = tensor.insert_slice %extracted_slice_27 into %12[0, 0, 11, 0] [1, 1, 1, 13] [1, 1, 1, 1] : tensor<1x1x1x13xi1> into tensor<1x1x13x13xi1>
    %extracted_slice_29 = tensor.extract_slice %extracted_slice_5[0, 0, 0, 0] [1, 1, 1, 13] [1, 1, 1, 1] : tensor<1x1x1x13xi1> to tensor<1x1x1x13xi1>
    %inserted_slice_30 = tensor.insert_slice %extracted_slice_29 into %12[0, 0, 12, 0] [1, 1, 1, 13] [1, 1, 1, 1] : tensor<1x1x1x13xi1> into tensor<1x1x13x13xi1>
    %13 = tensor.empty() : tensor<1x1x13x13xf32>
    %14 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_30 : tensor<1x1x13x13xi1>) outs(%13 : tensor<1x1x13x13xf32>) {
    ^bb0(%in: i1, %out: f32):
      %5294 = arith.extui %in : i1 to i32
      %5295 = arith.bitcast %5294 : i32 to f32
      linalg.yield %5295 : f32
    } -> tensor<1x1x13x13xf32>
    %cst_31 = arith.constant 1.000000e+00 : f32
    %15 = tensor.empty() : tensor<1x1x13x13xf32>
    %16 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%14 : tensor<1x1x13x13xf32>) outs(%15 : tensor<1x1x13x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.subf %cst_31, %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x1x13x13xf32>
    %17 = tensor.empty() : tensor<1x1x13x13xi1>
    %18 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%16 : tensor<1x1x13x13xf32>) outs(%17 : tensor<1x1x13x13xi1>) {
    ^bb0(%in: f32, %out: i1):
      %5294 = arith.bitcast %in : f32 to i32
      %5295 = arith.trunci %5294 : i32 to i1
      linalg.yield %5295 : i1
    } -> tensor<1x1x13x13xi1>
    %cst_32 = arith.constant -3.40282347E+38 : f32
    %19 = tensor.empty() : tensor<1x1x13x13xf32>
    %20 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%16, %18 : tensor<1x1x13x13xf32>, tensor<1x1x13x13xi1>) outs(%19 : tensor<1x1x13x13xf32>) {
    ^bb0(%in: f32, %in_999: i1, %out: f32):
      %5294 = arith.select %in_999, %cst_32, %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x1x13x13xf32>
    %21 = "tosa.reshape"(%9) {new_shape = array<i64: 1, 13, 13>} : (tensor<13x13xf32>) -> tensor<1x13x13xf32>
    %22 = "tosa.reshape"(%21) {new_shape = array<i64: 1, 1, 13, 13>} : (tensor<1x13x13xf32>) -> tensor<1x1x13x13xf32>
    %extracted_slice_33 = tensor.extract_slice %22[0, 0, 0, 0] [1, 1, 13, 13] [1, 1, 1, 1] : tensor<1x1x13x13xf32> to tensor<1x1x13x13xf32>
    %extracted_slice_34 = tensor.extract_slice %extracted_slice_33[0, 0, 0, 0] [1, 1, 13, 13] [1, 1, 1, 1] : tensor<1x1x13x13xf32> to tensor<1x1x13x13xf32>
    %23 = tensor.empty() : tensor<1x1x13x13xf32>
    %extracted_slice_35 = tensor.extract_slice %extracted_slice_34[0, 0, 0, 0] [1, 1, 13, 13] [1, 1, 1, 1] : tensor<1x1x13x13xf32> to tensor<1x1x13x13xf32>
    %inserted_slice_36 = tensor.insert_slice %extracted_slice_35 into %23[0, 0, 0, 0] [1, 1, 13, 13] [1, 1, 1, 1] : tensor<1x1x13x13xf32> into tensor<1x1x13x13xf32>
    %24 = "tosa.add"(%20, %inserted_slice_36) : (tensor<1x1x13x13xf32>, tensor<1x1x13x13xf32>) -> tensor<1x1x13x13xf32>
    %25 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32 = arith.constant 2 : i32
    %26 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3 : tensor<1x13x4096xf32>) outs(%25 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_37 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %27 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%26 : tensor<1x13x4096xf32>) outs(%cst_37 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_38 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %28 = "tosa.add"(%27, %cst_38) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %29 = tensor.empty() : tensor<1x13x1xf32>
    %30 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%28 : tensor<1x13x1xf32>) outs(%29 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %31 = tensor.empty() : tensor<1x13x4096xf32>
    %32 = tensor.empty() : tensor<1x13x4096xf32>
    %33 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%30 : tensor<1x13x1xf32>) outs(%32 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %34 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3, %33 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%31 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %35 = tensor.empty() : tensor<1x13x4096xf32>
    %36 = tensor.empty() : tensor<1x13x4096xf32>
    %37 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg0 : tensor<4096xf32>) outs(%36 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %38 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%37, %34 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%35 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %39 = tensor.empty() : tensor<4096x4096xf32>
    %40 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg66 : tensor<4096x4096xf32>) outs(%39 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %41 = "tosa.reshape"(%38) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %42 = tensor.empty() : tensor<13x4096xf32>
    %43 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%42 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %44 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%41, %40 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%43 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %45 = "tosa.reshape"(%44) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %46 = tensor.empty() : tensor<4096x4096xf32>
    %47 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg67 : tensor<4096x4096xf32>) outs(%46 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %48 = "tosa.reshape"(%38) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %49 = tensor.empty() : tensor<13x4096xf32>
    %50 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%49 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %51 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%48, %47 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%50 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %52 = "tosa.reshape"(%51) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %53 = tensor.empty() : tensor<4096x4096xf32>
    %54 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg68 : tensor<4096x4096xf32>) outs(%53 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %55 = "tosa.reshape"(%38) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %56 = tensor.empty() : tensor<13x4096xf32>
    %57 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%56 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %58 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%55, %54 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%57 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %59 = "tosa.reshape"(%58) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %60 = "tosa.reshape"(%45) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %61 = tensor.empty() : tensor<1x32x13x128xf32>
    %62 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%60 : tensor<1x13x32x128xf32>) outs(%61 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %63 = "tosa.reshape"(%52) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %64 = tensor.empty() : tensor<1x32x13x128xf32>
    %65 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%63 : tensor<1x13x32x128xf32>) outs(%64 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %66 = "tosa.reshape"(%59) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %67 = tensor.empty() : tensor<1x32x13x128xf32>
    %68 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%66 : tensor<1x13x32x128xf32>) outs(%67 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_39 = tensor.extract_slice %arg291[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_40 = tensor.extract_slice %extracted_slice_39[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_41 = tensor.extract_slice %extracted_slice_40[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %extracted_slice_42 = tensor.extract_slice %arg292[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_43 = tensor.extract_slice %extracted_slice_42[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_44 = tensor.extract_slice %extracted_slice_43[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %69 = tensor.empty() : tensor<1x13x128xf32>
    %70 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_41 : tensor<1x1x13x128xf32>) outs(%69 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %71 = tensor.empty() : tensor<13x128xf32>
    %72 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%70 : tensor<1x13x128xf32>) outs(%71 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %73 = tensor.empty() : tensor<1x13x128xf32>
    %74 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_44 : tensor<1x1x13x128xf32>) outs(%73 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %75 = tensor.empty() : tensor<13x128xf32>
    %76 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%74 : tensor<1x13x128xf32>) outs(%75 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %77 = tensor.empty() : tensor<1x13x128xf32>
    %78 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%77 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %72[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %79 = "tosa.reshape"(%78) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %80 = tensor.empty() : tensor<1x13x128xf32>
    %81 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%80 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %76[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %82 = "tosa.reshape"(%81) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %83 = tensor.empty() : tensor<1x32x13x128xf32>
    %84 = tensor.empty() : tensor<1x32x13x128xf32>
    %85 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%79 : tensor<1x1x13x128xf32>) outs(%84 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %86 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%62, %85 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%83 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_45 = tensor.extract_slice %62[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_46 = tensor.extract_slice %62[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %87 = tensor.empty() : tensor<1x32x13x64xf32>
    %88 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_46 : tensor<1x32x13x64xf32>) outs(%87 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %89 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_47 = tensor.insert_slice %88 into %89[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_48 = tensor.insert_slice %extracted_slice_45 into %inserted_slice_47[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %90 = tensor.empty() : tensor<1x32x13x128xf32>
    %91 = tensor.empty() : tensor<1x32x13x128xf32>
    %92 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%82 : tensor<1x1x13x128xf32>) outs(%91 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %93 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_48, %92 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%90 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %94 = "tosa.add"(%86, %93) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %95 = tensor.empty() : tensor<1x32x13x128xf32>
    %96 = tensor.empty() : tensor<1x32x13x128xf32>
    %97 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%79 : tensor<1x1x13x128xf32>) outs(%96 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %98 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%65, %97 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%95 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_49 = tensor.extract_slice %65[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_50 = tensor.extract_slice %65[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %99 = tensor.empty() : tensor<1x32x13x64xf32>
    %100 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_50 : tensor<1x32x13x64xf32>) outs(%99 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %101 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_51 = tensor.insert_slice %100 into %101[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_52 = tensor.insert_slice %extracted_slice_49 into %inserted_slice_51[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %102 = tensor.empty() : tensor<1x32x13x128xf32>
    %103 = tensor.empty() : tensor<1x32x13x128xf32>
    %104 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%82 : tensor<1x1x13x128xf32>) outs(%103 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %105 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_52, %104 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%102 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %106 = "tosa.add"(%98, %105) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %107 = tensor.empty() : tensor<1x32x128x13xf32>
    %108 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%106 : tensor<1x32x13x128xf32>) outs(%107 : tensor<1x32x128x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x13xf32>
    %109 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_53 = tensor.extract_slice %94[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_54 = tensor.insert_slice %extracted_slice_53 into %109[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %110 = "tosa.reshape"(%inserted_slice_54) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %111 = tensor.empty() : tensor<1x32x128x13xf32>
    %extracted_slice_55 = tensor.extract_slice %108[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> to tensor<1x32x128x13xf32>
    %inserted_slice_56 = tensor.insert_slice %extracted_slice_55 into %111[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> into tensor<1x32x128x13xf32>
    %112 = "tosa.reshape"(%inserted_slice_56) {new_shape = array<i64: 32, 128, 13>} : (tensor<1x32x128x13xf32>) -> tensor<32x128x13xf32>
    %113 = tensor.empty() : tensor<32x13x13xf32>
    %114 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%113 : tensor<32x13x13xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x13xf32>
    %115 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%110, %112 : tensor<32x13x128xf32>, tensor<32x128x13xf32>) outs(%114 : tensor<32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x13xf32>
    %116 = "tosa.reshape"(%115) {new_shape = array<i64: 1, 32, 13, 13>} : (tensor<32x13x13xf32>) -> tensor<1x32x13x13xf32>
    %cst_57 = arith.constant 11.3137083 : f32
    %117 = tensor.empty() : tensor<1x32x13x13xf32>
    %118 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%116 : tensor<1x32x13x13xf32>) outs(%117 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.divf %in, %cst_57 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %119 = "tosa.add"(%118, %24) : (tensor<1x32x13x13xf32>, tensor<1x1x13x13xf32>) -> tensor<1x32x13x13xf32>
    %120 = tensor.empty() : tensor<1x32x13x1xf32>
    %121 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%120 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %122 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%119 : tensor<1x32x13x13xf32>) outs(%120 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.maxf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %123 = tensor.empty() : tensor<1x32x13x13xf32>
    %124 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%119, %122 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%123 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.subf %in, %in_999 : f32
      %5295 = math.exp %5294 : f32
      linalg.yield %5295 : f32
    } -> tensor<1x32x13x13xf32>
    %125 = tensor.empty() : tensor<1x32x13x1xf32>
    %126 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%125 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %127 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%124 : tensor<1x32x13x13xf32>) outs(%126 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %128 = tensor.empty() : tensor<1x32x13x13xf32>
    %129 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%124, %127 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%128 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.divf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %130 = tensor.empty() : tensor<1x32x13x13xf32>
    %extracted_slice_58 = tensor.extract_slice %129[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> to tensor<1x32x13x13xf32>
    %inserted_slice_59 = tensor.insert_slice %extracted_slice_58 into %130[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> into tensor<1x32x13x13xf32>
    %131 = "tosa.reshape"(%inserted_slice_59) {new_shape = array<i64: 32, 13, 13>} : (tensor<1x32x13x13xf32>) -> tensor<32x13x13xf32>
    %132 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_60 = tensor.extract_slice %68[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_61 = tensor.insert_slice %extracted_slice_60 into %132[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %133 = "tosa.reshape"(%inserted_slice_61) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %134 = tensor.empty() : tensor<32x13x128xf32>
    %135 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%134 : tensor<32x13x128xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x128xf32>
    %136 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%131, %133 : tensor<32x13x13xf32>, tensor<32x13x128xf32>) outs(%135 : tensor<32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x128xf32>
    %137 = "tosa.reshape"(%136) {new_shape = array<i64: 1, 32, 13, 128>} : (tensor<32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %138 = tensor.empty() : tensor<1x13x32x128xf32>
    %139 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%137 : tensor<1x32x13x128xf32>) outs(%138 : tensor<1x13x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x32x128xf32>
    %extracted_slice_62 = tensor.extract_slice %139[0, 0, 0, 0] [1, 13, 32, 128] [1, 1, 1, 1] : tensor<1x13x32x128xf32> to tensor<1x13x32x128xf32>
    %140 = "tosa.reshape"(%extracted_slice_62) {new_shape = array<i64: 1, 13, 4096>} : (tensor<1x13x32x128xf32>) -> tensor<1x13x4096xf32>
    %141 = tensor.empty() : tensor<4096x4096xf32>
    %142 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg69 : tensor<4096x4096xf32>) outs(%141 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %143 = "tosa.reshape"(%140) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %144 = tensor.empty() : tensor<13x4096xf32>
    %145 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%144 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %146 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%143, %142 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%145 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %147 = "tosa.reshape"(%146) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %148 = "tosa.add"(%3, %147) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %149 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_63 = arith.constant 2 : i32
    %150 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%148 : tensor<1x13x4096xf32>) outs(%149 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_63 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_64 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %151 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%150 : tensor<1x13x4096xf32>) outs(%cst_64 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_65 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %152 = "tosa.add"(%151, %cst_65) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %153 = tensor.empty() : tensor<1x13x1xf32>
    %154 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%152 : tensor<1x13x1xf32>) outs(%153 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %155 = tensor.empty() : tensor<1x13x4096xf32>
    %156 = tensor.empty() : tensor<1x13x4096xf32>
    %157 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%154 : tensor<1x13x1xf32>) outs(%156 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %158 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%148, %157 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%155 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %159 = tensor.empty() : tensor<1x13x4096xf32>
    %160 = tensor.empty() : tensor<1x13x4096xf32>
    %161 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg1 : tensor<4096xf32>) outs(%160 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %162 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%161, %158 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%159 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %163 = tensor.empty() : tensor<4096x11008xf32>
    %164 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg70 : tensor<11008x4096xf32>) outs(%163 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %165 = "tosa.reshape"(%162) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %166 = tensor.empty() : tensor<13x11008xf32>
    %167 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%166 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %168 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%165, %164 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%167 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %169 = "tosa.reshape"(%168) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %170 = tensor.empty() : tensor<1x13x11008xf32>
    %171 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%169 : tensor<1x13x11008xf32>) outs(%170 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      %5295 = math.exp %5294 : f32
      %cst_999 = arith.constant 1.000000e+00 : f32
      %5296 = arith.addf %cst_999, %5295 : f32
      %5297 = arith.divf %in, %5296 : f32
      linalg.yield %5297 : f32
    } -> tensor<1x13x11008xf32>
    %172 = tensor.empty() : tensor<4096x11008xf32>
    %173 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg71 : tensor<11008x4096xf32>) outs(%172 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %174 = "tosa.reshape"(%162) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %175 = tensor.empty() : tensor<13x11008xf32>
    %176 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%175 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %177 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%174, %173 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%176 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %178 = "tosa.reshape"(%177) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %179 = tensor.empty() : tensor<1x13x11008xf32>
    %180 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%171, %178 : tensor<1x13x11008xf32>, tensor<1x13x11008xf32>) outs(%179 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x11008xf32>
    %181 = tensor.empty() : tensor<11008x4096xf32>
    %182 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg72 : tensor<4096x11008xf32>) outs(%181 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %183 = "tosa.reshape"(%180) {new_shape = array<i64: 13, 11008>} : (tensor<1x13x11008xf32>) -> tensor<13x11008xf32>
    %184 = tensor.empty() : tensor<13x4096xf32>
    %185 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%184 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %186 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%183, %182 : tensor<13x11008xf32>, tensor<11008x4096xf32>) outs(%185 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %187 = "tosa.reshape"(%186) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %188 = "tosa.add"(%148, %187) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %189 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_66 = arith.constant 2 : i32
    %190 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%188 : tensor<1x13x4096xf32>) outs(%189 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_66 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_67 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %191 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%190 : tensor<1x13x4096xf32>) outs(%cst_67 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_68 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %192 = "tosa.add"(%191, %cst_68) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %193 = tensor.empty() : tensor<1x13x1xf32>
    %194 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%192 : tensor<1x13x1xf32>) outs(%193 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %195 = tensor.empty() : tensor<1x13x4096xf32>
    %196 = tensor.empty() : tensor<1x13x4096xf32>
    %197 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%194 : tensor<1x13x1xf32>) outs(%196 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %198 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%188, %197 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%195 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %199 = tensor.empty() : tensor<1x13x4096xf32>
    %200 = tensor.empty() : tensor<1x13x4096xf32>
    %201 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg2 : tensor<4096xf32>) outs(%200 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %202 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%201, %198 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%199 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %203 = tensor.empty() : tensor<4096x4096xf32>
    %204 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg73 : tensor<4096x4096xf32>) outs(%203 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %205 = "tosa.reshape"(%202) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %206 = tensor.empty() : tensor<13x4096xf32>
    %207 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%206 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %208 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%205, %204 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%207 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %209 = "tosa.reshape"(%208) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %210 = tensor.empty() : tensor<4096x4096xf32>
    %211 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg74 : tensor<4096x4096xf32>) outs(%210 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %212 = "tosa.reshape"(%202) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %213 = tensor.empty() : tensor<13x4096xf32>
    %214 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%213 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %215 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%212, %211 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%214 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %216 = "tosa.reshape"(%215) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %217 = tensor.empty() : tensor<4096x4096xf32>
    %218 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg75 : tensor<4096x4096xf32>) outs(%217 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %219 = "tosa.reshape"(%202) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %220 = tensor.empty() : tensor<13x4096xf32>
    %221 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%220 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %222 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%219, %218 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%221 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %223 = "tosa.reshape"(%222) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %224 = "tosa.reshape"(%209) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %225 = tensor.empty() : tensor<1x32x13x128xf32>
    %226 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%224 : tensor<1x13x32x128xf32>) outs(%225 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %227 = "tosa.reshape"(%216) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %228 = tensor.empty() : tensor<1x32x13x128xf32>
    %229 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%227 : tensor<1x13x32x128xf32>) outs(%228 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %230 = "tosa.reshape"(%223) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %231 = tensor.empty() : tensor<1x32x13x128xf32>
    %232 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%230 : tensor<1x13x32x128xf32>) outs(%231 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_69 = tensor.extract_slice %arg293[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_70 = tensor.extract_slice %extracted_slice_69[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_71 = tensor.extract_slice %extracted_slice_70[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %extracted_slice_72 = tensor.extract_slice %arg294[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_73 = tensor.extract_slice %extracted_slice_72[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_74 = tensor.extract_slice %extracted_slice_73[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %233 = tensor.empty() : tensor<1x13x128xf32>
    %234 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_71 : tensor<1x1x13x128xf32>) outs(%233 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %235 = tensor.empty() : tensor<13x128xf32>
    %236 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%234 : tensor<1x13x128xf32>) outs(%235 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %237 = tensor.empty() : tensor<1x13x128xf32>
    %238 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_74 : tensor<1x1x13x128xf32>) outs(%237 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %239 = tensor.empty() : tensor<13x128xf32>
    %240 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%238 : tensor<1x13x128xf32>) outs(%239 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %241 = tensor.empty() : tensor<1x13x128xf32>
    %242 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%241 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %236[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %243 = "tosa.reshape"(%242) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %244 = tensor.empty() : tensor<1x13x128xf32>
    %245 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%244 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %240[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %246 = "tosa.reshape"(%245) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %247 = tensor.empty() : tensor<1x32x13x128xf32>
    %248 = tensor.empty() : tensor<1x32x13x128xf32>
    %249 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%243 : tensor<1x1x13x128xf32>) outs(%248 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %250 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%226, %249 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%247 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_75 = tensor.extract_slice %226[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_76 = tensor.extract_slice %226[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %251 = tensor.empty() : tensor<1x32x13x64xf32>
    %252 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_76 : tensor<1x32x13x64xf32>) outs(%251 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %253 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_77 = tensor.insert_slice %252 into %253[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_78 = tensor.insert_slice %extracted_slice_75 into %inserted_slice_77[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %254 = tensor.empty() : tensor<1x32x13x128xf32>
    %255 = tensor.empty() : tensor<1x32x13x128xf32>
    %256 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%246 : tensor<1x1x13x128xf32>) outs(%255 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %257 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_78, %256 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%254 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %258 = "tosa.add"(%250, %257) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %259 = tensor.empty() : tensor<1x32x13x128xf32>
    %260 = tensor.empty() : tensor<1x32x13x128xf32>
    %261 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%243 : tensor<1x1x13x128xf32>) outs(%260 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %262 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%229, %261 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%259 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_79 = tensor.extract_slice %229[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_80 = tensor.extract_slice %229[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %263 = tensor.empty() : tensor<1x32x13x64xf32>
    %264 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_80 : tensor<1x32x13x64xf32>) outs(%263 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %265 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_81 = tensor.insert_slice %264 into %265[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_82 = tensor.insert_slice %extracted_slice_79 into %inserted_slice_81[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %266 = tensor.empty() : tensor<1x32x13x128xf32>
    %267 = tensor.empty() : tensor<1x32x13x128xf32>
    %268 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%246 : tensor<1x1x13x128xf32>) outs(%267 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %269 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_82, %268 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%266 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %270 = "tosa.add"(%262, %269) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %271 = tensor.empty() : tensor<1x32x128x13xf32>
    %272 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%270 : tensor<1x32x13x128xf32>) outs(%271 : tensor<1x32x128x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x13xf32>
    %273 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_83 = tensor.extract_slice %258[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_84 = tensor.insert_slice %extracted_slice_83 into %273[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %274 = "tosa.reshape"(%inserted_slice_84) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %275 = tensor.empty() : tensor<1x32x128x13xf32>
    %extracted_slice_85 = tensor.extract_slice %272[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> to tensor<1x32x128x13xf32>
    %inserted_slice_86 = tensor.insert_slice %extracted_slice_85 into %275[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> into tensor<1x32x128x13xf32>
    %276 = "tosa.reshape"(%inserted_slice_86) {new_shape = array<i64: 32, 128, 13>} : (tensor<1x32x128x13xf32>) -> tensor<32x128x13xf32>
    %277 = tensor.empty() : tensor<32x13x13xf32>
    %278 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%277 : tensor<32x13x13xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x13xf32>
    %279 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%274, %276 : tensor<32x13x128xf32>, tensor<32x128x13xf32>) outs(%278 : tensor<32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x13xf32>
    %280 = "tosa.reshape"(%279) {new_shape = array<i64: 1, 32, 13, 13>} : (tensor<32x13x13xf32>) -> tensor<1x32x13x13xf32>
    %cst_87 = arith.constant 11.3137083 : f32
    %281 = tensor.empty() : tensor<1x32x13x13xf32>
    %282 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%280 : tensor<1x32x13x13xf32>) outs(%281 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.divf %in, %cst_87 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %283 = "tosa.add"(%282, %24) : (tensor<1x32x13x13xf32>, tensor<1x1x13x13xf32>) -> tensor<1x32x13x13xf32>
    %284 = tensor.empty() : tensor<1x32x13x1xf32>
    %285 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%284 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %286 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%283 : tensor<1x32x13x13xf32>) outs(%284 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.maxf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %287 = tensor.empty() : tensor<1x32x13x13xf32>
    %288 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%283, %286 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%287 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.subf %in, %in_999 : f32
      %5295 = math.exp %5294 : f32
      linalg.yield %5295 : f32
    } -> tensor<1x32x13x13xf32>
    %289 = tensor.empty() : tensor<1x32x13x1xf32>
    %290 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%289 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %291 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%288 : tensor<1x32x13x13xf32>) outs(%290 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %292 = tensor.empty() : tensor<1x32x13x13xf32>
    %293 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%288, %291 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%292 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.divf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %294 = tensor.empty() : tensor<1x32x13x13xf32>
    %extracted_slice_88 = tensor.extract_slice %293[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> to tensor<1x32x13x13xf32>
    %inserted_slice_89 = tensor.insert_slice %extracted_slice_88 into %294[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> into tensor<1x32x13x13xf32>
    %295 = "tosa.reshape"(%inserted_slice_89) {new_shape = array<i64: 32, 13, 13>} : (tensor<1x32x13x13xf32>) -> tensor<32x13x13xf32>
    %296 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_90 = tensor.extract_slice %232[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_91 = tensor.insert_slice %extracted_slice_90 into %296[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %297 = "tosa.reshape"(%inserted_slice_91) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %298 = tensor.empty() : tensor<32x13x128xf32>
    %299 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%298 : tensor<32x13x128xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x128xf32>
    %300 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%295, %297 : tensor<32x13x13xf32>, tensor<32x13x128xf32>) outs(%299 : tensor<32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x128xf32>
    %301 = "tosa.reshape"(%300) {new_shape = array<i64: 1, 32, 13, 128>} : (tensor<32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %302 = tensor.empty() : tensor<1x13x32x128xf32>
    %303 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%301 : tensor<1x32x13x128xf32>) outs(%302 : tensor<1x13x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x32x128xf32>
    %extracted_slice_92 = tensor.extract_slice %303[0, 0, 0, 0] [1, 13, 32, 128] [1, 1, 1, 1] : tensor<1x13x32x128xf32> to tensor<1x13x32x128xf32>
    %304 = "tosa.reshape"(%extracted_slice_92) {new_shape = array<i64: 1, 13, 4096>} : (tensor<1x13x32x128xf32>) -> tensor<1x13x4096xf32>
    %305 = tensor.empty() : tensor<4096x4096xf32>
    %306 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg76 : tensor<4096x4096xf32>) outs(%305 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %307 = "tosa.reshape"(%304) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %308 = tensor.empty() : tensor<13x4096xf32>
    %309 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%308 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %310 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%307, %306 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%309 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %311 = "tosa.reshape"(%310) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %312 = "tosa.add"(%188, %311) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %313 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_93 = arith.constant 2 : i32
    %314 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%312 : tensor<1x13x4096xf32>) outs(%313 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_93 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_94 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %315 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%314 : tensor<1x13x4096xf32>) outs(%cst_94 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_95 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %316 = "tosa.add"(%315, %cst_95) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %317 = tensor.empty() : tensor<1x13x1xf32>
    %318 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%316 : tensor<1x13x1xf32>) outs(%317 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %319 = tensor.empty() : tensor<1x13x4096xf32>
    %320 = tensor.empty() : tensor<1x13x4096xf32>
    %321 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%318 : tensor<1x13x1xf32>) outs(%320 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %322 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%312, %321 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%319 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %323 = tensor.empty() : tensor<1x13x4096xf32>
    %324 = tensor.empty() : tensor<1x13x4096xf32>
    %325 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg3 : tensor<4096xf32>) outs(%324 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %326 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%325, %322 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%323 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %327 = tensor.empty() : tensor<4096x11008xf32>
    %328 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg77 : tensor<11008x4096xf32>) outs(%327 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %329 = "tosa.reshape"(%326) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %330 = tensor.empty() : tensor<13x11008xf32>
    %331 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%330 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %332 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%329, %328 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%331 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %333 = "tosa.reshape"(%332) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %334 = tensor.empty() : tensor<1x13x11008xf32>
    %335 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%333 : tensor<1x13x11008xf32>) outs(%334 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      %5295 = math.exp %5294 : f32
      %cst_999 = arith.constant 1.000000e+00 : f32
      %5296 = arith.addf %cst_999, %5295 : f32
      %5297 = arith.divf %in, %5296 : f32
      linalg.yield %5297 : f32
    } -> tensor<1x13x11008xf32>
    %336 = tensor.empty() : tensor<4096x11008xf32>
    %337 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg78 : tensor<11008x4096xf32>) outs(%336 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %338 = "tosa.reshape"(%326) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %339 = tensor.empty() : tensor<13x11008xf32>
    %340 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%339 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %341 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%338, %337 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%340 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %342 = "tosa.reshape"(%341) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %343 = tensor.empty() : tensor<1x13x11008xf32>
    %344 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%335, %342 : tensor<1x13x11008xf32>, tensor<1x13x11008xf32>) outs(%343 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x11008xf32>
    %345 = tensor.empty() : tensor<11008x4096xf32>
    %346 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg79 : tensor<4096x11008xf32>) outs(%345 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %347 = "tosa.reshape"(%344) {new_shape = array<i64: 13, 11008>} : (tensor<1x13x11008xf32>) -> tensor<13x11008xf32>
    %348 = tensor.empty() : tensor<13x4096xf32>
    %349 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%348 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %350 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%347, %346 : tensor<13x11008xf32>, tensor<11008x4096xf32>) outs(%349 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %351 = "tosa.reshape"(%350) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %352 = "tosa.add"(%312, %351) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %353 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_96 = arith.constant 2 : i32
    %354 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%352 : tensor<1x13x4096xf32>) outs(%353 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_96 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_97 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %355 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%354 : tensor<1x13x4096xf32>) outs(%cst_97 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_98 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %356 = "tosa.add"(%355, %cst_98) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %357 = tensor.empty() : tensor<1x13x1xf32>
    %358 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%356 : tensor<1x13x1xf32>) outs(%357 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %359 = tensor.empty() : tensor<1x13x4096xf32>
    %360 = tensor.empty() : tensor<1x13x4096xf32>
    %361 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%358 : tensor<1x13x1xf32>) outs(%360 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %362 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%352, %361 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%359 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %363 = tensor.empty() : tensor<1x13x4096xf32>
    %364 = tensor.empty() : tensor<1x13x4096xf32>
    %365 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg4 : tensor<4096xf32>) outs(%364 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %366 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%365, %362 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%363 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %367 = tensor.empty() : tensor<4096x4096xf32>
    %368 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg80 : tensor<4096x4096xf32>) outs(%367 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %369 = "tosa.reshape"(%366) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %370 = tensor.empty() : tensor<13x4096xf32>
    %371 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%370 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %372 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%369, %368 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%371 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %373 = "tosa.reshape"(%372) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %374 = tensor.empty() : tensor<4096x4096xf32>
    %375 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg81 : tensor<4096x4096xf32>) outs(%374 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %376 = "tosa.reshape"(%366) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %377 = tensor.empty() : tensor<13x4096xf32>
    %378 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%377 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %379 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%376, %375 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%378 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %380 = "tosa.reshape"(%379) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %381 = tensor.empty() : tensor<4096x4096xf32>
    %382 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg82 : tensor<4096x4096xf32>) outs(%381 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %383 = "tosa.reshape"(%366) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %384 = tensor.empty() : tensor<13x4096xf32>
    %385 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%384 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %386 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%383, %382 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%385 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %387 = "tosa.reshape"(%386) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %388 = "tosa.reshape"(%373) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %389 = tensor.empty() : tensor<1x32x13x128xf32>
    %390 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%388 : tensor<1x13x32x128xf32>) outs(%389 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %391 = "tosa.reshape"(%380) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %392 = tensor.empty() : tensor<1x32x13x128xf32>
    %393 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%391 : tensor<1x13x32x128xf32>) outs(%392 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %394 = "tosa.reshape"(%387) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %395 = tensor.empty() : tensor<1x32x13x128xf32>
    %396 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%394 : tensor<1x13x32x128xf32>) outs(%395 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_99 = tensor.extract_slice %arg295[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_100 = tensor.extract_slice %extracted_slice_99[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_101 = tensor.extract_slice %extracted_slice_100[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %extracted_slice_102 = tensor.extract_slice %arg296[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_103 = tensor.extract_slice %extracted_slice_102[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_104 = tensor.extract_slice %extracted_slice_103[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %397 = tensor.empty() : tensor<1x13x128xf32>
    %398 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_101 : tensor<1x1x13x128xf32>) outs(%397 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %399 = tensor.empty() : tensor<13x128xf32>
    %400 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%398 : tensor<1x13x128xf32>) outs(%399 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %401 = tensor.empty() : tensor<1x13x128xf32>
    %402 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_104 : tensor<1x1x13x128xf32>) outs(%401 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %403 = tensor.empty() : tensor<13x128xf32>
    %404 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%402 : tensor<1x13x128xf32>) outs(%403 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %405 = tensor.empty() : tensor<1x13x128xf32>
    %406 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%405 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %400[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %407 = "tosa.reshape"(%406) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %408 = tensor.empty() : tensor<1x13x128xf32>
    %409 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%408 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %404[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %410 = "tosa.reshape"(%409) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %411 = tensor.empty() : tensor<1x32x13x128xf32>
    %412 = tensor.empty() : tensor<1x32x13x128xf32>
    %413 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%407 : tensor<1x1x13x128xf32>) outs(%412 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %414 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%390, %413 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%411 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_105 = tensor.extract_slice %390[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_106 = tensor.extract_slice %390[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %415 = tensor.empty() : tensor<1x32x13x64xf32>
    %416 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_106 : tensor<1x32x13x64xf32>) outs(%415 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %417 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_107 = tensor.insert_slice %416 into %417[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_108 = tensor.insert_slice %extracted_slice_105 into %inserted_slice_107[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %418 = tensor.empty() : tensor<1x32x13x128xf32>
    %419 = tensor.empty() : tensor<1x32x13x128xf32>
    %420 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%410 : tensor<1x1x13x128xf32>) outs(%419 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %421 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_108, %420 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%418 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %422 = "tosa.add"(%414, %421) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %423 = tensor.empty() : tensor<1x32x13x128xf32>
    %424 = tensor.empty() : tensor<1x32x13x128xf32>
    %425 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%407 : tensor<1x1x13x128xf32>) outs(%424 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %426 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%393, %425 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%423 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_109 = tensor.extract_slice %393[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_110 = tensor.extract_slice %393[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %427 = tensor.empty() : tensor<1x32x13x64xf32>
    %428 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_110 : tensor<1x32x13x64xf32>) outs(%427 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %429 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_111 = tensor.insert_slice %428 into %429[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_112 = tensor.insert_slice %extracted_slice_109 into %inserted_slice_111[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %430 = tensor.empty() : tensor<1x32x13x128xf32>
    %431 = tensor.empty() : tensor<1x32x13x128xf32>
    %432 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%410 : tensor<1x1x13x128xf32>) outs(%431 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %433 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_112, %432 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%430 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %434 = "tosa.add"(%426, %433) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %435 = tensor.empty() : tensor<1x32x128x13xf32>
    %436 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%434 : tensor<1x32x13x128xf32>) outs(%435 : tensor<1x32x128x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x13xf32>
    %437 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_113 = tensor.extract_slice %422[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_114 = tensor.insert_slice %extracted_slice_113 into %437[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %438 = "tosa.reshape"(%inserted_slice_114) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %439 = tensor.empty() : tensor<1x32x128x13xf32>
    %extracted_slice_115 = tensor.extract_slice %436[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> to tensor<1x32x128x13xf32>
    %inserted_slice_116 = tensor.insert_slice %extracted_slice_115 into %439[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> into tensor<1x32x128x13xf32>
    %440 = "tosa.reshape"(%inserted_slice_116) {new_shape = array<i64: 32, 128, 13>} : (tensor<1x32x128x13xf32>) -> tensor<32x128x13xf32>
    %441 = tensor.empty() : tensor<32x13x13xf32>
    %442 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%441 : tensor<32x13x13xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x13xf32>
    %443 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%438, %440 : tensor<32x13x128xf32>, tensor<32x128x13xf32>) outs(%442 : tensor<32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x13xf32>
    %444 = "tosa.reshape"(%443) {new_shape = array<i64: 1, 32, 13, 13>} : (tensor<32x13x13xf32>) -> tensor<1x32x13x13xf32>
    %cst_117 = arith.constant 11.3137083 : f32
    %445 = tensor.empty() : tensor<1x32x13x13xf32>
    %446 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%444 : tensor<1x32x13x13xf32>) outs(%445 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.divf %in, %cst_117 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %447 = "tosa.add"(%446, %24) : (tensor<1x32x13x13xf32>, tensor<1x1x13x13xf32>) -> tensor<1x32x13x13xf32>
    %448 = tensor.empty() : tensor<1x32x13x1xf32>
    %449 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%448 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %450 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%447 : tensor<1x32x13x13xf32>) outs(%448 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.maxf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %451 = tensor.empty() : tensor<1x32x13x13xf32>
    %452 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%447, %450 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%451 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.subf %in, %in_999 : f32
      %5295 = math.exp %5294 : f32
      linalg.yield %5295 : f32
    } -> tensor<1x32x13x13xf32>
    %453 = tensor.empty() : tensor<1x32x13x1xf32>
    %454 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%453 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %455 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%452 : tensor<1x32x13x13xf32>) outs(%454 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %456 = tensor.empty() : tensor<1x32x13x13xf32>
    %457 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%452, %455 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%456 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.divf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %458 = tensor.empty() : tensor<1x32x13x13xf32>
    %extracted_slice_118 = tensor.extract_slice %457[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> to tensor<1x32x13x13xf32>
    %inserted_slice_119 = tensor.insert_slice %extracted_slice_118 into %458[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> into tensor<1x32x13x13xf32>
    %459 = "tosa.reshape"(%inserted_slice_119) {new_shape = array<i64: 32, 13, 13>} : (tensor<1x32x13x13xf32>) -> tensor<32x13x13xf32>
    %460 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_120 = tensor.extract_slice %396[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_121 = tensor.insert_slice %extracted_slice_120 into %460[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %461 = "tosa.reshape"(%inserted_slice_121) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %462 = tensor.empty() : tensor<32x13x128xf32>
    %463 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%462 : tensor<32x13x128xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x128xf32>
    %464 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%459, %461 : tensor<32x13x13xf32>, tensor<32x13x128xf32>) outs(%463 : tensor<32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x128xf32>
    %465 = "tosa.reshape"(%464) {new_shape = array<i64: 1, 32, 13, 128>} : (tensor<32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %466 = tensor.empty() : tensor<1x13x32x128xf32>
    %467 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%465 : tensor<1x32x13x128xf32>) outs(%466 : tensor<1x13x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x32x128xf32>
    %extracted_slice_122 = tensor.extract_slice %467[0, 0, 0, 0] [1, 13, 32, 128] [1, 1, 1, 1] : tensor<1x13x32x128xf32> to tensor<1x13x32x128xf32>
    %468 = "tosa.reshape"(%extracted_slice_122) {new_shape = array<i64: 1, 13, 4096>} : (tensor<1x13x32x128xf32>) -> tensor<1x13x4096xf32>
    %469 = tensor.empty() : tensor<4096x4096xf32>
    %470 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg83 : tensor<4096x4096xf32>) outs(%469 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %471 = "tosa.reshape"(%468) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %472 = tensor.empty() : tensor<13x4096xf32>
    %473 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%472 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %474 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%471, %470 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%473 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %475 = "tosa.reshape"(%474) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %476 = "tosa.add"(%352, %475) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %477 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_123 = arith.constant 2 : i32
    %478 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%476 : tensor<1x13x4096xf32>) outs(%477 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_123 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_124 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %479 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%478 : tensor<1x13x4096xf32>) outs(%cst_124 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_125 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %480 = "tosa.add"(%479, %cst_125) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %481 = tensor.empty() : tensor<1x13x1xf32>
    %482 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%480 : tensor<1x13x1xf32>) outs(%481 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %483 = tensor.empty() : tensor<1x13x4096xf32>
    %484 = tensor.empty() : tensor<1x13x4096xf32>
    %485 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%482 : tensor<1x13x1xf32>) outs(%484 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %486 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%476, %485 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%483 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %487 = tensor.empty() : tensor<1x13x4096xf32>
    %488 = tensor.empty() : tensor<1x13x4096xf32>
    %489 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg5 : tensor<4096xf32>) outs(%488 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %490 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%489, %486 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%487 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %491 = tensor.empty() : tensor<4096x11008xf32>
    %492 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg84 : tensor<11008x4096xf32>) outs(%491 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %493 = "tosa.reshape"(%490) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %494 = tensor.empty() : tensor<13x11008xf32>
    %495 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%494 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %496 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%493, %492 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%495 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %497 = "tosa.reshape"(%496) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %498 = tensor.empty() : tensor<1x13x11008xf32>
    %499 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%497 : tensor<1x13x11008xf32>) outs(%498 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      %5295 = math.exp %5294 : f32
      %cst_999 = arith.constant 1.000000e+00 : f32
      %5296 = arith.addf %cst_999, %5295 : f32
      %5297 = arith.divf %in, %5296 : f32
      linalg.yield %5297 : f32
    } -> tensor<1x13x11008xf32>
    %500 = tensor.empty() : tensor<4096x11008xf32>
    %501 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg85 : tensor<11008x4096xf32>) outs(%500 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %502 = "tosa.reshape"(%490) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %503 = tensor.empty() : tensor<13x11008xf32>
    %504 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%503 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %505 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%502, %501 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%504 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %506 = "tosa.reshape"(%505) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %507 = tensor.empty() : tensor<1x13x11008xf32>
    %508 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%499, %506 : tensor<1x13x11008xf32>, tensor<1x13x11008xf32>) outs(%507 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x11008xf32>
    %509 = tensor.empty() : tensor<11008x4096xf32>
    %510 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg86 : tensor<4096x11008xf32>) outs(%509 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %511 = "tosa.reshape"(%508) {new_shape = array<i64: 13, 11008>} : (tensor<1x13x11008xf32>) -> tensor<13x11008xf32>
    %512 = tensor.empty() : tensor<13x4096xf32>
    %513 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%512 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %514 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%511, %510 : tensor<13x11008xf32>, tensor<11008x4096xf32>) outs(%513 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %515 = "tosa.reshape"(%514) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %516 = "tosa.add"(%476, %515) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %517 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_126 = arith.constant 2 : i32
    %518 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%516 : tensor<1x13x4096xf32>) outs(%517 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_126 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_127 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %519 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%518 : tensor<1x13x4096xf32>) outs(%cst_127 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_128 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %520 = "tosa.add"(%519, %cst_128) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %521 = tensor.empty() : tensor<1x13x1xf32>
    %522 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%520 : tensor<1x13x1xf32>) outs(%521 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %523 = tensor.empty() : tensor<1x13x4096xf32>
    %524 = tensor.empty() : tensor<1x13x4096xf32>
    %525 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%522 : tensor<1x13x1xf32>) outs(%524 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %526 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%516, %525 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%523 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %527 = tensor.empty() : tensor<1x13x4096xf32>
    %528 = tensor.empty() : tensor<1x13x4096xf32>
    %529 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg6 : tensor<4096xf32>) outs(%528 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %530 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%529, %526 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%527 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %531 = tensor.empty() : tensor<4096x4096xf32>
    %532 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg87 : tensor<4096x4096xf32>) outs(%531 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %533 = "tosa.reshape"(%530) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %534 = tensor.empty() : tensor<13x4096xf32>
    %535 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%534 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %536 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%533, %532 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%535 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %537 = "tosa.reshape"(%536) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %538 = tensor.empty() : tensor<4096x4096xf32>
    %539 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg88 : tensor<4096x4096xf32>) outs(%538 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %540 = "tosa.reshape"(%530) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %541 = tensor.empty() : tensor<13x4096xf32>
    %542 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%541 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %543 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%540, %539 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%542 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %544 = "tosa.reshape"(%543) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %545 = tensor.empty() : tensor<4096x4096xf32>
    %546 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg89 : tensor<4096x4096xf32>) outs(%545 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %547 = "tosa.reshape"(%530) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %548 = tensor.empty() : tensor<13x4096xf32>
    %549 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%548 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %550 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%547, %546 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%549 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %551 = "tosa.reshape"(%550) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %552 = "tosa.reshape"(%537) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %553 = tensor.empty() : tensor<1x32x13x128xf32>
    %554 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%552 : tensor<1x13x32x128xf32>) outs(%553 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %555 = "tosa.reshape"(%544) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %556 = tensor.empty() : tensor<1x32x13x128xf32>
    %557 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%555 : tensor<1x13x32x128xf32>) outs(%556 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %558 = "tosa.reshape"(%551) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %559 = tensor.empty() : tensor<1x32x13x128xf32>
    %560 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%558 : tensor<1x13x32x128xf32>) outs(%559 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_129 = tensor.extract_slice %arg297[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_130 = tensor.extract_slice %extracted_slice_129[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_131 = tensor.extract_slice %extracted_slice_130[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %extracted_slice_132 = tensor.extract_slice %arg298[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_133 = tensor.extract_slice %extracted_slice_132[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_134 = tensor.extract_slice %extracted_slice_133[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %561 = tensor.empty() : tensor<1x13x128xf32>
    %562 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_131 : tensor<1x1x13x128xf32>) outs(%561 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %563 = tensor.empty() : tensor<13x128xf32>
    %564 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%562 : tensor<1x13x128xf32>) outs(%563 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %565 = tensor.empty() : tensor<1x13x128xf32>
    %566 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_134 : tensor<1x1x13x128xf32>) outs(%565 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %567 = tensor.empty() : tensor<13x128xf32>
    %568 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%566 : tensor<1x13x128xf32>) outs(%567 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %569 = tensor.empty() : tensor<1x13x128xf32>
    %570 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%569 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %564[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %571 = "tosa.reshape"(%570) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %572 = tensor.empty() : tensor<1x13x128xf32>
    %573 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%572 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %568[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %574 = "tosa.reshape"(%573) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %575 = tensor.empty() : tensor<1x32x13x128xf32>
    %576 = tensor.empty() : tensor<1x32x13x128xf32>
    %577 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%571 : tensor<1x1x13x128xf32>) outs(%576 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %578 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%554, %577 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%575 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_135 = tensor.extract_slice %554[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_136 = tensor.extract_slice %554[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %579 = tensor.empty() : tensor<1x32x13x64xf32>
    %580 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_136 : tensor<1x32x13x64xf32>) outs(%579 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %581 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_137 = tensor.insert_slice %580 into %581[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_138 = tensor.insert_slice %extracted_slice_135 into %inserted_slice_137[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %582 = tensor.empty() : tensor<1x32x13x128xf32>
    %583 = tensor.empty() : tensor<1x32x13x128xf32>
    %584 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%574 : tensor<1x1x13x128xf32>) outs(%583 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %585 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_138, %584 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%582 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %586 = "tosa.add"(%578, %585) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %587 = tensor.empty() : tensor<1x32x13x128xf32>
    %588 = tensor.empty() : tensor<1x32x13x128xf32>
    %589 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%571 : tensor<1x1x13x128xf32>) outs(%588 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %590 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%557, %589 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%587 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_139 = tensor.extract_slice %557[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_140 = tensor.extract_slice %557[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %591 = tensor.empty() : tensor<1x32x13x64xf32>
    %592 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_140 : tensor<1x32x13x64xf32>) outs(%591 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %593 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_141 = tensor.insert_slice %592 into %593[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_142 = tensor.insert_slice %extracted_slice_139 into %inserted_slice_141[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %594 = tensor.empty() : tensor<1x32x13x128xf32>
    %595 = tensor.empty() : tensor<1x32x13x128xf32>
    %596 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%574 : tensor<1x1x13x128xf32>) outs(%595 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %597 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_142, %596 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%594 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %598 = "tosa.add"(%590, %597) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %599 = tensor.empty() : tensor<1x32x128x13xf32>
    %600 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%598 : tensor<1x32x13x128xf32>) outs(%599 : tensor<1x32x128x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x13xf32>
    %601 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_143 = tensor.extract_slice %586[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_144 = tensor.insert_slice %extracted_slice_143 into %601[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %602 = "tosa.reshape"(%inserted_slice_144) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %603 = tensor.empty() : tensor<1x32x128x13xf32>
    %extracted_slice_145 = tensor.extract_slice %600[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> to tensor<1x32x128x13xf32>
    %inserted_slice_146 = tensor.insert_slice %extracted_slice_145 into %603[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> into tensor<1x32x128x13xf32>
    %604 = "tosa.reshape"(%inserted_slice_146) {new_shape = array<i64: 32, 128, 13>} : (tensor<1x32x128x13xf32>) -> tensor<32x128x13xf32>
    %605 = tensor.empty() : tensor<32x13x13xf32>
    %606 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%605 : tensor<32x13x13xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x13xf32>
    %607 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%602, %604 : tensor<32x13x128xf32>, tensor<32x128x13xf32>) outs(%606 : tensor<32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x13xf32>
    %608 = "tosa.reshape"(%607) {new_shape = array<i64: 1, 32, 13, 13>} : (tensor<32x13x13xf32>) -> tensor<1x32x13x13xf32>
    %cst_147 = arith.constant 11.3137083 : f32
    %609 = tensor.empty() : tensor<1x32x13x13xf32>
    %610 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%608 : tensor<1x32x13x13xf32>) outs(%609 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.divf %in, %cst_147 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %611 = "tosa.add"(%610, %24) : (tensor<1x32x13x13xf32>, tensor<1x1x13x13xf32>) -> tensor<1x32x13x13xf32>
    %612 = tensor.empty() : tensor<1x32x13x1xf32>
    %613 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%612 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %614 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%611 : tensor<1x32x13x13xf32>) outs(%612 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.maxf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %615 = tensor.empty() : tensor<1x32x13x13xf32>
    %616 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%611, %614 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%615 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.subf %in, %in_999 : f32
      %5295 = math.exp %5294 : f32
      linalg.yield %5295 : f32
    } -> tensor<1x32x13x13xf32>
    %617 = tensor.empty() : tensor<1x32x13x1xf32>
    %618 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%617 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %619 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%616 : tensor<1x32x13x13xf32>) outs(%618 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %620 = tensor.empty() : tensor<1x32x13x13xf32>
    %621 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%616, %619 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%620 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.divf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %622 = tensor.empty() : tensor<1x32x13x13xf32>
    %extracted_slice_148 = tensor.extract_slice %621[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> to tensor<1x32x13x13xf32>
    %inserted_slice_149 = tensor.insert_slice %extracted_slice_148 into %622[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> into tensor<1x32x13x13xf32>
    %623 = "tosa.reshape"(%inserted_slice_149) {new_shape = array<i64: 32, 13, 13>} : (tensor<1x32x13x13xf32>) -> tensor<32x13x13xf32>
    %624 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_150 = tensor.extract_slice %560[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_151 = tensor.insert_slice %extracted_slice_150 into %624[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %625 = "tosa.reshape"(%inserted_slice_151) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %626 = tensor.empty() : tensor<32x13x128xf32>
    %627 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%626 : tensor<32x13x128xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x128xf32>
    %628 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%623, %625 : tensor<32x13x13xf32>, tensor<32x13x128xf32>) outs(%627 : tensor<32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x128xf32>
    %629 = "tosa.reshape"(%628) {new_shape = array<i64: 1, 32, 13, 128>} : (tensor<32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %630 = tensor.empty() : tensor<1x13x32x128xf32>
    %631 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%629 : tensor<1x32x13x128xf32>) outs(%630 : tensor<1x13x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x32x128xf32>
    %extracted_slice_152 = tensor.extract_slice %631[0, 0, 0, 0] [1, 13, 32, 128] [1, 1, 1, 1] : tensor<1x13x32x128xf32> to tensor<1x13x32x128xf32>
    %632 = "tosa.reshape"(%extracted_slice_152) {new_shape = array<i64: 1, 13, 4096>} : (tensor<1x13x32x128xf32>) -> tensor<1x13x4096xf32>
    %633 = tensor.empty() : tensor<4096x4096xf32>
    %634 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg90 : tensor<4096x4096xf32>) outs(%633 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %635 = "tosa.reshape"(%632) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %636 = tensor.empty() : tensor<13x4096xf32>
    %637 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%636 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %638 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%635, %634 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%637 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %639 = "tosa.reshape"(%638) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %640 = "tosa.add"(%516, %639) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %641 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_153 = arith.constant 2 : i32
    %642 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%640 : tensor<1x13x4096xf32>) outs(%641 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_153 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_154 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %643 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%642 : tensor<1x13x4096xf32>) outs(%cst_154 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_155 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %644 = "tosa.add"(%643, %cst_155) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %645 = tensor.empty() : tensor<1x13x1xf32>
    %646 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%644 : tensor<1x13x1xf32>) outs(%645 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %647 = tensor.empty() : tensor<1x13x4096xf32>
    %648 = tensor.empty() : tensor<1x13x4096xf32>
    %649 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%646 : tensor<1x13x1xf32>) outs(%648 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %650 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%640, %649 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%647 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %651 = tensor.empty() : tensor<1x13x4096xf32>
    %652 = tensor.empty() : tensor<1x13x4096xf32>
    %653 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg7 : tensor<4096xf32>) outs(%652 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %654 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%653, %650 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%651 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %655 = tensor.empty() : tensor<4096x11008xf32>
    %656 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg91 : tensor<11008x4096xf32>) outs(%655 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %657 = "tosa.reshape"(%654) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %658 = tensor.empty() : tensor<13x11008xf32>
    %659 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%658 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %660 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%657, %656 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%659 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %661 = "tosa.reshape"(%660) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %662 = tensor.empty() : tensor<1x13x11008xf32>
    %663 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%661 : tensor<1x13x11008xf32>) outs(%662 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      %5295 = math.exp %5294 : f32
      %cst_999 = arith.constant 1.000000e+00 : f32
      %5296 = arith.addf %cst_999, %5295 : f32
      %5297 = arith.divf %in, %5296 : f32
      linalg.yield %5297 : f32
    } -> tensor<1x13x11008xf32>
    %664 = tensor.empty() : tensor<4096x11008xf32>
    %665 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg92 : tensor<11008x4096xf32>) outs(%664 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %666 = "tosa.reshape"(%654) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %667 = tensor.empty() : tensor<13x11008xf32>
    %668 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%667 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %669 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%666, %665 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%668 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %670 = "tosa.reshape"(%669) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %671 = tensor.empty() : tensor<1x13x11008xf32>
    %672 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%663, %670 : tensor<1x13x11008xf32>, tensor<1x13x11008xf32>) outs(%671 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x11008xf32>
    %673 = tensor.empty() : tensor<11008x4096xf32>
    %674 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg93 : tensor<4096x11008xf32>) outs(%673 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %675 = "tosa.reshape"(%672) {new_shape = array<i64: 13, 11008>} : (tensor<1x13x11008xf32>) -> tensor<13x11008xf32>
    %676 = tensor.empty() : tensor<13x4096xf32>
    %677 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%676 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %678 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%675, %674 : tensor<13x11008xf32>, tensor<11008x4096xf32>) outs(%677 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %679 = "tosa.reshape"(%678) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %680 = "tosa.add"(%640, %679) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %681 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_156 = arith.constant 2 : i32
    %682 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%680 : tensor<1x13x4096xf32>) outs(%681 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_156 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_157 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %683 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%682 : tensor<1x13x4096xf32>) outs(%cst_157 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_158 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %684 = "tosa.add"(%683, %cst_158) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %685 = tensor.empty() : tensor<1x13x1xf32>
    %686 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%684 : tensor<1x13x1xf32>) outs(%685 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %687 = tensor.empty() : tensor<1x13x4096xf32>
    %688 = tensor.empty() : tensor<1x13x4096xf32>
    %689 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%686 : tensor<1x13x1xf32>) outs(%688 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %690 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%680, %689 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%687 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %691 = tensor.empty() : tensor<1x13x4096xf32>
    %692 = tensor.empty() : tensor<1x13x4096xf32>
    %693 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg8 : tensor<4096xf32>) outs(%692 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %694 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%693, %690 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%691 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %695 = tensor.empty() : tensor<4096x4096xf32>
    %696 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg94 : tensor<4096x4096xf32>) outs(%695 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %697 = "tosa.reshape"(%694) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %698 = tensor.empty() : tensor<13x4096xf32>
    %699 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%698 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %700 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%697, %696 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%699 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %701 = "tosa.reshape"(%700) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %702 = tensor.empty() : tensor<4096x4096xf32>
    %703 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg95 : tensor<4096x4096xf32>) outs(%702 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %704 = "tosa.reshape"(%694) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %705 = tensor.empty() : tensor<13x4096xf32>
    %706 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%705 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %707 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%704, %703 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%706 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %708 = "tosa.reshape"(%707) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %709 = tensor.empty() : tensor<4096x4096xf32>
    %710 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg96 : tensor<4096x4096xf32>) outs(%709 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %711 = "tosa.reshape"(%694) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %712 = tensor.empty() : tensor<13x4096xf32>
    %713 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%712 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %714 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%711, %710 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%713 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %715 = "tosa.reshape"(%714) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %716 = "tosa.reshape"(%701) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %717 = tensor.empty() : tensor<1x32x13x128xf32>
    %718 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%716 : tensor<1x13x32x128xf32>) outs(%717 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %719 = "tosa.reshape"(%708) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %720 = tensor.empty() : tensor<1x32x13x128xf32>
    %721 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%719 : tensor<1x13x32x128xf32>) outs(%720 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %722 = "tosa.reshape"(%715) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %723 = tensor.empty() : tensor<1x32x13x128xf32>
    %724 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%722 : tensor<1x13x32x128xf32>) outs(%723 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_159 = tensor.extract_slice %arg299[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_160 = tensor.extract_slice %extracted_slice_159[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_161 = tensor.extract_slice %extracted_slice_160[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %extracted_slice_162 = tensor.extract_slice %arg300[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_163 = tensor.extract_slice %extracted_slice_162[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_164 = tensor.extract_slice %extracted_slice_163[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %725 = tensor.empty() : tensor<1x13x128xf32>
    %726 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_161 : tensor<1x1x13x128xf32>) outs(%725 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %727 = tensor.empty() : tensor<13x128xf32>
    %728 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%726 : tensor<1x13x128xf32>) outs(%727 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %729 = tensor.empty() : tensor<1x13x128xf32>
    %730 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_164 : tensor<1x1x13x128xf32>) outs(%729 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %731 = tensor.empty() : tensor<13x128xf32>
    %732 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%730 : tensor<1x13x128xf32>) outs(%731 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %733 = tensor.empty() : tensor<1x13x128xf32>
    %734 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%733 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %728[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %735 = "tosa.reshape"(%734) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %736 = tensor.empty() : tensor<1x13x128xf32>
    %737 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%736 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %732[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %738 = "tosa.reshape"(%737) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %739 = tensor.empty() : tensor<1x32x13x128xf32>
    %740 = tensor.empty() : tensor<1x32x13x128xf32>
    %741 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%735 : tensor<1x1x13x128xf32>) outs(%740 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %742 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%718, %741 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%739 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_165 = tensor.extract_slice %718[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_166 = tensor.extract_slice %718[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %743 = tensor.empty() : tensor<1x32x13x64xf32>
    %744 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_166 : tensor<1x32x13x64xf32>) outs(%743 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %745 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_167 = tensor.insert_slice %744 into %745[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_168 = tensor.insert_slice %extracted_slice_165 into %inserted_slice_167[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %746 = tensor.empty() : tensor<1x32x13x128xf32>
    %747 = tensor.empty() : tensor<1x32x13x128xf32>
    %748 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%738 : tensor<1x1x13x128xf32>) outs(%747 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %749 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_168, %748 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%746 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %750 = "tosa.add"(%742, %749) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %751 = tensor.empty() : tensor<1x32x13x128xf32>
    %752 = tensor.empty() : tensor<1x32x13x128xf32>
    %753 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%735 : tensor<1x1x13x128xf32>) outs(%752 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %754 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%721, %753 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%751 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_169 = tensor.extract_slice %721[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_170 = tensor.extract_slice %721[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %755 = tensor.empty() : tensor<1x32x13x64xf32>
    %756 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_170 : tensor<1x32x13x64xf32>) outs(%755 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %757 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_171 = tensor.insert_slice %756 into %757[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_172 = tensor.insert_slice %extracted_slice_169 into %inserted_slice_171[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %758 = tensor.empty() : tensor<1x32x13x128xf32>
    %759 = tensor.empty() : tensor<1x32x13x128xf32>
    %760 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%738 : tensor<1x1x13x128xf32>) outs(%759 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %761 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_172, %760 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%758 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %762 = "tosa.add"(%754, %761) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %763 = tensor.empty() : tensor<1x32x128x13xf32>
    %764 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%762 : tensor<1x32x13x128xf32>) outs(%763 : tensor<1x32x128x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x13xf32>
    %765 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_173 = tensor.extract_slice %750[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_174 = tensor.insert_slice %extracted_slice_173 into %765[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %766 = "tosa.reshape"(%inserted_slice_174) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %767 = tensor.empty() : tensor<1x32x128x13xf32>
    %extracted_slice_175 = tensor.extract_slice %764[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> to tensor<1x32x128x13xf32>
    %inserted_slice_176 = tensor.insert_slice %extracted_slice_175 into %767[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> into tensor<1x32x128x13xf32>
    %768 = "tosa.reshape"(%inserted_slice_176) {new_shape = array<i64: 32, 128, 13>} : (tensor<1x32x128x13xf32>) -> tensor<32x128x13xf32>
    %769 = tensor.empty() : tensor<32x13x13xf32>
    %770 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%769 : tensor<32x13x13xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x13xf32>
    %771 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%766, %768 : tensor<32x13x128xf32>, tensor<32x128x13xf32>) outs(%770 : tensor<32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x13xf32>
    %772 = "tosa.reshape"(%771) {new_shape = array<i64: 1, 32, 13, 13>} : (tensor<32x13x13xf32>) -> tensor<1x32x13x13xf32>
    %cst_177 = arith.constant 11.3137083 : f32
    %773 = tensor.empty() : tensor<1x32x13x13xf32>
    %774 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%772 : tensor<1x32x13x13xf32>) outs(%773 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.divf %in, %cst_177 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %775 = "tosa.add"(%774, %24) : (tensor<1x32x13x13xf32>, tensor<1x1x13x13xf32>) -> tensor<1x32x13x13xf32>
    %776 = tensor.empty() : tensor<1x32x13x1xf32>
    %777 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%776 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %778 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%775 : tensor<1x32x13x13xf32>) outs(%776 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.maxf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %779 = tensor.empty() : tensor<1x32x13x13xf32>
    %780 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%775, %778 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%779 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.subf %in, %in_999 : f32
      %5295 = math.exp %5294 : f32
      linalg.yield %5295 : f32
    } -> tensor<1x32x13x13xf32>
    %781 = tensor.empty() : tensor<1x32x13x1xf32>
    %782 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%781 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %783 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%780 : tensor<1x32x13x13xf32>) outs(%782 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %784 = tensor.empty() : tensor<1x32x13x13xf32>
    %785 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%780, %783 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%784 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.divf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %786 = tensor.empty() : tensor<1x32x13x13xf32>
    %extracted_slice_178 = tensor.extract_slice %785[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> to tensor<1x32x13x13xf32>
    %inserted_slice_179 = tensor.insert_slice %extracted_slice_178 into %786[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> into tensor<1x32x13x13xf32>
    %787 = "tosa.reshape"(%inserted_slice_179) {new_shape = array<i64: 32, 13, 13>} : (tensor<1x32x13x13xf32>) -> tensor<32x13x13xf32>
    %788 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_180 = tensor.extract_slice %724[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_181 = tensor.insert_slice %extracted_slice_180 into %788[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %789 = "tosa.reshape"(%inserted_slice_181) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %790 = tensor.empty() : tensor<32x13x128xf32>
    %791 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%790 : tensor<32x13x128xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x128xf32>
    %792 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%787, %789 : tensor<32x13x13xf32>, tensor<32x13x128xf32>) outs(%791 : tensor<32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x128xf32>
    %793 = "tosa.reshape"(%792) {new_shape = array<i64: 1, 32, 13, 128>} : (tensor<32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %794 = tensor.empty() : tensor<1x13x32x128xf32>
    %795 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%793 : tensor<1x32x13x128xf32>) outs(%794 : tensor<1x13x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x32x128xf32>
    %extracted_slice_182 = tensor.extract_slice %795[0, 0, 0, 0] [1, 13, 32, 128] [1, 1, 1, 1] : tensor<1x13x32x128xf32> to tensor<1x13x32x128xf32>
    %796 = "tosa.reshape"(%extracted_slice_182) {new_shape = array<i64: 1, 13, 4096>} : (tensor<1x13x32x128xf32>) -> tensor<1x13x4096xf32>
    %797 = tensor.empty() : tensor<4096x4096xf32>
    %798 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg97 : tensor<4096x4096xf32>) outs(%797 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %799 = "tosa.reshape"(%796) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %800 = tensor.empty() : tensor<13x4096xf32>
    %801 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%800 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %802 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%799, %798 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%801 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %803 = "tosa.reshape"(%802) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %804 = "tosa.add"(%680, %803) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %805 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_183 = arith.constant 2 : i32
    %806 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%804 : tensor<1x13x4096xf32>) outs(%805 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_183 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_184 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %807 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%806 : tensor<1x13x4096xf32>) outs(%cst_184 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_185 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %808 = "tosa.add"(%807, %cst_185) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %809 = tensor.empty() : tensor<1x13x1xf32>
    %810 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%808 : tensor<1x13x1xf32>) outs(%809 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %811 = tensor.empty() : tensor<1x13x4096xf32>
    %812 = tensor.empty() : tensor<1x13x4096xf32>
    %813 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%810 : tensor<1x13x1xf32>) outs(%812 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %814 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%804, %813 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%811 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %815 = tensor.empty() : tensor<1x13x4096xf32>
    %816 = tensor.empty() : tensor<1x13x4096xf32>
    %817 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg9 : tensor<4096xf32>) outs(%816 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %818 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%817, %814 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%815 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %819 = tensor.empty() : tensor<4096x11008xf32>
    %820 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg98 : tensor<11008x4096xf32>) outs(%819 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %821 = "tosa.reshape"(%818) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %822 = tensor.empty() : tensor<13x11008xf32>
    %823 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%822 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %824 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%821, %820 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%823 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %825 = "tosa.reshape"(%824) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %826 = tensor.empty() : tensor<1x13x11008xf32>
    %827 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%825 : tensor<1x13x11008xf32>) outs(%826 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      %5295 = math.exp %5294 : f32
      %cst_999 = arith.constant 1.000000e+00 : f32
      %5296 = arith.addf %cst_999, %5295 : f32
      %5297 = arith.divf %in, %5296 : f32
      linalg.yield %5297 : f32
    } -> tensor<1x13x11008xf32>
    %828 = tensor.empty() : tensor<4096x11008xf32>
    %829 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg99 : tensor<11008x4096xf32>) outs(%828 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %830 = "tosa.reshape"(%818) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %831 = tensor.empty() : tensor<13x11008xf32>
    %832 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%831 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %833 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%830, %829 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%832 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %834 = "tosa.reshape"(%833) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %835 = tensor.empty() : tensor<1x13x11008xf32>
    %836 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%827, %834 : tensor<1x13x11008xf32>, tensor<1x13x11008xf32>) outs(%835 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x11008xf32>
    %837 = tensor.empty() : tensor<11008x4096xf32>
    %838 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg100 : tensor<4096x11008xf32>) outs(%837 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %839 = "tosa.reshape"(%836) {new_shape = array<i64: 13, 11008>} : (tensor<1x13x11008xf32>) -> tensor<13x11008xf32>
    %840 = tensor.empty() : tensor<13x4096xf32>
    %841 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%840 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %842 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%839, %838 : tensor<13x11008xf32>, tensor<11008x4096xf32>) outs(%841 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %843 = "tosa.reshape"(%842) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %844 = "tosa.add"(%804, %843) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %845 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_186 = arith.constant 2 : i32
    %846 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%844 : tensor<1x13x4096xf32>) outs(%845 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_186 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_187 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %847 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%846 : tensor<1x13x4096xf32>) outs(%cst_187 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_188 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %848 = "tosa.add"(%847, %cst_188) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %849 = tensor.empty() : tensor<1x13x1xf32>
    %850 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%848 : tensor<1x13x1xf32>) outs(%849 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %851 = tensor.empty() : tensor<1x13x4096xf32>
    %852 = tensor.empty() : tensor<1x13x4096xf32>
    %853 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%850 : tensor<1x13x1xf32>) outs(%852 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %854 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%844, %853 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%851 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %855 = tensor.empty() : tensor<1x13x4096xf32>
    %856 = tensor.empty() : tensor<1x13x4096xf32>
    %857 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg10 : tensor<4096xf32>) outs(%856 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %858 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%857, %854 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%855 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %859 = tensor.empty() : tensor<4096x4096xf32>
    %860 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg101 : tensor<4096x4096xf32>) outs(%859 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %861 = "tosa.reshape"(%858) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %862 = tensor.empty() : tensor<13x4096xf32>
    %863 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%862 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %864 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%861, %860 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%863 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %865 = "tosa.reshape"(%864) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %866 = tensor.empty() : tensor<4096x4096xf32>
    %867 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg102 : tensor<4096x4096xf32>) outs(%866 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %868 = "tosa.reshape"(%858) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %869 = tensor.empty() : tensor<13x4096xf32>
    %870 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%869 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %871 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%868, %867 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%870 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %872 = "tosa.reshape"(%871) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %873 = tensor.empty() : tensor<4096x4096xf32>
    %874 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg103 : tensor<4096x4096xf32>) outs(%873 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %875 = "tosa.reshape"(%858) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %876 = tensor.empty() : tensor<13x4096xf32>
    %877 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%876 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %878 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%875, %874 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%877 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %879 = "tosa.reshape"(%878) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %880 = "tosa.reshape"(%865) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %881 = tensor.empty() : tensor<1x32x13x128xf32>
    %882 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%880 : tensor<1x13x32x128xf32>) outs(%881 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %883 = "tosa.reshape"(%872) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %884 = tensor.empty() : tensor<1x32x13x128xf32>
    %885 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%883 : tensor<1x13x32x128xf32>) outs(%884 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %886 = "tosa.reshape"(%879) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %887 = tensor.empty() : tensor<1x32x13x128xf32>
    %888 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%886 : tensor<1x13x32x128xf32>) outs(%887 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_189 = tensor.extract_slice %arg301[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_190 = tensor.extract_slice %extracted_slice_189[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_191 = tensor.extract_slice %extracted_slice_190[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %extracted_slice_192 = tensor.extract_slice %arg302[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_193 = tensor.extract_slice %extracted_slice_192[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_194 = tensor.extract_slice %extracted_slice_193[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %889 = tensor.empty() : tensor<1x13x128xf32>
    %890 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_191 : tensor<1x1x13x128xf32>) outs(%889 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %891 = tensor.empty() : tensor<13x128xf32>
    %892 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%890 : tensor<1x13x128xf32>) outs(%891 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %893 = tensor.empty() : tensor<1x13x128xf32>
    %894 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_194 : tensor<1x1x13x128xf32>) outs(%893 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %895 = tensor.empty() : tensor<13x128xf32>
    %896 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%894 : tensor<1x13x128xf32>) outs(%895 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %897 = tensor.empty() : tensor<1x13x128xf32>
    %898 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%897 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %892[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %899 = "tosa.reshape"(%898) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %900 = tensor.empty() : tensor<1x13x128xf32>
    %901 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%900 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %896[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %902 = "tosa.reshape"(%901) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %903 = tensor.empty() : tensor<1x32x13x128xf32>
    %904 = tensor.empty() : tensor<1x32x13x128xf32>
    %905 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%899 : tensor<1x1x13x128xf32>) outs(%904 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %906 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%882, %905 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%903 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_195 = tensor.extract_slice %882[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_196 = tensor.extract_slice %882[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %907 = tensor.empty() : tensor<1x32x13x64xf32>
    %908 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_196 : tensor<1x32x13x64xf32>) outs(%907 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %909 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_197 = tensor.insert_slice %908 into %909[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_198 = tensor.insert_slice %extracted_slice_195 into %inserted_slice_197[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %910 = tensor.empty() : tensor<1x32x13x128xf32>
    %911 = tensor.empty() : tensor<1x32x13x128xf32>
    %912 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%902 : tensor<1x1x13x128xf32>) outs(%911 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %913 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_198, %912 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%910 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %914 = "tosa.add"(%906, %913) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %915 = tensor.empty() : tensor<1x32x13x128xf32>
    %916 = tensor.empty() : tensor<1x32x13x128xf32>
    %917 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%899 : tensor<1x1x13x128xf32>) outs(%916 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %918 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%885, %917 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%915 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_199 = tensor.extract_slice %885[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_200 = tensor.extract_slice %885[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %919 = tensor.empty() : tensor<1x32x13x64xf32>
    %920 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_200 : tensor<1x32x13x64xf32>) outs(%919 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %921 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_201 = tensor.insert_slice %920 into %921[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_202 = tensor.insert_slice %extracted_slice_199 into %inserted_slice_201[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %922 = tensor.empty() : tensor<1x32x13x128xf32>
    %923 = tensor.empty() : tensor<1x32x13x128xf32>
    %924 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%902 : tensor<1x1x13x128xf32>) outs(%923 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %925 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_202, %924 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%922 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %926 = "tosa.add"(%918, %925) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %927 = tensor.empty() : tensor<1x32x128x13xf32>
    %928 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%926 : tensor<1x32x13x128xf32>) outs(%927 : tensor<1x32x128x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x13xf32>
    %929 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_203 = tensor.extract_slice %914[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_204 = tensor.insert_slice %extracted_slice_203 into %929[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %930 = "tosa.reshape"(%inserted_slice_204) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %931 = tensor.empty() : tensor<1x32x128x13xf32>
    %extracted_slice_205 = tensor.extract_slice %928[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> to tensor<1x32x128x13xf32>
    %inserted_slice_206 = tensor.insert_slice %extracted_slice_205 into %931[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> into tensor<1x32x128x13xf32>
    %932 = "tosa.reshape"(%inserted_slice_206) {new_shape = array<i64: 32, 128, 13>} : (tensor<1x32x128x13xf32>) -> tensor<32x128x13xf32>
    %933 = tensor.empty() : tensor<32x13x13xf32>
    %934 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%933 : tensor<32x13x13xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x13xf32>
    %935 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%930, %932 : tensor<32x13x128xf32>, tensor<32x128x13xf32>) outs(%934 : tensor<32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x13xf32>
    %936 = "tosa.reshape"(%935) {new_shape = array<i64: 1, 32, 13, 13>} : (tensor<32x13x13xf32>) -> tensor<1x32x13x13xf32>
    %cst_207 = arith.constant 11.3137083 : f32
    %937 = tensor.empty() : tensor<1x32x13x13xf32>
    %938 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%936 : tensor<1x32x13x13xf32>) outs(%937 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.divf %in, %cst_207 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %939 = "tosa.add"(%938, %24) : (tensor<1x32x13x13xf32>, tensor<1x1x13x13xf32>) -> tensor<1x32x13x13xf32>
    %940 = tensor.empty() : tensor<1x32x13x1xf32>
    %941 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%940 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %942 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%939 : tensor<1x32x13x13xf32>) outs(%940 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.maxf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %943 = tensor.empty() : tensor<1x32x13x13xf32>
    %944 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%939, %942 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%943 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.subf %in, %in_999 : f32
      %5295 = math.exp %5294 : f32
      linalg.yield %5295 : f32
    } -> tensor<1x32x13x13xf32>
    %945 = tensor.empty() : tensor<1x32x13x1xf32>
    %946 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%945 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %947 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%944 : tensor<1x32x13x13xf32>) outs(%946 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %948 = tensor.empty() : tensor<1x32x13x13xf32>
    %949 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%944, %947 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%948 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.divf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %950 = tensor.empty() : tensor<1x32x13x13xf32>
    %extracted_slice_208 = tensor.extract_slice %949[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> to tensor<1x32x13x13xf32>
    %inserted_slice_209 = tensor.insert_slice %extracted_slice_208 into %950[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> into tensor<1x32x13x13xf32>
    %951 = "tosa.reshape"(%inserted_slice_209) {new_shape = array<i64: 32, 13, 13>} : (tensor<1x32x13x13xf32>) -> tensor<32x13x13xf32>
    %952 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_210 = tensor.extract_slice %888[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_211 = tensor.insert_slice %extracted_slice_210 into %952[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %953 = "tosa.reshape"(%inserted_slice_211) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %954 = tensor.empty() : tensor<32x13x128xf32>
    %955 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%954 : tensor<32x13x128xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x128xf32>
    %956 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%951, %953 : tensor<32x13x13xf32>, tensor<32x13x128xf32>) outs(%955 : tensor<32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x128xf32>
    %957 = "tosa.reshape"(%956) {new_shape = array<i64: 1, 32, 13, 128>} : (tensor<32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %958 = tensor.empty() : tensor<1x13x32x128xf32>
    %959 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%957 : tensor<1x32x13x128xf32>) outs(%958 : tensor<1x13x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x32x128xf32>
    %extracted_slice_212 = tensor.extract_slice %959[0, 0, 0, 0] [1, 13, 32, 128] [1, 1, 1, 1] : tensor<1x13x32x128xf32> to tensor<1x13x32x128xf32>
    %960 = "tosa.reshape"(%extracted_slice_212) {new_shape = array<i64: 1, 13, 4096>} : (tensor<1x13x32x128xf32>) -> tensor<1x13x4096xf32>
    %961 = tensor.empty() : tensor<4096x4096xf32>
    %962 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg104 : tensor<4096x4096xf32>) outs(%961 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %963 = "tosa.reshape"(%960) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %964 = tensor.empty() : tensor<13x4096xf32>
    %965 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%964 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %966 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%963, %962 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%965 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %967 = "tosa.reshape"(%966) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %968 = "tosa.add"(%844, %967) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %969 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_213 = arith.constant 2 : i32
    %970 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%968 : tensor<1x13x4096xf32>) outs(%969 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_213 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_214 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %971 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%970 : tensor<1x13x4096xf32>) outs(%cst_214 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_215 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %972 = "tosa.add"(%971, %cst_215) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %973 = tensor.empty() : tensor<1x13x1xf32>
    %974 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%972 : tensor<1x13x1xf32>) outs(%973 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %975 = tensor.empty() : tensor<1x13x4096xf32>
    %976 = tensor.empty() : tensor<1x13x4096xf32>
    %977 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%974 : tensor<1x13x1xf32>) outs(%976 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %978 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%968, %977 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%975 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %979 = tensor.empty() : tensor<1x13x4096xf32>
    %980 = tensor.empty() : tensor<1x13x4096xf32>
    %981 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg11 : tensor<4096xf32>) outs(%980 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %982 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%981, %978 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%979 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %983 = tensor.empty() : tensor<4096x11008xf32>
    %984 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg105 : tensor<11008x4096xf32>) outs(%983 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %985 = "tosa.reshape"(%982) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %986 = tensor.empty() : tensor<13x11008xf32>
    %987 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%986 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %988 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%985, %984 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%987 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %989 = "tosa.reshape"(%988) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %990 = tensor.empty() : tensor<1x13x11008xf32>
    %991 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%989 : tensor<1x13x11008xf32>) outs(%990 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      %5295 = math.exp %5294 : f32
      %cst_999 = arith.constant 1.000000e+00 : f32
      %5296 = arith.addf %cst_999, %5295 : f32
      %5297 = arith.divf %in, %5296 : f32
      linalg.yield %5297 : f32
    } -> tensor<1x13x11008xf32>
    %992 = tensor.empty() : tensor<4096x11008xf32>
    %993 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg106 : tensor<11008x4096xf32>) outs(%992 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %994 = "tosa.reshape"(%982) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %995 = tensor.empty() : tensor<13x11008xf32>
    %996 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%995 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %997 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%994, %993 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%996 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %998 = "tosa.reshape"(%997) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %999 = tensor.empty() : tensor<1x13x11008xf32>
    %1000 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%991, %998 : tensor<1x13x11008xf32>, tensor<1x13x11008xf32>) outs(%999 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x11008xf32>
    %1001 = tensor.empty() : tensor<11008x4096xf32>
    %1002 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg107 : tensor<4096x11008xf32>) outs(%1001 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %1003 = "tosa.reshape"(%1000) {new_shape = array<i64: 13, 11008>} : (tensor<1x13x11008xf32>) -> tensor<13x11008xf32>
    %1004 = tensor.empty() : tensor<13x4096xf32>
    %1005 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1004 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %1006 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1003, %1002 : tensor<13x11008xf32>, tensor<11008x4096xf32>) outs(%1005 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %1007 = "tosa.reshape"(%1006) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %1008 = "tosa.add"(%968, %1007) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %1009 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_216 = arith.constant 2 : i32
    %1010 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1008 : tensor<1x13x4096xf32>) outs(%1009 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_216 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_217 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %1011 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1010 : tensor<1x13x4096xf32>) outs(%cst_217 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_218 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1012 = "tosa.add"(%1011, %cst_218) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %1013 = tensor.empty() : tensor<1x13x1xf32>
    %1014 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1012 : tensor<1x13x1xf32>) outs(%1013 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %1015 = tensor.empty() : tensor<1x13x4096xf32>
    %1016 = tensor.empty() : tensor<1x13x4096xf32>
    %1017 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1014 : tensor<1x13x1xf32>) outs(%1016 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %1018 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1008, %1017 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%1015 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %1019 = tensor.empty() : tensor<1x13x4096xf32>
    %1020 = tensor.empty() : tensor<1x13x4096xf32>
    %1021 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg12 : tensor<4096xf32>) outs(%1020 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %1022 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1021, %1018 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%1019 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %1023 = tensor.empty() : tensor<4096x4096xf32>
    %1024 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg108 : tensor<4096x4096xf32>) outs(%1023 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1025 = "tosa.reshape"(%1022) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %1026 = tensor.empty() : tensor<13x4096xf32>
    %1027 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1026 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %1028 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1025, %1024 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%1027 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %1029 = "tosa.reshape"(%1028) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %1030 = tensor.empty() : tensor<4096x4096xf32>
    %1031 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg109 : tensor<4096x4096xf32>) outs(%1030 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1032 = "tosa.reshape"(%1022) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %1033 = tensor.empty() : tensor<13x4096xf32>
    %1034 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1033 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %1035 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1032, %1031 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%1034 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %1036 = "tosa.reshape"(%1035) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %1037 = tensor.empty() : tensor<4096x4096xf32>
    %1038 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg110 : tensor<4096x4096xf32>) outs(%1037 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1039 = "tosa.reshape"(%1022) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %1040 = tensor.empty() : tensor<13x4096xf32>
    %1041 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1040 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %1042 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1039, %1038 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%1041 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %1043 = "tosa.reshape"(%1042) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %1044 = "tosa.reshape"(%1029) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %1045 = tensor.empty() : tensor<1x32x13x128xf32>
    %1046 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1044 : tensor<1x13x32x128xf32>) outs(%1045 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %1047 = "tosa.reshape"(%1036) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %1048 = tensor.empty() : tensor<1x32x13x128xf32>
    %1049 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1047 : tensor<1x13x32x128xf32>) outs(%1048 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %1050 = "tosa.reshape"(%1043) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %1051 = tensor.empty() : tensor<1x32x13x128xf32>
    %1052 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1050 : tensor<1x13x32x128xf32>) outs(%1051 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_219 = tensor.extract_slice %arg303[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_220 = tensor.extract_slice %extracted_slice_219[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_221 = tensor.extract_slice %extracted_slice_220[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %extracted_slice_222 = tensor.extract_slice %arg304[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_223 = tensor.extract_slice %extracted_slice_222[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_224 = tensor.extract_slice %extracted_slice_223[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %1053 = tensor.empty() : tensor<1x13x128xf32>
    %1054 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_221 : tensor<1x1x13x128xf32>) outs(%1053 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %1055 = tensor.empty() : tensor<13x128xf32>
    %1056 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%1054 : tensor<1x13x128xf32>) outs(%1055 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %1057 = tensor.empty() : tensor<1x13x128xf32>
    %1058 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_224 : tensor<1x1x13x128xf32>) outs(%1057 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %1059 = tensor.empty() : tensor<13x128xf32>
    %1060 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%1058 : tensor<1x13x128xf32>) outs(%1059 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %1061 = tensor.empty() : tensor<1x13x128xf32>
    %1062 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%1061 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %1056[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %1063 = "tosa.reshape"(%1062) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %1064 = tensor.empty() : tensor<1x13x128xf32>
    %1065 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%1064 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %1060[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %1066 = "tosa.reshape"(%1065) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %1067 = tensor.empty() : tensor<1x32x13x128xf32>
    %1068 = tensor.empty() : tensor<1x32x13x128xf32>
    %1069 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1063 : tensor<1x1x13x128xf32>) outs(%1068 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %1070 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1046, %1069 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%1067 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_225 = tensor.extract_slice %1046[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_226 = tensor.extract_slice %1046[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %1071 = tensor.empty() : tensor<1x32x13x64xf32>
    %1072 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_226 : tensor<1x32x13x64xf32>) outs(%1071 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %1073 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_227 = tensor.insert_slice %1072 into %1073[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_228 = tensor.insert_slice %extracted_slice_225 into %inserted_slice_227[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %1074 = tensor.empty() : tensor<1x32x13x128xf32>
    %1075 = tensor.empty() : tensor<1x32x13x128xf32>
    %1076 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1066 : tensor<1x1x13x128xf32>) outs(%1075 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %1077 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_228, %1076 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%1074 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %1078 = "tosa.add"(%1070, %1077) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %1079 = tensor.empty() : tensor<1x32x13x128xf32>
    %1080 = tensor.empty() : tensor<1x32x13x128xf32>
    %1081 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1063 : tensor<1x1x13x128xf32>) outs(%1080 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %1082 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1049, %1081 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%1079 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_229 = tensor.extract_slice %1049[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_230 = tensor.extract_slice %1049[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %1083 = tensor.empty() : tensor<1x32x13x64xf32>
    %1084 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_230 : tensor<1x32x13x64xf32>) outs(%1083 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %1085 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_231 = tensor.insert_slice %1084 into %1085[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_232 = tensor.insert_slice %extracted_slice_229 into %inserted_slice_231[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %1086 = tensor.empty() : tensor<1x32x13x128xf32>
    %1087 = tensor.empty() : tensor<1x32x13x128xf32>
    %1088 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1066 : tensor<1x1x13x128xf32>) outs(%1087 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %1089 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_232, %1088 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%1086 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %1090 = "tosa.add"(%1082, %1089) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %1091 = tensor.empty() : tensor<1x32x128x13xf32>
    %1092 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1090 : tensor<1x32x13x128xf32>) outs(%1091 : tensor<1x32x128x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x13xf32>
    %1093 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_233 = tensor.extract_slice %1078[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_234 = tensor.insert_slice %extracted_slice_233 into %1093[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %1094 = "tosa.reshape"(%inserted_slice_234) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %1095 = tensor.empty() : tensor<1x32x128x13xf32>
    %extracted_slice_235 = tensor.extract_slice %1092[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> to tensor<1x32x128x13xf32>
    %inserted_slice_236 = tensor.insert_slice %extracted_slice_235 into %1095[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> into tensor<1x32x128x13xf32>
    %1096 = "tosa.reshape"(%inserted_slice_236) {new_shape = array<i64: 32, 128, 13>} : (tensor<1x32x128x13xf32>) -> tensor<32x128x13xf32>
    %1097 = tensor.empty() : tensor<32x13x13xf32>
    %1098 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%1097 : tensor<32x13x13xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x13xf32>
    %1099 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1094, %1096 : tensor<32x13x128xf32>, tensor<32x128x13xf32>) outs(%1098 : tensor<32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x13xf32>
    %1100 = "tosa.reshape"(%1099) {new_shape = array<i64: 1, 32, 13, 13>} : (tensor<32x13x13xf32>) -> tensor<1x32x13x13xf32>
    %cst_237 = arith.constant 11.3137083 : f32
    %1101 = tensor.empty() : tensor<1x32x13x13xf32>
    %1102 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1100 : tensor<1x32x13x13xf32>) outs(%1101 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.divf %in, %cst_237 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %1103 = "tosa.add"(%1102, %24) : (tensor<1x32x13x13xf32>, tensor<1x1x13x13xf32>) -> tensor<1x32x13x13xf32>
    %1104 = tensor.empty() : tensor<1x32x13x1xf32>
    %1105 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1104 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %1106 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1103 : tensor<1x32x13x13xf32>) outs(%1104 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.maxf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %1107 = tensor.empty() : tensor<1x32x13x13xf32>
    %1108 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1103, %1106 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%1107 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.subf %in, %in_999 : f32
      %5295 = math.exp %5294 : f32
      linalg.yield %5295 : f32
    } -> tensor<1x32x13x13xf32>
    %1109 = tensor.empty() : tensor<1x32x13x1xf32>
    %1110 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1109 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %1111 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1108 : tensor<1x32x13x13xf32>) outs(%1110 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %1112 = tensor.empty() : tensor<1x32x13x13xf32>
    %1113 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1108, %1111 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%1112 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.divf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %1114 = tensor.empty() : tensor<1x32x13x13xf32>
    %extracted_slice_238 = tensor.extract_slice %1113[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> to tensor<1x32x13x13xf32>
    %inserted_slice_239 = tensor.insert_slice %extracted_slice_238 into %1114[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> into tensor<1x32x13x13xf32>
    %1115 = "tosa.reshape"(%inserted_slice_239) {new_shape = array<i64: 32, 13, 13>} : (tensor<1x32x13x13xf32>) -> tensor<32x13x13xf32>
    %1116 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_240 = tensor.extract_slice %1052[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_241 = tensor.insert_slice %extracted_slice_240 into %1116[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %1117 = "tosa.reshape"(%inserted_slice_241) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %1118 = tensor.empty() : tensor<32x13x128xf32>
    %1119 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%1118 : tensor<32x13x128xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x128xf32>
    %1120 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1115, %1117 : tensor<32x13x13xf32>, tensor<32x13x128xf32>) outs(%1119 : tensor<32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x128xf32>
    %1121 = "tosa.reshape"(%1120) {new_shape = array<i64: 1, 32, 13, 128>} : (tensor<32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %1122 = tensor.empty() : tensor<1x13x32x128xf32>
    %1123 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1121 : tensor<1x32x13x128xf32>) outs(%1122 : tensor<1x13x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x32x128xf32>
    %extracted_slice_242 = tensor.extract_slice %1123[0, 0, 0, 0] [1, 13, 32, 128] [1, 1, 1, 1] : tensor<1x13x32x128xf32> to tensor<1x13x32x128xf32>
    %1124 = "tosa.reshape"(%extracted_slice_242) {new_shape = array<i64: 1, 13, 4096>} : (tensor<1x13x32x128xf32>) -> tensor<1x13x4096xf32>
    %1125 = tensor.empty() : tensor<4096x4096xf32>
    %1126 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg111 : tensor<4096x4096xf32>) outs(%1125 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1127 = "tosa.reshape"(%1124) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %1128 = tensor.empty() : tensor<13x4096xf32>
    %1129 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1128 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %1130 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1127, %1126 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%1129 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %1131 = "tosa.reshape"(%1130) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %1132 = "tosa.add"(%1008, %1131) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %1133 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_243 = arith.constant 2 : i32
    %1134 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1132 : tensor<1x13x4096xf32>) outs(%1133 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_243 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_244 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %1135 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1134 : tensor<1x13x4096xf32>) outs(%cst_244 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_245 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1136 = "tosa.add"(%1135, %cst_245) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %1137 = tensor.empty() : tensor<1x13x1xf32>
    %1138 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1136 : tensor<1x13x1xf32>) outs(%1137 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %1139 = tensor.empty() : tensor<1x13x4096xf32>
    %1140 = tensor.empty() : tensor<1x13x4096xf32>
    %1141 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1138 : tensor<1x13x1xf32>) outs(%1140 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %1142 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1132, %1141 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%1139 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %1143 = tensor.empty() : tensor<1x13x4096xf32>
    %1144 = tensor.empty() : tensor<1x13x4096xf32>
    %1145 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg13 : tensor<4096xf32>) outs(%1144 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %1146 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1145, %1142 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%1143 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %1147 = tensor.empty() : tensor<4096x11008xf32>
    %1148 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg112 : tensor<11008x4096xf32>) outs(%1147 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1149 = "tosa.reshape"(%1146) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %1150 = tensor.empty() : tensor<13x11008xf32>
    %1151 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1150 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %1152 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1149, %1148 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%1151 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %1153 = "tosa.reshape"(%1152) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %1154 = tensor.empty() : tensor<1x13x11008xf32>
    %1155 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1153 : tensor<1x13x11008xf32>) outs(%1154 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      %5295 = math.exp %5294 : f32
      %cst_999 = arith.constant 1.000000e+00 : f32
      %5296 = arith.addf %cst_999, %5295 : f32
      %5297 = arith.divf %in, %5296 : f32
      linalg.yield %5297 : f32
    } -> tensor<1x13x11008xf32>
    %1156 = tensor.empty() : tensor<4096x11008xf32>
    %1157 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg113 : tensor<11008x4096xf32>) outs(%1156 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1158 = "tosa.reshape"(%1146) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %1159 = tensor.empty() : tensor<13x11008xf32>
    %1160 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1159 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %1161 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1158, %1157 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%1160 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %1162 = "tosa.reshape"(%1161) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %1163 = tensor.empty() : tensor<1x13x11008xf32>
    %1164 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1155, %1162 : tensor<1x13x11008xf32>, tensor<1x13x11008xf32>) outs(%1163 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x11008xf32>
    %1165 = tensor.empty() : tensor<11008x4096xf32>
    %1166 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg114 : tensor<4096x11008xf32>) outs(%1165 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %1167 = "tosa.reshape"(%1164) {new_shape = array<i64: 13, 11008>} : (tensor<1x13x11008xf32>) -> tensor<13x11008xf32>
    %1168 = tensor.empty() : tensor<13x4096xf32>
    %1169 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1168 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %1170 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1167, %1166 : tensor<13x11008xf32>, tensor<11008x4096xf32>) outs(%1169 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %1171 = "tosa.reshape"(%1170) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %1172 = "tosa.add"(%1132, %1171) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %1173 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_246 = arith.constant 2 : i32
    %1174 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1172 : tensor<1x13x4096xf32>) outs(%1173 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_246 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_247 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %1175 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1174 : tensor<1x13x4096xf32>) outs(%cst_247 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_248 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1176 = "tosa.add"(%1175, %cst_248) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %1177 = tensor.empty() : tensor<1x13x1xf32>
    %1178 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1176 : tensor<1x13x1xf32>) outs(%1177 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %1179 = tensor.empty() : tensor<1x13x4096xf32>
    %1180 = tensor.empty() : tensor<1x13x4096xf32>
    %1181 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1178 : tensor<1x13x1xf32>) outs(%1180 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %1182 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1172, %1181 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%1179 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %1183 = tensor.empty() : tensor<1x13x4096xf32>
    %1184 = tensor.empty() : tensor<1x13x4096xf32>
    %1185 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg14 : tensor<4096xf32>) outs(%1184 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %1186 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1185, %1182 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%1183 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %1187 = tensor.empty() : tensor<4096x4096xf32>
    %1188 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg115 : tensor<4096x4096xf32>) outs(%1187 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1189 = "tosa.reshape"(%1186) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %1190 = tensor.empty() : tensor<13x4096xf32>
    %1191 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1190 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %1192 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1189, %1188 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%1191 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %1193 = "tosa.reshape"(%1192) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %1194 = tensor.empty() : tensor<4096x4096xf32>
    %1195 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg116 : tensor<4096x4096xf32>) outs(%1194 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1196 = "tosa.reshape"(%1186) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %1197 = tensor.empty() : tensor<13x4096xf32>
    %1198 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1197 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %1199 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1196, %1195 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%1198 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %1200 = "tosa.reshape"(%1199) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %1201 = tensor.empty() : tensor<4096x4096xf32>
    %1202 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg117 : tensor<4096x4096xf32>) outs(%1201 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1203 = "tosa.reshape"(%1186) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %1204 = tensor.empty() : tensor<13x4096xf32>
    %1205 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1204 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %1206 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1203, %1202 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%1205 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %1207 = "tosa.reshape"(%1206) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %1208 = "tosa.reshape"(%1193) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %1209 = tensor.empty() : tensor<1x32x13x128xf32>
    %1210 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1208 : tensor<1x13x32x128xf32>) outs(%1209 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %1211 = "tosa.reshape"(%1200) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %1212 = tensor.empty() : tensor<1x32x13x128xf32>
    %1213 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1211 : tensor<1x13x32x128xf32>) outs(%1212 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %1214 = "tosa.reshape"(%1207) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %1215 = tensor.empty() : tensor<1x32x13x128xf32>
    %1216 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1214 : tensor<1x13x32x128xf32>) outs(%1215 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_249 = tensor.extract_slice %arg305[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_250 = tensor.extract_slice %extracted_slice_249[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_251 = tensor.extract_slice %extracted_slice_250[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %extracted_slice_252 = tensor.extract_slice %arg306[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_253 = tensor.extract_slice %extracted_slice_252[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_254 = tensor.extract_slice %extracted_slice_253[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %1217 = tensor.empty() : tensor<1x13x128xf32>
    %1218 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_251 : tensor<1x1x13x128xf32>) outs(%1217 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %1219 = tensor.empty() : tensor<13x128xf32>
    %1220 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%1218 : tensor<1x13x128xf32>) outs(%1219 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %1221 = tensor.empty() : tensor<1x13x128xf32>
    %1222 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_254 : tensor<1x1x13x128xf32>) outs(%1221 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %1223 = tensor.empty() : tensor<13x128xf32>
    %1224 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%1222 : tensor<1x13x128xf32>) outs(%1223 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %1225 = tensor.empty() : tensor<1x13x128xf32>
    %1226 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%1225 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %1220[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %1227 = "tosa.reshape"(%1226) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %1228 = tensor.empty() : tensor<1x13x128xf32>
    %1229 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%1228 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %1224[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %1230 = "tosa.reshape"(%1229) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %1231 = tensor.empty() : tensor<1x32x13x128xf32>
    %1232 = tensor.empty() : tensor<1x32x13x128xf32>
    %1233 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1227 : tensor<1x1x13x128xf32>) outs(%1232 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %1234 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1210, %1233 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%1231 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_255 = tensor.extract_slice %1210[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_256 = tensor.extract_slice %1210[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %1235 = tensor.empty() : tensor<1x32x13x64xf32>
    %1236 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_256 : tensor<1x32x13x64xf32>) outs(%1235 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %1237 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_257 = tensor.insert_slice %1236 into %1237[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_258 = tensor.insert_slice %extracted_slice_255 into %inserted_slice_257[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %1238 = tensor.empty() : tensor<1x32x13x128xf32>
    %1239 = tensor.empty() : tensor<1x32x13x128xf32>
    %1240 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1230 : tensor<1x1x13x128xf32>) outs(%1239 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %1241 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_258, %1240 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%1238 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %1242 = "tosa.add"(%1234, %1241) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %1243 = tensor.empty() : tensor<1x32x13x128xf32>
    %1244 = tensor.empty() : tensor<1x32x13x128xf32>
    %1245 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1227 : tensor<1x1x13x128xf32>) outs(%1244 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %1246 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1213, %1245 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%1243 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_259 = tensor.extract_slice %1213[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_260 = tensor.extract_slice %1213[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %1247 = tensor.empty() : tensor<1x32x13x64xf32>
    %1248 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_260 : tensor<1x32x13x64xf32>) outs(%1247 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %1249 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_261 = tensor.insert_slice %1248 into %1249[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_262 = tensor.insert_slice %extracted_slice_259 into %inserted_slice_261[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %1250 = tensor.empty() : tensor<1x32x13x128xf32>
    %1251 = tensor.empty() : tensor<1x32x13x128xf32>
    %1252 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1230 : tensor<1x1x13x128xf32>) outs(%1251 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %1253 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_262, %1252 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%1250 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %1254 = "tosa.add"(%1246, %1253) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %1255 = tensor.empty() : tensor<1x32x128x13xf32>
    %1256 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1254 : tensor<1x32x13x128xf32>) outs(%1255 : tensor<1x32x128x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x13xf32>
    %1257 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_263 = tensor.extract_slice %1242[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_264 = tensor.insert_slice %extracted_slice_263 into %1257[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %1258 = "tosa.reshape"(%inserted_slice_264) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %1259 = tensor.empty() : tensor<1x32x128x13xf32>
    %extracted_slice_265 = tensor.extract_slice %1256[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> to tensor<1x32x128x13xf32>
    %inserted_slice_266 = tensor.insert_slice %extracted_slice_265 into %1259[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> into tensor<1x32x128x13xf32>
    %1260 = "tosa.reshape"(%inserted_slice_266) {new_shape = array<i64: 32, 128, 13>} : (tensor<1x32x128x13xf32>) -> tensor<32x128x13xf32>
    %1261 = tensor.empty() : tensor<32x13x13xf32>
    %1262 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%1261 : tensor<32x13x13xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x13xf32>
    %1263 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1258, %1260 : tensor<32x13x128xf32>, tensor<32x128x13xf32>) outs(%1262 : tensor<32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x13xf32>
    %1264 = "tosa.reshape"(%1263) {new_shape = array<i64: 1, 32, 13, 13>} : (tensor<32x13x13xf32>) -> tensor<1x32x13x13xf32>
    %cst_267 = arith.constant 11.3137083 : f32
    %1265 = tensor.empty() : tensor<1x32x13x13xf32>
    %1266 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1264 : tensor<1x32x13x13xf32>) outs(%1265 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.divf %in, %cst_267 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %1267 = "tosa.add"(%1266, %24) : (tensor<1x32x13x13xf32>, tensor<1x1x13x13xf32>) -> tensor<1x32x13x13xf32>
    %1268 = tensor.empty() : tensor<1x32x13x1xf32>
    %1269 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1268 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %1270 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1267 : tensor<1x32x13x13xf32>) outs(%1268 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.maxf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %1271 = tensor.empty() : tensor<1x32x13x13xf32>
    %1272 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1267, %1270 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%1271 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.subf %in, %in_999 : f32
      %5295 = math.exp %5294 : f32
      linalg.yield %5295 : f32
    } -> tensor<1x32x13x13xf32>
    %1273 = tensor.empty() : tensor<1x32x13x1xf32>
    %1274 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1273 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %1275 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1272 : tensor<1x32x13x13xf32>) outs(%1274 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %1276 = tensor.empty() : tensor<1x32x13x13xf32>
    %1277 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1272, %1275 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%1276 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.divf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %1278 = tensor.empty() : tensor<1x32x13x13xf32>
    %extracted_slice_268 = tensor.extract_slice %1277[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> to tensor<1x32x13x13xf32>
    %inserted_slice_269 = tensor.insert_slice %extracted_slice_268 into %1278[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> into tensor<1x32x13x13xf32>
    %1279 = "tosa.reshape"(%inserted_slice_269) {new_shape = array<i64: 32, 13, 13>} : (tensor<1x32x13x13xf32>) -> tensor<32x13x13xf32>
    %1280 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_270 = tensor.extract_slice %1216[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_271 = tensor.insert_slice %extracted_slice_270 into %1280[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %1281 = "tosa.reshape"(%inserted_slice_271) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %1282 = tensor.empty() : tensor<32x13x128xf32>
    %1283 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%1282 : tensor<32x13x128xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x128xf32>
    %1284 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1279, %1281 : tensor<32x13x13xf32>, tensor<32x13x128xf32>) outs(%1283 : tensor<32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x128xf32>
    %1285 = "tosa.reshape"(%1284) {new_shape = array<i64: 1, 32, 13, 128>} : (tensor<32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %1286 = tensor.empty() : tensor<1x13x32x128xf32>
    %1287 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1285 : tensor<1x32x13x128xf32>) outs(%1286 : tensor<1x13x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x32x128xf32>
    %extracted_slice_272 = tensor.extract_slice %1287[0, 0, 0, 0] [1, 13, 32, 128] [1, 1, 1, 1] : tensor<1x13x32x128xf32> to tensor<1x13x32x128xf32>
    %1288 = "tosa.reshape"(%extracted_slice_272) {new_shape = array<i64: 1, 13, 4096>} : (tensor<1x13x32x128xf32>) -> tensor<1x13x4096xf32>
    %1289 = tensor.empty() : tensor<4096x4096xf32>
    %1290 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg118 : tensor<4096x4096xf32>) outs(%1289 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1291 = "tosa.reshape"(%1288) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %1292 = tensor.empty() : tensor<13x4096xf32>
    %1293 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1292 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %1294 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1291, %1290 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%1293 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %1295 = "tosa.reshape"(%1294) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %1296 = "tosa.add"(%1172, %1295) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %1297 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_273 = arith.constant 2 : i32
    %1298 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1296 : tensor<1x13x4096xf32>) outs(%1297 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_273 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_274 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %1299 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1298 : tensor<1x13x4096xf32>) outs(%cst_274 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_275 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1300 = "tosa.add"(%1299, %cst_275) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %1301 = tensor.empty() : tensor<1x13x1xf32>
    %1302 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1300 : tensor<1x13x1xf32>) outs(%1301 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %1303 = tensor.empty() : tensor<1x13x4096xf32>
    %1304 = tensor.empty() : tensor<1x13x4096xf32>
    %1305 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1302 : tensor<1x13x1xf32>) outs(%1304 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %1306 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1296, %1305 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%1303 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %1307 = tensor.empty() : tensor<1x13x4096xf32>
    %1308 = tensor.empty() : tensor<1x13x4096xf32>
    %1309 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg15 : tensor<4096xf32>) outs(%1308 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %1310 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1309, %1306 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%1307 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %1311 = tensor.empty() : tensor<4096x11008xf32>
    %1312 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg119 : tensor<11008x4096xf32>) outs(%1311 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1313 = "tosa.reshape"(%1310) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %1314 = tensor.empty() : tensor<13x11008xf32>
    %1315 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1314 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %1316 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1313, %1312 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%1315 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %1317 = "tosa.reshape"(%1316) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %1318 = tensor.empty() : tensor<1x13x11008xf32>
    %1319 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1317 : tensor<1x13x11008xf32>) outs(%1318 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      %5295 = math.exp %5294 : f32
      %cst_999 = arith.constant 1.000000e+00 : f32
      %5296 = arith.addf %cst_999, %5295 : f32
      %5297 = arith.divf %in, %5296 : f32
      linalg.yield %5297 : f32
    } -> tensor<1x13x11008xf32>
    %1320 = tensor.empty() : tensor<4096x11008xf32>
    %1321 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg120 : tensor<11008x4096xf32>) outs(%1320 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1322 = "tosa.reshape"(%1310) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %1323 = tensor.empty() : tensor<13x11008xf32>
    %1324 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1323 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %1325 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1322, %1321 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%1324 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %1326 = "tosa.reshape"(%1325) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %1327 = tensor.empty() : tensor<1x13x11008xf32>
    %1328 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1319, %1326 : tensor<1x13x11008xf32>, tensor<1x13x11008xf32>) outs(%1327 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x11008xf32>
    %1329 = tensor.empty() : tensor<11008x4096xf32>
    %1330 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg121 : tensor<4096x11008xf32>) outs(%1329 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %1331 = "tosa.reshape"(%1328) {new_shape = array<i64: 13, 11008>} : (tensor<1x13x11008xf32>) -> tensor<13x11008xf32>
    %1332 = tensor.empty() : tensor<13x4096xf32>
    %1333 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1332 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %1334 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1331, %1330 : tensor<13x11008xf32>, tensor<11008x4096xf32>) outs(%1333 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %1335 = "tosa.reshape"(%1334) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %1336 = "tosa.add"(%1296, %1335) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %1337 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_276 = arith.constant 2 : i32
    %1338 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1336 : tensor<1x13x4096xf32>) outs(%1337 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_276 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_277 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %1339 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1338 : tensor<1x13x4096xf32>) outs(%cst_277 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_278 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1340 = "tosa.add"(%1339, %cst_278) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %1341 = tensor.empty() : tensor<1x13x1xf32>
    %1342 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1340 : tensor<1x13x1xf32>) outs(%1341 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %1343 = tensor.empty() : tensor<1x13x4096xf32>
    %1344 = tensor.empty() : tensor<1x13x4096xf32>
    %1345 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1342 : tensor<1x13x1xf32>) outs(%1344 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %1346 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1336, %1345 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%1343 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %1347 = tensor.empty() : tensor<1x13x4096xf32>
    %1348 = tensor.empty() : tensor<1x13x4096xf32>
    %1349 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg16 : tensor<4096xf32>) outs(%1348 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %1350 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1349, %1346 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%1347 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %1351 = tensor.empty() : tensor<4096x4096xf32>
    %1352 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg122 : tensor<4096x4096xf32>) outs(%1351 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1353 = "tosa.reshape"(%1350) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %1354 = tensor.empty() : tensor<13x4096xf32>
    %1355 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1354 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %1356 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1353, %1352 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%1355 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %1357 = "tosa.reshape"(%1356) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %1358 = tensor.empty() : tensor<4096x4096xf32>
    %1359 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg123 : tensor<4096x4096xf32>) outs(%1358 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1360 = "tosa.reshape"(%1350) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %1361 = tensor.empty() : tensor<13x4096xf32>
    %1362 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1361 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %1363 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1360, %1359 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%1362 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %1364 = "tosa.reshape"(%1363) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %1365 = tensor.empty() : tensor<4096x4096xf32>
    %1366 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg124 : tensor<4096x4096xf32>) outs(%1365 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1367 = "tosa.reshape"(%1350) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %1368 = tensor.empty() : tensor<13x4096xf32>
    %1369 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1368 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %1370 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1367, %1366 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%1369 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %1371 = "tosa.reshape"(%1370) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %1372 = "tosa.reshape"(%1357) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %1373 = tensor.empty() : tensor<1x32x13x128xf32>
    %1374 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1372 : tensor<1x13x32x128xf32>) outs(%1373 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %1375 = "tosa.reshape"(%1364) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %1376 = tensor.empty() : tensor<1x32x13x128xf32>
    %1377 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1375 : tensor<1x13x32x128xf32>) outs(%1376 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %1378 = "tosa.reshape"(%1371) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %1379 = tensor.empty() : tensor<1x32x13x128xf32>
    %1380 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1378 : tensor<1x13x32x128xf32>) outs(%1379 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_279 = tensor.extract_slice %arg307[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_280 = tensor.extract_slice %extracted_slice_279[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_281 = tensor.extract_slice %extracted_slice_280[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %extracted_slice_282 = tensor.extract_slice %arg308[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_283 = tensor.extract_slice %extracted_slice_282[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_284 = tensor.extract_slice %extracted_slice_283[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %1381 = tensor.empty() : tensor<1x13x128xf32>
    %1382 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_281 : tensor<1x1x13x128xf32>) outs(%1381 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %1383 = tensor.empty() : tensor<13x128xf32>
    %1384 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%1382 : tensor<1x13x128xf32>) outs(%1383 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %1385 = tensor.empty() : tensor<1x13x128xf32>
    %1386 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_284 : tensor<1x1x13x128xf32>) outs(%1385 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %1387 = tensor.empty() : tensor<13x128xf32>
    %1388 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%1386 : tensor<1x13x128xf32>) outs(%1387 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %1389 = tensor.empty() : tensor<1x13x128xf32>
    %1390 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%1389 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %1384[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %1391 = "tosa.reshape"(%1390) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %1392 = tensor.empty() : tensor<1x13x128xf32>
    %1393 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%1392 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %1388[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %1394 = "tosa.reshape"(%1393) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %1395 = tensor.empty() : tensor<1x32x13x128xf32>
    %1396 = tensor.empty() : tensor<1x32x13x128xf32>
    %1397 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1391 : tensor<1x1x13x128xf32>) outs(%1396 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %1398 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1374, %1397 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%1395 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_285 = tensor.extract_slice %1374[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_286 = tensor.extract_slice %1374[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %1399 = tensor.empty() : tensor<1x32x13x64xf32>
    %1400 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_286 : tensor<1x32x13x64xf32>) outs(%1399 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %1401 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_287 = tensor.insert_slice %1400 into %1401[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_288 = tensor.insert_slice %extracted_slice_285 into %inserted_slice_287[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %1402 = tensor.empty() : tensor<1x32x13x128xf32>
    %1403 = tensor.empty() : tensor<1x32x13x128xf32>
    %1404 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1394 : tensor<1x1x13x128xf32>) outs(%1403 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %1405 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_288, %1404 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%1402 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %1406 = "tosa.add"(%1398, %1405) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %1407 = tensor.empty() : tensor<1x32x13x128xf32>
    %1408 = tensor.empty() : tensor<1x32x13x128xf32>
    %1409 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1391 : tensor<1x1x13x128xf32>) outs(%1408 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %1410 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1377, %1409 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%1407 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_289 = tensor.extract_slice %1377[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_290 = tensor.extract_slice %1377[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %1411 = tensor.empty() : tensor<1x32x13x64xf32>
    %1412 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_290 : tensor<1x32x13x64xf32>) outs(%1411 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %1413 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_291 = tensor.insert_slice %1412 into %1413[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_292 = tensor.insert_slice %extracted_slice_289 into %inserted_slice_291[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %1414 = tensor.empty() : tensor<1x32x13x128xf32>
    %1415 = tensor.empty() : tensor<1x32x13x128xf32>
    %1416 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1394 : tensor<1x1x13x128xf32>) outs(%1415 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %1417 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_292, %1416 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%1414 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %1418 = "tosa.add"(%1410, %1417) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %1419 = tensor.empty() : tensor<1x32x128x13xf32>
    %1420 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1418 : tensor<1x32x13x128xf32>) outs(%1419 : tensor<1x32x128x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x13xf32>
    %1421 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_293 = tensor.extract_slice %1406[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_294 = tensor.insert_slice %extracted_slice_293 into %1421[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %1422 = "tosa.reshape"(%inserted_slice_294) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %1423 = tensor.empty() : tensor<1x32x128x13xf32>
    %extracted_slice_295 = tensor.extract_slice %1420[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> to tensor<1x32x128x13xf32>
    %inserted_slice_296 = tensor.insert_slice %extracted_slice_295 into %1423[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> into tensor<1x32x128x13xf32>
    %1424 = "tosa.reshape"(%inserted_slice_296) {new_shape = array<i64: 32, 128, 13>} : (tensor<1x32x128x13xf32>) -> tensor<32x128x13xf32>
    %1425 = tensor.empty() : tensor<32x13x13xf32>
    %1426 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%1425 : tensor<32x13x13xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x13xf32>
    %1427 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1422, %1424 : tensor<32x13x128xf32>, tensor<32x128x13xf32>) outs(%1426 : tensor<32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x13xf32>
    %1428 = "tosa.reshape"(%1427) {new_shape = array<i64: 1, 32, 13, 13>} : (tensor<32x13x13xf32>) -> tensor<1x32x13x13xf32>
    %cst_297 = arith.constant 11.3137083 : f32
    %1429 = tensor.empty() : tensor<1x32x13x13xf32>
    %1430 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1428 : tensor<1x32x13x13xf32>) outs(%1429 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.divf %in, %cst_297 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %1431 = "tosa.add"(%1430, %24) : (tensor<1x32x13x13xf32>, tensor<1x1x13x13xf32>) -> tensor<1x32x13x13xf32>
    %1432 = tensor.empty() : tensor<1x32x13x1xf32>
    %1433 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1432 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %1434 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1431 : tensor<1x32x13x13xf32>) outs(%1432 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.maxf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %1435 = tensor.empty() : tensor<1x32x13x13xf32>
    %1436 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1431, %1434 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%1435 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.subf %in, %in_999 : f32
      %5295 = math.exp %5294 : f32
      linalg.yield %5295 : f32
    } -> tensor<1x32x13x13xf32>
    %1437 = tensor.empty() : tensor<1x32x13x1xf32>
    %1438 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1437 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %1439 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1436 : tensor<1x32x13x13xf32>) outs(%1438 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %1440 = tensor.empty() : tensor<1x32x13x13xf32>
    %1441 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1436, %1439 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%1440 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.divf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %1442 = tensor.empty() : tensor<1x32x13x13xf32>
    %extracted_slice_298 = tensor.extract_slice %1441[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> to tensor<1x32x13x13xf32>
    %inserted_slice_299 = tensor.insert_slice %extracted_slice_298 into %1442[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> into tensor<1x32x13x13xf32>
    %1443 = "tosa.reshape"(%inserted_slice_299) {new_shape = array<i64: 32, 13, 13>} : (tensor<1x32x13x13xf32>) -> tensor<32x13x13xf32>
    %1444 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_300 = tensor.extract_slice %1380[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_301 = tensor.insert_slice %extracted_slice_300 into %1444[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %1445 = "tosa.reshape"(%inserted_slice_301) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %1446 = tensor.empty() : tensor<32x13x128xf32>
    %1447 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%1446 : tensor<32x13x128xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x128xf32>
    %1448 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1443, %1445 : tensor<32x13x13xf32>, tensor<32x13x128xf32>) outs(%1447 : tensor<32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x128xf32>
    %1449 = "tosa.reshape"(%1448) {new_shape = array<i64: 1, 32, 13, 128>} : (tensor<32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %1450 = tensor.empty() : tensor<1x13x32x128xf32>
    %1451 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1449 : tensor<1x32x13x128xf32>) outs(%1450 : tensor<1x13x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x32x128xf32>
    %extracted_slice_302 = tensor.extract_slice %1451[0, 0, 0, 0] [1, 13, 32, 128] [1, 1, 1, 1] : tensor<1x13x32x128xf32> to tensor<1x13x32x128xf32>
    %1452 = "tosa.reshape"(%extracted_slice_302) {new_shape = array<i64: 1, 13, 4096>} : (tensor<1x13x32x128xf32>) -> tensor<1x13x4096xf32>
    %1453 = tensor.empty() : tensor<4096x4096xf32>
    %1454 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg125 : tensor<4096x4096xf32>) outs(%1453 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1455 = "tosa.reshape"(%1452) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %1456 = tensor.empty() : tensor<13x4096xf32>
    %1457 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1456 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %1458 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1455, %1454 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%1457 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %1459 = "tosa.reshape"(%1458) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %1460 = "tosa.add"(%1336, %1459) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %1461 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_303 = arith.constant 2 : i32
    %1462 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1460 : tensor<1x13x4096xf32>) outs(%1461 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_303 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_304 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %1463 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1462 : tensor<1x13x4096xf32>) outs(%cst_304 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_305 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1464 = "tosa.add"(%1463, %cst_305) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %1465 = tensor.empty() : tensor<1x13x1xf32>
    %1466 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1464 : tensor<1x13x1xf32>) outs(%1465 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %1467 = tensor.empty() : tensor<1x13x4096xf32>
    %1468 = tensor.empty() : tensor<1x13x4096xf32>
    %1469 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1466 : tensor<1x13x1xf32>) outs(%1468 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %1470 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1460, %1469 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%1467 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %1471 = tensor.empty() : tensor<1x13x4096xf32>
    %1472 = tensor.empty() : tensor<1x13x4096xf32>
    %1473 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg17 : tensor<4096xf32>) outs(%1472 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %1474 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1473, %1470 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%1471 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %1475 = tensor.empty() : tensor<4096x11008xf32>
    %1476 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg126 : tensor<11008x4096xf32>) outs(%1475 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1477 = "tosa.reshape"(%1474) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %1478 = tensor.empty() : tensor<13x11008xf32>
    %1479 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1478 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %1480 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1477, %1476 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%1479 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %1481 = "tosa.reshape"(%1480) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %1482 = tensor.empty() : tensor<1x13x11008xf32>
    %1483 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1481 : tensor<1x13x11008xf32>) outs(%1482 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      %5295 = math.exp %5294 : f32
      %cst_999 = arith.constant 1.000000e+00 : f32
      %5296 = arith.addf %cst_999, %5295 : f32
      %5297 = arith.divf %in, %5296 : f32
      linalg.yield %5297 : f32
    } -> tensor<1x13x11008xf32>
    %1484 = tensor.empty() : tensor<4096x11008xf32>
    %1485 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg127 : tensor<11008x4096xf32>) outs(%1484 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1486 = "tosa.reshape"(%1474) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %1487 = tensor.empty() : tensor<13x11008xf32>
    %1488 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1487 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %1489 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1486, %1485 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%1488 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %1490 = "tosa.reshape"(%1489) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %1491 = tensor.empty() : tensor<1x13x11008xf32>
    %1492 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1483, %1490 : tensor<1x13x11008xf32>, tensor<1x13x11008xf32>) outs(%1491 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x11008xf32>
    %1493 = tensor.empty() : tensor<11008x4096xf32>
    %1494 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg128 : tensor<4096x11008xf32>) outs(%1493 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %1495 = "tosa.reshape"(%1492) {new_shape = array<i64: 13, 11008>} : (tensor<1x13x11008xf32>) -> tensor<13x11008xf32>
    %1496 = tensor.empty() : tensor<13x4096xf32>
    %1497 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1496 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %1498 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1495, %1494 : tensor<13x11008xf32>, tensor<11008x4096xf32>) outs(%1497 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %1499 = "tosa.reshape"(%1498) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %1500 = "tosa.add"(%1460, %1499) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %1501 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_306 = arith.constant 2 : i32
    %1502 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1500 : tensor<1x13x4096xf32>) outs(%1501 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_306 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_307 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %1503 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1502 : tensor<1x13x4096xf32>) outs(%cst_307 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_308 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1504 = "tosa.add"(%1503, %cst_308) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %1505 = tensor.empty() : tensor<1x13x1xf32>
    %1506 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1504 : tensor<1x13x1xf32>) outs(%1505 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %1507 = tensor.empty() : tensor<1x13x4096xf32>
    %1508 = tensor.empty() : tensor<1x13x4096xf32>
    %1509 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1506 : tensor<1x13x1xf32>) outs(%1508 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %1510 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1500, %1509 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%1507 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %1511 = tensor.empty() : tensor<1x13x4096xf32>
    %1512 = tensor.empty() : tensor<1x13x4096xf32>
    %1513 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg18 : tensor<4096xf32>) outs(%1512 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %1514 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1513, %1510 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%1511 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %1515 = tensor.empty() : tensor<4096x4096xf32>
    %1516 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg129 : tensor<4096x4096xf32>) outs(%1515 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1517 = "tosa.reshape"(%1514) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %1518 = tensor.empty() : tensor<13x4096xf32>
    %1519 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1518 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %1520 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1517, %1516 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%1519 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %1521 = "tosa.reshape"(%1520) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %1522 = tensor.empty() : tensor<4096x4096xf32>
    %1523 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg130 : tensor<4096x4096xf32>) outs(%1522 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1524 = "tosa.reshape"(%1514) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %1525 = tensor.empty() : tensor<13x4096xf32>
    %1526 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1525 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %1527 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1524, %1523 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%1526 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %1528 = "tosa.reshape"(%1527) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %1529 = tensor.empty() : tensor<4096x4096xf32>
    %1530 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg131 : tensor<4096x4096xf32>) outs(%1529 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1531 = "tosa.reshape"(%1514) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %1532 = tensor.empty() : tensor<13x4096xf32>
    %1533 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1532 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %1534 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1531, %1530 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%1533 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %1535 = "tosa.reshape"(%1534) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %1536 = "tosa.reshape"(%1521) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %1537 = tensor.empty() : tensor<1x32x13x128xf32>
    %1538 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1536 : tensor<1x13x32x128xf32>) outs(%1537 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %1539 = "tosa.reshape"(%1528) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %1540 = tensor.empty() : tensor<1x32x13x128xf32>
    %1541 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1539 : tensor<1x13x32x128xf32>) outs(%1540 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %1542 = "tosa.reshape"(%1535) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %1543 = tensor.empty() : tensor<1x32x13x128xf32>
    %1544 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1542 : tensor<1x13x32x128xf32>) outs(%1543 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_309 = tensor.extract_slice %arg309[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_310 = tensor.extract_slice %extracted_slice_309[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_311 = tensor.extract_slice %extracted_slice_310[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %extracted_slice_312 = tensor.extract_slice %arg310[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_313 = tensor.extract_slice %extracted_slice_312[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_314 = tensor.extract_slice %extracted_slice_313[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %1545 = tensor.empty() : tensor<1x13x128xf32>
    %1546 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_311 : tensor<1x1x13x128xf32>) outs(%1545 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %1547 = tensor.empty() : tensor<13x128xf32>
    %1548 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%1546 : tensor<1x13x128xf32>) outs(%1547 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %1549 = tensor.empty() : tensor<1x13x128xf32>
    %1550 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_314 : tensor<1x1x13x128xf32>) outs(%1549 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %1551 = tensor.empty() : tensor<13x128xf32>
    %1552 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%1550 : tensor<1x13x128xf32>) outs(%1551 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %1553 = tensor.empty() : tensor<1x13x128xf32>
    %1554 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%1553 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %1548[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %1555 = "tosa.reshape"(%1554) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %1556 = tensor.empty() : tensor<1x13x128xf32>
    %1557 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%1556 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %1552[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %1558 = "tosa.reshape"(%1557) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %1559 = tensor.empty() : tensor<1x32x13x128xf32>
    %1560 = tensor.empty() : tensor<1x32x13x128xf32>
    %1561 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1555 : tensor<1x1x13x128xf32>) outs(%1560 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %1562 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1538, %1561 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%1559 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_315 = tensor.extract_slice %1538[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_316 = tensor.extract_slice %1538[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %1563 = tensor.empty() : tensor<1x32x13x64xf32>
    %1564 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_316 : tensor<1x32x13x64xf32>) outs(%1563 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %1565 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_317 = tensor.insert_slice %1564 into %1565[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_318 = tensor.insert_slice %extracted_slice_315 into %inserted_slice_317[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %1566 = tensor.empty() : tensor<1x32x13x128xf32>
    %1567 = tensor.empty() : tensor<1x32x13x128xf32>
    %1568 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1558 : tensor<1x1x13x128xf32>) outs(%1567 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %1569 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_318, %1568 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%1566 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %1570 = "tosa.add"(%1562, %1569) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %1571 = tensor.empty() : tensor<1x32x13x128xf32>
    %1572 = tensor.empty() : tensor<1x32x13x128xf32>
    %1573 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1555 : tensor<1x1x13x128xf32>) outs(%1572 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %1574 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1541, %1573 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%1571 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_319 = tensor.extract_slice %1541[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_320 = tensor.extract_slice %1541[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %1575 = tensor.empty() : tensor<1x32x13x64xf32>
    %1576 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_320 : tensor<1x32x13x64xf32>) outs(%1575 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %1577 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_321 = tensor.insert_slice %1576 into %1577[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_322 = tensor.insert_slice %extracted_slice_319 into %inserted_slice_321[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %1578 = tensor.empty() : tensor<1x32x13x128xf32>
    %1579 = tensor.empty() : tensor<1x32x13x128xf32>
    %1580 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1558 : tensor<1x1x13x128xf32>) outs(%1579 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %1581 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_322, %1580 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%1578 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %1582 = "tosa.add"(%1574, %1581) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %1583 = tensor.empty() : tensor<1x32x128x13xf32>
    %1584 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1582 : tensor<1x32x13x128xf32>) outs(%1583 : tensor<1x32x128x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x13xf32>
    %1585 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_323 = tensor.extract_slice %1570[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_324 = tensor.insert_slice %extracted_slice_323 into %1585[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %1586 = "tosa.reshape"(%inserted_slice_324) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %1587 = tensor.empty() : tensor<1x32x128x13xf32>
    %extracted_slice_325 = tensor.extract_slice %1584[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> to tensor<1x32x128x13xf32>
    %inserted_slice_326 = tensor.insert_slice %extracted_slice_325 into %1587[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> into tensor<1x32x128x13xf32>
    %1588 = "tosa.reshape"(%inserted_slice_326) {new_shape = array<i64: 32, 128, 13>} : (tensor<1x32x128x13xf32>) -> tensor<32x128x13xf32>
    %1589 = tensor.empty() : tensor<32x13x13xf32>
    %1590 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%1589 : tensor<32x13x13xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x13xf32>
    %1591 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1586, %1588 : tensor<32x13x128xf32>, tensor<32x128x13xf32>) outs(%1590 : tensor<32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x13xf32>
    %1592 = "tosa.reshape"(%1591) {new_shape = array<i64: 1, 32, 13, 13>} : (tensor<32x13x13xf32>) -> tensor<1x32x13x13xf32>
    %cst_327 = arith.constant 11.3137083 : f32
    %1593 = tensor.empty() : tensor<1x32x13x13xf32>
    %1594 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1592 : tensor<1x32x13x13xf32>) outs(%1593 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.divf %in, %cst_327 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %1595 = "tosa.add"(%1594, %24) : (tensor<1x32x13x13xf32>, tensor<1x1x13x13xf32>) -> tensor<1x32x13x13xf32>
    %1596 = tensor.empty() : tensor<1x32x13x1xf32>
    %1597 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1596 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %1598 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1595 : tensor<1x32x13x13xf32>) outs(%1596 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.maxf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %1599 = tensor.empty() : tensor<1x32x13x13xf32>
    %1600 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1595, %1598 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%1599 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.subf %in, %in_999 : f32
      %5295 = math.exp %5294 : f32
      linalg.yield %5295 : f32
    } -> tensor<1x32x13x13xf32>
    %1601 = tensor.empty() : tensor<1x32x13x1xf32>
    %1602 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1601 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %1603 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1600 : tensor<1x32x13x13xf32>) outs(%1602 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %1604 = tensor.empty() : tensor<1x32x13x13xf32>
    %1605 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1600, %1603 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%1604 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.divf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %1606 = tensor.empty() : tensor<1x32x13x13xf32>
    %extracted_slice_328 = tensor.extract_slice %1605[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> to tensor<1x32x13x13xf32>
    %inserted_slice_329 = tensor.insert_slice %extracted_slice_328 into %1606[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> into tensor<1x32x13x13xf32>
    %1607 = "tosa.reshape"(%inserted_slice_329) {new_shape = array<i64: 32, 13, 13>} : (tensor<1x32x13x13xf32>) -> tensor<32x13x13xf32>
    %1608 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_330 = tensor.extract_slice %1544[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_331 = tensor.insert_slice %extracted_slice_330 into %1608[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %1609 = "tosa.reshape"(%inserted_slice_331) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %1610 = tensor.empty() : tensor<32x13x128xf32>
    %1611 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%1610 : tensor<32x13x128xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x128xf32>
    %1612 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1607, %1609 : tensor<32x13x13xf32>, tensor<32x13x128xf32>) outs(%1611 : tensor<32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x128xf32>
    %1613 = "tosa.reshape"(%1612) {new_shape = array<i64: 1, 32, 13, 128>} : (tensor<32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %1614 = tensor.empty() : tensor<1x13x32x128xf32>
    %1615 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1613 : tensor<1x32x13x128xf32>) outs(%1614 : tensor<1x13x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x32x128xf32>
    %extracted_slice_332 = tensor.extract_slice %1615[0, 0, 0, 0] [1, 13, 32, 128] [1, 1, 1, 1] : tensor<1x13x32x128xf32> to tensor<1x13x32x128xf32>
    %1616 = "tosa.reshape"(%extracted_slice_332) {new_shape = array<i64: 1, 13, 4096>} : (tensor<1x13x32x128xf32>) -> tensor<1x13x4096xf32>
    %1617 = tensor.empty() : tensor<4096x4096xf32>
    %1618 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg132 : tensor<4096x4096xf32>) outs(%1617 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1619 = "tosa.reshape"(%1616) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %1620 = tensor.empty() : tensor<13x4096xf32>
    %1621 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1620 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %1622 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1619, %1618 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%1621 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %1623 = "tosa.reshape"(%1622) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %1624 = "tosa.add"(%1500, %1623) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %1625 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_333 = arith.constant 2 : i32
    %1626 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1624 : tensor<1x13x4096xf32>) outs(%1625 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_333 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_334 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %1627 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1626 : tensor<1x13x4096xf32>) outs(%cst_334 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_335 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1628 = "tosa.add"(%1627, %cst_335) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %1629 = tensor.empty() : tensor<1x13x1xf32>
    %1630 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1628 : tensor<1x13x1xf32>) outs(%1629 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %1631 = tensor.empty() : tensor<1x13x4096xf32>
    %1632 = tensor.empty() : tensor<1x13x4096xf32>
    %1633 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1630 : tensor<1x13x1xf32>) outs(%1632 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %1634 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1624, %1633 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%1631 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %1635 = tensor.empty() : tensor<1x13x4096xf32>
    %1636 = tensor.empty() : tensor<1x13x4096xf32>
    %1637 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg19 : tensor<4096xf32>) outs(%1636 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %1638 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1637, %1634 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%1635 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %1639 = tensor.empty() : tensor<4096x11008xf32>
    %1640 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg133 : tensor<11008x4096xf32>) outs(%1639 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1641 = "tosa.reshape"(%1638) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %1642 = tensor.empty() : tensor<13x11008xf32>
    %1643 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1642 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %1644 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1641, %1640 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%1643 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %1645 = "tosa.reshape"(%1644) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %1646 = tensor.empty() : tensor<1x13x11008xf32>
    %1647 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1645 : tensor<1x13x11008xf32>) outs(%1646 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      %5295 = math.exp %5294 : f32
      %cst_999 = arith.constant 1.000000e+00 : f32
      %5296 = arith.addf %cst_999, %5295 : f32
      %5297 = arith.divf %in, %5296 : f32
      linalg.yield %5297 : f32
    } -> tensor<1x13x11008xf32>
    %1648 = tensor.empty() : tensor<4096x11008xf32>
    %1649 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg134 : tensor<11008x4096xf32>) outs(%1648 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1650 = "tosa.reshape"(%1638) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %1651 = tensor.empty() : tensor<13x11008xf32>
    %1652 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1651 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %1653 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1650, %1649 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%1652 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %1654 = "tosa.reshape"(%1653) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %1655 = tensor.empty() : tensor<1x13x11008xf32>
    %1656 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1647, %1654 : tensor<1x13x11008xf32>, tensor<1x13x11008xf32>) outs(%1655 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x11008xf32>
    %1657 = tensor.empty() : tensor<11008x4096xf32>
    %1658 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg135 : tensor<4096x11008xf32>) outs(%1657 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %1659 = "tosa.reshape"(%1656) {new_shape = array<i64: 13, 11008>} : (tensor<1x13x11008xf32>) -> tensor<13x11008xf32>
    %1660 = tensor.empty() : tensor<13x4096xf32>
    %1661 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1660 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %1662 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1659, %1658 : tensor<13x11008xf32>, tensor<11008x4096xf32>) outs(%1661 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %1663 = "tosa.reshape"(%1662) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %1664 = "tosa.add"(%1624, %1663) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %1665 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_336 = arith.constant 2 : i32
    %1666 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1664 : tensor<1x13x4096xf32>) outs(%1665 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_336 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_337 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %1667 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1666 : tensor<1x13x4096xf32>) outs(%cst_337 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_338 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1668 = "tosa.add"(%1667, %cst_338) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %1669 = tensor.empty() : tensor<1x13x1xf32>
    %1670 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1668 : tensor<1x13x1xf32>) outs(%1669 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %1671 = tensor.empty() : tensor<1x13x4096xf32>
    %1672 = tensor.empty() : tensor<1x13x4096xf32>
    %1673 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1670 : tensor<1x13x1xf32>) outs(%1672 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %1674 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1664, %1673 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%1671 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %1675 = tensor.empty() : tensor<1x13x4096xf32>
    %1676 = tensor.empty() : tensor<1x13x4096xf32>
    %1677 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg20 : tensor<4096xf32>) outs(%1676 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %1678 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1677, %1674 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%1675 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %1679 = tensor.empty() : tensor<4096x4096xf32>
    %1680 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg136 : tensor<4096x4096xf32>) outs(%1679 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1681 = "tosa.reshape"(%1678) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %1682 = tensor.empty() : tensor<13x4096xf32>
    %1683 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1682 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %1684 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1681, %1680 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%1683 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %1685 = "tosa.reshape"(%1684) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %1686 = tensor.empty() : tensor<4096x4096xf32>
    %1687 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg137 : tensor<4096x4096xf32>) outs(%1686 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1688 = "tosa.reshape"(%1678) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %1689 = tensor.empty() : tensor<13x4096xf32>
    %1690 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1689 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %1691 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1688, %1687 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%1690 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %1692 = "tosa.reshape"(%1691) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %1693 = tensor.empty() : tensor<4096x4096xf32>
    %1694 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg138 : tensor<4096x4096xf32>) outs(%1693 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1695 = "tosa.reshape"(%1678) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %1696 = tensor.empty() : tensor<13x4096xf32>
    %1697 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1696 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %1698 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1695, %1694 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%1697 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %1699 = "tosa.reshape"(%1698) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %1700 = "tosa.reshape"(%1685) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %1701 = tensor.empty() : tensor<1x32x13x128xf32>
    %1702 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1700 : tensor<1x13x32x128xf32>) outs(%1701 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %1703 = "tosa.reshape"(%1692) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %1704 = tensor.empty() : tensor<1x32x13x128xf32>
    %1705 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1703 : tensor<1x13x32x128xf32>) outs(%1704 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %1706 = "tosa.reshape"(%1699) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %1707 = tensor.empty() : tensor<1x32x13x128xf32>
    %1708 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1706 : tensor<1x13x32x128xf32>) outs(%1707 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_339 = tensor.extract_slice %arg311[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_340 = tensor.extract_slice %extracted_slice_339[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_341 = tensor.extract_slice %extracted_slice_340[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %extracted_slice_342 = tensor.extract_slice %arg312[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_343 = tensor.extract_slice %extracted_slice_342[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_344 = tensor.extract_slice %extracted_slice_343[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %1709 = tensor.empty() : tensor<1x13x128xf32>
    %1710 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_341 : tensor<1x1x13x128xf32>) outs(%1709 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %1711 = tensor.empty() : tensor<13x128xf32>
    %1712 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%1710 : tensor<1x13x128xf32>) outs(%1711 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %1713 = tensor.empty() : tensor<1x13x128xf32>
    %1714 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_344 : tensor<1x1x13x128xf32>) outs(%1713 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %1715 = tensor.empty() : tensor<13x128xf32>
    %1716 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%1714 : tensor<1x13x128xf32>) outs(%1715 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %1717 = tensor.empty() : tensor<1x13x128xf32>
    %1718 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%1717 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %1712[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %1719 = "tosa.reshape"(%1718) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %1720 = tensor.empty() : tensor<1x13x128xf32>
    %1721 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%1720 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %1716[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %1722 = "tosa.reshape"(%1721) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %1723 = tensor.empty() : tensor<1x32x13x128xf32>
    %1724 = tensor.empty() : tensor<1x32x13x128xf32>
    %1725 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1719 : tensor<1x1x13x128xf32>) outs(%1724 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %1726 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1702, %1725 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%1723 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_345 = tensor.extract_slice %1702[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_346 = tensor.extract_slice %1702[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %1727 = tensor.empty() : tensor<1x32x13x64xf32>
    %1728 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_346 : tensor<1x32x13x64xf32>) outs(%1727 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %1729 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_347 = tensor.insert_slice %1728 into %1729[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_348 = tensor.insert_slice %extracted_slice_345 into %inserted_slice_347[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %1730 = tensor.empty() : tensor<1x32x13x128xf32>
    %1731 = tensor.empty() : tensor<1x32x13x128xf32>
    %1732 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1722 : tensor<1x1x13x128xf32>) outs(%1731 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %1733 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_348, %1732 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%1730 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %1734 = "tosa.add"(%1726, %1733) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %1735 = tensor.empty() : tensor<1x32x13x128xf32>
    %1736 = tensor.empty() : tensor<1x32x13x128xf32>
    %1737 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1719 : tensor<1x1x13x128xf32>) outs(%1736 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %1738 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1705, %1737 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%1735 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_349 = tensor.extract_slice %1705[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_350 = tensor.extract_slice %1705[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %1739 = tensor.empty() : tensor<1x32x13x64xf32>
    %1740 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_350 : tensor<1x32x13x64xf32>) outs(%1739 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %1741 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_351 = tensor.insert_slice %1740 into %1741[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_352 = tensor.insert_slice %extracted_slice_349 into %inserted_slice_351[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %1742 = tensor.empty() : tensor<1x32x13x128xf32>
    %1743 = tensor.empty() : tensor<1x32x13x128xf32>
    %1744 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1722 : tensor<1x1x13x128xf32>) outs(%1743 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %1745 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_352, %1744 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%1742 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %1746 = "tosa.add"(%1738, %1745) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %1747 = tensor.empty() : tensor<1x32x128x13xf32>
    %1748 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1746 : tensor<1x32x13x128xf32>) outs(%1747 : tensor<1x32x128x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x13xf32>
    %1749 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_353 = tensor.extract_slice %1734[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_354 = tensor.insert_slice %extracted_slice_353 into %1749[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %1750 = "tosa.reshape"(%inserted_slice_354) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %1751 = tensor.empty() : tensor<1x32x128x13xf32>
    %extracted_slice_355 = tensor.extract_slice %1748[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> to tensor<1x32x128x13xf32>
    %inserted_slice_356 = tensor.insert_slice %extracted_slice_355 into %1751[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> into tensor<1x32x128x13xf32>
    %1752 = "tosa.reshape"(%inserted_slice_356) {new_shape = array<i64: 32, 128, 13>} : (tensor<1x32x128x13xf32>) -> tensor<32x128x13xf32>
    %1753 = tensor.empty() : tensor<32x13x13xf32>
    %1754 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%1753 : tensor<32x13x13xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x13xf32>
    %1755 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1750, %1752 : tensor<32x13x128xf32>, tensor<32x128x13xf32>) outs(%1754 : tensor<32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x13xf32>
    %1756 = "tosa.reshape"(%1755) {new_shape = array<i64: 1, 32, 13, 13>} : (tensor<32x13x13xf32>) -> tensor<1x32x13x13xf32>
    %cst_357 = arith.constant 11.3137083 : f32
    %1757 = tensor.empty() : tensor<1x32x13x13xf32>
    %1758 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1756 : tensor<1x32x13x13xf32>) outs(%1757 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.divf %in, %cst_357 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %1759 = "tosa.add"(%1758, %24) : (tensor<1x32x13x13xf32>, tensor<1x1x13x13xf32>) -> tensor<1x32x13x13xf32>
    %1760 = tensor.empty() : tensor<1x32x13x1xf32>
    %1761 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1760 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %1762 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1759 : tensor<1x32x13x13xf32>) outs(%1760 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.maxf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %1763 = tensor.empty() : tensor<1x32x13x13xf32>
    %1764 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1759, %1762 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%1763 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.subf %in, %in_999 : f32
      %5295 = math.exp %5294 : f32
      linalg.yield %5295 : f32
    } -> tensor<1x32x13x13xf32>
    %1765 = tensor.empty() : tensor<1x32x13x1xf32>
    %1766 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1765 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %1767 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1764 : tensor<1x32x13x13xf32>) outs(%1766 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %1768 = tensor.empty() : tensor<1x32x13x13xf32>
    %1769 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1764, %1767 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%1768 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.divf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %1770 = tensor.empty() : tensor<1x32x13x13xf32>
    %extracted_slice_358 = tensor.extract_slice %1769[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> to tensor<1x32x13x13xf32>
    %inserted_slice_359 = tensor.insert_slice %extracted_slice_358 into %1770[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> into tensor<1x32x13x13xf32>
    %1771 = "tosa.reshape"(%inserted_slice_359) {new_shape = array<i64: 32, 13, 13>} : (tensor<1x32x13x13xf32>) -> tensor<32x13x13xf32>
    %1772 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_360 = tensor.extract_slice %1708[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_361 = tensor.insert_slice %extracted_slice_360 into %1772[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %1773 = "tosa.reshape"(%inserted_slice_361) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %1774 = tensor.empty() : tensor<32x13x128xf32>
    %1775 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%1774 : tensor<32x13x128xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x128xf32>
    %1776 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1771, %1773 : tensor<32x13x13xf32>, tensor<32x13x128xf32>) outs(%1775 : tensor<32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x128xf32>
    %1777 = "tosa.reshape"(%1776) {new_shape = array<i64: 1, 32, 13, 128>} : (tensor<32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %1778 = tensor.empty() : tensor<1x13x32x128xf32>
    %1779 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1777 : tensor<1x32x13x128xf32>) outs(%1778 : tensor<1x13x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x32x128xf32>
    %extracted_slice_362 = tensor.extract_slice %1779[0, 0, 0, 0] [1, 13, 32, 128] [1, 1, 1, 1] : tensor<1x13x32x128xf32> to tensor<1x13x32x128xf32>
    %1780 = "tosa.reshape"(%extracted_slice_362) {new_shape = array<i64: 1, 13, 4096>} : (tensor<1x13x32x128xf32>) -> tensor<1x13x4096xf32>
    %1781 = tensor.empty() : tensor<4096x4096xf32>
    %1782 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg139 : tensor<4096x4096xf32>) outs(%1781 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1783 = "tosa.reshape"(%1780) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %1784 = tensor.empty() : tensor<13x4096xf32>
    %1785 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1784 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %1786 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1783, %1782 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%1785 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %1787 = "tosa.reshape"(%1786) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %1788 = "tosa.add"(%1664, %1787) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %1789 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_363 = arith.constant 2 : i32
    %1790 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1788 : tensor<1x13x4096xf32>) outs(%1789 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_363 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_364 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %1791 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1790 : tensor<1x13x4096xf32>) outs(%cst_364 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_365 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1792 = "tosa.add"(%1791, %cst_365) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %1793 = tensor.empty() : tensor<1x13x1xf32>
    %1794 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1792 : tensor<1x13x1xf32>) outs(%1793 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %1795 = tensor.empty() : tensor<1x13x4096xf32>
    %1796 = tensor.empty() : tensor<1x13x4096xf32>
    %1797 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1794 : tensor<1x13x1xf32>) outs(%1796 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %1798 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1788, %1797 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%1795 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %1799 = tensor.empty() : tensor<1x13x4096xf32>
    %1800 = tensor.empty() : tensor<1x13x4096xf32>
    %1801 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg21 : tensor<4096xf32>) outs(%1800 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %1802 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1801, %1798 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%1799 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %1803 = tensor.empty() : tensor<4096x11008xf32>
    %1804 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg140 : tensor<11008x4096xf32>) outs(%1803 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1805 = "tosa.reshape"(%1802) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %1806 = tensor.empty() : tensor<13x11008xf32>
    %1807 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1806 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %1808 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1805, %1804 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%1807 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %1809 = "tosa.reshape"(%1808) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %1810 = tensor.empty() : tensor<1x13x11008xf32>
    %1811 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1809 : tensor<1x13x11008xf32>) outs(%1810 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      %5295 = math.exp %5294 : f32
      %cst_999 = arith.constant 1.000000e+00 : f32
      %5296 = arith.addf %cst_999, %5295 : f32
      %5297 = arith.divf %in, %5296 : f32
      linalg.yield %5297 : f32
    } -> tensor<1x13x11008xf32>
    %1812 = tensor.empty() : tensor<4096x11008xf32>
    %1813 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg141 : tensor<11008x4096xf32>) outs(%1812 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1814 = "tosa.reshape"(%1802) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %1815 = tensor.empty() : tensor<13x11008xf32>
    %1816 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1815 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %1817 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1814, %1813 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%1816 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %1818 = "tosa.reshape"(%1817) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %1819 = tensor.empty() : tensor<1x13x11008xf32>
    %1820 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1811, %1818 : tensor<1x13x11008xf32>, tensor<1x13x11008xf32>) outs(%1819 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x11008xf32>
    %1821 = tensor.empty() : tensor<11008x4096xf32>
    %1822 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg142 : tensor<4096x11008xf32>) outs(%1821 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %1823 = "tosa.reshape"(%1820) {new_shape = array<i64: 13, 11008>} : (tensor<1x13x11008xf32>) -> tensor<13x11008xf32>
    %1824 = tensor.empty() : tensor<13x4096xf32>
    %1825 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1824 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %1826 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1823, %1822 : tensor<13x11008xf32>, tensor<11008x4096xf32>) outs(%1825 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %1827 = "tosa.reshape"(%1826) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %1828 = "tosa.add"(%1788, %1827) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %1829 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_366 = arith.constant 2 : i32
    %1830 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1828 : tensor<1x13x4096xf32>) outs(%1829 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_366 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_367 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %1831 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1830 : tensor<1x13x4096xf32>) outs(%cst_367 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_368 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1832 = "tosa.add"(%1831, %cst_368) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %1833 = tensor.empty() : tensor<1x13x1xf32>
    %1834 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1832 : tensor<1x13x1xf32>) outs(%1833 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %1835 = tensor.empty() : tensor<1x13x4096xf32>
    %1836 = tensor.empty() : tensor<1x13x4096xf32>
    %1837 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1834 : tensor<1x13x1xf32>) outs(%1836 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %1838 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1828, %1837 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%1835 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %1839 = tensor.empty() : tensor<1x13x4096xf32>
    %1840 = tensor.empty() : tensor<1x13x4096xf32>
    %1841 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg22 : tensor<4096xf32>) outs(%1840 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %1842 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1841, %1838 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%1839 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %1843 = tensor.empty() : tensor<4096x4096xf32>
    %1844 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg143 : tensor<4096x4096xf32>) outs(%1843 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1845 = "tosa.reshape"(%1842) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %1846 = tensor.empty() : tensor<13x4096xf32>
    %1847 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1846 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %1848 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1845, %1844 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%1847 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %1849 = "tosa.reshape"(%1848) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %1850 = tensor.empty() : tensor<4096x4096xf32>
    %1851 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg144 : tensor<4096x4096xf32>) outs(%1850 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1852 = "tosa.reshape"(%1842) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %1853 = tensor.empty() : tensor<13x4096xf32>
    %1854 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1853 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %1855 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1852, %1851 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%1854 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %1856 = "tosa.reshape"(%1855) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %1857 = tensor.empty() : tensor<4096x4096xf32>
    %1858 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg145 : tensor<4096x4096xf32>) outs(%1857 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1859 = "tosa.reshape"(%1842) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %1860 = tensor.empty() : tensor<13x4096xf32>
    %1861 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1860 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %1862 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1859, %1858 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%1861 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %1863 = "tosa.reshape"(%1862) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %1864 = "tosa.reshape"(%1849) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %1865 = tensor.empty() : tensor<1x32x13x128xf32>
    %1866 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1864 : tensor<1x13x32x128xf32>) outs(%1865 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %1867 = "tosa.reshape"(%1856) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %1868 = tensor.empty() : tensor<1x32x13x128xf32>
    %1869 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1867 : tensor<1x13x32x128xf32>) outs(%1868 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %1870 = "tosa.reshape"(%1863) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %1871 = tensor.empty() : tensor<1x32x13x128xf32>
    %1872 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1870 : tensor<1x13x32x128xf32>) outs(%1871 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_369 = tensor.extract_slice %arg313[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_370 = tensor.extract_slice %extracted_slice_369[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_371 = tensor.extract_slice %extracted_slice_370[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %extracted_slice_372 = tensor.extract_slice %arg314[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_373 = tensor.extract_slice %extracted_slice_372[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_374 = tensor.extract_slice %extracted_slice_373[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %1873 = tensor.empty() : tensor<1x13x128xf32>
    %1874 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_371 : tensor<1x1x13x128xf32>) outs(%1873 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %1875 = tensor.empty() : tensor<13x128xf32>
    %1876 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%1874 : tensor<1x13x128xf32>) outs(%1875 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %1877 = tensor.empty() : tensor<1x13x128xf32>
    %1878 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_374 : tensor<1x1x13x128xf32>) outs(%1877 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %1879 = tensor.empty() : tensor<13x128xf32>
    %1880 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%1878 : tensor<1x13x128xf32>) outs(%1879 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %1881 = tensor.empty() : tensor<1x13x128xf32>
    %1882 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%1881 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %1876[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %1883 = "tosa.reshape"(%1882) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %1884 = tensor.empty() : tensor<1x13x128xf32>
    %1885 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%1884 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %1880[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %1886 = "tosa.reshape"(%1885) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %1887 = tensor.empty() : tensor<1x32x13x128xf32>
    %1888 = tensor.empty() : tensor<1x32x13x128xf32>
    %1889 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1883 : tensor<1x1x13x128xf32>) outs(%1888 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %1890 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1866, %1889 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%1887 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_375 = tensor.extract_slice %1866[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_376 = tensor.extract_slice %1866[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %1891 = tensor.empty() : tensor<1x32x13x64xf32>
    %1892 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_376 : tensor<1x32x13x64xf32>) outs(%1891 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %1893 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_377 = tensor.insert_slice %1892 into %1893[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_378 = tensor.insert_slice %extracted_slice_375 into %inserted_slice_377[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %1894 = tensor.empty() : tensor<1x32x13x128xf32>
    %1895 = tensor.empty() : tensor<1x32x13x128xf32>
    %1896 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1886 : tensor<1x1x13x128xf32>) outs(%1895 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %1897 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_378, %1896 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%1894 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %1898 = "tosa.add"(%1890, %1897) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %1899 = tensor.empty() : tensor<1x32x13x128xf32>
    %1900 = tensor.empty() : tensor<1x32x13x128xf32>
    %1901 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1883 : tensor<1x1x13x128xf32>) outs(%1900 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %1902 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1869, %1901 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%1899 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_379 = tensor.extract_slice %1869[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_380 = tensor.extract_slice %1869[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %1903 = tensor.empty() : tensor<1x32x13x64xf32>
    %1904 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_380 : tensor<1x32x13x64xf32>) outs(%1903 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %1905 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_381 = tensor.insert_slice %1904 into %1905[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_382 = tensor.insert_slice %extracted_slice_379 into %inserted_slice_381[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %1906 = tensor.empty() : tensor<1x32x13x128xf32>
    %1907 = tensor.empty() : tensor<1x32x13x128xf32>
    %1908 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%1886 : tensor<1x1x13x128xf32>) outs(%1907 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %1909 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_382, %1908 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%1906 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %1910 = "tosa.add"(%1902, %1909) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %1911 = tensor.empty() : tensor<1x32x128x13xf32>
    %1912 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1910 : tensor<1x32x13x128xf32>) outs(%1911 : tensor<1x32x128x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x13xf32>
    %1913 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_383 = tensor.extract_slice %1898[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_384 = tensor.insert_slice %extracted_slice_383 into %1913[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %1914 = "tosa.reshape"(%inserted_slice_384) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %1915 = tensor.empty() : tensor<1x32x128x13xf32>
    %extracted_slice_385 = tensor.extract_slice %1912[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> to tensor<1x32x128x13xf32>
    %inserted_slice_386 = tensor.insert_slice %extracted_slice_385 into %1915[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> into tensor<1x32x128x13xf32>
    %1916 = "tosa.reshape"(%inserted_slice_386) {new_shape = array<i64: 32, 128, 13>} : (tensor<1x32x128x13xf32>) -> tensor<32x128x13xf32>
    %1917 = tensor.empty() : tensor<32x13x13xf32>
    %1918 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%1917 : tensor<32x13x13xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x13xf32>
    %1919 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1914, %1916 : tensor<32x13x128xf32>, tensor<32x128x13xf32>) outs(%1918 : tensor<32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x13xf32>
    %1920 = "tosa.reshape"(%1919) {new_shape = array<i64: 1, 32, 13, 13>} : (tensor<32x13x13xf32>) -> tensor<1x32x13x13xf32>
    %cst_387 = arith.constant 11.3137083 : f32
    %1921 = tensor.empty() : tensor<1x32x13x13xf32>
    %1922 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1920 : tensor<1x32x13x13xf32>) outs(%1921 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.divf %in, %cst_387 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %1923 = "tosa.add"(%1922, %24) : (tensor<1x32x13x13xf32>, tensor<1x1x13x13xf32>) -> tensor<1x32x13x13xf32>
    %1924 = tensor.empty() : tensor<1x32x13x1xf32>
    %1925 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1924 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %1926 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1923 : tensor<1x32x13x13xf32>) outs(%1924 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.maxf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %1927 = tensor.empty() : tensor<1x32x13x13xf32>
    %1928 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1923, %1926 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%1927 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.subf %in, %in_999 : f32
      %5295 = math.exp %5294 : f32
      linalg.yield %5295 : f32
    } -> tensor<1x32x13x13xf32>
    %1929 = tensor.empty() : tensor<1x32x13x1xf32>
    %1930 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%1929 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %1931 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1928 : tensor<1x32x13x13xf32>) outs(%1930 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %1932 = tensor.empty() : tensor<1x32x13x13xf32>
    %1933 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1928, %1931 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%1932 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.divf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %1934 = tensor.empty() : tensor<1x32x13x13xf32>
    %extracted_slice_388 = tensor.extract_slice %1933[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> to tensor<1x32x13x13xf32>
    %inserted_slice_389 = tensor.insert_slice %extracted_slice_388 into %1934[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> into tensor<1x32x13x13xf32>
    %1935 = "tosa.reshape"(%inserted_slice_389) {new_shape = array<i64: 32, 13, 13>} : (tensor<1x32x13x13xf32>) -> tensor<32x13x13xf32>
    %1936 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_390 = tensor.extract_slice %1872[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_391 = tensor.insert_slice %extracted_slice_390 into %1936[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %1937 = "tosa.reshape"(%inserted_slice_391) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %1938 = tensor.empty() : tensor<32x13x128xf32>
    %1939 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%1938 : tensor<32x13x128xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x128xf32>
    %1940 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1935, %1937 : tensor<32x13x13xf32>, tensor<32x13x128xf32>) outs(%1939 : tensor<32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x128xf32>
    %1941 = "tosa.reshape"(%1940) {new_shape = array<i64: 1, 32, 13, 128>} : (tensor<32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %1942 = tensor.empty() : tensor<1x13x32x128xf32>
    %1943 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1941 : tensor<1x32x13x128xf32>) outs(%1942 : tensor<1x13x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x32x128xf32>
    %extracted_slice_392 = tensor.extract_slice %1943[0, 0, 0, 0] [1, 13, 32, 128] [1, 1, 1, 1] : tensor<1x13x32x128xf32> to tensor<1x13x32x128xf32>
    %1944 = "tosa.reshape"(%extracted_slice_392) {new_shape = array<i64: 1, 13, 4096>} : (tensor<1x13x32x128xf32>) -> tensor<1x13x4096xf32>
    %1945 = tensor.empty() : tensor<4096x4096xf32>
    %1946 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg146 : tensor<4096x4096xf32>) outs(%1945 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %1947 = "tosa.reshape"(%1944) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %1948 = tensor.empty() : tensor<13x4096xf32>
    %1949 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1948 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %1950 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1947, %1946 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%1949 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %1951 = "tosa.reshape"(%1950) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %1952 = "tosa.add"(%1828, %1951) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %1953 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_393 = arith.constant 2 : i32
    %1954 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1952 : tensor<1x13x4096xf32>) outs(%1953 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_393 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_394 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %1955 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1954 : tensor<1x13x4096xf32>) outs(%cst_394 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_395 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1956 = "tosa.add"(%1955, %cst_395) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %1957 = tensor.empty() : tensor<1x13x1xf32>
    %1958 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1956 : tensor<1x13x1xf32>) outs(%1957 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %1959 = tensor.empty() : tensor<1x13x4096xf32>
    %1960 = tensor.empty() : tensor<1x13x4096xf32>
    %1961 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1958 : tensor<1x13x1xf32>) outs(%1960 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %1962 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1952, %1961 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%1959 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %1963 = tensor.empty() : tensor<1x13x4096xf32>
    %1964 = tensor.empty() : tensor<1x13x4096xf32>
    %1965 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg23 : tensor<4096xf32>) outs(%1964 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %1966 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1965, %1962 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%1963 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %1967 = tensor.empty() : tensor<4096x11008xf32>
    %1968 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg147 : tensor<11008x4096xf32>) outs(%1967 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1969 = "tosa.reshape"(%1966) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %1970 = tensor.empty() : tensor<13x11008xf32>
    %1971 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1970 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %1972 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1969, %1968 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%1971 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %1973 = "tosa.reshape"(%1972) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %1974 = tensor.empty() : tensor<1x13x11008xf32>
    %1975 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1973 : tensor<1x13x11008xf32>) outs(%1974 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      %5295 = math.exp %5294 : f32
      %cst_999 = arith.constant 1.000000e+00 : f32
      %5296 = arith.addf %cst_999, %5295 : f32
      %5297 = arith.divf %in, %5296 : f32
      linalg.yield %5297 : f32
    } -> tensor<1x13x11008xf32>
    %1976 = tensor.empty() : tensor<4096x11008xf32>
    %1977 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg148 : tensor<11008x4096xf32>) outs(%1976 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %1978 = "tosa.reshape"(%1966) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %1979 = tensor.empty() : tensor<13x11008xf32>
    %1980 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1979 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %1981 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1978, %1977 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%1980 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %1982 = "tosa.reshape"(%1981) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %1983 = tensor.empty() : tensor<1x13x11008xf32>
    %1984 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1975, %1982 : tensor<1x13x11008xf32>, tensor<1x13x11008xf32>) outs(%1983 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x11008xf32>
    %1985 = tensor.empty() : tensor<11008x4096xf32>
    %1986 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg149 : tensor<4096x11008xf32>) outs(%1985 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %1987 = "tosa.reshape"(%1984) {new_shape = array<i64: 13, 11008>} : (tensor<1x13x11008xf32>) -> tensor<13x11008xf32>
    %1988 = tensor.empty() : tensor<13x4096xf32>
    %1989 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%1988 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %1990 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1987, %1986 : tensor<13x11008xf32>, tensor<11008x4096xf32>) outs(%1989 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %1991 = "tosa.reshape"(%1990) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %1992 = "tosa.add"(%1952, %1991) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %1993 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_396 = arith.constant 2 : i32
    %1994 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1992 : tensor<1x13x4096xf32>) outs(%1993 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_396 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_397 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %1995 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%1994 : tensor<1x13x4096xf32>) outs(%cst_397 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_398 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %1996 = "tosa.add"(%1995, %cst_398) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %1997 = tensor.empty() : tensor<1x13x1xf32>
    %1998 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1996 : tensor<1x13x1xf32>) outs(%1997 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %1999 = tensor.empty() : tensor<1x13x4096xf32>
    %2000 = tensor.empty() : tensor<1x13x4096xf32>
    %2001 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1998 : tensor<1x13x1xf32>) outs(%2000 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %2002 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1992, %2001 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%1999 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %2003 = tensor.empty() : tensor<1x13x4096xf32>
    %2004 = tensor.empty() : tensor<1x13x4096xf32>
    %2005 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg24 : tensor<4096xf32>) outs(%2004 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %2006 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2005, %2002 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%2003 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %2007 = tensor.empty() : tensor<4096x4096xf32>
    %2008 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg150 : tensor<4096x4096xf32>) outs(%2007 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2009 = "tosa.reshape"(%2006) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %2010 = tensor.empty() : tensor<13x4096xf32>
    %2011 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2010 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %2012 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2009, %2008 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%2011 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %2013 = "tosa.reshape"(%2012) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %2014 = tensor.empty() : tensor<4096x4096xf32>
    %2015 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg151 : tensor<4096x4096xf32>) outs(%2014 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2016 = "tosa.reshape"(%2006) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %2017 = tensor.empty() : tensor<13x4096xf32>
    %2018 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2017 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %2019 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2016, %2015 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%2018 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %2020 = "tosa.reshape"(%2019) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %2021 = tensor.empty() : tensor<4096x4096xf32>
    %2022 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg152 : tensor<4096x4096xf32>) outs(%2021 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2023 = "tosa.reshape"(%2006) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %2024 = tensor.empty() : tensor<13x4096xf32>
    %2025 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2024 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %2026 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2023, %2022 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%2025 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %2027 = "tosa.reshape"(%2026) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %2028 = "tosa.reshape"(%2013) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %2029 = tensor.empty() : tensor<1x32x13x128xf32>
    %2030 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2028 : tensor<1x13x32x128xf32>) outs(%2029 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %2031 = "tosa.reshape"(%2020) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %2032 = tensor.empty() : tensor<1x32x13x128xf32>
    %2033 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2031 : tensor<1x13x32x128xf32>) outs(%2032 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %2034 = "tosa.reshape"(%2027) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %2035 = tensor.empty() : tensor<1x32x13x128xf32>
    %2036 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2034 : tensor<1x13x32x128xf32>) outs(%2035 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_399 = tensor.extract_slice %arg315[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_400 = tensor.extract_slice %extracted_slice_399[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_401 = tensor.extract_slice %extracted_slice_400[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %extracted_slice_402 = tensor.extract_slice %arg316[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_403 = tensor.extract_slice %extracted_slice_402[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_404 = tensor.extract_slice %extracted_slice_403[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %2037 = tensor.empty() : tensor<1x13x128xf32>
    %2038 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_401 : tensor<1x1x13x128xf32>) outs(%2037 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %2039 = tensor.empty() : tensor<13x128xf32>
    %2040 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%2038 : tensor<1x13x128xf32>) outs(%2039 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %2041 = tensor.empty() : tensor<1x13x128xf32>
    %2042 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_404 : tensor<1x1x13x128xf32>) outs(%2041 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %2043 = tensor.empty() : tensor<13x128xf32>
    %2044 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%2042 : tensor<1x13x128xf32>) outs(%2043 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %2045 = tensor.empty() : tensor<1x13x128xf32>
    %2046 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%2045 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %2040[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %2047 = "tosa.reshape"(%2046) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %2048 = tensor.empty() : tensor<1x13x128xf32>
    %2049 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%2048 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %2044[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %2050 = "tosa.reshape"(%2049) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %2051 = tensor.empty() : tensor<1x32x13x128xf32>
    %2052 = tensor.empty() : tensor<1x32x13x128xf32>
    %2053 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2047 : tensor<1x1x13x128xf32>) outs(%2052 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %2054 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2030, %2053 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%2051 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_405 = tensor.extract_slice %2030[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_406 = tensor.extract_slice %2030[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %2055 = tensor.empty() : tensor<1x32x13x64xf32>
    %2056 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_406 : tensor<1x32x13x64xf32>) outs(%2055 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %2057 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_407 = tensor.insert_slice %2056 into %2057[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_408 = tensor.insert_slice %extracted_slice_405 into %inserted_slice_407[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %2058 = tensor.empty() : tensor<1x32x13x128xf32>
    %2059 = tensor.empty() : tensor<1x32x13x128xf32>
    %2060 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2050 : tensor<1x1x13x128xf32>) outs(%2059 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %2061 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_408, %2060 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%2058 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %2062 = "tosa.add"(%2054, %2061) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %2063 = tensor.empty() : tensor<1x32x13x128xf32>
    %2064 = tensor.empty() : tensor<1x32x13x128xf32>
    %2065 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2047 : tensor<1x1x13x128xf32>) outs(%2064 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %2066 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2033, %2065 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%2063 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_409 = tensor.extract_slice %2033[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_410 = tensor.extract_slice %2033[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %2067 = tensor.empty() : tensor<1x32x13x64xf32>
    %2068 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_410 : tensor<1x32x13x64xf32>) outs(%2067 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %2069 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_411 = tensor.insert_slice %2068 into %2069[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_412 = tensor.insert_slice %extracted_slice_409 into %inserted_slice_411[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %2070 = tensor.empty() : tensor<1x32x13x128xf32>
    %2071 = tensor.empty() : tensor<1x32x13x128xf32>
    %2072 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2050 : tensor<1x1x13x128xf32>) outs(%2071 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %2073 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_412, %2072 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%2070 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %2074 = "tosa.add"(%2066, %2073) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %2075 = tensor.empty() : tensor<1x32x128x13xf32>
    %2076 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2074 : tensor<1x32x13x128xf32>) outs(%2075 : tensor<1x32x128x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x13xf32>
    %2077 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_413 = tensor.extract_slice %2062[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_414 = tensor.insert_slice %extracted_slice_413 into %2077[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %2078 = "tosa.reshape"(%inserted_slice_414) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %2079 = tensor.empty() : tensor<1x32x128x13xf32>
    %extracted_slice_415 = tensor.extract_slice %2076[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> to tensor<1x32x128x13xf32>
    %inserted_slice_416 = tensor.insert_slice %extracted_slice_415 into %2079[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> into tensor<1x32x128x13xf32>
    %2080 = "tosa.reshape"(%inserted_slice_416) {new_shape = array<i64: 32, 128, 13>} : (tensor<1x32x128x13xf32>) -> tensor<32x128x13xf32>
    %2081 = tensor.empty() : tensor<32x13x13xf32>
    %2082 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%2081 : tensor<32x13x13xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x13xf32>
    %2083 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2078, %2080 : tensor<32x13x128xf32>, tensor<32x128x13xf32>) outs(%2082 : tensor<32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x13xf32>
    %2084 = "tosa.reshape"(%2083) {new_shape = array<i64: 1, 32, 13, 13>} : (tensor<32x13x13xf32>) -> tensor<1x32x13x13xf32>
    %cst_417 = arith.constant 11.3137083 : f32
    %2085 = tensor.empty() : tensor<1x32x13x13xf32>
    %2086 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2084 : tensor<1x32x13x13xf32>) outs(%2085 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.divf %in, %cst_417 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %2087 = "tosa.add"(%2086, %24) : (tensor<1x32x13x13xf32>, tensor<1x1x13x13xf32>) -> tensor<1x32x13x13xf32>
    %2088 = tensor.empty() : tensor<1x32x13x1xf32>
    %2089 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2088 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %2090 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2087 : tensor<1x32x13x13xf32>) outs(%2088 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.maxf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %2091 = tensor.empty() : tensor<1x32x13x13xf32>
    %2092 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2087, %2090 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%2091 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.subf %in, %in_999 : f32
      %5295 = math.exp %5294 : f32
      linalg.yield %5295 : f32
    } -> tensor<1x32x13x13xf32>
    %2093 = tensor.empty() : tensor<1x32x13x1xf32>
    %2094 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2093 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %2095 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2092 : tensor<1x32x13x13xf32>) outs(%2094 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %2096 = tensor.empty() : tensor<1x32x13x13xf32>
    %2097 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2092, %2095 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%2096 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.divf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %2098 = tensor.empty() : tensor<1x32x13x13xf32>
    %extracted_slice_418 = tensor.extract_slice %2097[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> to tensor<1x32x13x13xf32>
    %inserted_slice_419 = tensor.insert_slice %extracted_slice_418 into %2098[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> into tensor<1x32x13x13xf32>
    %2099 = "tosa.reshape"(%inserted_slice_419) {new_shape = array<i64: 32, 13, 13>} : (tensor<1x32x13x13xf32>) -> tensor<32x13x13xf32>
    %2100 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_420 = tensor.extract_slice %2036[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_421 = tensor.insert_slice %extracted_slice_420 into %2100[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %2101 = "tosa.reshape"(%inserted_slice_421) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %2102 = tensor.empty() : tensor<32x13x128xf32>
    %2103 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%2102 : tensor<32x13x128xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x128xf32>
    %2104 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2099, %2101 : tensor<32x13x13xf32>, tensor<32x13x128xf32>) outs(%2103 : tensor<32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x128xf32>
    %2105 = "tosa.reshape"(%2104) {new_shape = array<i64: 1, 32, 13, 128>} : (tensor<32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %2106 = tensor.empty() : tensor<1x13x32x128xf32>
    %2107 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2105 : tensor<1x32x13x128xf32>) outs(%2106 : tensor<1x13x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x32x128xf32>
    %extracted_slice_422 = tensor.extract_slice %2107[0, 0, 0, 0] [1, 13, 32, 128] [1, 1, 1, 1] : tensor<1x13x32x128xf32> to tensor<1x13x32x128xf32>
    %2108 = "tosa.reshape"(%extracted_slice_422) {new_shape = array<i64: 1, 13, 4096>} : (tensor<1x13x32x128xf32>) -> tensor<1x13x4096xf32>
    %2109 = tensor.empty() : tensor<4096x4096xf32>
    %2110 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg153 : tensor<4096x4096xf32>) outs(%2109 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2111 = "tosa.reshape"(%2108) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %2112 = tensor.empty() : tensor<13x4096xf32>
    %2113 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2112 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %2114 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2111, %2110 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%2113 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %2115 = "tosa.reshape"(%2114) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %2116 = "tosa.add"(%1992, %2115) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %2117 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_423 = arith.constant 2 : i32
    %2118 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2116 : tensor<1x13x4096xf32>) outs(%2117 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_423 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_424 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %2119 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2118 : tensor<1x13x4096xf32>) outs(%cst_424 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_425 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2120 = "tosa.add"(%2119, %cst_425) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %2121 = tensor.empty() : tensor<1x13x1xf32>
    %2122 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2120 : tensor<1x13x1xf32>) outs(%2121 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %2123 = tensor.empty() : tensor<1x13x4096xf32>
    %2124 = tensor.empty() : tensor<1x13x4096xf32>
    %2125 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2122 : tensor<1x13x1xf32>) outs(%2124 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %2126 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2116, %2125 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%2123 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %2127 = tensor.empty() : tensor<1x13x4096xf32>
    %2128 = tensor.empty() : tensor<1x13x4096xf32>
    %2129 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg25 : tensor<4096xf32>) outs(%2128 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %2130 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2129, %2126 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%2127 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %2131 = tensor.empty() : tensor<4096x11008xf32>
    %2132 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg154 : tensor<11008x4096xf32>) outs(%2131 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2133 = "tosa.reshape"(%2130) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %2134 = tensor.empty() : tensor<13x11008xf32>
    %2135 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2134 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %2136 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2133, %2132 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%2135 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %2137 = "tosa.reshape"(%2136) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %2138 = tensor.empty() : tensor<1x13x11008xf32>
    %2139 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2137 : tensor<1x13x11008xf32>) outs(%2138 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      %5295 = math.exp %5294 : f32
      %cst_999 = arith.constant 1.000000e+00 : f32
      %5296 = arith.addf %cst_999, %5295 : f32
      %5297 = arith.divf %in, %5296 : f32
      linalg.yield %5297 : f32
    } -> tensor<1x13x11008xf32>
    %2140 = tensor.empty() : tensor<4096x11008xf32>
    %2141 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg155 : tensor<11008x4096xf32>) outs(%2140 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2142 = "tosa.reshape"(%2130) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %2143 = tensor.empty() : tensor<13x11008xf32>
    %2144 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2143 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %2145 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2142, %2141 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%2144 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %2146 = "tosa.reshape"(%2145) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %2147 = tensor.empty() : tensor<1x13x11008xf32>
    %2148 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2139, %2146 : tensor<1x13x11008xf32>, tensor<1x13x11008xf32>) outs(%2147 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x11008xf32>
    %2149 = tensor.empty() : tensor<11008x4096xf32>
    %2150 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg156 : tensor<4096x11008xf32>) outs(%2149 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %2151 = "tosa.reshape"(%2148) {new_shape = array<i64: 13, 11008>} : (tensor<1x13x11008xf32>) -> tensor<13x11008xf32>
    %2152 = tensor.empty() : tensor<13x4096xf32>
    %2153 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2152 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %2154 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2151, %2150 : tensor<13x11008xf32>, tensor<11008x4096xf32>) outs(%2153 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %2155 = "tosa.reshape"(%2154) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %2156 = "tosa.add"(%2116, %2155) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %2157 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_426 = arith.constant 2 : i32
    %2158 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2156 : tensor<1x13x4096xf32>) outs(%2157 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_426 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_427 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %2159 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2158 : tensor<1x13x4096xf32>) outs(%cst_427 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_428 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2160 = "tosa.add"(%2159, %cst_428) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %2161 = tensor.empty() : tensor<1x13x1xf32>
    %2162 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2160 : tensor<1x13x1xf32>) outs(%2161 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %2163 = tensor.empty() : tensor<1x13x4096xf32>
    %2164 = tensor.empty() : tensor<1x13x4096xf32>
    %2165 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2162 : tensor<1x13x1xf32>) outs(%2164 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %2166 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2156, %2165 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%2163 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %2167 = tensor.empty() : tensor<1x13x4096xf32>
    %2168 = tensor.empty() : tensor<1x13x4096xf32>
    %2169 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg26 : tensor<4096xf32>) outs(%2168 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %2170 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2169, %2166 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%2167 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %2171 = tensor.empty() : tensor<4096x4096xf32>
    %2172 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg157 : tensor<4096x4096xf32>) outs(%2171 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2173 = "tosa.reshape"(%2170) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %2174 = tensor.empty() : tensor<13x4096xf32>
    %2175 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2174 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %2176 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2173, %2172 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%2175 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %2177 = "tosa.reshape"(%2176) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %2178 = tensor.empty() : tensor<4096x4096xf32>
    %2179 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg158 : tensor<4096x4096xf32>) outs(%2178 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2180 = "tosa.reshape"(%2170) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %2181 = tensor.empty() : tensor<13x4096xf32>
    %2182 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2181 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %2183 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2180, %2179 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%2182 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %2184 = "tosa.reshape"(%2183) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %2185 = tensor.empty() : tensor<4096x4096xf32>
    %2186 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg159 : tensor<4096x4096xf32>) outs(%2185 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2187 = "tosa.reshape"(%2170) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %2188 = tensor.empty() : tensor<13x4096xf32>
    %2189 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2188 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %2190 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2187, %2186 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%2189 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %2191 = "tosa.reshape"(%2190) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %2192 = "tosa.reshape"(%2177) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %2193 = tensor.empty() : tensor<1x32x13x128xf32>
    %2194 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2192 : tensor<1x13x32x128xf32>) outs(%2193 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %2195 = "tosa.reshape"(%2184) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %2196 = tensor.empty() : tensor<1x32x13x128xf32>
    %2197 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2195 : tensor<1x13x32x128xf32>) outs(%2196 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %2198 = "tosa.reshape"(%2191) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %2199 = tensor.empty() : tensor<1x32x13x128xf32>
    %2200 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2198 : tensor<1x13x32x128xf32>) outs(%2199 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_429 = tensor.extract_slice %arg317[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_430 = tensor.extract_slice %extracted_slice_429[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_431 = tensor.extract_slice %extracted_slice_430[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %extracted_slice_432 = tensor.extract_slice %arg318[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_433 = tensor.extract_slice %extracted_slice_432[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_434 = tensor.extract_slice %extracted_slice_433[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %2201 = tensor.empty() : tensor<1x13x128xf32>
    %2202 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_431 : tensor<1x1x13x128xf32>) outs(%2201 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %2203 = tensor.empty() : tensor<13x128xf32>
    %2204 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%2202 : tensor<1x13x128xf32>) outs(%2203 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %2205 = tensor.empty() : tensor<1x13x128xf32>
    %2206 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_434 : tensor<1x1x13x128xf32>) outs(%2205 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %2207 = tensor.empty() : tensor<13x128xf32>
    %2208 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%2206 : tensor<1x13x128xf32>) outs(%2207 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %2209 = tensor.empty() : tensor<1x13x128xf32>
    %2210 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%2209 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %2204[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %2211 = "tosa.reshape"(%2210) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %2212 = tensor.empty() : tensor<1x13x128xf32>
    %2213 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%2212 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %2208[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %2214 = "tosa.reshape"(%2213) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %2215 = tensor.empty() : tensor<1x32x13x128xf32>
    %2216 = tensor.empty() : tensor<1x32x13x128xf32>
    %2217 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2211 : tensor<1x1x13x128xf32>) outs(%2216 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %2218 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2194, %2217 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%2215 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_435 = tensor.extract_slice %2194[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_436 = tensor.extract_slice %2194[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %2219 = tensor.empty() : tensor<1x32x13x64xf32>
    %2220 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_436 : tensor<1x32x13x64xf32>) outs(%2219 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %2221 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_437 = tensor.insert_slice %2220 into %2221[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_438 = tensor.insert_slice %extracted_slice_435 into %inserted_slice_437[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %2222 = tensor.empty() : tensor<1x32x13x128xf32>
    %2223 = tensor.empty() : tensor<1x32x13x128xf32>
    %2224 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2214 : tensor<1x1x13x128xf32>) outs(%2223 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %2225 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_438, %2224 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%2222 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %2226 = "tosa.add"(%2218, %2225) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %2227 = tensor.empty() : tensor<1x32x13x128xf32>
    %2228 = tensor.empty() : tensor<1x32x13x128xf32>
    %2229 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2211 : tensor<1x1x13x128xf32>) outs(%2228 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %2230 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2197, %2229 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%2227 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_439 = tensor.extract_slice %2197[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_440 = tensor.extract_slice %2197[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %2231 = tensor.empty() : tensor<1x32x13x64xf32>
    %2232 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_440 : tensor<1x32x13x64xf32>) outs(%2231 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %2233 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_441 = tensor.insert_slice %2232 into %2233[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_442 = tensor.insert_slice %extracted_slice_439 into %inserted_slice_441[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %2234 = tensor.empty() : tensor<1x32x13x128xf32>
    %2235 = tensor.empty() : tensor<1x32x13x128xf32>
    %2236 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2214 : tensor<1x1x13x128xf32>) outs(%2235 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %2237 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_442, %2236 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%2234 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %2238 = "tosa.add"(%2230, %2237) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %2239 = tensor.empty() : tensor<1x32x128x13xf32>
    %2240 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2238 : tensor<1x32x13x128xf32>) outs(%2239 : tensor<1x32x128x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x13xf32>
    %2241 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_443 = tensor.extract_slice %2226[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_444 = tensor.insert_slice %extracted_slice_443 into %2241[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %2242 = "tosa.reshape"(%inserted_slice_444) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %2243 = tensor.empty() : tensor<1x32x128x13xf32>
    %extracted_slice_445 = tensor.extract_slice %2240[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> to tensor<1x32x128x13xf32>
    %inserted_slice_446 = tensor.insert_slice %extracted_slice_445 into %2243[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> into tensor<1x32x128x13xf32>
    %2244 = "tosa.reshape"(%inserted_slice_446) {new_shape = array<i64: 32, 128, 13>} : (tensor<1x32x128x13xf32>) -> tensor<32x128x13xf32>
    %2245 = tensor.empty() : tensor<32x13x13xf32>
    %2246 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%2245 : tensor<32x13x13xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x13xf32>
    %2247 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2242, %2244 : tensor<32x13x128xf32>, tensor<32x128x13xf32>) outs(%2246 : tensor<32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x13xf32>
    %2248 = "tosa.reshape"(%2247) {new_shape = array<i64: 1, 32, 13, 13>} : (tensor<32x13x13xf32>) -> tensor<1x32x13x13xf32>
    %cst_447 = arith.constant 11.3137083 : f32
    %2249 = tensor.empty() : tensor<1x32x13x13xf32>
    %2250 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2248 : tensor<1x32x13x13xf32>) outs(%2249 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.divf %in, %cst_447 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %2251 = "tosa.add"(%2250, %24) : (tensor<1x32x13x13xf32>, tensor<1x1x13x13xf32>) -> tensor<1x32x13x13xf32>
    %2252 = tensor.empty() : tensor<1x32x13x1xf32>
    %2253 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2252 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %2254 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2251 : tensor<1x32x13x13xf32>) outs(%2252 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.maxf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %2255 = tensor.empty() : tensor<1x32x13x13xf32>
    %2256 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2251, %2254 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%2255 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.subf %in, %in_999 : f32
      %5295 = math.exp %5294 : f32
      linalg.yield %5295 : f32
    } -> tensor<1x32x13x13xf32>
    %2257 = tensor.empty() : tensor<1x32x13x1xf32>
    %2258 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2257 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %2259 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2256 : tensor<1x32x13x13xf32>) outs(%2258 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %2260 = tensor.empty() : tensor<1x32x13x13xf32>
    %2261 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2256, %2259 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%2260 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.divf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %2262 = tensor.empty() : tensor<1x32x13x13xf32>
    %extracted_slice_448 = tensor.extract_slice %2261[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> to tensor<1x32x13x13xf32>
    %inserted_slice_449 = tensor.insert_slice %extracted_slice_448 into %2262[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> into tensor<1x32x13x13xf32>
    %2263 = "tosa.reshape"(%inserted_slice_449) {new_shape = array<i64: 32, 13, 13>} : (tensor<1x32x13x13xf32>) -> tensor<32x13x13xf32>
    %2264 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_450 = tensor.extract_slice %2200[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_451 = tensor.insert_slice %extracted_slice_450 into %2264[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %2265 = "tosa.reshape"(%inserted_slice_451) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %2266 = tensor.empty() : tensor<32x13x128xf32>
    %2267 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%2266 : tensor<32x13x128xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x128xf32>
    %2268 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2263, %2265 : tensor<32x13x13xf32>, tensor<32x13x128xf32>) outs(%2267 : tensor<32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x128xf32>
    %2269 = "tosa.reshape"(%2268) {new_shape = array<i64: 1, 32, 13, 128>} : (tensor<32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %2270 = tensor.empty() : tensor<1x13x32x128xf32>
    %2271 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2269 : tensor<1x32x13x128xf32>) outs(%2270 : tensor<1x13x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x32x128xf32>
    %extracted_slice_452 = tensor.extract_slice %2271[0, 0, 0, 0] [1, 13, 32, 128] [1, 1, 1, 1] : tensor<1x13x32x128xf32> to tensor<1x13x32x128xf32>
    %2272 = "tosa.reshape"(%extracted_slice_452) {new_shape = array<i64: 1, 13, 4096>} : (tensor<1x13x32x128xf32>) -> tensor<1x13x4096xf32>
    %2273 = tensor.empty() : tensor<4096x4096xf32>
    %2274 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg160 : tensor<4096x4096xf32>) outs(%2273 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2275 = "tosa.reshape"(%2272) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %2276 = tensor.empty() : tensor<13x4096xf32>
    %2277 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2276 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %2278 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2275, %2274 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%2277 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %2279 = "tosa.reshape"(%2278) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %2280 = "tosa.add"(%2156, %2279) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %2281 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_453 = arith.constant 2 : i32
    %2282 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2280 : tensor<1x13x4096xf32>) outs(%2281 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_453 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_454 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %2283 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2282 : tensor<1x13x4096xf32>) outs(%cst_454 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_455 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2284 = "tosa.add"(%2283, %cst_455) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %2285 = tensor.empty() : tensor<1x13x1xf32>
    %2286 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2284 : tensor<1x13x1xf32>) outs(%2285 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %2287 = tensor.empty() : tensor<1x13x4096xf32>
    %2288 = tensor.empty() : tensor<1x13x4096xf32>
    %2289 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2286 : tensor<1x13x1xf32>) outs(%2288 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %2290 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2280, %2289 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%2287 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %2291 = tensor.empty() : tensor<1x13x4096xf32>
    %2292 = tensor.empty() : tensor<1x13x4096xf32>
    %2293 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg27 : tensor<4096xf32>) outs(%2292 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %2294 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2293, %2290 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%2291 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %2295 = tensor.empty() : tensor<4096x11008xf32>
    %2296 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg161 : tensor<11008x4096xf32>) outs(%2295 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2297 = "tosa.reshape"(%2294) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %2298 = tensor.empty() : tensor<13x11008xf32>
    %2299 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2298 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %2300 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2297, %2296 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%2299 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %2301 = "tosa.reshape"(%2300) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %2302 = tensor.empty() : tensor<1x13x11008xf32>
    %2303 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2301 : tensor<1x13x11008xf32>) outs(%2302 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      %5295 = math.exp %5294 : f32
      %cst_999 = arith.constant 1.000000e+00 : f32
      %5296 = arith.addf %cst_999, %5295 : f32
      %5297 = arith.divf %in, %5296 : f32
      linalg.yield %5297 : f32
    } -> tensor<1x13x11008xf32>
    %2304 = tensor.empty() : tensor<4096x11008xf32>
    %2305 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg162 : tensor<11008x4096xf32>) outs(%2304 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2306 = "tosa.reshape"(%2294) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %2307 = tensor.empty() : tensor<13x11008xf32>
    %2308 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2307 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %2309 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2306, %2305 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%2308 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %2310 = "tosa.reshape"(%2309) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %2311 = tensor.empty() : tensor<1x13x11008xf32>
    %2312 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2303, %2310 : tensor<1x13x11008xf32>, tensor<1x13x11008xf32>) outs(%2311 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x11008xf32>
    %2313 = tensor.empty() : tensor<11008x4096xf32>
    %2314 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg163 : tensor<4096x11008xf32>) outs(%2313 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %2315 = "tosa.reshape"(%2312) {new_shape = array<i64: 13, 11008>} : (tensor<1x13x11008xf32>) -> tensor<13x11008xf32>
    %2316 = tensor.empty() : tensor<13x4096xf32>
    %2317 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2316 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %2318 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2315, %2314 : tensor<13x11008xf32>, tensor<11008x4096xf32>) outs(%2317 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %2319 = "tosa.reshape"(%2318) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %2320 = "tosa.add"(%2280, %2319) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %2321 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_456 = arith.constant 2 : i32
    %2322 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2320 : tensor<1x13x4096xf32>) outs(%2321 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_456 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_457 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %2323 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2322 : tensor<1x13x4096xf32>) outs(%cst_457 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_458 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2324 = "tosa.add"(%2323, %cst_458) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %2325 = tensor.empty() : tensor<1x13x1xf32>
    %2326 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2324 : tensor<1x13x1xf32>) outs(%2325 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %2327 = tensor.empty() : tensor<1x13x4096xf32>
    %2328 = tensor.empty() : tensor<1x13x4096xf32>
    %2329 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2326 : tensor<1x13x1xf32>) outs(%2328 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %2330 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2320, %2329 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%2327 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %2331 = tensor.empty() : tensor<1x13x4096xf32>
    %2332 = tensor.empty() : tensor<1x13x4096xf32>
    %2333 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg28 : tensor<4096xf32>) outs(%2332 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %2334 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2333, %2330 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%2331 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %2335 = tensor.empty() : tensor<4096x4096xf32>
    %2336 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg164 : tensor<4096x4096xf32>) outs(%2335 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2337 = "tosa.reshape"(%2334) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %2338 = tensor.empty() : tensor<13x4096xf32>
    %2339 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2338 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %2340 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2337, %2336 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%2339 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %2341 = "tosa.reshape"(%2340) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %2342 = tensor.empty() : tensor<4096x4096xf32>
    %2343 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg165 : tensor<4096x4096xf32>) outs(%2342 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2344 = "tosa.reshape"(%2334) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %2345 = tensor.empty() : tensor<13x4096xf32>
    %2346 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2345 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %2347 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2344, %2343 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%2346 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %2348 = "tosa.reshape"(%2347) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %2349 = tensor.empty() : tensor<4096x4096xf32>
    %2350 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg166 : tensor<4096x4096xf32>) outs(%2349 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2351 = "tosa.reshape"(%2334) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %2352 = tensor.empty() : tensor<13x4096xf32>
    %2353 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2352 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %2354 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2351, %2350 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%2353 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %2355 = "tosa.reshape"(%2354) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %2356 = "tosa.reshape"(%2341) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %2357 = tensor.empty() : tensor<1x32x13x128xf32>
    %2358 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2356 : tensor<1x13x32x128xf32>) outs(%2357 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %2359 = "tosa.reshape"(%2348) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %2360 = tensor.empty() : tensor<1x32x13x128xf32>
    %2361 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2359 : tensor<1x13x32x128xf32>) outs(%2360 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %2362 = "tosa.reshape"(%2355) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %2363 = tensor.empty() : tensor<1x32x13x128xf32>
    %2364 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2362 : tensor<1x13x32x128xf32>) outs(%2363 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_459 = tensor.extract_slice %arg319[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_460 = tensor.extract_slice %extracted_slice_459[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_461 = tensor.extract_slice %extracted_slice_460[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %extracted_slice_462 = tensor.extract_slice %arg320[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_463 = tensor.extract_slice %extracted_slice_462[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_464 = tensor.extract_slice %extracted_slice_463[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %2365 = tensor.empty() : tensor<1x13x128xf32>
    %2366 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_461 : tensor<1x1x13x128xf32>) outs(%2365 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %2367 = tensor.empty() : tensor<13x128xf32>
    %2368 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%2366 : tensor<1x13x128xf32>) outs(%2367 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %2369 = tensor.empty() : tensor<1x13x128xf32>
    %2370 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_464 : tensor<1x1x13x128xf32>) outs(%2369 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %2371 = tensor.empty() : tensor<13x128xf32>
    %2372 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%2370 : tensor<1x13x128xf32>) outs(%2371 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %2373 = tensor.empty() : tensor<1x13x128xf32>
    %2374 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%2373 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %2368[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %2375 = "tosa.reshape"(%2374) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %2376 = tensor.empty() : tensor<1x13x128xf32>
    %2377 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%2376 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %2372[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %2378 = "tosa.reshape"(%2377) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %2379 = tensor.empty() : tensor<1x32x13x128xf32>
    %2380 = tensor.empty() : tensor<1x32x13x128xf32>
    %2381 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2375 : tensor<1x1x13x128xf32>) outs(%2380 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %2382 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2358, %2381 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%2379 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_465 = tensor.extract_slice %2358[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_466 = tensor.extract_slice %2358[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %2383 = tensor.empty() : tensor<1x32x13x64xf32>
    %2384 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_466 : tensor<1x32x13x64xf32>) outs(%2383 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %2385 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_467 = tensor.insert_slice %2384 into %2385[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_468 = tensor.insert_slice %extracted_slice_465 into %inserted_slice_467[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %2386 = tensor.empty() : tensor<1x32x13x128xf32>
    %2387 = tensor.empty() : tensor<1x32x13x128xf32>
    %2388 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2378 : tensor<1x1x13x128xf32>) outs(%2387 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %2389 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_468, %2388 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%2386 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %2390 = "tosa.add"(%2382, %2389) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %2391 = tensor.empty() : tensor<1x32x13x128xf32>
    %2392 = tensor.empty() : tensor<1x32x13x128xf32>
    %2393 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2375 : tensor<1x1x13x128xf32>) outs(%2392 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %2394 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2361, %2393 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%2391 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_469 = tensor.extract_slice %2361[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_470 = tensor.extract_slice %2361[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %2395 = tensor.empty() : tensor<1x32x13x64xf32>
    %2396 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_470 : tensor<1x32x13x64xf32>) outs(%2395 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %2397 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_471 = tensor.insert_slice %2396 into %2397[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_472 = tensor.insert_slice %extracted_slice_469 into %inserted_slice_471[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %2398 = tensor.empty() : tensor<1x32x13x128xf32>
    %2399 = tensor.empty() : tensor<1x32x13x128xf32>
    %2400 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2378 : tensor<1x1x13x128xf32>) outs(%2399 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %2401 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_472, %2400 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%2398 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %2402 = "tosa.add"(%2394, %2401) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %2403 = tensor.empty() : tensor<1x32x128x13xf32>
    %2404 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2402 : tensor<1x32x13x128xf32>) outs(%2403 : tensor<1x32x128x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x13xf32>
    %2405 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_473 = tensor.extract_slice %2390[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_474 = tensor.insert_slice %extracted_slice_473 into %2405[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %2406 = "tosa.reshape"(%inserted_slice_474) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %2407 = tensor.empty() : tensor<1x32x128x13xf32>
    %extracted_slice_475 = tensor.extract_slice %2404[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> to tensor<1x32x128x13xf32>
    %inserted_slice_476 = tensor.insert_slice %extracted_slice_475 into %2407[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> into tensor<1x32x128x13xf32>
    %2408 = "tosa.reshape"(%inserted_slice_476) {new_shape = array<i64: 32, 128, 13>} : (tensor<1x32x128x13xf32>) -> tensor<32x128x13xf32>
    %2409 = tensor.empty() : tensor<32x13x13xf32>
    %2410 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%2409 : tensor<32x13x13xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x13xf32>
    %2411 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2406, %2408 : tensor<32x13x128xf32>, tensor<32x128x13xf32>) outs(%2410 : tensor<32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x13xf32>
    %2412 = "tosa.reshape"(%2411) {new_shape = array<i64: 1, 32, 13, 13>} : (tensor<32x13x13xf32>) -> tensor<1x32x13x13xf32>
    %cst_477 = arith.constant 11.3137083 : f32
    %2413 = tensor.empty() : tensor<1x32x13x13xf32>
    %2414 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2412 : tensor<1x32x13x13xf32>) outs(%2413 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.divf %in, %cst_477 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %2415 = "tosa.add"(%2414, %24) : (tensor<1x32x13x13xf32>, tensor<1x1x13x13xf32>) -> tensor<1x32x13x13xf32>
    %2416 = tensor.empty() : tensor<1x32x13x1xf32>
    %2417 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2416 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %2418 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2415 : tensor<1x32x13x13xf32>) outs(%2416 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.maxf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %2419 = tensor.empty() : tensor<1x32x13x13xf32>
    %2420 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2415, %2418 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%2419 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.subf %in, %in_999 : f32
      %5295 = math.exp %5294 : f32
      linalg.yield %5295 : f32
    } -> tensor<1x32x13x13xf32>
    %2421 = tensor.empty() : tensor<1x32x13x1xf32>
    %2422 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2421 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %2423 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2420 : tensor<1x32x13x13xf32>) outs(%2422 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %2424 = tensor.empty() : tensor<1x32x13x13xf32>
    %2425 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2420, %2423 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%2424 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.divf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %2426 = tensor.empty() : tensor<1x32x13x13xf32>
    %extracted_slice_478 = tensor.extract_slice %2425[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> to tensor<1x32x13x13xf32>
    %inserted_slice_479 = tensor.insert_slice %extracted_slice_478 into %2426[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> into tensor<1x32x13x13xf32>
    %2427 = "tosa.reshape"(%inserted_slice_479) {new_shape = array<i64: 32, 13, 13>} : (tensor<1x32x13x13xf32>) -> tensor<32x13x13xf32>
    %2428 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_480 = tensor.extract_slice %2364[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_481 = tensor.insert_slice %extracted_slice_480 into %2428[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %2429 = "tosa.reshape"(%inserted_slice_481) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %2430 = tensor.empty() : tensor<32x13x128xf32>
    %2431 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%2430 : tensor<32x13x128xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x128xf32>
    %2432 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2427, %2429 : tensor<32x13x13xf32>, tensor<32x13x128xf32>) outs(%2431 : tensor<32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x128xf32>
    %2433 = "tosa.reshape"(%2432) {new_shape = array<i64: 1, 32, 13, 128>} : (tensor<32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %2434 = tensor.empty() : tensor<1x13x32x128xf32>
    %2435 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2433 : tensor<1x32x13x128xf32>) outs(%2434 : tensor<1x13x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x32x128xf32>
    %extracted_slice_482 = tensor.extract_slice %2435[0, 0, 0, 0] [1, 13, 32, 128] [1, 1, 1, 1] : tensor<1x13x32x128xf32> to tensor<1x13x32x128xf32>
    %2436 = "tosa.reshape"(%extracted_slice_482) {new_shape = array<i64: 1, 13, 4096>} : (tensor<1x13x32x128xf32>) -> tensor<1x13x4096xf32>
    %2437 = tensor.empty() : tensor<4096x4096xf32>
    %2438 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg167 : tensor<4096x4096xf32>) outs(%2437 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2439 = "tosa.reshape"(%2436) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %2440 = tensor.empty() : tensor<13x4096xf32>
    %2441 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2440 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %2442 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2439, %2438 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%2441 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %2443 = "tosa.reshape"(%2442) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %2444 = "tosa.add"(%2320, %2443) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %2445 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_483 = arith.constant 2 : i32
    %2446 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2444 : tensor<1x13x4096xf32>) outs(%2445 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_483 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_484 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %2447 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2446 : tensor<1x13x4096xf32>) outs(%cst_484 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_485 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2448 = "tosa.add"(%2447, %cst_485) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %2449 = tensor.empty() : tensor<1x13x1xf32>
    %2450 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2448 : tensor<1x13x1xf32>) outs(%2449 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %2451 = tensor.empty() : tensor<1x13x4096xf32>
    %2452 = tensor.empty() : tensor<1x13x4096xf32>
    %2453 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2450 : tensor<1x13x1xf32>) outs(%2452 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %2454 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2444, %2453 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%2451 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %2455 = tensor.empty() : tensor<1x13x4096xf32>
    %2456 = tensor.empty() : tensor<1x13x4096xf32>
    %2457 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg29 : tensor<4096xf32>) outs(%2456 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %2458 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2457, %2454 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%2455 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %2459 = tensor.empty() : tensor<4096x11008xf32>
    %2460 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg168 : tensor<11008x4096xf32>) outs(%2459 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2461 = "tosa.reshape"(%2458) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %2462 = tensor.empty() : tensor<13x11008xf32>
    %2463 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2462 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %2464 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2461, %2460 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%2463 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %2465 = "tosa.reshape"(%2464) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %2466 = tensor.empty() : tensor<1x13x11008xf32>
    %2467 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2465 : tensor<1x13x11008xf32>) outs(%2466 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      %5295 = math.exp %5294 : f32
      %cst_999 = arith.constant 1.000000e+00 : f32
      %5296 = arith.addf %cst_999, %5295 : f32
      %5297 = arith.divf %in, %5296 : f32
      linalg.yield %5297 : f32
    } -> tensor<1x13x11008xf32>
    %2468 = tensor.empty() : tensor<4096x11008xf32>
    %2469 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg169 : tensor<11008x4096xf32>) outs(%2468 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2470 = "tosa.reshape"(%2458) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %2471 = tensor.empty() : tensor<13x11008xf32>
    %2472 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2471 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %2473 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2470, %2469 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%2472 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %2474 = "tosa.reshape"(%2473) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %2475 = tensor.empty() : tensor<1x13x11008xf32>
    %2476 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2467, %2474 : tensor<1x13x11008xf32>, tensor<1x13x11008xf32>) outs(%2475 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x11008xf32>
    %2477 = tensor.empty() : tensor<11008x4096xf32>
    %2478 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg170 : tensor<4096x11008xf32>) outs(%2477 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %2479 = "tosa.reshape"(%2476) {new_shape = array<i64: 13, 11008>} : (tensor<1x13x11008xf32>) -> tensor<13x11008xf32>
    %2480 = tensor.empty() : tensor<13x4096xf32>
    %2481 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2480 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %2482 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2479, %2478 : tensor<13x11008xf32>, tensor<11008x4096xf32>) outs(%2481 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %2483 = "tosa.reshape"(%2482) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %2484 = "tosa.add"(%2444, %2483) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %2485 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_486 = arith.constant 2 : i32
    %2486 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2484 : tensor<1x13x4096xf32>) outs(%2485 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_486 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_487 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %2487 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2486 : tensor<1x13x4096xf32>) outs(%cst_487 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_488 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2488 = "tosa.add"(%2487, %cst_488) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %2489 = tensor.empty() : tensor<1x13x1xf32>
    %2490 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2488 : tensor<1x13x1xf32>) outs(%2489 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %2491 = tensor.empty() : tensor<1x13x4096xf32>
    %2492 = tensor.empty() : tensor<1x13x4096xf32>
    %2493 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2490 : tensor<1x13x1xf32>) outs(%2492 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %2494 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2484, %2493 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%2491 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %2495 = tensor.empty() : tensor<1x13x4096xf32>
    %2496 = tensor.empty() : tensor<1x13x4096xf32>
    %2497 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg30 : tensor<4096xf32>) outs(%2496 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %2498 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2497, %2494 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%2495 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %2499 = tensor.empty() : tensor<4096x4096xf32>
    %2500 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg171 : tensor<4096x4096xf32>) outs(%2499 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2501 = "tosa.reshape"(%2498) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %2502 = tensor.empty() : tensor<13x4096xf32>
    %2503 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2502 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %2504 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2501, %2500 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%2503 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %2505 = "tosa.reshape"(%2504) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %2506 = tensor.empty() : tensor<4096x4096xf32>
    %2507 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg172 : tensor<4096x4096xf32>) outs(%2506 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2508 = "tosa.reshape"(%2498) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %2509 = tensor.empty() : tensor<13x4096xf32>
    %2510 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2509 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %2511 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2508, %2507 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%2510 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %2512 = "tosa.reshape"(%2511) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %2513 = tensor.empty() : tensor<4096x4096xf32>
    %2514 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg173 : tensor<4096x4096xf32>) outs(%2513 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2515 = "tosa.reshape"(%2498) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %2516 = tensor.empty() : tensor<13x4096xf32>
    %2517 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2516 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %2518 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2515, %2514 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%2517 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %2519 = "tosa.reshape"(%2518) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %2520 = "tosa.reshape"(%2505) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %2521 = tensor.empty() : tensor<1x32x13x128xf32>
    %2522 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2520 : tensor<1x13x32x128xf32>) outs(%2521 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %2523 = "tosa.reshape"(%2512) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %2524 = tensor.empty() : tensor<1x32x13x128xf32>
    %2525 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2523 : tensor<1x13x32x128xf32>) outs(%2524 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %2526 = "tosa.reshape"(%2519) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %2527 = tensor.empty() : tensor<1x32x13x128xf32>
    %2528 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2526 : tensor<1x13x32x128xf32>) outs(%2527 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_489 = tensor.extract_slice %arg321[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_490 = tensor.extract_slice %extracted_slice_489[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_491 = tensor.extract_slice %extracted_slice_490[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %extracted_slice_492 = tensor.extract_slice %arg322[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_493 = tensor.extract_slice %extracted_slice_492[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_494 = tensor.extract_slice %extracted_slice_493[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %2529 = tensor.empty() : tensor<1x13x128xf32>
    %2530 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_491 : tensor<1x1x13x128xf32>) outs(%2529 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %2531 = tensor.empty() : tensor<13x128xf32>
    %2532 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%2530 : tensor<1x13x128xf32>) outs(%2531 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %2533 = tensor.empty() : tensor<1x13x128xf32>
    %2534 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_494 : tensor<1x1x13x128xf32>) outs(%2533 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %2535 = tensor.empty() : tensor<13x128xf32>
    %2536 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%2534 : tensor<1x13x128xf32>) outs(%2535 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %2537 = tensor.empty() : tensor<1x13x128xf32>
    %2538 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%2537 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %2532[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %2539 = "tosa.reshape"(%2538) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %2540 = tensor.empty() : tensor<1x13x128xf32>
    %2541 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%2540 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %2536[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %2542 = "tosa.reshape"(%2541) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %2543 = tensor.empty() : tensor<1x32x13x128xf32>
    %2544 = tensor.empty() : tensor<1x32x13x128xf32>
    %2545 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2539 : tensor<1x1x13x128xf32>) outs(%2544 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %2546 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2522, %2545 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%2543 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_495 = tensor.extract_slice %2522[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_496 = tensor.extract_slice %2522[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %2547 = tensor.empty() : tensor<1x32x13x64xf32>
    %2548 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_496 : tensor<1x32x13x64xf32>) outs(%2547 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %2549 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_497 = tensor.insert_slice %2548 into %2549[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_498 = tensor.insert_slice %extracted_slice_495 into %inserted_slice_497[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %2550 = tensor.empty() : tensor<1x32x13x128xf32>
    %2551 = tensor.empty() : tensor<1x32x13x128xf32>
    %2552 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2542 : tensor<1x1x13x128xf32>) outs(%2551 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %2553 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_498, %2552 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%2550 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %2554 = "tosa.add"(%2546, %2553) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %2555 = tensor.empty() : tensor<1x32x13x128xf32>
    %2556 = tensor.empty() : tensor<1x32x13x128xf32>
    %2557 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2539 : tensor<1x1x13x128xf32>) outs(%2556 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %2558 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2525, %2557 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%2555 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_499 = tensor.extract_slice %2525[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_500 = tensor.extract_slice %2525[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %2559 = tensor.empty() : tensor<1x32x13x64xf32>
    %2560 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_500 : tensor<1x32x13x64xf32>) outs(%2559 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %2561 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_501 = tensor.insert_slice %2560 into %2561[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_502 = tensor.insert_slice %extracted_slice_499 into %inserted_slice_501[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %2562 = tensor.empty() : tensor<1x32x13x128xf32>
    %2563 = tensor.empty() : tensor<1x32x13x128xf32>
    %2564 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2542 : tensor<1x1x13x128xf32>) outs(%2563 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %2565 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_502, %2564 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%2562 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %2566 = "tosa.add"(%2558, %2565) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %2567 = tensor.empty() : tensor<1x32x128x13xf32>
    %2568 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2566 : tensor<1x32x13x128xf32>) outs(%2567 : tensor<1x32x128x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x13xf32>
    %2569 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_503 = tensor.extract_slice %2554[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_504 = tensor.insert_slice %extracted_slice_503 into %2569[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %2570 = "tosa.reshape"(%inserted_slice_504) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %2571 = tensor.empty() : tensor<1x32x128x13xf32>
    %extracted_slice_505 = tensor.extract_slice %2568[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> to tensor<1x32x128x13xf32>
    %inserted_slice_506 = tensor.insert_slice %extracted_slice_505 into %2571[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> into tensor<1x32x128x13xf32>
    %2572 = "tosa.reshape"(%inserted_slice_506) {new_shape = array<i64: 32, 128, 13>} : (tensor<1x32x128x13xf32>) -> tensor<32x128x13xf32>
    %2573 = tensor.empty() : tensor<32x13x13xf32>
    %2574 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%2573 : tensor<32x13x13xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x13xf32>
    %2575 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2570, %2572 : tensor<32x13x128xf32>, tensor<32x128x13xf32>) outs(%2574 : tensor<32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x13xf32>
    %2576 = "tosa.reshape"(%2575) {new_shape = array<i64: 1, 32, 13, 13>} : (tensor<32x13x13xf32>) -> tensor<1x32x13x13xf32>
    %cst_507 = arith.constant 11.3137083 : f32
    %2577 = tensor.empty() : tensor<1x32x13x13xf32>
    %2578 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2576 : tensor<1x32x13x13xf32>) outs(%2577 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.divf %in, %cst_507 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %2579 = "tosa.add"(%2578, %24) : (tensor<1x32x13x13xf32>, tensor<1x1x13x13xf32>) -> tensor<1x32x13x13xf32>
    %2580 = tensor.empty() : tensor<1x32x13x1xf32>
    %2581 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2580 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %2582 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2579 : tensor<1x32x13x13xf32>) outs(%2580 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.maxf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %2583 = tensor.empty() : tensor<1x32x13x13xf32>
    %2584 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2579, %2582 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%2583 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.subf %in, %in_999 : f32
      %5295 = math.exp %5294 : f32
      linalg.yield %5295 : f32
    } -> tensor<1x32x13x13xf32>
    %2585 = tensor.empty() : tensor<1x32x13x1xf32>
    %2586 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2585 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %2587 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2584 : tensor<1x32x13x13xf32>) outs(%2586 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %2588 = tensor.empty() : tensor<1x32x13x13xf32>
    %2589 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2584, %2587 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%2588 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.divf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %2590 = tensor.empty() : tensor<1x32x13x13xf32>
    %extracted_slice_508 = tensor.extract_slice %2589[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> to tensor<1x32x13x13xf32>
    %inserted_slice_509 = tensor.insert_slice %extracted_slice_508 into %2590[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> into tensor<1x32x13x13xf32>
    %2591 = "tosa.reshape"(%inserted_slice_509) {new_shape = array<i64: 32, 13, 13>} : (tensor<1x32x13x13xf32>) -> tensor<32x13x13xf32>
    %2592 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_510 = tensor.extract_slice %2528[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_511 = tensor.insert_slice %extracted_slice_510 into %2592[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %2593 = "tosa.reshape"(%inserted_slice_511) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %2594 = tensor.empty() : tensor<32x13x128xf32>
    %2595 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%2594 : tensor<32x13x128xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x128xf32>
    %2596 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2591, %2593 : tensor<32x13x13xf32>, tensor<32x13x128xf32>) outs(%2595 : tensor<32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x128xf32>
    %2597 = "tosa.reshape"(%2596) {new_shape = array<i64: 1, 32, 13, 128>} : (tensor<32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %2598 = tensor.empty() : tensor<1x13x32x128xf32>
    %2599 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2597 : tensor<1x32x13x128xf32>) outs(%2598 : tensor<1x13x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x32x128xf32>
    %extracted_slice_512 = tensor.extract_slice %2599[0, 0, 0, 0] [1, 13, 32, 128] [1, 1, 1, 1] : tensor<1x13x32x128xf32> to tensor<1x13x32x128xf32>
    %2600 = "tosa.reshape"(%extracted_slice_512) {new_shape = array<i64: 1, 13, 4096>} : (tensor<1x13x32x128xf32>) -> tensor<1x13x4096xf32>
    %2601 = tensor.empty() : tensor<4096x4096xf32>
    %2602 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg174 : tensor<4096x4096xf32>) outs(%2601 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2603 = "tosa.reshape"(%2600) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %2604 = tensor.empty() : tensor<13x4096xf32>
    %2605 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2604 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %2606 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2603, %2602 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%2605 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %2607 = "tosa.reshape"(%2606) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %2608 = "tosa.add"(%2484, %2607) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %2609 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_513 = arith.constant 2 : i32
    %2610 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2608 : tensor<1x13x4096xf32>) outs(%2609 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_513 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_514 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %2611 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2610 : tensor<1x13x4096xf32>) outs(%cst_514 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_515 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2612 = "tosa.add"(%2611, %cst_515) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %2613 = tensor.empty() : tensor<1x13x1xf32>
    %2614 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2612 : tensor<1x13x1xf32>) outs(%2613 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %2615 = tensor.empty() : tensor<1x13x4096xf32>
    %2616 = tensor.empty() : tensor<1x13x4096xf32>
    %2617 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2614 : tensor<1x13x1xf32>) outs(%2616 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %2618 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2608, %2617 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%2615 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %2619 = tensor.empty() : tensor<1x13x4096xf32>
    %2620 = tensor.empty() : tensor<1x13x4096xf32>
    %2621 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg31 : tensor<4096xf32>) outs(%2620 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %2622 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2621, %2618 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%2619 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %2623 = tensor.empty() : tensor<4096x11008xf32>
    %2624 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg175 : tensor<11008x4096xf32>) outs(%2623 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2625 = "tosa.reshape"(%2622) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %2626 = tensor.empty() : tensor<13x11008xf32>
    %2627 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2626 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %2628 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2625, %2624 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%2627 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %2629 = "tosa.reshape"(%2628) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %2630 = tensor.empty() : tensor<1x13x11008xf32>
    %2631 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2629 : tensor<1x13x11008xf32>) outs(%2630 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      %5295 = math.exp %5294 : f32
      %cst_999 = arith.constant 1.000000e+00 : f32
      %5296 = arith.addf %cst_999, %5295 : f32
      %5297 = arith.divf %in, %5296 : f32
      linalg.yield %5297 : f32
    } -> tensor<1x13x11008xf32>
    %2632 = tensor.empty() : tensor<4096x11008xf32>
    %2633 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg176 : tensor<11008x4096xf32>) outs(%2632 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2634 = "tosa.reshape"(%2622) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %2635 = tensor.empty() : tensor<13x11008xf32>
    %2636 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2635 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %2637 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2634, %2633 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%2636 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %2638 = "tosa.reshape"(%2637) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %2639 = tensor.empty() : tensor<1x13x11008xf32>
    %2640 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2631, %2638 : tensor<1x13x11008xf32>, tensor<1x13x11008xf32>) outs(%2639 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x11008xf32>
    %2641 = tensor.empty() : tensor<11008x4096xf32>
    %2642 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg177 : tensor<4096x11008xf32>) outs(%2641 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %2643 = "tosa.reshape"(%2640) {new_shape = array<i64: 13, 11008>} : (tensor<1x13x11008xf32>) -> tensor<13x11008xf32>
    %2644 = tensor.empty() : tensor<13x4096xf32>
    %2645 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2644 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %2646 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2643, %2642 : tensor<13x11008xf32>, tensor<11008x4096xf32>) outs(%2645 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %2647 = "tosa.reshape"(%2646) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %2648 = "tosa.add"(%2608, %2647) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %2649 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_516 = arith.constant 2 : i32
    %2650 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2648 : tensor<1x13x4096xf32>) outs(%2649 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_516 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_517 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %2651 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2650 : tensor<1x13x4096xf32>) outs(%cst_517 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_518 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2652 = "tosa.add"(%2651, %cst_518) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %2653 = tensor.empty() : tensor<1x13x1xf32>
    %2654 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2652 : tensor<1x13x1xf32>) outs(%2653 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %2655 = tensor.empty() : tensor<1x13x4096xf32>
    %2656 = tensor.empty() : tensor<1x13x4096xf32>
    %2657 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2654 : tensor<1x13x1xf32>) outs(%2656 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %2658 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2648, %2657 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%2655 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %2659 = tensor.empty() : tensor<1x13x4096xf32>
    %2660 = tensor.empty() : tensor<1x13x4096xf32>
    %2661 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg32 : tensor<4096xf32>) outs(%2660 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %2662 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2661, %2658 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%2659 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %2663 = tensor.empty() : tensor<4096x4096xf32>
    %2664 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg178 : tensor<4096x4096xf32>) outs(%2663 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2665 = "tosa.reshape"(%2662) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %2666 = tensor.empty() : tensor<13x4096xf32>
    %2667 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2666 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %2668 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2665, %2664 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%2667 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %2669 = "tosa.reshape"(%2668) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %2670 = tensor.empty() : tensor<4096x4096xf32>
    %2671 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg179 : tensor<4096x4096xf32>) outs(%2670 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2672 = "tosa.reshape"(%2662) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %2673 = tensor.empty() : tensor<13x4096xf32>
    %2674 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2673 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %2675 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2672, %2671 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%2674 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %2676 = "tosa.reshape"(%2675) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %2677 = tensor.empty() : tensor<4096x4096xf32>
    %2678 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg180 : tensor<4096x4096xf32>) outs(%2677 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2679 = "tosa.reshape"(%2662) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %2680 = tensor.empty() : tensor<13x4096xf32>
    %2681 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2680 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %2682 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2679, %2678 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%2681 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %2683 = "tosa.reshape"(%2682) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %2684 = "tosa.reshape"(%2669) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %2685 = tensor.empty() : tensor<1x32x13x128xf32>
    %2686 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2684 : tensor<1x13x32x128xf32>) outs(%2685 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %2687 = "tosa.reshape"(%2676) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %2688 = tensor.empty() : tensor<1x32x13x128xf32>
    %2689 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2687 : tensor<1x13x32x128xf32>) outs(%2688 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %2690 = "tosa.reshape"(%2683) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %2691 = tensor.empty() : tensor<1x32x13x128xf32>
    %2692 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2690 : tensor<1x13x32x128xf32>) outs(%2691 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_519 = tensor.extract_slice %arg323[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_520 = tensor.extract_slice %extracted_slice_519[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_521 = tensor.extract_slice %extracted_slice_520[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %extracted_slice_522 = tensor.extract_slice %arg324[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_523 = tensor.extract_slice %extracted_slice_522[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_524 = tensor.extract_slice %extracted_slice_523[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %2693 = tensor.empty() : tensor<1x13x128xf32>
    %2694 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_521 : tensor<1x1x13x128xf32>) outs(%2693 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %2695 = tensor.empty() : tensor<13x128xf32>
    %2696 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%2694 : tensor<1x13x128xf32>) outs(%2695 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %2697 = tensor.empty() : tensor<1x13x128xf32>
    %2698 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_524 : tensor<1x1x13x128xf32>) outs(%2697 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %2699 = tensor.empty() : tensor<13x128xf32>
    %2700 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%2698 : tensor<1x13x128xf32>) outs(%2699 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %2701 = tensor.empty() : tensor<1x13x128xf32>
    %2702 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%2701 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %2696[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %2703 = "tosa.reshape"(%2702) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %2704 = tensor.empty() : tensor<1x13x128xf32>
    %2705 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%2704 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %2700[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %2706 = "tosa.reshape"(%2705) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %2707 = tensor.empty() : tensor<1x32x13x128xf32>
    %2708 = tensor.empty() : tensor<1x32x13x128xf32>
    %2709 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2703 : tensor<1x1x13x128xf32>) outs(%2708 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %2710 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2686, %2709 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%2707 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_525 = tensor.extract_slice %2686[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_526 = tensor.extract_slice %2686[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %2711 = tensor.empty() : tensor<1x32x13x64xf32>
    %2712 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_526 : tensor<1x32x13x64xf32>) outs(%2711 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %2713 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_527 = tensor.insert_slice %2712 into %2713[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_528 = tensor.insert_slice %extracted_slice_525 into %inserted_slice_527[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %2714 = tensor.empty() : tensor<1x32x13x128xf32>
    %2715 = tensor.empty() : tensor<1x32x13x128xf32>
    %2716 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2706 : tensor<1x1x13x128xf32>) outs(%2715 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %2717 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_528, %2716 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%2714 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %2718 = "tosa.add"(%2710, %2717) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %2719 = tensor.empty() : tensor<1x32x13x128xf32>
    %2720 = tensor.empty() : tensor<1x32x13x128xf32>
    %2721 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2703 : tensor<1x1x13x128xf32>) outs(%2720 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %2722 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2689, %2721 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%2719 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_529 = tensor.extract_slice %2689[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_530 = tensor.extract_slice %2689[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %2723 = tensor.empty() : tensor<1x32x13x64xf32>
    %2724 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_530 : tensor<1x32x13x64xf32>) outs(%2723 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %2725 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_531 = tensor.insert_slice %2724 into %2725[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_532 = tensor.insert_slice %extracted_slice_529 into %inserted_slice_531[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %2726 = tensor.empty() : tensor<1x32x13x128xf32>
    %2727 = tensor.empty() : tensor<1x32x13x128xf32>
    %2728 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2706 : tensor<1x1x13x128xf32>) outs(%2727 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %2729 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_532, %2728 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%2726 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %2730 = "tosa.add"(%2722, %2729) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %2731 = tensor.empty() : tensor<1x32x128x13xf32>
    %2732 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2730 : tensor<1x32x13x128xf32>) outs(%2731 : tensor<1x32x128x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x13xf32>
    %2733 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_533 = tensor.extract_slice %2718[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_534 = tensor.insert_slice %extracted_slice_533 into %2733[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %2734 = "tosa.reshape"(%inserted_slice_534) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %2735 = tensor.empty() : tensor<1x32x128x13xf32>
    %extracted_slice_535 = tensor.extract_slice %2732[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> to tensor<1x32x128x13xf32>
    %inserted_slice_536 = tensor.insert_slice %extracted_slice_535 into %2735[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> into tensor<1x32x128x13xf32>
    %2736 = "tosa.reshape"(%inserted_slice_536) {new_shape = array<i64: 32, 128, 13>} : (tensor<1x32x128x13xf32>) -> tensor<32x128x13xf32>
    %2737 = tensor.empty() : tensor<32x13x13xf32>
    %2738 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%2737 : tensor<32x13x13xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x13xf32>
    %2739 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2734, %2736 : tensor<32x13x128xf32>, tensor<32x128x13xf32>) outs(%2738 : tensor<32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x13xf32>
    %2740 = "tosa.reshape"(%2739) {new_shape = array<i64: 1, 32, 13, 13>} : (tensor<32x13x13xf32>) -> tensor<1x32x13x13xf32>
    %cst_537 = arith.constant 11.3137083 : f32
    %2741 = tensor.empty() : tensor<1x32x13x13xf32>
    %2742 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2740 : tensor<1x32x13x13xf32>) outs(%2741 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.divf %in, %cst_537 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %2743 = "tosa.add"(%2742, %24) : (tensor<1x32x13x13xf32>, tensor<1x1x13x13xf32>) -> tensor<1x32x13x13xf32>
    %2744 = tensor.empty() : tensor<1x32x13x1xf32>
    %2745 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2744 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %2746 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2743 : tensor<1x32x13x13xf32>) outs(%2744 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.maxf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %2747 = tensor.empty() : tensor<1x32x13x13xf32>
    %2748 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2743, %2746 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%2747 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.subf %in, %in_999 : f32
      %5295 = math.exp %5294 : f32
      linalg.yield %5295 : f32
    } -> tensor<1x32x13x13xf32>
    %2749 = tensor.empty() : tensor<1x32x13x1xf32>
    %2750 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2749 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %2751 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2748 : tensor<1x32x13x13xf32>) outs(%2750 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %2752 = tensor.empty() : tensor<1x32x13x13xf32>
    %2753 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2748, %2751 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%2752 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.divf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %2754 = tensor.empty() : tensor<1x32x13x13xf32>
    %extracted_slice_538 = tensor.extract_slice %2753[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> to tensor<1x32x13x13xf32>
    %inserted_slice_539 = tensor.insert_slice %extracted_slice_538 into %2754[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> into tensor<1x32x13x13xf32>
    %2755 = "tosa.reshape"(%inserted_slice_539) {new_shape = array<i64: 32, 13, 13>} : (tensor<1x32x13x13xf32>) -> tensor<32x13x13xf32>
    %2756 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_540 = tensor.extract_slice %2692[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_541 = tensor.insert_slice %extracted_slice_540 into %2756[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %2757 = "tosa.reshape"(%inserted_slice_541) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %2758 = tensor.empty() : tensor<32x13x128xf32>
    %2759 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%2758 : tensor<32x13x128xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x128xf32>
    %2760 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2755, %2757 : tensor<32x13x13xf32>, tensor<32x13x128xf32>) outs(%2759 : tensor<32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x128xf32>
    %2761 = "tosa.reshape"(%2760) {new_shape = array<i64: 1, 32, 13, 128>} : (tensor<32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %2762 = tensor.empty() : tensor<1x13x32x128xf32>
    %2763 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2761 : tensor<1x32x13x128xf32>) outs(%2762 : tensor<1x13x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x32x128xf32>
    %extracted_slice_542 = tensor.extract_slice %2763[0, 0, 0, 0] [1, 13, 32, 128] [1, 1, 1, 1] : tensor<1x13x32x128xf32> to tensor<1x13x32x128xf32>
    %2764 = "tosa.reshape"(%extracted_slice_542) {new_shape = array<i64: 1, 13, 4096>} : (tensor<1x13x32x128xf32>) -> tensor<1x13x4096xf32>
    %2765 = tensor.empty() : tensor<4096x4096xf32>
    %2766 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg181 : tensor<4096x4096xf32>) outs(%2765 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2767 = "tosa.reshape"(%2764) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %2768 = tensor.empty() : tensor<13x4096xf32>
    %2769 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2768 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %2770 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2767, %2766 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%2769 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %2771 = "tosa.reshape"(%2770) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %2772 = "tosa.add"(%2648, %2771) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %2773 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_543 = arith.constant 2 : i32
    %2774 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2772 : tensor<1x13x4096xf32>) outs(%2773 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_543 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_544 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %2775 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2774 : tensor<1x13x4096xf32>) outs(%cst_544 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_545 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2776 = "tosa.add"(%2775, %cst_545) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %2777 = tensor.empty() : tensor<1x13x1xf32>
    %2778 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2776 : tensor<1x13x1xf32>) outs(%2777 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %2779 = tensor.empty() : tensor<1x13x4096xf32>
    %2780 = tensor.empty() : tensor<1x13x4096xf32>
    %2781 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2778 : tensor<1x13x1xf32>) outs(%2780 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %2782 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2772, %2781 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%2779 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %2783 = tensor.empty() : tensor<1x13x4096xf32>
    %2784 = tensor.empty() : tensor<1x13x4096xf32>
    %2785 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg33 : tensor<4096xf32>) outs(%2784 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %2786 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2785, %2782 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%2783 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %2787 = tensor.empty() : tensor<4096x11008xf32>
    %2788 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg182 : tensor<11008x4096xf32>) outs(%2787 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2789 = "tosa.reshape"(%2786) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %2790 = tensor.empty() : tensor<13x11008xf32>
    %2791 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2790 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %2792 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2789, %2788 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%2791 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %2793 = "tosa.reshape"(%2792) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %2794 = tensor.empty() : tensor<1x13x11008xf32>
    %2795 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2793 : tensor<1x13x11008xf32>) outs(%2794 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      %5295 = math.exp %5294 : f32
      %cst_999 = arith.constant 1.000000e+00 : f32
      %5296 = arith.addf %cst_999, %5295 : f32
      %5297 = arith.divf %in, %5296 : f32
      linalg.yield %5297 : f32
    } -> tensor<1x13x11008xf32>
    %2796 = tensor.empty() : tensor<4096x11008xf32>
    %2797 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg183 : tensor<11008x4096xf32>) outs(%2796 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2798 = "tosa.reshape"(%2786) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %2799 = tensor.empty() : tensor<13x11008xf32>
    %2800 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2799 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %2801 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2798, %2797 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%2800 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %2802 = "tosa.reshape"(%2801) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %2803 = tensor.empty() : tensor<1x13x11008xf32>
    %2804 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2795, %2802 : tensor<1x13x11008xf32>, tensor<1x13x11008xf32>) outs(%2803 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x11008xf32>
    %2805 = tensor.empty() : tensor<11008x4096xf32>
    %2806 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg184 : tensor<4096x11008xf32>) outs(%2805 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %2807 = "tosa.reshape"(%2804) {new_shape = array<i64: 13, 11008>} : (tensor<1x13x11008xf32>) -> tensor<13x11008xf32>
    %2808 = tensor.empty() : tensor<13x4096xf32>
    %2809 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2808 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %2810 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2807, %2806 : tensor<13x11008xf32>, tensor<11008x4096xf32>) outs(%2809 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %2811 = "tosa.reshape"(%2810) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %2812 = "tosa.add"(%2772, %2811) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %2813 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_546 = arith.constant 2 : i32
    %2814 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2812 : tensor<1x13x4096xf32>) outs(%2813 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_546 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_547 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %2815 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2814 : tensor<1x13x4096xf32>) outs(%cst_547 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_548 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2816 = "tosa.add"(%2815, %cst_548) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %2817 = tensor.empty() : tensor<1x13x1xf32>
    %2818 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2816 : tensor<1x13x1xf32>) outs(%2817 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %2819 = tensor.empty() : tensor<1x13x4096xf32>
    %2820 = tensor.empty() : tensor<1x13x4096xf32>
    %2821 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2818 : tensor<1x13x1xf32>) outs(%2820 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %2822 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2812, %2821 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%2819 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %2823 = tensor.empty() : tensor<1x13x4096xf32>
    %2824 = tensor.empty() : tensor<1x13x4096xf32>
    %2825 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg34 : tensor<4096xf32>) outs(%2824 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %2826 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2825, %2822 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%2823 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %2827 = tensor.empty() : tensor<4096x4096xf32>
    %2828 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg185 : tensor<4096x4096xf32>) outs(%2827 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2829 = "tosa.reshape"(%2826) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %2830 = tensor.empty() : tensor<13x4096xf32>
    %2831 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2830 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %2832 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2829, %2828 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%2831 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %2833 = "tosa.reshape"(%2832) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %2834 = tensor.empty() : tensor<4096x4096xf32>
    %2835 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg186 : tensor<4096x4096xf32>) outs(%2834 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2836 = "tosa.reshape"(%2826) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %2837 = tensor.empty() : tensor<13x4096xf32>
    %2838 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2837 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %2839 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2836, %2835 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%2838 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %2840 = "tosa.reshape"(%2839) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %2841 = tensor.empty() : tensor<4096x4096xf32>
    %2842 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg187 : tensor<4096x4096xf32>) outs(%2841 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2843 = "tosa.reshape"(%2826) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %2844 = tensor.empty() : tensor<13x4096xf32>
    %2845 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2844 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %2846 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2843, %2842 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%2845 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %2847 = "tosa.reshape"(%2846) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %2848 = "tosa.reshape"(%2833) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %2849 = tensor.empty() : tensor<1x32x13x128xf32>
    %2850 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2848 : tensor<1x13x32x128xf32>) outs(%2849 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %2851 = "tosa.reshape"(%2840) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %2852 = tensor.empty() : tensor<1x32x13x128xf32>
    %2853 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2851 : tensor<1x13x32x128xf32>) outs(%2852 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %2854 = "tosa.reshape"(%2847) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %2855 = tensor.empty() : tensor<1x32x13x128xf32>
    %2856 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2854 : tensor<1x13x32x128xf32>) outs(%2855 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_549 = tensor.extract_slice %arg325[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_550 = tensor.extract_slice %extracted_slice_549[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_551 = tensor.extract_slice %extracted_slice_550[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %extracted_slice_552 = tensor.extract_slice %arg326[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_553 = tensor.extract_slice %extracted_slice_552[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_554 = tensor.extract_slice %extracted_slice_553[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %2857 = tensor.empty() : tensor<1x13x128xf32>
    %2858 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_551 : tensor<1x1x13x128xf32>) outs(%2857 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %2859 = tensor.empty() : tensor<13x128xf32>
    %2860 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%2858 : tensor<1x13x128xf32>) outs(%2859 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %2861 = tensor.empty() : tensor<1x13x128xf32>
    %2862 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_554 : tensor<1x1x13x128xf32>) outs(%2861 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %2863 = tensor.empty() : tensor<13x128xf32>
    %2864 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%2862 : tensor<1x13x128xf32>) outs(%2863 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %2865 = tensor.empty() : tensor<1x13x128xf32>
    %2866 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%2865 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %2860[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %2867 = "tosa.reshape"(%2866) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %2868 = tensor.empty() : tensor<1x13x128xf32>
    %2869 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%2868 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %2864[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %2870 = "tosa.reshape"(%2869) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %2871 = tensor.empty() : tensor<1x32x13x128xf32>
    %2872 = tensor.empty() : tensor<1x32x13x128xf32>
    %2873 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2867 : tensor<1x1x13x128xf32>) outs(%2872 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %2874 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2850, %2873 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%2871 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_555 = tensor.extract_slice %2850[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_556 = tensor.extract_slice %2850[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %2875 = tensor.empty() : tensor<1x32x13x64xf32>
    %2876 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_556 : tensor<1x32x13x64xf32>) outs(%2875 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %2877 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_557 = tensor.insert_slice %2876 into %2877[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_558 = tensor.insert_slice %extracted_slice_555 into %inserted_slice_557[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %2878 = tensor.empty() : tensor<1x32x13x128xf32>
    %2879 = tensor.empty() : tensor<1x32x13x128xf32>
    %2880 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2870 : tensor<1x1x13x128xf32>) outs(%2879 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %2881 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_558, %2880 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%2878 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %2882 = "tosa.add"(%2874, %2881) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %2883 = tensor.empty() : tensor<1x32x13x128xf32>
    %2884 = tensor.empty() : tensor<1x32x13x128xf32>
    %2885 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2867 : tensor<1x1x13x128xf32>) outs(%2884 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %2886 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2853, %2885 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%2883 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_559 = tensor.extract_slice %2853[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_560 = tensor.extract_slice %2853[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %2887 = tensor.empty() : tensor<1x32x13x64xf32>
    %2888 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_560 : tensor<1x32x13x64xf32>) outs(%2887 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %2889 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_561 = tensor.insert_slice %2888 into %2889[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_562 = tensor.insert_slice %extracted_slice_559 into %inserted_slice_561[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %2890 = tensor.empty() : tensor<1x32x13x128xf32>
    %2891 = tensor.empty() : tensor<1x32x13x128xf32>
    %2892 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%2870 : tensor<1x1x13x128xf32>) outs(%2891 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %2893 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_562, %2892 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%2890 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %2894 = "tosa.add"(%2886, %2893) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %2895 = tensor.empty() : tensor<1x32x128x13xf32>
    %2896 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2894 : tensor<1x32x13x128xf32>) outs(%2895 : tensor<1x32x128x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x13xf32>
    %2897 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_563 = tensor.extract_slice %2882[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_564 = tensor.insert_slice %extracted_slice_563 into %2897[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %2898 = "tosa.reshape"(%inserted_slice_564) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %2899 = tensor.empty() : tensor<1x32x128x13xf32>
    %extracted_slice_565 = tensor.extract_slice %2896[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> to tensor<1x32x128x13xf32>
    %inserted_slice_566 = tensor.insert_slice %extracted_slice_565 into %2899[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> into tensor<1x32x128x13xf32>
    %2900 = "tosa.reshape"(%inserted_slice_566) {new_shape = array<i64: 32, 128, 13>} : (tensor<1x32x128x13xf32>) -> tensor<32x128x13xf32>
    %2901 = tensor.empty() : tensor<32x13x13xf32>
    %2902 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%2901 : tensor<32x13x13xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x13xf32>
    %2903 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2898, %2900 : tensor<32x13x128xf32>, tensor<32x128x13xf32>) outs(%2902 : tensor<32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x13xf32>
    %2904 = "tosa.reshape"(%2903) {new_shape = array<i64: 1, 32, 13, 13>} : (tensor<32x13x13xf32>) -> tensor<1x32x13x13xf32>
    %cst_567 = arith.constant 11.3137083 : f32
    %2905 = tensor.empty() : tensor<1x32x13x13xf32>
    %2906 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2904 : tensor<1x32x13x13xf32>) outs(%2905 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.divf %in, %cst_567 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %2907 = "tosa.add"(%2906, %24) : (tensor<1x32x13x13xf32>, tensor<1x1x13x13xf32>) -> tensor<1x32x13x13xf32>
    %2908 = tensor.empty() : tensor<1x32x13x1xf32>
    %2909 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2908 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %2910 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2907 : tensor<1x32x13x13xf32>) outs(%2908 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.maxf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %2911 = tensor.empty() : tensor<1x32x13x13xf32>
    %2912 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2907, %2910 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%2911 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.subf %in, %in_999 : f32
      %5295 = math.exp %5294 : f32
      linalg.yield %5295 : f32
    } -> tensor<1x32x13x13xf32>
    %2913 = tensor.empty() : tensor<1x32x13x1xf32>
    %2914 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%2913 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %2915 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2912 : tensor<1x32x13x13xf32>) outs(%2914 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %2916 = tensor.empty() : tensor<1x32x13x13xf32>
    %2917 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2912, %2915 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%2916 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.divf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %2918 = tensor.empty() : tensor<1x32x13x13xf32>
    %extracted_slice_568 = tensor.extract_slice %2917[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> to tensor<1x32x13x13xf32>
    %inserted_slice_569 = tensor.insert_slice %extracted_slice_568 into %2918[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> into tensor<1x32x13x13xf32>
    %2919 = "tosa.reshape"(%inserted_slice_569) {new_shape = array<i64: 32, 13, 13>} : (tensor<1x32x13x13xf32>) -> tensor<32x13x13xf32>
    %2920 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_570 = tensor.extract_slice %2856[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_571 = tensor.insert_slice %extracted_slice_570 into %2920[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %2921 = "tosa.reshape"(%inserted_slice_571) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %2922 = tensor.empty() : tensor<32x13x128xf32>
    %2923 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%2922 : tensor<32x13x128xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x128xf32>
    %2924 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2919, %2921 : tensor<32x13x13xf32>, tensor<32x13x128xf32>) outs(%2923 : tensor<32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x128xf32>
    %2925 = "tosa.reshape"(%2924) {new_shape = array<i64: 1, 32, 13, 128>} : (tensor<32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %2926 = tensor.empty() : tensor<1x13x32x128xf32>
    %2927 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2925 : tensor<1x32x13x128xf32>) outs(%2926 : tensor<1x13x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x32x128xf32>
    %extracted_slice_572 = tensor.extract_slice %2927[0, 0, 0, 0] [1, 13, 32, 128] [1, 1, 1, 1] : tensor<1x13x32x128xf32> to tensor<1x13x32x128xf32>
    %2928 = "tosa.reshape"(%extracted_slice_572) {new_shape = array<i64: 1, 13, 4096>} : (tensor<1x13x32x128xf32>) -> tensor<1x13x4096xf32>
    %2929 = tensor.empty() : tensor<4096x4096xf32>
    %2930 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg188 : tensor<4096x4096xf32>) outs(%2929 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2931 = "tosa.reshape"(%2928) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %2932 = tensor.empty() : tensor<13x4096xf32>
    %2933 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2932 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %2934 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2931, %2930 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%2933 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %2935 = "tosa.reshape"(%2934) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %2936 = "tosa.add"(%2812, %2935) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %2937 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_573 = arith.constant 2 : i32
    %2938 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2936 : tensor<1x13x4096xf32>) outs(%2937 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_573 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_574 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %2939 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2938 : tensor<1x13x4096xf32>) outs(%cst_574 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_575 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2940 = "tosa.add"(%2939, %cst_575) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %2941 = tensor.empty() : tensor<1x13x1xf32>
    %2942 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2940 : tensor<1x13x1xf32>) outs(%2941 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %2943 = tensor.empty() : tensor<1x13x4096xf32>
    %2944 = tensor.empty() : tensor<1x13x4096xf32>
    %2945 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2942 : tensor<1x13x1xf32>) outs(%2944 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %2946 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2936, %2945 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%2943 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %2947 = tensor.empty() : tensor<1x13x4096xf32>
    %2948 = tensor.empty() : tensor<1x13x4096xf32>
    %2949 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg35 : tensor<4096xf32>) outs(%2948 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %2950 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2949, %2946 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%2947 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %2951 = tensor.empty() : tensor<4096x11008xf32>
    %2952 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg189 : tensor<11008x4096xf32>) outs(%2951 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2953 = "tosa.reshape"(%2950) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %2954 = tensor.empty() : tensor<13x11008xf32>
    %2955 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2954 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %2956 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2953, %2952 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%2955 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %2957 = "tosa.reshape"(%2956) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %2958 = tensor.empty() : tensor<1x13x11008xf32>
    %2959 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2957 : tensor<1x13x11008xf32>) outs(%2958 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      %5295 = math.exp %5294 : f32
      %cst_999 = arith.constant 1.000000e+00 : f32
      %5296 = arith.addf %cst_999, %5295 : f32
      %5297 = arith.divf %in, %5296 : f32
      linalg.yield %5297 : f32
    } -> tensor<1x13x11008xf32>
    %2960 = tensor.empty() : tensor<4096x11008xf32>
    %2961 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg190 : tensor<11008x4096xf32>) outs(%2960 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %2962 = "tosa.reshape"(%2950) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %2963 = tensor.empty() : tensor<13x11008xf32>
    %2964 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2963 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %2965 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2962, %2961 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%2964 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %2966 = "tosa.reshape"(%2965) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %2967 = tensor.empty() : tensor<1x13x11008xf32>
    %2968 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2959, %2966 : tensor<1x13x11008xf32>, tensor<1x13x11008xf32>) outs(%2967 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x11008xf32>
    %2969 = tensor.empty() : tensor<11008x4096xf32>
    %2970 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg191 : tensor<4096x11008xf32>) outs(%2969 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %2971 = "tosa.reshape"(%2968) {new_shape = array<i64: 13, 11008>} : (tensor<1x13x11008xf32>) -> tensor<13x11008xf32>
    %2972 = tensor.empty() : tensor<13x4096xf32>
    %2973 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2972 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %2974 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2971, %2970 : tensor<13x11008xf32>, tensor<11008x4096xf32>) outs(%2973 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %2975 = "tosa.reshape"(%2974) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %2976 = "tosa.add"(%2936, %2975) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %2977 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_576 = arith.constant 2 : i32
    %2978 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2976 : tensor<1x13x4096xf32>) outs(%2977 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_576 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_577 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %2979 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%2978 : tensor<1x13x4096xf32>) outs(%cst_577 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_578 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %2980 = "tosa.add"(%2979, %cst_578) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %2981 = tensor.empty() : tensor<1x13x1xf32>
    %2982 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2980 : tensor<1x13x1xf32>) outs(%2981 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %2983 = tensor.empty() : tensor<1x13x4096xf32>
    %2984 = tensor.empty() : tensor<1x13x4096xf32>
    %2985 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2982 : tensor<1x13x1xf32>) outs(%2984 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %2986 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2976, %2985 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%2983 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %2987 = tensor.empty() : tensor<1x13x4096xf32>
    %2988 = tensor.empty() : tensor<1x13x4096xf32>
    %2989 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg36 : tensor<4096xf32>) outs(%2988 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %2990 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2989, %2986 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%2987 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %2991 = tensor.empty() : tensor<4096x4096xf32>
    %2992 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg192 : tensor<4096x4096xf32>) outs(%2991 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %2993 = "tosa.reshape"(%2990) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %2994 = tensor.empty() : tensor<13x4096xf32>
    %2995 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%2994 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %2996 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2993, %2992 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%2995 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %2997 = "tosa.reshape"(%2996) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %2998 = tensor.empty() : tensor<4096x4096xf32>
    %2999 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg193 : tensor<4096x4096xf32>) outs(%2998 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3000 = "tosa.reshape"(%2990) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %3001 = tensor.empty() : tensor<13x4096xf32>
    %3002 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3001 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %3003 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3000, %2999 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%3002 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %3004 = "tosa.reshape"(%3003) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %3005 = tensor.empty() : tensor<4096x4096xf32>
    %3006 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg194 : tensor<4096x4096xf32>) outs(%3005 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3007 = "tosa.reshape"(%2990) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %3008 = tensor.empty() : tensor<13x4096xf32>
    %3009 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3008 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %3010 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3007, %3006 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%3009 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %3011 = "tosa.reshape"(%3010) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %3012 = "tosa.reshape"(%2997) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %3013 = tensor.empty() : tensor<1x32x13x128xf32>
    %3014 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3012 : tensor<1x13x32x128xf32>) outs(%3013 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %3015 = "tosa.reshape"(%3004) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %3016 = tensor.empty() : tensor<1x32x13x128xf32>
    %3017 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3015 : tensor<1x13x32x128xf32>) outs(%3016 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %3018 = "tosa.reshape"(%3011) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %3019 = tensor.empty() : tensor<1x32x13x128xf32>
    %3020 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3018 : tensor<1x13x32x128xf32>) outs(%3019 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_579 = tensor.extract_slice %arg327[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_580 = tensor.extract_slice %extracted_slice_579[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_581 = tensor.extract_slice %extracted_slice_580[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %extracted_slice_582 = tensor.extract_slice %arg328[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_583 = tensor.extract_slice %extracted_slice_582[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_584 = tensor.extract_slice %extracted_slice_583[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %3021 = tensor.empty() : tensor<1x13x128xf32>
    %3022 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_581 : tensor<1x1x13x128xf32>) outs(%3021 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %3023 = tensor.empty() : tensor<13x128xf32>
    %3024 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%3022 : tensor<1x13x128xf32>) outs(%3023 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %3025 = tensor.empty() : tensor<1x13x128xf32>
    %3026 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_584 : tensor<1x1x13x128xf32>) outs(%3025 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %3027 = tensor.empty() : tensor<13x128xf32>
    %3028 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%3026 : tensor<1x13x128xf32>) outs(%3027 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %3029 = tensor.empty() : tensor<1x13x128xf32>
    %3030 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%3029 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %3024[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %3031 = "tosa.reshape"(%3030) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %3032 = tensor.empty() : tensor<1x13x128xf32>
    %3033 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%3032 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %3028[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %3034 = "tosa.reshape"(%3033) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %3035 = tensor.empty() : tensor<1x32x13x128xf32>
    %3036 = tensor.empty() : tensor<1x32x13x128xf32>
    %3037 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3031 : tensor<1x1x13x128xf32>) outs(%3036 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %3038 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3014, %3037 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%3035 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_585 = tensor.extract_slice %3014[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_586 = tensor.extract_slice %3014[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %3039 = tensor.empty() : tensor<1x32x13x64xf32>
    %3040 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_586 : tensor<1x32x13x64xf32>) outs(%3039 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %3041 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_587 = tensor.insert_slice %3040 into %3041[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_588 = tensor.insert_slice %extracted_slice_585 into %inserted_slice_587[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %3042 = tensor.empty() : tensor<1x32x13x128xf32>
    %3043 = tensor.empty() : tensor<1x32x13x128xf32>
    %3044 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3034 : tensor<1x1x13x128xf32>) outs(%3043 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %3045 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_588, %3044 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%3042 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %3046 = "tosa.add"(%3038, %3045) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %3047 = tensor.empty() : tensor<1x32x13x128xf32>
    %3048 = tensor.empty() : tensor<1x32x13x128xf32>
    %3049 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3031 : tensor<1x1x13x128xf32>) outs(%3048 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %3050 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3017, %3049 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%3047 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_589 = tensor.extract_slice %3017[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_590 = tensor.extract_slice %3017[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %3051 = tensor.empty() : tensor<1x32x13x64xf32>
    %3052 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_590 : tensor<1x32x13x64xf32>) outs(%3051 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %3053 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_591 = tensor.insert_slice %3052 into %3053[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_592 = tensor.insert_slice %extracted_slice_589 into %inserted_slice_591[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %3054 = tensor.empty() : tensor<1x32x13x128xf32>
    %3055 = tensor.empty() : tensor<1x32x13x128xf32>
    %3056 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3034 : tensor<1x1x13x128xf32>) outs(%3055 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %3057 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_592, %3056 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%3054 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %3058 = "tosa.add"(%3050, %3057) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %3059 = tensor.empty() : tensor<1x32x128x13xf32>
    %3060 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3058 : tensor<1x32x13x128xf32>) outs(%3059 : tensor<1x32x128x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x13xf32>
    %3061 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_593 = tensor.extract_slice %3046[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_594 = tensor.insert_slice %extracted_slice_593 into %3061[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %3062 = "tosa.reshape"(%inserted_slice_594) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %3063 = tensor.empty() : tensor<1x32x128x13xf32>
    %extracted_slice_595 = tensor.extract_slice %3060[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> to tensor<1x32x128x13xf32>
    %inserted_slice_596 = tensor.insert_slice %extracted_slice_595 into %3063[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> into tensor<1x32x128x13xf32>
    %3064 = "tosa.reshape"(%inserted_slice_596) {new_shape = array<i64: 32, 128, 13>} : (tensor<1x32x128x13xf32>) -> tensor<32x128x13xf32>
    %3065 = tensor.empty() : tensor<32x13x13xf32>
    %3066 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%3065 : tensor<32x13x13xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x13xf32>
    %3067 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3062, %3064 : tensor<32x13x128xf32>, tensor<32x128x13xf32>) outs(%3066 : tensor<32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x13xf32>
    %3068 = "tosa.reshape"(%3067) {new_shape = array<i64: 1, 32, 13, 13>} : (tensor<32x13x13xf32>) -> tensor<1x32x13x13xf32>
    %cst_597 = arith.constant 11.3137083 : f32
    %3069 = tensor.empty() : tensor<1x32x13x13xf32>
    %3070 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3068 : tensor<1x32x13x13xf32>) outs(%3069 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.divf %in, %cst_597 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %3071 = "tosa.add"(%3070, %24) : (tensor<1x32x13x13xf32>, tensor<1x1x13x13xf32>) -> tensor<1x32x13x13xf32>
    %3072 = tensor.empty() : tensor<1x32x13x1xf32>
    %3073 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3072 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %3074 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3071 : tensor<1x32x13x13xf32>) outs(%3072 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.maxf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %3075 = tensor.empty() : tensor<1x32x13x13xf32>
    %3076 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3071, %3074 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%3075 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.subf %in, %in_999 : f32
      %5295 = math.exp %5294 : f32
      linalg.yield %5295 : f32
    } -> tensor<1x32x13x13xf32>
    %3077 = tensor.empty() : tensor<1x32x13x1xf32>
    %3078 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3077 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %3079 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3076 : tensor<1x32x13x13xf32>) outs(%3078 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %3080 = tensor.empty() : tensor<1x32x13x13xf32>
    %3081 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3076, %3079 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%3080 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.divf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %3082 = tensor.empty() : tensor<1x32x13x13xf32>
    %extracted_slice_598 = tensor.extract_slice %3081[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> to tensor<1x32x13x13xf32>
    %inserted_slice_599 = tensor.insert_slice %extracted_slice_598 into %3082[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> into tensor<1x32x13x13xf32>
    %3083 = "tosa.reshape"(%inserted_slice_599) {new_shape = array<i64: 32, 13, 13>} : (tensor<1x32x13x13xf32>) -> tensor<32x13x13xf32>
    %3084 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_600 = tensor.extract_slice %3020[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_601 = tensor.insert_slice %extracted_slice_600 into %3084[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %3085 = "tosa.reshape"(%inserted_slice_601) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %3086 = tensor.empty() : tensor<32x13x128xf32>
    %3087 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%3086 : tensor<32x13x128xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x128xf32>
    %3088 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3083, %3085 : tensor<32x13x13xf32>, tensor<32x13x128xf32>) outs(%3087 : tensor<32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x128xf32>
    %3089 = "tosa.reshape"(%3088) {new_shape = array<i64: 1, 32, 13, 128>} : (tensor<32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %3090 = tensor.empty() : tensor<1x13x32x128xf32>
    %3091 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3089 : tensor<1x32x13x128xf32>) outs(%3090 : tensor<1x13x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x32x128xf32>
    %extracted_slice_602 = tensor.extract_slice %3091[0, 0, 0, 0] [1, 13, 32, 128] [1, 1, 1, 1] : tensor<1x13x32x128xf32> to tensor<1x13x32x128xf32>
    %3092 = "tosa.reshape"(%extracted_slice_602) {new_shape = array<i64: 1, 13, 4096>} : (tensor<1x13x32x128xf32>) -> tensor<1x13x4096xf32>
    %3093 = tensor.empty() : tensor<4096x4096xf32>
    %3094 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg195 : tensor<4096x4096xf32>) outs(%3093 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3095 = "tosa.reshape"(%3092) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %3096 = tensor.empty() : tensor<13x4096xf32>
    %3097 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3096 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %3098 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3095, %3094 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%3097 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %3099 = "tosa.reshape"(%3098) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %3100 = "tosa.add"(%2976, %3099) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %3101 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_603 = arith.constant 2 : i32
    %3102 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3100 : tensor<1x13x4096xf32>) outs(%3101 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_603 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_604 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %3103 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%3102 : tensor<1x13x4096xf32>) outs(%cst_604 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_605 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %3104 = "tosa.add"(%3103, %cst_605) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %3105 = tensor.empty() : tensor<1x13x1xf32>
    %3106 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3104 : tensor<1x13x1xf32>) outs(%3105 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %3107 = tensor.empty() : tensor<1x13x4096xf32>
    %3108 = tensor.empty() : tensor<1x13x4096xf32>
    %3109 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3106 : tensor<1x13x1xf32>) outs(%3108 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %3110 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3100, %3109 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%3107 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %3111 = tensor.empty() : tensor<1x13x4096xf32>
    %3112 = tensor.empty() : tensor<1x13x4096xf32>
    %3113 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg37 : tensor<4096xf32>) outs(%3112 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %3114 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3113, %3110 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%3111 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %3115 = tensor.empty() : tensor<4096x11008xf32>
    %3116 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg196 : tensor<11008x4096xf32>) outs(%3115 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3117 = "tosa.reshape"(%3114) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %3118 = tensor.empty() : tensor<13x11008xf32>
    %3119 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3118 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %3120 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3117, %3116 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%3119 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %3121 = "tosa.reshape"(%3120) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %3122 = tensor.empty() : tensor<1x13x11008xf32>
    %3123 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3121 : tensor<1x13x11008xf32>) outs(%3122 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      %5295 = math.exp %5294 : f32
      %cst_999 = arith.constant 1.000000e+00 : f32
      %5296 = arith.addf %cst_999, %5295 : f32
      %5297 = arith.divf %in, %5296 : f32
      linalg.yield %5297 : f32
    } -> tensor<1x13x11008xf32>
    %3124 = tensor.empty() : tensor<4096x11008xf32>
    %3125 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg197 : tensor<11008x4096xf32>) outs(%3124 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3126 = "tosa.reshape"(%3114) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %3127 = tensor.empty() : tensor<13x11008xf32>
    %3128 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3127 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %3129 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3126, %3125 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%3128 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %3130 = "tosa.reshape"(%3129) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %3131 = tensor.empty() : tensor<1x13x11008xf32>
    %3132 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3123, %3130 : tensor<1x13x11008xf32>, tensor<1x13x11008xf32>) outs(%3131 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x11008xf32>
    %3133 = tensor.empty() : tensor<11008x4096xf32>
    %3134 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg198 : tensor<4096x11008xf32>) outs(%3133 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %3135 = "tosa.reshape"(%3132) {new_shape = array<i64: 13, 11008>} : (tensor<1x13x11008xf32>) -> tensor<13x11008xf32>
    %3136 = tensor.empty() : tensor<13x4096xf32>
    %3137 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3136 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %3138 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3135, %3134 : tensor<13x11008xf32>, tensor<11008x4096xf32>) outs(%3137 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %3139 = "tosa.reshape"(%3138) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %3140 = "tosa.add"(%3100, %3139) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %3141 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_606 = arith.constant 2 : i32
    %3142 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3140 : tensor<1x13x4096xf32>) outs(%3141 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_606 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_607 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %3143 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%3142 : tensor<1x13x4096xf32>) outs(%cst_607 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_608 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %3144 = "tosa.add"(%3143, %cst_608) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %3145 = tensor.empty() : tensor<1x13x1xf32>
    %3146 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3144 : tensor<1x13x1xf32>) outs(%3145 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %3147 = tensor.empty() : tensor<1x13x4096xf32>
    %3148 = tensor.empty() : tensor<1x13x4096xf32>
    %3149 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3146 : tensor<1x13x1xf32>) outs(%3148 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %3150 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3140, %3149 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%3147 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %3151 = tensor.empty() : tensor<1x13x4096xf32>
    %3152 = tensor.empty() : tensor<1x13x4096xf32>
    %3153 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg38 : tensor<4096xf32>) outs(%3152 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %3154 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3153, %3150 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%3151 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %3155 = tensor.empty() : tensor<4096x4096xf32>
    %3156 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg199 : tensor<4096x4096xf32>) outs(%3155 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3157 = "tosa.reshape"(%3154) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %3158 = tensor.empty() : tensor<13x4096xf32>
    %3159 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3158 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %3160 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3157, %3156 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%3159 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %3161 = "tosa.reshape"(%3160) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %3162 = tensor.empty() : tensor<4096x4096xf32>
    %3163 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg200 : tensor<4096x4096xf32>) outs(%3162 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3164 = "tosa.reshape"(%3154) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %3165 = tensor.empty() : tensor<13x4096xf32>
    %3166 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3165 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %3167 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3164, %3163 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%3166 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %3168 = "tosa.reshape"(%3167) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %3169 = tensor.empty() : tensor<4096x4096xf32>
    %3170 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg201 : tensor<4096x4096xf32>) outs(%3169 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3171 = "tosa.reshape"(%3154) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %3172 = tensor.empty() : tensor<13x4096xf32>
    %3173 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3172 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %3174 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3171, %3170 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%3173 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %3175 = "tosa.reshape"(%3174) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %3176 = "tosa.reshape"(%3161) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %3177 = tensor.empty() : tensor<1x32x13x128xf32>
    %3178 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3176 : tensor<1x13x32x128xf32>) outs(%3177 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %3179 = "tosa.reshape"(%3168) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %3180 = tensor.empty() : tensor<1x32x13x128xf32>
    %3181 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3179 : tensor<1x13x32x128xf32>) outs(%3180 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %3182 = "tosa.reshape"(%3175) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %3183 = tensor.empty() : tensor<1x32x13x128xf32>
    %3184 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3182 : tensor<1x13x32x128xf32>) outs(%3183 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_609 = tensor.extract_slice %arg329[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_610 = tensor.extract_slice %extracted_slice_609[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_611 = tensor.extract_slice %extracted_slice_610[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %extracted_slice_612 = tensor.extract_slice %arg330[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_613 = tensor.extract_slice %extracted_slice_612[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_614 = tensor.extract_slice %extracted_slice_613[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %3185 = tensor.empty() : tensor<1x13x128xf32>
    %3186 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_611 : tensor<1x1x13x128xf32>) outs(%3185 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %3187 = tensor.empty() : tensor<13x128xf32>
    %3188 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%3186 : tensor<1x13x128xf32>) outs(%3187 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %3189 = tensor.empty() : tensor<1x13x128xf32>
    %3190 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_614 : tensor<1x1x13x128xf32>) outs(%3189 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %3191 = tensor.empty() : tensor<13x128xf32>
    %3192 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%3190 : tensor<1x13x128xf32>) outs(%3191 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %3193 = tensor.empty() : tensor<1x13x128xf32>
    %3194 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%3193 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %3188[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %3195 = "tosa.reshape"(%3194) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %3196 = tensor.empty() : tensor<1x13x128xf32>
    %3197 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%3196 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %3192[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %3198 = "tosa.reshape"(%3197) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %3199 = tensor.empty() : tensor<1x32x13x128xf32>
    %3200 = tensor.empty() : tensor<1x32x13x128xf32>
    %3201 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3195 : tensor<1x1x13x128xf32>) outs(%3200 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %3202 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3178, %3201 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%3199 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_615 = tensor.extract_slice %3178[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_616 = tensor.extract_slice %3178[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %3203 = tensor.empty() : tensor<1x32x13x64xf32>
    %3204 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_616 : tensor<1x32x13x64xf32>) outs(%3203 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %3205 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_617 = tensor.insert_slice %3204 into %3205[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_618 = tensor.insert_slice %extracted_slice_615 into %inserted_slice_617[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %3206 = tensor.empty() : tensor<1x32x13x128xf32>
    %3207 = tensor.empty() : tensor<1x32x13x128xf32>
    %3208 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3198 : tensor<1x1x13x128xf32>) outs(%3207 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %3209 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_618, %3208 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%3206 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %3210 = "tosa.add"(%3202, %3209) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %3211 = tensor.empty() : tensor<1x32x13x128xf32>
    %3212 = tensor.empty() : tensor<1x32x13x128xf32>
    %3213 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3195 : tensor<1x1x13x128xf32>) outs(%3212 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %3214 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3181, %3213 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%3211 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_619 = tensor.extract_slice %3181[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_620 = tensor.extract_slice %3181[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %3215 = tensor.empty() : tensor<1x32x13x64xf32>
    %3216 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_620 : tensor<1x32x13x64xf32>) outs(%3215 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %3217 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_621 = tensor.insert_slice %3216 into %3217[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_622 = tensor.insert_slice %extracted_slice_619 into %inserted_slice_621[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %3218 = tensor.empty() : tensor<1x32x13x128xf32>
    %3219 = tensor.empty() : tensor<1x32x13x128xf32>
    %3220 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3198 : tensor<1x1x13x128xf32>) outs(%3219 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %3221 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_622, %3220 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%3218 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %3222 = "tosa.add"(%3214, %3221) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %3223 = tensor.empty() : tensor<1x32x128x13xf32>
    %3224 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3222 : tensor<1x32x13x128xf32>) outs(%3223 : tensor<1x32x128x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x13xf32>
    %3225 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_623 = tensor.extract_slice %3210[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_624 = tensor.insert_slice %extracted_slice_623 into %3225[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %3226 = "tosa.reshape"(%inserted_slice_624) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %3227 = tensor.empty() : tensor<1x32x128x13xf32>
    %extracted_slice_625 = tensor.extract_slice %3224[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> to tensor<1x32x128x13xf32>
    %inserted_slice_626 = tensor.insert_slice %extracted_slice_625 into %3227[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> into tensor<1x32x128x13xf32>
    %3228 = "tosa.reshape"(%inserted_slice_626) {new_shape = array<i64: 32, 128, 13>} : (tensor<1x32x128x13xf32>) -> tensor<32x128x13xf32>
    %3229 = tensor.empty() : tensor<32x13x13xf32>
    %3230 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%3229 : tensor<32x13x13xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x13xf32>
    %3231 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3226, %3228 : tensor<32x13x128xf32>, tensor<32x128x13xf32>) outs(%3230 : tensor<32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x13xf32>
    %3232 = "tosa.reshape"(%3231) {new_shape = array<i64: 1, 32, 13, 13>} : (tensor<32x13x13xf32>) -> tensor<1x32x13x13xf32>
    %cst_627 = arith.constant 11.3137083 : f32
    %3233 = tensor.empty() : tensor<1x32x13x13xf32>
    %3234 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3232 : tensor<1x32x13x13xf32>) outs(%3233 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.divf %in, %cst_627 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %3235 = "tosa.add"(%3234, %24) : (tensor<1x32x13x13xf32>, tensor<1x1x13x13xf32>) -> tensor<1x32x13x13xf32>
    %3236 = tensor.empty() : tensor<1x32x13x1xf32>
    %3237 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3236 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %3238 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3235 : tensor<1x32x13x13xf32>) outs(%3236 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.maxf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %3239 = tensor.empty() : tensor<1x32x13x13xf32>
    %3240 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3235, %3238 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%3239 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.subf %in, %in_999 : f32
      %5295 = math.exp %5294 : f32
      linalg.yield %5295 : f32
    } -> tensor<1x32x13x13xf32>
    %3241 = tensor.empty() : tensor<1x32x13x1xf32>
    %3242 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3241 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %3243 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3240 : tensor<1x32x13x13xf32>) outs(%3242 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %3244 = tensor.empty() : tensor<1x32x13x13xf32>
    %3245 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3240, %3243 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%3244 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.divf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %3246 = tensor.empty() : tensor<1x32x13x13xf32>
    %extracted_slice_628 = tensor.extract_slice %3245[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> to tensor<1x32x13x13xf32>
    %inserted_slice_629 = tensor.insert_slice %extracted_slice_628 into %3246[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> into tensor<1x32x13x13xf32>
    %3247 = "tosa.reshape"(%inserted_slice_629) {new_shape = array<i64: 32, 13, 13>} : (tensor<1x32x13x13xf32>) -> tensor<32x13x13xf32>
    %3248 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_630 = tensor.extract_slice %3184[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_631 = tensor.insert_slice %extracted_slice_630 into %3248[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %3249 = "tosa.reshape"(%inserted_slice_631) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %3250 = tensor.empty() : tensor<32x13x128xf32>
    %3251 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%3250 : tensor<32x13x128xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x128xf32>
    %3252 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3247, %3249 : tensor<32x13x13xf32>, tensor<32x13x128xf32>) outs(%3251 : tensor<32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x128xf32>
    %3253 = "tosa.reshape"(%3252) {new_shape = array<i64: 1, 32, 13, 128>} : (tensor<32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %3254 = tensor.empty() : tensor<1x13x32x128xf32>
    %3255 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3253 : tensor<1x32x13x128xf32>) outs(%3254 : tensor<1x13x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x32x128xf32>
    %extracted_slice_632 = tensor.extract_slice %3255[0, 0, 0, 0] [1, 13, 32, 128] [1, 1, 1, 1] : tensor<1x13x32x128xf32> to tensor<1x13x32x128xf32>
    %3256 = "tosa.reshape"(%extracted_slice_632) {new_shape = array<i64: 1, 13, 4096>} : (tensor<1x13x32x128xf32>) -> tensor<1x13x4096xf32>
    %3257 = tensor.empty() : tensor<4096x4096xf32>
    %3258 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg202 : tensor<4096x4096xf32>) outs(%3257 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3259 = "tosa.reshape"(%3256) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %3260 = tensor.empty() : tensor<13x4096xf32>
    %3261 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3260 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %3262 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3259, %3258 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%3261 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %3263 = "tosa.reshape"(%3262) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %3264 = "tosa.add"(%3140, %3263) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %3265 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_633 = arith.constant 2 : i32
    %3266 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3264 : tensor<1x13x4096xf32>) outs(%3265 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_633 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_634 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %3267 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%3266 : tensor<1x13x4096xf32>) outs(%cst_634 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_635 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %3268 = "tosa.add"(%3267, %cst_635) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %3269 = tensor.empty() : tensor<1x13x1xf32>
    %3270 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3268 : tensor<1x13x1xf32>) outs(%3269 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %3271 = tensor.empty() : tensor<1x13x4096xf32>
    %3272 = tensor.empty() : tensor<1x13x4096xf32>
    %3273 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3270 : tensor<1x13x1xf32>) outs(%3272 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %3274 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3264, %3273 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%3271 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %3275 = tensor.empty() : tensor<1x13x4096xf32>
    %3276 = tensor.empty() : tensor<1x13x4096xf32>
    %3277 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg39 : tensor<4096xf32>) outs(%3276 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %3278 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3277, %3274 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%3275 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %3279 = tensor.empty() : tensor<4096x11008xf32>
    %3280 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg203 : tensor<11008x4096xf32>) outs(%3279 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3281 = "tosa.reshape"(%3278) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %3282 = tensor.empty() : tensor<13x11008xf32>
    %3283 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3282 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %3284 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3281, %3280 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%3283 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %3285 = "tosa.reshape"(%3284) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %3286 = tensor.empty() : tensor<1x13x11008xf32>
    %3287 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3285 : tensor<1x13x11008xf32>) outs(%3286 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      %5295 = math.exp %5294 : f32
      %cst_999 = arith.constant 1.000000e+00 : f32
      %5296 = arith.addf %cst_999, %5295 : f32
      %5297 = arith.divf %in, %5296 : f32
      linalg.yield %5297 : f32
    } -> tensor<1x13x11008xf32>
    %3288 = tensor.empty() : tensor<4096x11008xf32>
    %3289 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg204 : tensor<11008x4096xf32>) outs(%3288 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3290 = "tosa.reshape"(%3278) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %3291 = tensor.empty() : tensor<13x11008xf32>
    %3292 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3291 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %3293 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3290, %3289 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%3292 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %3294 = "tosa.reshape"(%3293) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %3295 = tensor.empty() : tensor<1x13x11008xf32>
    %3296 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3287, %3294 : tensor<1x13x11008xf32>, tensor<1x13x11008xf32>) outs(%3295 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x11008xf32>
    %3297 = tensor.empty() : tensor<11008x4096xf32>
    %3298 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg205 : tensor<4096x11008xf32>) outs(%3297 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %3299 = "tosa.reshape"(%3296) {new_shape = array<i64: 13, 11008>} : (tensor<1x13x11008xf32>) -> tensor<13x11008xf32>
    %3300 = tensor.empty() : tensor<13x4096xf32>
    %3301 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3300 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %3302 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3299, %3298 : tensor<13x11008xf32>, tensor<11008x4096xf32>) outs(%3301 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %3303 = "tosa.reshape"(%3302) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %3304 = "tosa.add"(%3264, %3303) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %3305 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_636 = arith.constant 2 : i32
    %3306 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3304 : tensor<1x13x4096xf32>) outs(%3305 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_636 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_637 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %3307 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%3306 : tensor<1x13x4096xf32>) outs(%cst_637 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_638 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %3308 = "tosa.add"(%3307, %cst_638) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %3309 = tensor.empty() : tensor<1x13x1xf32>
    %3310 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3308 : tensor<1x13x1xf32>) outs(%3309 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %3311 = tensor.empty() : tensor<1x13x4096xf32>
    %3312 = tensor.empty() : tensor<1x13x4096xf32>
    %3313 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3310 : tensor<1x13x1xf32>) outs(%3312 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %3314 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3304, %3313 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%3311 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %3315 = tensor.empty() : tensor<1x13x4096xf32>
    %3316 = tensor.empty() : tensor<1x13x4096xf32>
    %3317 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg40 : tensor<4096xf32>) outs(%3316 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %3318 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3317, %3314 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%3315 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %3319 = tensor.empty() : tensor<4096x4096xf32>
    %3320 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg206 : tensor<4096x4096xf32>) outs(%3319 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3321 = "tosa.reshape"(%3318) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %3322 = tensor.empty() : tensor<13x4096xf32>
    %3323 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3322 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %3324 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3321, %3320 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%3323 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %3325 = "tosa.reshape"(%3324) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %3326 = tensor.empty() : tensor<4096x4096xf32>
    %3327 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg207 : tensor<4096x4096xf32>) outs(%3326 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3328 = "tosa.reshape"(%3318) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %3329 = tensor.empty() : tensor<13x4096xf32>
    %3330 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3329 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %3331 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3328, %3327 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%3330 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %3332 = "tosa.reshape"(%3331) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %3333 = tensor.empty() : tensor<4096x4096xf32>
    %3334 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg208 : tensor<4096x4096xf32>) outs(%3333 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3335 = "tosa.reshape"(%3318) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %3336 = tensor.empty() : tensor<13x4096xf32>
    %3337 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3336 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %3338 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3335, %3334 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%3337 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %3339 = "tosa.reshape"(%3338) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %3340 = "tosa.reshape"(%3325) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %3341 = tensor.empty() : tensor<1x32x13x128xf32>
    %3342 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3340 : tensor<1x13x32x128xf32>) outs(%3341 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %3343 = "tosa.reshape"(%3332) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %3344 = tensor.empty() : tensor<1x32x13x128xf32>
    %3345 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3343 : tensor<1x13x32x128xf32>) outs(%3344 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %3346 = "tosa.reshape"(%3339) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %3347 = tensor.empty() : tensor<1x32x13x128xf32>
    %3348 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3346 : tensor<1x13x32x128xf32>) outs(%3347 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_639 = tensor.extract_slice %arg331[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_640 = tensor.extract_slice %extracted_slice_639[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_641 = tensor.extract_slice %extracted_slice_640[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %extracted_slice_642 = tensor.extract_slice %arg332[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_643 = tensor.extract_slice %extracted_slice_642[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_644 = tensor.extract_slice %extracted_slice_643[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %3349 = tensor.empty() : tensor<1x13x128xf32>
    %3350 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_641 : tensor<1x1x13x128xf32>) outs(%3349 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %3351 = tensor.empty() : tensor<13x128xf32>
    %3352 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%3350 : tensor<1x13x128xf32>) outs(%3351 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %3353 = tensor.empty() : tensor<1x13x128xf32>
    %3354 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_644 : tensor<1x1x13x128xf32>) outs(%3353 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %3355 = tensor.empty() : tensor<13x128xf32>
    %3356 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%3354 : tensor<1x13x128xf32>) outs(%3355 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %3357 = tensor.empty() : tensor<1x13x128xf32>
    %3358 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%3357 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %3352[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %3359 = "tosa.reshape"(%3358) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %3360 = tensor.empty() : tensor<1x13x128xf32>
    %3361 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%3360 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %3356[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %3362 = "tosa.reshape"(%3361) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %3363 = tensor.empty() : tensor<1x32x13x128xf32>
    %3364 = tensor.empty() : tensor<1x32x13x128xf32>
    %3365 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3359 : tensor<1x1x13x128xf32>) outs(%3364 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %3366 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3342, %3365 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%3363 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_645 = tensor.extract_slice %3342[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_646 = tensor.extract_slice %3342[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %3367 = tensor.empty() : tensor<1x32x13x64xf32>
    %3368 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_646 : tensor<1x32x13x64xf32>) outs(%3367 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %3369 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_647 = tensor.insert_slice %3368 into %3369[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_648 = tensor.insert_slice %extracted_slice_645 into %inserted_slice_647[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %3370 = tensor.empty() : tensor<1x32x13x128xf32>
    %3371 = tensor.empty() : tensor<1x32x13x128xf32>
    %3372 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3362 : tensor<1x1x13x128xf32>) outs(%3371 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %3373 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_648, %3372 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%3370 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %3374 = "tosa.add"(%3366, %3373) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %3375 = tensor.empty() : tensor<1x32x13x128xf32>
    %3376 = tensor.empty() : tensor<1x32x13x128xf32>
    %3377 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3359 : tensor<1x1x13x128xf32>) outs(%3376 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %3378 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3345, %3377 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%3375 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_649 = tensor.extract_slice %3345[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_650 = tensor.extract_slice %3345[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %3379 = tensor.empty() : tensor<1x32x13x64xf32>
    %3380 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_650 : tensor<1x32x13x64xf32>) outs(%3379 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %3381 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_651 = tensor.insert_slice %3380 into %3381[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_652 = tensor.insert_slice %extracted_slice_649 into %inserted_slice_651[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %3382 = tensor.empty() : tensor<1x32x13x128xf32>
    %3383 = tensor.empty() : tensor<1x32x13x128xf32>
    %3384 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3362 : tensor<1x1x13x128xf32>) outs(%3383 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %3385 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_652, %3384 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%3382 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %3386 = "tosa.add"(%3378, %3385) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %3387 = tensor.empty() : tensor<1x32x128x13xf32>
    %3388 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3386 : tensor<1x32x13x128xf32>) outs(%3387 : tensor<1x32x128x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x13xf32>
    %3389 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_653 = tensor.extract_slice %3374[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_654 = tensor.insert_slice %extracted_slice_653 into %3389[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %3390 = "tosa.reshape"(%inserted_slice_654) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %3391 = tensor.empty() : tensor<1x32x128x13xf32>
    %extracted_slice_655 = tensor.extract_slice %3388[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> to tensor<1x32x128x13xf32>
    %inserted_slice_656 = tensor.insert_slice %extracted_slice_655 into %3391[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> into tensor<1x32x128x13xf32>
    %3392 = "tosa.reshape"(%inserted_slice_656) {new_shape = array<i64: 32, 128, 13>} : (tensor<1x32x128x13xf32>) -> tensor<32x128x13xf32>
    %3393 = tensor.empty() : tensor<32x13x13xf32>
    %3394 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%3393 : tensor<32x13x13xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x13xf32>
    %3395 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3390, %3392 : tensor<32x13x128xf32>, tensor<32x128x13xf32>) outs(%3394 : tensor<32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x13xf32>
    %3396 = "tosa.reshape"(%3395) {new_shape = array<i64: 1, 32, 13, 13>} : (tensor<32x13x13xf32>) -> tensor<1x32x13x13xf32>
    %cst_657 = arith.constant 11.3137083 : f32
    %3397 = tensor.empty() : tensor<1x32x13x13xf32>
    %3398 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3396 : tensor<1x32x13x13xf32>) outs(%3397 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.divf %in, %cst_657 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %3399 = "tosa.add"(%3398, %24) : (tensor<1x32x13x13xf32>, tensor<1x1x13x13xf32>) -> tensor<1x32x13x13xf32>
    %3400 = tensor.empty() : tensor<1x32x13x1xf32>
    %3401 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3400 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %3402 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3399 : tensor<1x32x13x13xf32>) outs(%3400 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.maxf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %3403 = tensor.empty() : tensor<1x32x13x13xf32>
    %3404 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3399, %3402 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%3403 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.subf %in, %in_999 : f32
      %5295 = math.exp %5294 : f32
      linalg.yield %5295 : f32
    } -> tensor<1x32x13x13xf32>
    %3405 = tensor.empty() : tensor<1x32x13x1xf32>
    %3406 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3405 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %3407 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3404 : tensor<1x32x13x13xf32>) outs(%3406 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %3408 = tensor.empty() : tensor<1x32x13x13xf32>
    %3409 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3404, %3407 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%3408 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.divf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %3410 = tensor.empty() : tensor<1x32x13x13xf32>
    %extracted_slice_658 = tensor.extract_slice %3409[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> to tensor<1x32x13x13xf32>
    %inserted_slice_659 = tensor.insert_slice %extracted_slice_658 into %3410[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> into tensor<1x32x13x13xf32>
    %3411 = "tosa.reshape"(%inserted_slice_659) {new_shape = array<i64: 32, 13, 13>} : (tensor<1x32x13x13xf32>) -> tensor<32x13x13xf32>
    %3412 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_660 = tensor.extract_slice %3348[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_661 = tensor.insert_slice %extracted_slice_660 into %3412[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %3413 = "tosa.reshape"(%inserted_slice_661) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %3414 = tensor.empty() : tensor<32x13x128xf32>
    %3415 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%3414 : tensor<32x13x128xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x128xf32>
    %3416 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3411, %3413 : tensor<32x13x13xf32>, tensor<32x13x128xf32>) outs(%3415 : tensor<32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x128xf32>
    %3417 = "tosa.reshape"(%3416) {new_shape = array<i64: 1, 32, 13, 128>} : (tensor<32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %3418 = tensor.empty() : tensor<1x13x32x128xf32>
    %3419 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3417 : tensor<1x32x13x128xf32>) outs(%3418 : tensor<1x13x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x32x128xf32>
    %extracted_slice_662 = tensor.extract_slice %3419[0, 0, 0, 0] [1, 13, 32, 128] [1, 1, 1, 1] : tensor<1x13x32x128xf32> to tensor<1x13x32x128xf32>
    %3420 = "tosa.reshape"(%extracted_slice_662) {new_shape = array<i64: 1, 13, 4096>} : (tensor<1x13x32x128xf32>) -> tensor<1x13x4096xf32>
    %3421 = tensor.empty() : tensor<4096x4096xf32>
    %3422 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg209 : tensor<4096x4096xf32>) outs(%3421 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3423 = "tosa.reshape"(%3420) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %3424 = tensor.empty() : tensor<13x4096xf32>
    %3425 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3424 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %3426 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3423, %3422 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%3425 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %3427 = "tosa.reshape"(%3426) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %3428 = "tosa.add"(%3304, %3427) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %3429 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_663 = arith.constant 2 : i32
    %3430 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3428 : tensor<1x13x4096xf32>) outs(%3429 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_663 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_664 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %3431 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%3430 : tensor<1x13x4096xf32>) outs(%cst_664 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_665 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %3432 = "tosa.add"(%3431, %cst_665) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %3433 = tensor.empty() : tensor<1x13x1xf32>
    %3434 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3432 : tensor<1x13x1xf32>) outs(%3433 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %3435 = tensor.empty() : tensor<1x13x4096xf32>
    %3436 = tensor.empty() : tensor<1x13x4096xf32>
    %3437 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3434 : tensor<1x13x1xf32>) outs(%3436 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %3438 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3428, %3437 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%3435 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %3439 = tensor.empty() : tensor<1x13x4096xf32>
    %3440 = tensor.empty() : tensor<1x13x4096xf32>
    %3441 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg41 : tensor<4096xf32>) outs(%3440 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %3442 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3441, %3438 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%3439 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %3443 = tensor.empty() : tensor<4096x11008xf32>
    %3444 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg210 : tensor<11008x4096xf32>) outs(%3443 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3445 = "tosa.reshape"(%3442) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %3446 = tensor.empty() : tensor<13x11008xf32>
    %3447 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3446 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %3448 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3445, %3444 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%3447 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %3449 = "tosa.reshape"(%3448) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %3450 = tensor.empty() : tensor<1x13x11008xf32>
    %3451 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3449 : tensor<1x13x11008xf32>) outs(%3450 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      %5295 = math.exp %5294 : f32
      %cst_999 = arith.constant 1.000000e+00 : f32
      %5296 = arith.addf %cst_999, %5295 : f32
      %5297 = arith.divf %in, %5296 : f32
      linalg.yield %5297 : f32
    } -> tensor<1x13x11008xf32>
    %3452 = tensor.empty() : tensor<4096x11008xf32>
    %3453 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg211 : tensor<11008x4096xf32>) outs(%3452 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3454 = "tosa.reshape"(%3442) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %3455 = tensor.empty() : tensor<13x11008xf32>
    %3456 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3455 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %3457 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3454, %3453 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%3456 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %3458 = "tosa.reshape"(%3457) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %3459 = tensor.empty() : tensor<1x13x11008xf32>
    %3460 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3451, %3458 : tensor<1x13x11008xf32>, tensor<1x13x11008xf32>) outs(%3459 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x11008xf32>
    %3461 = tensor.empty() : tensor<11008x4096xf32>
    %3462 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg212 : tensor<4096x11008xf32>) outs(%3461 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %3463 = "tosa.reshape"(%3460) {new_shape = array<i64: 13, 11008>} : (tensor<1x13x11008xf32>) -> tensor<13x11008xf32>
    %3464 = tensor.empty() : tensor<13x4096xf32>
    %3465 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3464 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %3466 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3463, %3462 : tensor<13x11008xf32>, tensor<11008x4096xf32>) outs(%3465 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %3467 = "tosa.reshape"(%3466) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %3468 = "tosa.add"(%3428, %3467) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %3469 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_666 = arith.constant 2 : i32
    %3470 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3468 : tensor<1x13x4096xf32>) outs(%3469 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_666 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_667 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %3471 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%3470 : tensor<1x13x4096xf32>) outs(%cst_667 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_668 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %3472 = "tosa.add"(%3471, %cst_668) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %3473 = tensor.empty() : tensor<1x13x1xf32>
    %3474 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3472 : tensor<1x13x1xf32>) outs(%3473 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %3475 = tensor.empty() : tensor<1x13x4096xf32>
    %3476 = tensor.empty() : tensor<1x13x4096xf32>
    %3477 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3474 : tensor<1x13x1xf32>) outs(%3476 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %3478 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3468, %3477 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%3475 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %3479 = tensor.empty() : tensor<1x13x4096xf32>
    %3480 = tensor.empty() : tensor<1x13x4096xf32>
    %3481 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg42 : tensor<4096xf32>) outs(%3480 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %3482 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3481, %3478 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%3479 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %3483 = tensor.empty() : tensor<4096x4096xf32>
    %3484 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg213 : tensor<4096x4096xf32>) outs(%3483 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3485 = "tosa.reshape"(%3482) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %3486 = tensor.empty() : tensor<13x4096xf32>
    %3487 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3486 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %3488 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3485, %3484 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%3487 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %3489 = "tosa.reshape"(%3488) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %3490 = tensor.empty() : tensor<4096x4096xf32>
    %3491 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg214 : tensor<4096x4096xf32>) outs(%3490 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3492 = "tosa.reshape"(%3482) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %3493 = tensor.empty() : tensor<13x4096xf32>
    %3494 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3493 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %3495 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3492, %3491 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%3494 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %3496 = "tosa.reshape"(%3495) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %3497 = tensor.empty() : tensor<4096x4096xf32>
    %3498 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg215 : tensor<4096x4096xf32>) outs(%3497 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3499 = "tosa.reshape"(%3482) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %3500 = tensor.empty() : tensor<13x4096xf32>
    %3501 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3500 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %3502 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3499, %3498 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%3501 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %3503 = "tosa.reshape"(%3502) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %3504 = "tosa.reshape"(%3489) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %3505 = tensor.empty() : tensor<1x32x13x128xf32>
    %3506 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3504 : tensor<1x13x32x128xf32>) outs(%3505 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %3507 = "tosa.reshape"(%3496) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %3508 = tensor.empty() : tensor<1x32x13x128xf32>
    %3509 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3507 : tensor<1x13x32x128xf32>) outs(%3508 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %3510 = "tosa.reshape"(%3503) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %3511 = tensor.empty() : tensor<1x32x13x128xf32>
    %3512 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3510 : tensor<1x13x32x128xf32>) outs(%3511 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_669 = tensor.extract_slice %arg333[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_670 = tensor.extract_slice %extracted_slice_669[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_671 = tensor.extract_slice %extracted_slice_670[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %extracted_slice_672 = tensor.extract_slice %arg334[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_673 = tensor.extract_slice %extracted_slice_672[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_674 = tensor.extract_slice %extracted_slice_673[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %3513 = tensor.empty() : tensor<1x13x128xf32>
    %3514 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_671 : tensor<1x1x13x128xf32>) outs(%3513 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %3515 = tensor.empty() : tensor<13x128xf32>
    %3516 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%3514 : tensor<1x13x128xf32>) outs(%3515 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %3517 = tensor.empty() : tensor<1x13x128xf32>
    %3518 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_674 : tensor<1x1x13x128xf32>) outs(%3517 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %3519 = tensor.empty() : tensor<13x128xf32>
    %3520 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%3518 : tensor<1x13x128xf32>) outs(%3519 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %3521 = tensor.empty() : tensor<1x13x128xf32>
    %3522 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%3521 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %3516[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %3523 = "tosa.reshape"(%3522) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %3524 = tensor.empty() : tensor<1x13x128xf32>
    %3525 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%3524 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %3520[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %3526 = "tosa.reshape"(%3525) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %3527 = tensor.empty() : tensor<1x32x13x128xf32>
    %3528 = tensor.empty() : tensor<1x32x13x128xf32>
    %3529 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3523 : tensor<1x1x13x128xf32>) outs(%3528 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %3530 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3506, %3529 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%3527 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_675 = tensor.extract_slice %3506[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_676 = tensor.extract_slice %3506[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %3531 = tensor.empty() : tensor<1x32x13x64xf32>
    %3532 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_676 : tensor<1x32x13x64xf32>) outs(%3531 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %3533 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_677 = tensor.insert_slice %3532 into %3533[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_678 = tensor.insert_slice %extracted_slice_675 into %inserted_slice_677[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %3534 = tensor.empty() : tensor<1x32x13x128xf32>
    %3535 = tensor.empty() : tensor<1x32x13x128xf32>
    %3536 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3526 : tensor<1x1x13x128xf32>) outs(%3535 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %3537 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_678, %3536 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%3534 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %3538 = "tosa.add"(%3530, %3537) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %3539 = tensor.empty() : tensor<1x32x13x128xf32>
    %3540 = tensor.empty() : tensor<1x32x13x128xf32>
    %3541 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3523 : tensor<1x1x13x128xf32>) outs(%3540 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %3542 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3509, %3541 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%3539 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_679 = tensor.extract_slice %3509[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_680 = tensor.extract_slice %3509[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %3543 = tensor.empty() : tensor<1x32x13x64xf32>
    %3544 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_680 : tensor<1x32x13x64xf32>) outs(%3543 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %3545 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_681 = tensor.insert_slice %3544 into %3545[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_682 = tensor.insert_slice %extracted_slice_679 into %inserted_slice_681[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %3546 = tensor.empty() : tensor<1x32x13x128xf32>
    %3547 = tensor.empty() : tensor<1x32x13x128xf32>
    %3548 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3526 : tensor<1x1x13x128xf32>) outs(%3547 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %3549 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_682, %3548 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%3546 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %3550 = "tosa.add"(%3542, %3549) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %3551 = tensor.empty() : tensor<1x32x128x13xf32>
    %3552 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3550 : tensor<1x32x13x128xf32>) outs(%3551 : tensor<1x32x128x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x13xf32>
    %3553 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_683 = tensor.extract_slice %3538[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_684 = tensor.insert_slice %extracted_slice_683 into %3553[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %3554 = "tosa.reshape"(%inserted_slice_684) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %3555 = tensor.empty() : tensor<1x32x128x13xf32>
    %extracted_slice_685 = tensor.extract_slice %3552[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> to tensor<1x32x128x13xf32>
    %inserted_slice_686 = tensor.insert_slice %extracted_slice_685 into %3555[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> into tensor<1x32x128x13xf32>
    %3556 = "tosa.reshape"(%inserted_slice_686) {new_shape = array<i64: 32, 128, 13>} : (tensor<1x32x128x13xf32>) -> tensor<32x128x13xf32>
    %3557 = tensor.empty() : tensor<32x13x13xf32>
    %3558 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%3557 : tensor<32x13x13xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x13xf32>
    %3559 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3554, %3556 : tensor<32x13x128xf32>, tensor<32x128x13xf32>) outs(%3558 : tensor<32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x13xf32>
    %3560 = "tosa.reshape"(%3559) {new_shape = array<i64: 1, 32, 13, 13>} : (tensor<32x13x13xf32>) -> tensor<1x32x13x13xf32>
    %cst_687 = arith.constant 11.3137083 : f32
    %3561 = tensor.empty() : tensor<1x32x13x13xf32>
    %3562 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3560 : tensor<1x32x13x13xf32>) outs(%3561 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.divf %in, %cst_687 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %3563 = "tosa.add"(%3562, %24) : (tensor<1x32x13x13xf32>, tensor<1x1x13x13xf32>) -> tensor<1x32x13x13xf32>
    %3564 = tensor.empty() : tensor<1x32x13x1xf32>
    %3565 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3564 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %3566 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3563 : tensor<1x32x13x13xf32>) outs(%3564 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.maxf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %3567 = tensor.empty() : tensor<1x32x13x13xf32>
    %3568 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3563, %3566 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%3567 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.subf %in, %in_999 : f32
      %5295 = math.exp %5294 : f32
      linalg.yield %5295 : f32
    } -> tensor<1x32x13x13xf32>
    %3569 = tensor.empty() : tensor<1x32x13x1xf32>
    %3570 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3569 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %3571 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3568 : tensor<1x32x13x13xf32>) outs(%3570 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %3572 = tensor.empty() : tensor<1x32x13x13xf32>
    %3573 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3568, %3571 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%3572 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.divf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %3574 = tensor.empty() : tensor<1x32x13x13xf32>
    %extracted_slice_688 = tensor.extract_slice %3573[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> to tensor<1x32x13x13xf32>
    %inserted_slice_689 = tensor.insert_slice %extracted_slice_688 into %3574[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> into tensor<1x32x13x13xf32>
    %3575 = "tosa.reshape"(%inserted_slice_689) {new_shape = array<i64: 32, 13, 13>} : (tensor<1x32x13x13xf32>) -> tensor<32x13x13xf32>
    %3576 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_690 = tensor.extract_slice %3512[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_691 = tensor.insert_slice %extracted_slice_690 into %3576[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %3577 = "tosa.reshape"(%inserted_slice_691) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %3578 = tensor.empty() : tensor<32x13x128xf32>
    %3579 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%3578 : tensor<32x13x128xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x128xf32>
    %3580 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3575, %3577 : tensor<32x13x13xf32>, tensor<32x13x128xf32>) outs(%3579 : tensor<32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x128xf32>
    %3581 = "tosa.reshape"(%3580) {new_shape = array<i64: 1, 32, 13, 128>} : (tensor<32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %3582 = tensor.empty() : tensor<1x13x32x128xf32>
    %3583 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3581 : tensor<1x32x13x128xf32>) outs(%3582 : tensor<1x13x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x32x128xf32>
    %extracted_slice_692 = tensor.extract_slice %3583[0, 0, 0, 0] [1, 13, 32, 128] [1, 1, 1, 1] : tensor<1x13x32x128xf32> to tensor<1x13x32x128xf32>
    %3584 = "tosa.reshape"(%extracted_slice_692) {new_shape = array<i64: 1, 13, 4096>} : (tensor<1x13x32x128xf32>) -> tensor<1x13x4096xf32>
    %3585 = tensor.empty() : tensor<4096x4096xf32>
    %3586 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg216 : tensor<4096x4096xf32>) outs(%3585 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3587 = "tosa.reshape"(%3584) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %3588 = tensor.empty() : tensor<13x4096xf32>
    %3589 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3588 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %3590 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3587, %3586 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%3589 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %3591 = "tosa.reshape"(%3590) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %3592 = "tosa.add"(%3468, %3591) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %3593 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_693 = arith.constant 2 : i32
    %3594 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3592 : tensor<1x13x4096xf32>) outs(%3593 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_693 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_694 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %3595 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%3594 : tensor<1x13x4096xf32>) outs(%cst_694 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_695 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %3596 = "tosa.add"(%3595, %cst_695) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %3597 = tensor.empty() : tensor<1x13x1xf32>
    %3598 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3596 : tensor<1x13x1xf32>) outs(%3597 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %3599 = tensor.empty() : tensor<1x13x4096xf32>
    %3600 = tensor.empty() : tensor<1x13x4096xf32>
    %3601 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3598 : tensor<1x13x1xf32>) outs(%3600 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %3602 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3592, %3601 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%3599 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %3603 = tensor.empty() : tensor<1x13x4096xf32>
    %3604 = tensor.empty() : tensor<1x13x4096xf32>
    %3605 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg43 : tensor<4096xf32>) outs(%3604 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %3606 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3605, %3602 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%3603 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %3607 = tensor.empty() : tensor<4096x11008xf32>
    %3608 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg217 : tensor<11008x4096xf32>) outs(%3607 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3609 = "tosa.reshape"(%3606) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %3610 = tensor.empty() : tensor<13x11008xf32>
    %3611 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3610 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %3612 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3609, %3608 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%3611 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %3613 = "tosa.reshape"(%3612) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %3614 = tensor.empty() : tensor<1x13x11008xf32>
    %3615 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3613 : tensor<1x13x11008xf32>) outs(%3614 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      %5295 = math.exp %5294 : f32
      %cst_999 = arith.constant 1.000000e+00 : f32
      %5296 = arith.addf %cst_999, %5295 : f32
      %5297 = arith.divf %in, %5296 : f32
      linalg.yield %5297 : f32
    } -> tensor<1x13x11008xf32>
    %3616 = tensor.empty() : tensor<4096x11008xf32>
    %3617 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg218 : tensor<11008x4096xf32>) outs(%3616 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3618 = "tosa.reshape"(%3606) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %3619 = tensor.empty() : tensor<13x11008xf32>
    %3620 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3619 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %3621 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3618, %3617 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%3620 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %3622 = "tosa.reshape"(%3621) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %3623 = tensor.empty() : tensor<1x13x11008xf32>
    %3624 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3615, %3622 : tensor<1x13x11008xf32>, tensor<1x13x11008xf32>) outs(%3623 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x11008xf32>
    %3625 = tensor.empty() : tensor<11008x4096xf32>
    %3626 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg219 : tensor<4096x11008xf32>) outs(%3625 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %3627 = "tosa.reshape"(%3624) {new_shape = array<i64: 13, 11008>} : (tensor<1x13x11008xf32>) -> tensor<13x11008xf32>
    %3628 = tensor.empty() : tensor<13x4096xf32>
    %3629 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3628 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %3630 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3627, %3626 : tensor<13x11008xf32>, tensor<11008x4096xf32>) outs(%3629 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %3631 = "tosa.reshape"(%3630) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %3632 = "tosa.add"(%3592, %3631) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %3633 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_696 = arith.constant 2 : i32
    %3634 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3632 : tensor<1x13x4096xf32>) outs(%3633 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_696 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_697 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %3635 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%3634 : tensor<1x13x4096xf32>) outs(%cst_697 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_698 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %3636 = "tosa.add"(%3635, %cst_698) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %3637 = tensor.empty() : tensor<1x13x1xf32>
    %3638 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3636 : tensor<1x13x1xf32>) outs(%3637 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %3639 = tensor.empty() : tensor<1x13x4096xf32>
    %3640 = tensor.empty() : tensor<1x13x4096xf32>
    %3641 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3638 : tensor<1x13x1xf32>) outs(%3640 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %3642 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3632, %3641 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%3639 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %3643 = tensor.empty() : tensor<1x13x4096xf32>
    %3644 = tensor.empty() : tensor<1x13x4096xf32>
    %3645 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg44 : tensor<4096xf32>) outs(%3644 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %3646 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3645, %3642 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%3643 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %3647 = tensor.empty() : tensor<4096x4096xf32>
    %3648 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg220 : tensor<4096x4096xf32>) outs(%3647 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3649 = "tosa.reshape"(%3646) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %3650 = tensor.empty() : tensor<13x4096xf32>
    %3651 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3650 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %3652 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3649, %3648 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%3651 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %3653 = "tosa.reshape"(%3652) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %3654 = tensor.empty() : tensor<4096x4096xf32>
    %3655 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg221 : tensor<4096x4096xf32>) outs(%3654 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3656 = "tosa.reshape"(%3646) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %3657 = tensor.empty() : tensor<13x4096xf32>
    %3658 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3657 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %3659 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3656, %3655 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%3658 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %3660 = "tosa.reshape"(%3659) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %3661 = tensor.empty() : tensor<4096x4096xf32>
    %3662 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg222 : tensor<4096x4096xf32>) outs(%3661 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3663 = "tosa.reshape"(%3646) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %3664 = tensor.empty() : tensor<13x4096xf32>
    %3665 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3664 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %3666 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3663, %3662 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%3665 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %3667 = "tosa.reshape"(%3666) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %3668 = "tosa.reshape"(%3653) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %3669 = tensor.empty() : tensor<1x32x13x128xf32>
    %3670 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3668 : tensor<1x13x32x128xf32>) outs(%3669 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %3671 = "tosa.reshape"(%3660) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %3672 = tensor.empty() : tensor<1x32x13x128xf32>
    %3673 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3671 : tensor<1x13x32x128xf32>) outs(%3672 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %3674 = "tosa.reshape"(%3667) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %3675 = tensor.empty() : tensor<1x32x13x128xf32>
    %3676 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3674 : tensor<1x13x32x128xf32>) outs(%3675 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_699 = tensor.extract_slice %arg335[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_700 = tensor.extract_slice %extracted_slice_699[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_701 = tensor.extract_slice %extracted_slice_700[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %extracted_slice_702 = tensor.extract_slice %arg336[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_703 = tensor.extract_slice %extracted_slice_702[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_704 = tensor.extract_slice %extracted_slice_703[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %3677 = tensor.empty() : tensor<1x13x128xf32>
    %3678 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_701 : tensor<1x1x13x128xf32>) outs(%3677 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %3679 = tensor.empty() : tensor<13x128xf32>
    %3680 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%3678 : tensor<1x13x128xf32>) outs(%3679 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %3681 = tensor.empty() : tensor<1x13x128xf32>
    %3682 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_704 : tensor<1x1x13x128xf32>) outs(%3681 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %3683 = tensor.empty() : tensor<13x128xf32>
    %3684 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%3682 : tensor<1x13x128xf32>) outs(%3683 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %3685 = tensor.empty() : tensor<1x13x128xf32>
    %3686 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%3685 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %3680[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %3687 = "tosa.reshape"(%3686) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %3688 = tensor.empty() : tensor<1x13x128xf32>
    %3689 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%3688 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %3684[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %3690 = "tosa.reshape"(%3689) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %3691 = tensor.empty() : tensor<1x32x13x128xf32>
    %3692 = tensor.empty() : tensor<1x32x13x128xf32>
    %3693 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3687 : tensor<1x1x13x128xf32>) outs(%3692 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %3694 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3670, %3693 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%3691 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_705 = tensor.extract_slice %3670[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_706 = tensor.extract_slice %3670[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %3695 = tensor.empty() : tensor<1x32x13x64xf32>
    %3696 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_706 : tensor<1x32x13x64xf32>) outs(%3695 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %3697 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_707 = tensor.insert_slice %3696 into %3697[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_708 = tensor.insert_slice %extracted_slice_705 into %inserted_slice_707[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %3698 = tensor.empty() : tensor<1x32x13x128xf32>
    %3699 = tensor.empty() : tensor<1x32x13x128xf32>
    %3700 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3690 : tensor<1x1x13x128xf32>) outs(%3699 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %3701 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_708, %3700 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%3698 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %3702 = "tosa.add"(%3694, %3701) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %3703 = tensor.empty() : tensor<1x32x13x128xf32>
    %3704 = tensor.empty() : tensor<1x32x13x128xf32>
    %3705 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3687 : tensor<1x1x13x128xf32>) outs(%3704 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %3706 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3673, %3705 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%3703 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_709 = tensor.extract_slice %3673[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_710 = tensor.extract_slice %3673[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %3707 = tensor.empty() : tensor<1x32x13x64xf32>
    %3708 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_710 : tensor<1x32x13x64xf32>) outs(%3707 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %3709 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_711 = tensor.insert_slice %3708 into %3709[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_712 = tensor.insert_slice %extracted_slice_709 into %inserted_slice_711[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %3710 = tensor.empty() : tensor<1x32x13x128xf32>
    %3711 = tensor.empty() : tensor<1x32x13x128xf32>
    %3712 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3690 : tensor<1x1x13x128xf32>) outs(%3711 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %3713 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_712, %3712 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%3710 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %3714 = "tosa.add"(%3706, %3713) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %3715 = tensor.empty() : tensor<1x32x128x13xf32>
    %3716 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3714 : tensor<1x32x13x128xf32>) outs(%3715 : tensor<1x32x128x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x13xf32>
    %3717 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_713 = tensor.extract_slice %3702[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_714 = tensor.insert_slice %extracted_slice_713 into %3717[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %3718 = "tosa.reshape"(%inserted_slice_714) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %3719 = tensor.empty() : tensor<1x32x128x13xf32>
    %extracted_slice_715 = tensor.extract_slice %3716[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> to tensor<1x32x128x13xf32>
    %inserted_slice_716 = tensor.insert_slice %extracted_slice_715 into %3719[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> into tensor<1x32x128x13xf32>
    %3720 = "tosa.reshape"(%inserted_slice_716) {new_shape = array<i64: 32, 128, 13>} : (tensor<1x32x128x13xf32>) -> tensor<32x128x13xf32>
    %3721 = tensor.empty() : tensor<32x13x13xf32>
    %3722 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%3721 : tensor<32x13x13xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x13xf32>
    %3723 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3718, %3720 : tensor<32x13x128xf32>, tensor<32x128x13xf32>) outs(%3722 : tensor<32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x13xf32>
    %3724 = "tosa.reshape"(%3723) {new_shape = array<i64: 1, 32, 13, 13>} : (tensor<32x13x13xf32>) -> tensor<1x32x13x13xf32>
    %cst_717 = arith.constant 11.3137083 : f32
    %3725 = tensor.empty() : tensor<1x32x13x13xf32>
    %3726 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3724 : tensor<1x32x13x13xf32>) outs(%3725 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.divf %in, %cst_717 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %3727 = "tosa.add"(%3726, %24) : (tensor<1x32x13x13xf32>, tensor<1x1x13x13xf32>) -> tensor<1x32x13x13xf32>
    %3728 = tensor.empty() : tensor<1x32x13x1xf32>
    %3729 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3728 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %3730 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3727 : tensor<1x32x13x13xf32>) outs(%3728 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.maxf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %3731 = tensor.empty() : tensor<1x32x13x13xf32>
    %3732 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3727, %3730 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%3731 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.subf %in, %in_999 : f32
      %5295 = math.exp %5294 : f32
      linalg.yield %5295 : f32
    } -> tensor<1x32x13x13xf32>
    %3733 = tensor.empty() : tensor<1x32x13x1xf32>
    %3734 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3733 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %3735 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3732 : tensor<1x32x13x13xf32>) outs(%3734 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %3736 = tensor.empty() : tensor<1x32x13x13xf32>
    %3737 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3732, %3735 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%3736 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.divf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %3738 = tensor.empty() : tensor<1x32x13x13xf32>
    %extracted_slice_718 = tensor.extract_slice %3737[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> to tensor<1x32x13x13xf32>
    %inserted_slice_719 = tensor.insert_slice %extracted_slice_718 into %3738[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> into tensor<1x32x13x13xf32>
    %3739 = "tosa.reshape"(%inserted_slice_719) {new_shape = array<i64: 32, 13, 13>} : (tensor<1x32x13x13xf32>) -> tensor<32x13x13xf32>
    %3740 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_720 = tensor.extract_slice %3676[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_721 = tensor.insert_slice %extracted_slice_720 into %3740[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %3741 = "tosa.reshape"(%inserted_slice_721) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %3742 = tensor.empty() : tensor<32x13x128xf32>
    %3743 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%3742 : tensor<32x13x128xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x128xf32>
    %3744 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3739, %3741 : tensor<32x13x13xf32>, tensor<32x13x128xf32>) outs(%3743 : tensor<32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x128xf32>
    %3745 = "tosa.reshape"(%3744) {new_shape = array<i64: 1, 32, 13, 128>} : (tensor<32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %3746 = tensor.empty() : tensor<1x13x32x128xf32>
    %3747 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3745 : tensor<1x32x13x128xf32>) outs(%3746 : tensor<1x13x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x32x128xf32>
    %extracted_slice_722 = tensor.extract_slice %3747[0, 0, 0, 0] [1, 13, 32, 128] [1, 1, 1, 1] : tensor<1x13x32x128xf32> to tensor<1x13x32x128xf32>
    %3748 = "tosa.reshape"(%extracted_slice_722) {new_shape = array<i64: 1, 13, 4096>} : (tensor<1x13x32x128xf32>) -> tensor<1x13x4096xf32>
    %3749 = tensor.empty() : tensor<4096x4096xf32>
    %3750 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg223 : tensor<4096x4096xf32>) outs(%3749 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3751 = "tosa.reshape"(%3748) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %3752 = tensor.empty() : tensor<13x4096xf32>
    %3753 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3752 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %3754 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3751, %3750 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%3753 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %3755 = "tosa.reshape"(%3754) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %3756 = "tosa.add"(%3632, %3755) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %3757 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_723 = arith.constant 2 : i32
    %3758 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3756 : tensor<1x13x4096xf32>) outs(%3757 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_723 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_724 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %3759 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%3758 : tensor<1x13x4096xf32>) outs(%cst_724 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_725 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %3760 = "tosa.add"(%3759, %cst_725) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %3761 = tensor.empty() : tensor<1x13x1xf32>
    %3762 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3760 : tensor<1x13x1xf32>) outs(%3761 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %3763 = tensor.empty() : tensor<1x13x4096xf32>
    %3764 = tensor.empty() : tensor<1x13x4096xf32>
    %3765 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3762 : tensor<1x13x1xf32>) outs(%3764 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %3766 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3756, %3765 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%3763 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %3767 = tensor.empty() : tensor<1x13x4096xf32>
    %3768 = tensor.empty() : tensor<1x13x4096xf32>
    %3769 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg45 : tensor<4096xf32>) outs(%3768 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %3770 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3769, %3766 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%3767 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %3771 = tensor.empty() : tensor<4096x11008xf32>
    %3772 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg224 : tensor<11008x4096xf32>) outs(%3771 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3773 = "tosa.reshape"(%3770) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %3774 = tensor.empty() : tensor<13x11008xf32>
    %3775 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3774 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %3776 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3773, %3772 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%3775 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %3777 = "tosa.reshape"(%3776) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %3778 = tensor.empty() : tensor<1x13x11008xf32>
    %3779 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3777 : tensor<1x13x11008xf32>) outs(%3778 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      %5295 = math.exp %5294 : f32
      %cst_999 = arith.constant 1.000000e+00 : f32
      %5296 = arith.addf %cst_999, %5295 : f32
      %5297 = arith.divf %in, %5296 : f32
      linalg.yield %5297 : f32
    } -> tensor<1x13x11008xf32>
    %3780 = tensor.empty() : tensor<4096x11008xf32>
    %3781 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg225 : tensor<11008x4096xf32>) outs(%3780 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3782 = "tosa.reshape"(%3770) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %3783 = tensor.empty() : tensor<13x11008xf32>
    %3784 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3783 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %3785 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3782, %3781 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%3784 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %3786 = "tosa.reshape"(%3785) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %3787 = tensor.empty() : tensor<1x13x11008xf32>
    %3788 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3779, %3786 : tensor<1x13x11008xf32>, tensor<1x13x11008xf32>) outs(%3787 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x11008xf32>
    %3789 = tensor.empty() : tensor<11008x4096xf32>
    %3790 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg226 : tensor<4096x11008xf32>) outs(%3789 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %3791 = "tosa.reshape"(%3788) {new_shape = array<i64: 13, 11008>} : (tensor<1x13x11008xf32>) -> tensor<13x11008xf32>
    %3792 = tensor.empty() : tensor<13x4096xf32>
    %3793 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3792 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %3794 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3791, %3790 : tensor<13x11008xf32>, tensor<11008x4096xf32>) outs(%3793 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %3795 = "tosa.reshape"(%3794) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %3796 = "tosa.add"(%3756, %3795) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %3797 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_726 = arith.constant 2 : i32
    %3798 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3796 : tensor<1x13x4096xf32>) outs(%3797 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_726 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_727 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %3799 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%3798 : tensor<1x13x4096xf32>) outs(%cst_727 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_728 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %3800 = "tosa.add"(%3799, %cst_728) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %3801 = tensor.empty() : tensor<1x13x1xf32>
    %3802 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3800 : tensor<1x13x1xf32>) outs(%3801 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %3803 = tensor.empty() : tensor<1x13x4096xf32>
    %3804 = tensor.empty() : tensor<1x13x4096xf32>
    %3805 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3802 : tensor<1x13x1xf32>) outs(%3804 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %3806 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3796, %3805 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%3803 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %3807 = tensor.empty() : tensor<1x13x4096xf32>
    %3808 = tensor.empty() : tensor<1x13x4096xf32>
    %3809 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg46 : tensor<4096xf32>) outs(%3808 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %3810 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3809, %3806 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%3807 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %3811 = tensor.empty() : tensor<4096x4096xf32>
    %3812 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg227 : tensor<4096x4096xf32>) outs(%3811 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3813 = "tosa.reshape"(%3810) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %3814 = tensor.empty() : tensor<13x4096xf32>
    %3815 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3814 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %3816 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3813, %3812 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%3815 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %3817 = "tosa.reshape"(%3816) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %3818 = tensor.empty() : tensor<4096x4096xf32>
    %3819 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg228 : tensor<4096x4096xf32>) outs(%3818 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3820 = "tosa.reshape"(%3810) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %3821 = tensor.empty() : tensor<13x4096xf32>
    %3822 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3821 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %3823 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3820, %3819 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%3822 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %3824 = "tosa.reshape"(%3823) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %3825 = tensor.empty() : tensor<4096x4096xf32>
    %3826 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg229 : tensor<4096x4096xf32>) outs(%3825 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3827 = "tosa.reshape"(%3810) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %3828 = tensor.empty() : tensor<13x4096xf32>
    %3829 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3828 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %3830 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3827, %3826 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%3829 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %3831 = "tosa.reshape"(%3830) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %3832 = "tosa.reshape"(%3817) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %3833 = tensor.empty() : tensor<1x32x13x128xf32>
    %3834 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3832 : tensor<1x13x32x128xf32>) outs(%3833 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %3835 = "tosa.reshape"(%3824) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %3836 = tensor.empty() : tensor<1x32x13x128xf32>
    %3837 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3835 : tensor<1x13x32x128xf32>) outs(%3836 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %3838 = "tosa.reshape"(%3831) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %3839 = tensor.empty() : tensor<1x32x13x128xf32>
    %3840 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3838 : tensor<1x13x32x128xf32>) outs(%3839 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_729 = tensor.extract_slice %arg337[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_730 = tensor.extract_slice %extracted_slice_729[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_731 = tensor.extract_slice %extracted_slice_730[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %extracted_slice_732 = tensor.extract_slice %arg338[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_733 = tensor.extract_slice %extracted_slice_732[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_734 = tensor.extract_slice %extracted_slice_733[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %3841 = tensor.empty() : tensor<1x13x128xf32>
    %3842 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_731 : tensor<1x1x13x128xf32>) outs(%3841 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %3843 = tensor.empty() : tensor<13x128xf32>
    %3844 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%3842 : tensor<1x13x128xf32>) outs(%3843 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %3845 = tensor.empty() : tensor<1x13x128xf32>
    %3846 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_734 : tensor<1x1x13x128xf32>) outs(%3845 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %3847 = tensor.empty() : tensor<13x128xf32>
    %3848 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%3846 : tensor<1x13x128xf32>) outs(%3847 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %3849 = tensor.empty() : tensor<1x13x128xf32>
    %3850 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%3849 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %3844[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %3851 = "tosa.reshape"(%3850) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %3852 = tensor.empty() : tensor<1x13x128xf32>
    %3853 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%3852 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %3848[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %3854 = "tosa.reshape"(%3853) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %3855 = tensor.empty() : tensor<1x32x13x128xf32>
    %3856 = tensor.empty() : tensor<1x32x13x128xf32>
    %3857 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3851 : tensor<1x1x13x128xf32>) outs(%3856 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %3858 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3834, %3857 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%3855 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_735 = tensor.extract_slice %3834[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_736 = tensor.extract_slice %3834[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %3859 = tensor.empty() : tensor<1x32x13x64xf32>
    %3860 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_736 : tensor<1x32x13x64xf32>) outs(%3859 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %3861 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_737 = tensor.insert_slice %3860 into %3861[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_738 = tensor.insert_slice %extracted_slice_735 into %inserted_slice_737[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %3862 = tensor.empty() : tensor<1x32x13x128xf32>
    %3863 = tensor.empty() : tensor<1x32x13x128xf32>
    %3864 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3854 : tensor<1x1x13x128xf32>) outs(%3863 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %3865 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_738, %3864 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%3862 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %3866 = "tosa.add"(%3858, %3865) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %3867 = tensor.empty() : tensor<1x32x13x128xf32>
    %3868 = tensor.empty() : tensor<1x32x13x128xf32>
    %3869 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3851 : tensor<1x1x13x128xf32>) outs(%3868 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %3870 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3837, %3869 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%3867 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_739 = tensor.extract_slice %3837[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_740 = tensor.extract_slice %3837[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %3871 = tensor.empty() : tensor<1x32x13x64xf32>
    %3872 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_740 : tensor<1x32x13x64xf32>) outs(%3871 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %3873 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_741 = tensor.insert_slice %3872 into %3873[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_742 = tensor.insert_slice %extracted_slice_739 into %inserted_slice_741[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %3874 = tensor.empty() : tensor<1x32x13x128xf32>
    %3875 = tensor.empty() : tensor<1x32x13x128xf32>
    %3876 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%3854 : tensor<1x1x13x128xf32>) outs(%3875 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %3877 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_742, %3876 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%3874 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %3878 = "tosa.add"(%3870, %3877) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %3879 = tensor.empty() : tensor<1x32x128x13xf32>
    %3880 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3878 : tensor<1x32x13x128xf32>) outs(%3879 : tensor<1x32x128x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x13xf32>
    %3881 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_743 = tensor.extract_slice %3866[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_744 = tensor.insert_slice %extracted_slice_743 into %3881[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %3882 = "tosa.reshape"(%inserted_slice_744) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %3883 = tensor.empty() : tensor<1x32x128x13xf32>
    %extracted_slice_745 = tensor.extract_slice %3880[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> to tensor<1x32x128x13xf32>
    %inserted_slice_746 = tensor.insert_slice %extracted_slice_745 into %3883[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> into tensor<1x32x128x13xf32>
    %3884 = "tosa.reshape"(%inserted_slice_746) {new_shape = array<i64: 32, 128, 13>} : (tensor<1x32x128x13xf32>) -> tensor<32x128x13xf32>
    %3885 = tensor.empty() : tensor<32x13x13xf32>
    %3886 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%3885 : tensor<32x13x13xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x13xf32>
    %3887 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3882, %3884 : tensor<32x13x128xf32>, tensor<32x128x13xf32>) outs(%3886 : tensor<32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x13xf32>
    %3888 = "tosa.reshape"(%3887) {new_shape = array<i64: 1, 32, 13, 13>} : (tensor<32x13x13xf32>) -> tensor<1x32x13x13xf32>
    %cst_747 = arith.constant 11.3137083 : f32
    %3889 = tensor.empty() : tensor<1x32x13x13xf32>
    %3890 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3888 : tensor<1x32x13x13xf32>) outs(%3889 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.divf %in, %cst_747 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %3891 = "tosa.add"(%3890, %24) : (tensor<1x32x13x13xf32>, tensor<1x1x13x13xf32>) -> tensor<1x32x13x13xf32>
    %3892 = tensor.empty() : tensor<1x32x13x1xf32>
    %3893 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3892 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %3894 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3891 : tensor<1x32x13x13xf32>) outs(%3892 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.maxf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %3895 = tensor.empty() : tensor<1x32x13x13xf32>
    %3896 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3891, %3894 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%3895 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.subf %in, %in_999 : f32
      %5295 = math.exp %5294 : f32
      linalg.yield %5295 : f32
    } -> tensor<1x32x13x13xf32>
    %3897 = tensor.empty() : tensor<1x32x13x1xf32>
    %3898 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%3897 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %3899 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3896 : tensor<1x32x13x13xf32>) outs(%3898 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %3900 = tensor.empty() : tensor<1x32x13x13xf32>
    %3901 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3896, %3899 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%3900 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.divf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %3902 = tensor.empty() : tensor<1x32x13x13xf32>
    %extracted_slice_748 = tensor.extract_slice %3901[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> to tensor<1x32x13x13xf32>
    %inserted_slice_749 = tensor.insert_slice %extracted_slice_748 into %3902[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> into tensor<1x32x13x13xf32>
    %3903 = "tosa.reshape"(%inserted_slice_749) {new_shape = array<i64: 32, 13, 13>} : (tensor<1x32x13x13xf32>) -> tensor<32x13x13xf32>
    %3904 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_750 = tensor.extract_slice %3840[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_751 = tensor.insert_slice %extracted_slice_750 into %3904[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %3905 = "tosa.reshape"(%inserted_slice_751) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %3906 = tensor.empty() : tensor<32x13x128xf32>
    %3907 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%3906 : tensor<32x13x128xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x128xf32>
    %3908 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3903, %3905 : tensor<32x13x13xf32>, tensor<32x13x128xf32>) outs(%3907 : tensor<32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x128xf32>
    %3909 = "tosa.reshape"(%3908) {new_shape = array<i64: 1, 32, 13, 128>} : (tensor<32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %3910 = tensor.empty() : tensor<1x13x32x128xf32>
    %3911 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3909 : tensor<1x32x13x128xf32>) outs(%3910 : tensor<1x13x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x32x128xf32>
    %extracted_slice_752 = tensor.extract_slice %3911[0, 0, 0, 0] [1, 13, 32, 128] [1, 1, 1, 1] : tensor<1x13x32x128xf32> to tensor<1x13x32x128xf32>
    %3912 = "tosa.reshape"(%extracted_slice_752) {new_shape = array<i64: 1, 13, 4096>} : (tensor<1x13x32x128xf32>) -> tensor<1x13x4096xf32>
    %3913 = tensor.empty() : tensor<4096x4096xf32>
    %3914 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg230 : tensor<4096x4096xf32>) outs(%3913 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3915 = "tosa.reshape"(%3912) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %3916 = tensor.empty() : tensor<13x4096xf32>
    %3917 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3916 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %3918 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3915, %3914 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%3917 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %3919 = "tosa.reshape"(%3918) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %3920 = "tosa.add"(%3796, %3919) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %3921 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_753 = arith.constant 2 : i32
    %3922 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3920 : tensor<1x13x4096xf32>) outs(%3921 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_753 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_754 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %3923 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%3922 : tensor<1x13x4096xf32>) outs(%cst_754 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_755 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %3924 = "tosa.add"(%3923, %cst_755) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %3925 = tensor.empty() : tensor<1x13x1xf32>
    %3926 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3924 : tensor<1x13x1xf32>) outs(%3925 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %3927 = tensor.empty() : tensor<1x13x4096xf32>
    %3928 = tensor.empty() : tensor<1x13x4096xf32>
    %3929 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3926 : tensor<1x13x1xf32>) outs(%3928 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %3930 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3920, %3929 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%3927 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %3931 = tensor.empty() : tensor<1x13x4096xf32>
    %3932 = tensor.empty() : tensor<1x13x4096xf32>
    %3933 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg47 : tensor<4096xf32>) outs(%3932 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %3934 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3933, %3930 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%3931 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %3935 = tensor.empty() : tensor<4096x11008xf32>
    %3936 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg231 : tensor<11008x4096xf32>) outs(%3935 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3937 = "tosa.reshape"(%3934) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %3938 = tensor.empty() : tensor<13x11008xf32>
    %3939 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3938 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %3940 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3937, %3936 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%3939 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %3941 = "tosa.reshape"(%3940) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %3942 = tensor.empty() : tensor<1x13x11008xf32>
    %3943 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3941 : tensor<1x13x11008xf32>) outs(%3942 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      %5295 = math.exp %5294 : f32
      %cst_999 = arith.constant 1.000000e+00 : f32
      %5296 = arith.addf %cst_999, %5295 : f32
      %5297 = arith.divf %in, %5296 : f32
      linalg.yield %5297 : f32
    } -> tensor<1x13x11008xf32>
    %3944 = tensor.empty() : tensor<4096x11008xf32>
    %3945 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg232 : tensor<11008x4096xf32>) outs(%3944 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %3946 = "tosa.reshape"(%3934) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %3947 = tensor.empty() : tensor<13x11008xf32>
    %3948 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3947 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %3949 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3946, %3945 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%3948 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %3950 = "tosa.reshape"(%3949) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %3951 = tensor.empty() : tensor<1x13x11008xf32>
    %3952 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3943, %3950 : tensor<1x13x11008xf32>, tensor<1x13x11008xf32>) outs(%3951 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x11008xf32>
    %3953 = tensor.empty() : tensor<11008x4096xf32>
    %3954 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg233 : tensor<4096x11008xf32>) outs(%3953 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %3955 = "tosa.reshape"(%3952) {new_shape = array<i64: 13, 11008>} : (tensor<1x13x11008xf32>) -> tensor<13x11008xf32>
    %3956 = tensor.empty() : tensor<13x4096xf32>
    %3957 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3956 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %3958 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3955, %3954 : tensor<13x11008xf32>, tensor<11008x4096xf32>) outs(%3957 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %3959 = "tosa.reshape"(%3958) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %3960 = "tosa.add"(%3920, %3959) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %3961 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_756 = arith.constant 2 : i32
    %3962 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3960 : tensor<1x13x4096xf32>) outs(%3961 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_756 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_757 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %3963 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%3962 : tensor<1x13x4096xf32>) outs(%cst_757 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_758 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %3964 = "tosa.add"(%3963, %cst_758) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %3965 = tensor.empty() : tensor<1x13x1xf32>
    %3966 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3964 : tensor<1x13x1xf32>) outs(%3965 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %3967 = tensor.empty() : tensor<1x13x4096xf32>
    %3968 = tensor.empty() : tensor<1x13x4096xf32>
    %3969 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3966 : tensor<1x13x1xf32>) outs(%3968 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %3970 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3960, %3969 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%3967 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %3971 = tensor.empty() : tensor<1x13x4096xf32>
    %3972 = tensor.empty() : tensor<1x13x4096xf32>
    %3973 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg48 : tensor<4096xf32>) outs(%3972 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %3974 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3973, %3970 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%3971 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %3975 = tensor.empty() : tensor<4096x4096xf32>
    %3976 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg234 : tensor<4096x4096xf32>) outs(%3975 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3977 = "tosa.reshape"(%3974) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %3978 = tensor.empty() : tensor<13x4096xf32>
    %3979 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3978 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %3980 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3977, %3976 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%3979 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %3981 = "tosa.reshape"(%3980) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %3982 = tensor.empty() : tensor<4096x4096xf32>
    %3983 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg235 : tensor<4096x4096xf32>) outs(%3982 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3984 = "tosa.reshape"(%3974) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %3985 = tensor.empty() : tensor<13x4096xf32>
    %3986 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3985 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %3987 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3984, %3983 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%3986 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %3988 = "tosa.reshape"(%3987) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %3989 = tensor.empty() : tensor<4096x4096xf32>
    %3990 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg236 : tensor<4096x4096xf32>) outs(%3989 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %3991 = "tosa.reshape"(%3974) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %3992 = tensor.empty() : tensor<13x4096xf32>
    %3993 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%3992 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %3994 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3991, %3990 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%3993 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %3995 = "tosa.reshape"(%3994) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %3996 = "tosa.reshape"(%3981) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %3997 = tensor.empty() : tensor<1x32x13x128xf32>
    %3998 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3996 : tensor<1x13x32x128xf32>) outs(%3997 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %3999 = "tosa.reshape"(%3988) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %4000 = tensor.empty() : tensor<1x32x13x128xf32>
    %4001 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3999 : tensor<1x13x32x128xf32>) outs(%4000 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %4002 = "tosa.reshape"(%3995) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %4003 = tensor.empty() : tensor<1x32x13x128xf32>
    %4004 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4002 : tensor<1x13x32x128xf32>) outs(%4003 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_759 = tensor.extract_slice %arg339[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_760 = tensor.extract_slice %extracted_slice_759[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_761 = tensor.extract_slice %extracted_slice_760[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %extracted_slice_762 = tensor.extract_slice %arg340[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_763 = tensor.extract_slice %extracted_slice_762[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_764 = tensor.extract_slice %extracted_slice_763[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %4005 = tensor.empty() : tensor<1x13x128xf32>
    %4006 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_761 : tensor<1x1x13x128xf32>) outs(%4005 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %4007 = tensor.empty() : tensor<13x128xf32>
    %4008 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%4006 : tensor<1x13x128xf32>) outs(%4007 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %4009 = tensor.empty() : tensor<1x13x128xf32>
    %4010 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_764 : tensor<1x1x13x128xf32>) outs(%4009 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %4011 = tensor.empty() : tensor<13x128xf32>
    %4012 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%4010 : tensor<1x13x128xf32>) outs(%4011 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %4013 = tensor.empty() : tensor<1x13x128xf32>
    %4014 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%4013 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %4008[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %4015 = "tosa.reshape"(%4014) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %4016 = tensor.empty() : tensor<1x13x128xf32>
    %4017 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%4016 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %4012[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %4018 = "tosa.reshape"(%4017) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %4019 = tensor.empty() : tensor<1x32x13x128xf32>
    %4020 = tensor.empty() : tensor<1x32x13x128xf32>
    %4021 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4015 : tensor<1x1x13x128xf32>) outs(%4020 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %4022 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3998, %4021 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%4019 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_765 = tensor.extract_slice %3998[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_766 = tensor.extract_slice %3998[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %4023 = tensor.empty() : tensor<1x32x13x64xf32>
    %4024 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_766 : tensor<1x32x13x64xf32>) outs(%4023 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %4025 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_767 = tensor.insert_slice %4024 into %4025[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_768 = tensor.insert_slice %extracted_slice_765 into %inserted_slice_767[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %4026 = tensor.empty() : tensor<1x32x13x128xf32>
    %4027 = tensor.empty() : tensor<1x32x13x128xf32>
    %4028 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4018 : tensor<1x1x13x128xf32>) outs(%4027 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %4029 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_768, %4028 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%4026 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %4030 = "tosa.add"(%4022, %4029) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %4031 = tensor.empty() : tensor<1x32x13x128xf32>
    %4032 = tensor.empty() : tensor<1x32x13x128xf32>
    %4033 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4015 : tensor<1x1x13x128xf32>) outs(%4032 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %4034 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4001, %4033 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%4031 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_769 = tensor.extract_slice %4001[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_770 = tensor.extract_slice %4001[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %4035 = tensor.empty() : tensor<1x32x13x64xf32>
    %4036 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_770 : tensor<1x32x13x64xf32>) outs(%4035 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %4037 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_771 = tensor.insert_slice %4036 into %4037[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_772 = tensor.insert_slice %extracted_slice_769 into %inserted_slice_771[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %4038 = tensor.empty() : tensor<1x32x13x128xf32>
    %4039 = tensor.empty() : tensor<1x32x13x128xf32>
    %4040 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4018 : tensor<1x1x13x128xf32>) outs(%4039 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %4041 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_772, %4040 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%4038 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %4042 = "tosa.add"(%4034, %4041) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %4043 = tensor.empty() : tensor<1x32x128x13xf32>
    %4044 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4042 : tensor<1x32x13x128xf32>) outs(%4043 : tensor<1x32x128x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x13xf32>
    %4045 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_773 = tensor.extract_slice %4030[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_774 = tensor.insert_slice %extracted_slice_773 into %4045[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %4046 = "tosa.reshape"(%inserted_slice_774) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %4047 = tensor.empty() : tensor<1x32x128x13xf32>
    %extracted_slice_775 = tensor.extract_slice %4044[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> to tensor<1x32x128x13xf32>
    %inserted_slice_776 = tensor.insert_slice %extracted_slice_775 into %4047[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> into tensor<1x32x128x13xf32>
    %4048 = "tosa.reshape"(%inserted_slice_776) {new_shape = array<i64: 32, 128, 13>} : (tensor<1x32x128x13xf32>) -> tensor<32x128x13xf32>
    %4049 = tensor.empty() : tensor<32x13x13xf32>
    %4050 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%4049 : tensor<32x13x13xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x13xf32>
    %4051 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4046, %4048 : tensor<32x13x128xf32>, tensor<32x128x13xf32>) outs(%4050 : tensor<32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x13xf32>
    %4052 = "tosa.reshape"(%4051) {new_shape = array<i64: 1, 32, 13, 13>} : (tensor<32x13x13xf32>) -> tensor<1x32x13x13xf32>
    %cst_777 = arith.constant 11.3137083 : f32
    %4053 = tensor.empty() : tensor<1x32x13x13xf32>
    %4054 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4052 : tensor<1x32x13x13xf32>) outs(%4053 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.divf %in, %cst_777 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %4055 = "tosa.add"(%4054, %24) : (tensor<1x32x13x13xf32>, tensor<1x1x13x13xf32>) -> tensor<1x32x13x13xf32>
    %4056 = tensor.empty() : tensor<1x32x13x1xf32>
    %4057 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4056 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %4058 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4055 : tensor<1x32x13x13xf32>) outs(%4056 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.maxf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %4059 = tensor.empty() : tensor<1x32x13x13xf32>
    %4060 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4055, %4058 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%4059 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.subf %in, %in_999 : f32
      %5295 = math.exp %5294 : f32
      linalg.yield %5295 : f32
    } -> tensor<1x32x13x13xf32>
    %4061 = tensor.empty() : tensor<1x32x13x1xf32>
    %4062 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4061 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %4063 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4060 : tensor<1x32x13x13xf32>) outs(%4062 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %4064 = tensor.empty() : tensor<1x32x13x13xf32>
    %4065 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4060, %4063 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%4064 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.divf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %4066 = tensor.empty() : tensor<1x32x13x13xf32>
    %extracted_slice_778 = tensor.extract_slice %4065[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> to tensor<1x32x13x13xf32>
    %inserted_slice_779 = tensor.insert_slice %extracted_slice_778 into %4066[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> into tensor<1x32x13x13xf32>
    %4067 = "tosa.reshape"(%inserted_slice_779) {new_shape = array<i64: 32, 13, 13>} : (tensor<1x32x13x13xf32>) -> tensor<32x13x13xf32>
    %4068 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_780 = tensor.extract_slice %4004[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_781 = tensor.insert_slice %extracted_slice_780 into %4068[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %4069 = "tosa.reshape"(%inserted_slice_781) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %4070 = tensor.empty() : tensor<32x13x128xf32>
    %4071 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%4070 : tensor<32x13x128xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x128xf32>
    %4072 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4067, %4069 : tensor<32x13x13xf32>, tensor<32x13x128xf32>) outs(%4071 : tensor<32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x128xf32>
    %4073 = "tosa.reshape"(%4072) {new_shape = array<i64: 1, 32, 13, 128>} : (tensor<32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %4074 = tensor.empty() : tensor<1x13x32x128xf32>
    %4075 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4073 : tensor<1x32x13x128xf32>) outs(%4074 : tensor<1x13x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x32x128xf32>
    %extracted_slice_782 = tensor.extract_slice %4075[0, 0, 0, 0] [1, 13, 32, 128] [1, 1, 1, 1] : tensor<1x13x32x128xf32> to tensor<1x13x32x128xf32>
    %4076 = "tosa.reshape"(%extracted_slice_782) {new_shape = array<i64: 1, 13, 4096>} : (tensor<1x13x32x128xf32>) -> tensor<1x13x4096xf32>
    %4077 = tensor.empty() : tensor<4096x4096xf32>
    %4078 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg237 : tensor<4096x4096xf32>) outs(%4077 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4079 = "tosa.reshape"(%4076) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %4080 = tensor.empty() : tensor<13x4096xf32>
    %4081 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4080 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %4082 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4079, %4078 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%4081 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %4083 = "tosa.reshape"(%4082) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %4084 = "tosa.add"(%3960, %4083) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %4085 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_783 = arith.constant 2 : i32
    %4086 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4084 : tensor<1x13x4096xf32>) outs(%4085 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_783 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_784 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %4087 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4086 : tensor<1x13x4096xf32>) outs(%cst_784 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_785 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4088 = "tosa.add"(%4087, %cst_785) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %4089 = tensor.empty() : tensor<1x13x1xf32>
    %4090 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4088 : tensor<1x13x1xf32>) outs(%4089 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %4091 = tensor.empty() : tensor<1x13x4096xf32>
    %4092 = tensor.empty() : tensor<1x13x4096xf32>
    %4093 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4090 : tensor<1x13x1xf32>) outs(%4092 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %4094 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4084, %4093 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%4091 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %4095 = tensor.empty() : tensor<1x13x4096xf32>
    %4096 = tensor.empty() : tensor<1x13x4096xf32>
    %4097 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg49 : tensor<4096xf32>) outs(%4096 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %4098 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4097, %4094 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%4095 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %4099 = tensor.empty() : tensor<4096x11008xf32>
    %4100 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg238 : tensor<11008x4096xf32>) outs(%4099 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4101 = "tosa.reshape"(%4098) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %4102 = tensor.empty() : tensor<13x11008xf32>
    %4103 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4102 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %4104 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4101, %4100 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%4103 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %4105 = "tosa.reshape"(%4104) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %4106 = tensor.empty() : tensor<1x13x11008xf32>
    %4107 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4105 : tensor<1x13x11008xf32>) outs(%4106 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      %5295 = math.exp %5294 : f32
      %cst_999 = arith.constant 1.000000e+00 : f32
      %5296 = arith.addf %cst_999, %5295 : f32
      %5297 = arith.divf %in, %5296 : f32
      linalg.yield %5297 : f32
    } -> tensor<1x13x11008xf32>
    %4108 = tensor.empty() : tensor<4096x11008xf32>
    %4109 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg239 : tensor<11008x4096xf32>) outs(%4108 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4110 = "tosa.reshape"(%4098) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %4111 = tensor.empty() : tensor<13x11008xf32>
    %4112 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4111 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %4113 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4110, %4109 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%4112 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %4114 = "tosa.reshape"(%4113) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %4115 = tensor.empty() : tensor<1x13x11008xf32>
    %4116 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4107, %4114 : tensor<1x13x11008xf32>, tensor<1x13x11008xf32>) outs(%4115 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x11008xf32>
    %4117 = tensor.empty() : tensor<11008x4096xf32>
    %4118 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg240 : tensor<4096x11008xf32>) outs(%4117 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %4119 = "tosa.reshape"(%4116) {new_shape = array<i64: 13, 11008>} : (tensor<1x13x11008xf32>) -> tensor<13x11008xf32>
    %4120 = tensor.empty() : tensor<13x4096xf32>
    %4121 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4120 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %4122 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4119, %4118 : tensor<13x11008xf32>, tensor<11008x4096xf32>) outs(%4121 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %4123 = "tosa.reshape"(%4122) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %4124 = "tosa.add"(%4084, %4123) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %4125 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_786 = arith.constant 2 : i32
    %4126 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4124 : tensor<1x13x4096xf32>) outs(%4125 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_786 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_787 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %4127 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4126 : tensor<1x13x4096xf32>) outs(%cst_787 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_788 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4128 = "tosa.add"(%4127, %cst_788) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %4129 = tensor.empty() : tensor<1x13x1xf32>
    %4130 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4128 : tensor<1x13x1xf32>) outs(%4129 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %4131 = tensor.empty() : tensor<1x13x4096xf32>
    %4132 = tensor.empty() : tensor<1x13x4096xf32>
    %4133 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4130 : tensor<1x13x1xf32>) outs(%4132 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %4134 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4124, %4133 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%4131 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %4135 = tensor.empty() : tensor<1x13x4096xf32>
    %4136 = tensor.empty() : tensor<1x13x4096xf32>
    %4137 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg50 : tensor<4096xf32>) outs(%4136 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %4138 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4137, %4134 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%4135 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %4139 = tensor.empty() : tensor<4096x4096xf32>
    %4140 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg241 : tensor<4096x4096xf32>) outs(%4139 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4141 = "tosa.reshape"(%4138) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %4142 = tensor.empty() : tensor<13x4096xf32>
    %4143 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4142 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %4144 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4141, %4140 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%4143 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %4145 = "tosa.reshape"(%4144) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %4146 = tensor.empty() : tensor<4096x4096xf32>
    %4147 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg242 : tensor<4096x4096xf32>) outs(%4146 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4148 = "tosa.reshape"(%4138) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %4149 = tensor.empty() : tensor<13x4096xf32>
    %4150 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4149 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %4151 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4148, %4147 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%4150 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %4152 = "tosa.reshape"(%4151) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %4153 = tensor.empty() : tensor<4096x4096xf32>
    %4154 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg243 : tensor<4096x4096xf32>) outs(%4153 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4155 = "tosa.reshape"(%4138) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %4156 = tensor.empty() : tensor<13x4096xf32>
    %4157 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4156 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %4158 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4155, %4154 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%4157 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %4159 = "tosa.reshape"(%4158) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %4160 = "tosa.reshape"(%4145) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %4161 = tensor.empty() : tensor<1x32x13x128xf32>
    %4162 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4160 : tensor<1x13x32x128xf32>) outs(%4161 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %4163 = "tosa.reshape"(%4152) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %4164 = tensor.empty() : tensor<1x32x13x128xf32>
    %4165 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4163 : tensor<1x13x32x128xf32>) outs(%4164 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %4166 = "tosa.reshape"(%4159) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %4167 = tensor.empty() : tensor<1x32x13x128xf32>
    %4168 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4166 : tensor<1x13x32x128xf32>) outs(%4167 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_789 = tensor.extract_slice %arg341[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_790 = tensor.extract_slice %extracted_slice_789[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_791 = tensor.extract_slice %extracted_slice_790[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %extracted_slice_792 = tensor.extract_slice %arg342[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_793 = tensor.extract_slice %extracted_slice_792[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_794 = tensor.extract_slice %extracted_slice_793[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %4169 = tensor.empty() : tensor<1x13x128xf32>
    %4170 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_791 : tensor<1x1x13x128xf32>) outs(%4169 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %4171 = tensor.empty() : tensor<13x128xf32>
    %4172 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%4170 : tensor<1x13x128xf32>) outs(%4171 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %4173 = tensor.empty() : tensor<1x13x128xf32>
    %4174 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_794 : tensor<1x1x13x128xf32>) outs(%4173 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %4175 = tensor.empty() : tensor<13x128xf32>
    %4176 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%4174 : tensor<1x13x128xf32>) outs(%4175 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %4177 = tensor.empty() : tensor<1x13x128xf32>
    %4178 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%4177 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %4172[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %4179 = "tosa.reshape"(%4178) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %4180 = tensor.empty() : tensor<1x13x128xf32>
    %4181 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%4180 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %4176[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %4182 = "tosa.reshape"(%4181) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %4183 = tensor.empty() : tensor<1x32x13x128xf32>
    %4184 = tensor.empty() : tensor<1x32x13x128xf32>
    %4185 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4179 : tensor<1x1x13x128xf32>) outs(%4184 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %4186 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4162, %4185 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%4183 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_795 = tensor.extract_slice %4162[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_796 = tensor.extract_slice %4162[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %4187 = tensor.empty() : tensor<1x32x13x64xf32>
    %4188 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_796 : tensor<1x32x13x64xf32>) outs(%4187 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %4189 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_797 = tensor.insert_slice %4188 into %4189[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_798 = tensor.insert_slice %extracted_slice_795 into %inserted_slice_797[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %4190 = tensor.empty() : tensor<1x32x13x128xf32>
    %4191 = tensor.empty() : tensor<1x32x13x128xf32>
    %4192 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4182 : tensor<1x1x13x128xf32>) outs(%4191 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %4193 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_798, %4192 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%4190 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %4194 = "tosa.add"(%4186, %4193) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %4195 = tensor.empty() : tensor<1x32x13x128xf32>
    %4196 = tensor.empty() : tensor<1x32x13x128xf32>
    %4197 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4179 : tensor<1x1x13x128xf32>) outs(%4196 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %4198 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4165, %4197 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%4195 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_799 = tensor.extract_slice %4165[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_800 = tensor.extract_slice %4165[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %4199 = tensor.empty() : tensor<1x32x13x64xf32>
    %4200 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_800 : tensor<1x32x13x64xf32>) outs(%4199 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %4201 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_801 = tensor.insert_slice %4200 into %4201[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_802 = tensor.insert_slice %extracted_slice_799 into %inserted_slice_801[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %4202 = tensor.empty() : tensor<1x32x13x128xf32>
    %4203 = tensor.empty() : tensor<1x32x13x128xf32>
    %4204 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4182 : tensor<1x1x13x128xf32>) outs(%4203 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %4205 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_802, %4204 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%4202 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %4206 = "tosa.add"(%4198, %4205) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %4207 = tensor.empty() : tensor<1x32x128x13xf32>
    %4208 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4206 : tensor<1x32x13x128xf32>) outs(%4207 : tensor<1x32x128x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x13xf32>
    %4209 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_803 = tensor.extract_slice %4194[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_804 = tensor.insert_slice %extracted_slice_803 into %4209[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %4210 = "tosa.reshape"(%inserted_slice_804) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %4211 = tensor.empty() : tensor<1x32x128x13xf32>
    %extracted_slice_805 = tensor.extract_slice %4208[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> to tensor<1x32x128x13xf32>
    %inserted_slice_806 = tensor.insert_slice %extracted_slice_805 into %4211[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> into tensor<1x32x128x13xf32>
    %4212 = "tosa.reshape"(%inserted_slice_806) {new_shape = array<i64: 32, 128, 13>} : (tensor<1x32x128x13xf32>) -> tensor<32x128x13xf32>
    %4213 = tensor.empty() : tensor<32x13x13xf32>
    %4214 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%4213 : tensor<32x13x13xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x13xf32>
    %4215 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4210, %4212 : tensor<32x13x128xf32>, tensor<32x128x13xf32>) outs(%4214 : tensor<32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x13xf32>
    %4216 = "tosa.reshape"(%4215) {new_shape = array<i64: 1, 32, 13, 13>} : (tensor<32x13x13xf32>) -> tensor<1x32x13x13xf32>
    %cst_807 = arith.constant 11.3137083 : f32
    %4217 = tensor.empty() : tensor<1x32x13x13xf32>
    %4218 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4216 : tensor<1x32x13x13xf32>) outs(%4217 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.divf %in, %cst_807 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %4219 = "tosa.add"(%4218, %24) : (tensor<1x32x13x13xf32>, tensor<1x1x13x13xf32>) -> tensor<1x32x13x13xf32>
    %4220 = tensor.empty() : tensor<1x32x13x1xf32>
    %4221 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4220 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %4222 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4219 : tensor<1x32x13x13xf32>) outs(%4220 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.maxf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %4223 = tensor.empty() : tensor<1x32x13x13xf32>
    %4224 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4219, %4222 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%4223 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.subf %in, %in_999 : f32
      %5295 = math.exp %5294 : f32
      linalg.yield %5295 : f32
    } -> tensor<1x32x13x13xf32>
    %4225 = tensor.empty() : tensor<1x32x13x1xf32>
    %4226 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4225 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %4227 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4224 : tensor<1x32x13x13xf32>) outs(%4226 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %4228 = tensor.empty() : tensor<1x32x13x13xf32>
    %4229 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4224, %4227 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%4228 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.divf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %4230 = tensor.empty() : tensor<1x32x13x13xf32>
    %extracted_slice_808 = tensor.extract_slice %4229[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> to tensor<1x32x13x13xf32>
    %inserted_slice_809 = tensor.insert_slice %extracted_slice_808 into %4230[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> into tensor<1x32x13x13xf32>
    %4231 = "tosa.reshape"(%inserted_slice_809) {new_shape = array<i64: 32, 13, 13>} : (tensor<1x32x13x13xf32>) -> tensor<32x13x13xf32>
    %4232 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_810 = tensor.extract_slice %4168[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_811 = tensor.insert_slice %extracted_slice_810 into %4232[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %4233 = "tosa.reshape"(%inserted_slice_811) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %4234 = tensor.empty() : tensor<32x13x128xf32>
    %4235 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%4234 : tensor<32x13x128xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x128xf32>
    %4236 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4231, %4233 : tensor<32x13x13xf32>, tensor<32x13x128xf32>) outs(%4235 : tensor<32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x128xf32>
    %4237 = "tosa.reshape"(%4236) {new_shape = array<i64: 1, 32, 13, 128>} : (tensor<32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %4238 = tensor.empty() : tensor<1x13x32x128xf32>
    %4239 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4237 : tensor<1x32x13x128xf32>) outs(%4238 : tensor<1x13x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x32x128xf32>
    %extracted_slice_812 = tensor.extract_slice %4239[0, 0, 0, 0] [1, 13, 32, 128] [1, 1, 1, 1] : tensor<1x13x32x128xf32> to tensor<1x13x32x128xf32>
    %4240 = "tosa.reshape"(%extracted_slice_812) {new_shape = array<i64: 1, 13, 4096>} : (tensor<1x13x32x128xf32>) -> tensor<1x13x4096xf32>
    %4241 = tensor.empty() : tensor<4096x4096xf32>
    %4242 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg244 : tensor<4096x4096xf32>) outs(%4241 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4243 = "tosa.reshape"(%4240) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %4244 = tensor.empty() : tensor<13x4096xf32>
    %4245 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4244 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %4246 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4243, %4242 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%4245 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %4247 = "tosa.reshape"(%4246) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %4248 = "tosa.add"(%4124, %4247) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %4249 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_813 = arith.constant 2 : i32
    %4250 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4248 : tensor<1x13x4096xf32>) outs(%4249 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_813 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_814 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %4251 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4250 : tensor<1x13x4096xf32>) outs(%cst_814 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_815 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4252 = "tosa.add"(%4251, %cst_815) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %4253 = tensor.empty() : tensor<1x13x1xf32>
    %4254 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4252 : tensor<1x13x1xf32>) outs(%4253 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %4255 = tensor.empty() : tensor<1x13x4096xf32>
    %4256 = tensor.empty() : tensor<1x13x4096xf32>
    %4257 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4254 : tensor<1x13x1xf32>) outs(%4256 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %4258 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4248, %4257 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%4255 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %4259 = tensor.empty() : tensor<1x13x4096xf32>
    %4260 = tensor.empty() : tensor<1x13x4096xf32>
    %4261 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg51 : tensor<4096xf32>) outs(%4260 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %4262 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4261, %4258 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%4259 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %4263 = tensor.empty() : tensor<4096x11008xf32>
    %4264 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg245 : tensor<11008x4096xf32>) outs(%4263 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4265 = "tosa.reshape"(%4262) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %4266 = tensor.empty() : tensor<13x11008xf32>
    %4267 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4266 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %4268 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4265, %4264 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%4267 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %4269 = "tosa.reshape"(%4268) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %4270 = tensor.empty() : tensor<1x13x11008xf32>
    %4271 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4269 : tensor<1x13x11008xf32>) outs(%4270 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      %5295 = math.exp %5294 : f32
      %cst_999 = arith.constant 1.000000e+00 : f32
      %5296 = arith.addf %cst_999, %5295 : f32
      %5297 = arith.divf %in, %5296 : f32
      linalg.yield %5297 : f32
    } -> tensor<1x13x11008xf32>
    %4272 = tensor.empty() : tensor<4096x11008xf32>
    %4273 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg246 : tensor<11008x4096xf32>) outs(%4272 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4274 = "tosa.reshape"(%4262) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %4275 = tensor.empty() : tensor<13x11008xf32>
    %4276 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4275 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %4277 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4274, %4273 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%4276 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %4278 = "tosa.reshape"(%4277) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %4279 = tensor.empty() : tensor<1x13x11008xf32>
    %4280 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4271, %4278 : tensor<1x13x11008xf32>, tensor<1x13x11008xf32>) outs(%4279 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x11008xf32>
    %4281 = tensor.empty() : tensor<11008x4096xf32>
    %4282 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg247 : tensor<4096x11008xf32>) outs(%4281 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %4283 = "tosa.reshape"(%4280) {new_shape = array<i64: 13, 11008>} : (tensor<1x13x11008xf32>) -> tensor<13x11008xf32>
    %4284 = tensor.empty() : tensor<13x4096xf32>
    %4285 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4284 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %4286 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4283, %4282 : tensor<13x11008xf32>, tensor<11008x4096xf32>) outs(%4285 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %4287 = "tosa.reshape"(%4286) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %4288 = "tosa.add"(%4248, %4287) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %4289 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_816 = arith.constant 2 : i32
    %4290 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4288 : tensor<1x13x4096xf32>) outs(%4289 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_816 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_817 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %4291 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4290 : tensor<1x13x4096xf32>) outs(%cst_817 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_818 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4292 = "tosa.add"(%4291, %cst_818) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %4293 = tensor.empty() : tensor<1x13x1xf32>
    %4294 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4292 : tensor<1x13x1xf32>) outs(%4293 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %4295 = tensor.empty() : tensor<1x13x4096xf32>
    %4296 = tensor.empty() : tensor<1x13x4096xf32>
    %4297 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4294 : tensor<1x13x1xf32>) outs(%4296 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %4298 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4288, %4297 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%4295 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %4299 = tensor.empty() : tensor<1x13x4096xf32>
    %4300 = tensor.empty() : tensor<1x13x4096xf32>
    %4301 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg52 : tensor<4096xf32>) outs(%4300 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %4302 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4301, %4298 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%4299 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %4303 = tensor.empty() : tensor<4096x4096xf32>
    %4304 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg248 : tensor<4096x4096xf32>) outs(%4303 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4305 = "tosa.reshape"(%4302) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %4306 = tensor.empty() : tensor<13x4096xf32>
    %4307 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4306 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %4308 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4305, %4304 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%4307 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %4309 = "tosa.reshape"(%4308) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %4310 = tensor.empty() : tensor<4096x4096xf32>
    %4311 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg249 : tensor<4096x4096xf32>) outs(%4310 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4312 = "tosa.reshape"(%4302) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %4313 = tensor.empty() : tensor<13x4096xf32>
    %4314 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4313 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %4315 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4312, %4311 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%4314 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %4316 = "tosa.reshape"(%4315) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %4317 = tensor.empty() : tensor<4096x4096xf32>
    %4318 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg250 : tensor<4096x4096xf32>) outs(%4317 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4319 = "tosa.reshape"(%4302) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %4320 = tensor.empty() : tensor<13x4096xf32>
    %4321 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4320 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %4322 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4319, %4318 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%4321 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %4323 = "tosa.reshape"(%4322) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %4324 = "tosa.reshape"(%4309) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %4325 = tensor.empty() : tensor<1x32x13x128xf32>
    %4326 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4324 : tensor<1x13x32x128xf32>) outs(%4325 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %4327 = "tosa.reshape"(%4316) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %4328 = tensor.empty() : tensor<1x32x13x128xf32>
    %4329 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4327 : tensor<1x13x32x128xf32>) outs(%4328 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %4330 = "tosa.reshape"(%4323) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %4331 = tensor.empty() : tensor<1x32x13x128xf32>
    %4332 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4330 : tensor<1x13x32x128xf32>) outs(%4331 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_819 = tensor.extract_slice %arg343[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_820 = tensor.extract_slice %extracted_slice_819[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_821 = tensor.extract_slice %extracted_slice_820[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %extracted_slice_822 = tensor.extract_slice %arg344[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_823 = tensor.extract_slice %extracted_slice_822[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_824 = tensor.extract_slice %extracted_slice_823[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %4333 = tensor.empty() : tensor<1x13x128xf32>
    %4334 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_821 : tensor<1x1x13x128xf32>) outs(%4333 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %4335 = tensor.empty() : tensor<13x128xf32>
    %4336 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%4334 : tensor<1x13x128xf32>) outs(%4335 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %4337 = tensor.empty() : tensor<1x13x128xf32>
    %4338 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_824 : tensor<1x1x13x128xf32>) outs(%4337 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %4339 = tensor.empty() : tensor<13x128xf32>
    %4340 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%4338 : tensor<1x13x128xf32>) outs(%4339 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %4341 = tensor.empty() : tensor<1x13x128xf32>
    %4342 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%4341 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %4336[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %4343 = "tosa.reshape"(%4342) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %4344 = tensor.empty() : tensor<1x13x128xf32>
    %4345 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%4344 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %4340[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %4346 = "tosa.reshape"(%4345) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %4347 = tensor.empty() : tensor<1x32x13x128xf32>
    %4348 = tensor.empty() : tensor<1x32x13x128xf32>
    %4349 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4343 : tensor<1x1x13x128xf32>) outs(%4348 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %4350 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4326, %4349 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%4347 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_825 = tensor.extract_slice %4326[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_826 = tensor.extract_slice %4326[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %4351 = tensor.empty() : tensor<1x32x13x64xf32>
    %4352 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_826 : tensor<1x32x13x64xf32>) outs(%4351 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %4353 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_827 = tensor.insert_slice %4352 into %4353[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_828 = tensor.insert_slice %extracted_slice_825 into %inserted_slice_827[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %4354 = tensor.empty() : tensor<1x32x13x128xf32>
    %4355 = tensor.empty() : tensor<1x32x13x128xf32>
    %4356 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4346 : tensor<1x1x13x128xf32>) outs(%4355 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %4357 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_828, %4356 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%4354 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %4358 = "tosa.add"(%4350, %4357) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %4359 = tensor.empty() : tensor<1x32x13x128xf32>
    %4360 = tensor.empty() : tensor<1x32x13x128xf32>
    %4361 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4343 : tensor<1x1x13x128xf32>) outs(%4360 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %4362 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4329, %4361 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%4359 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_829 = tensor.extract_slice %4329[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_830 = tensor.extract_slice %4329[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %4363 = tensor.empty() : tensor<1x32x13x64xf32>
    %4364 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_830 : tensor<1x32x13x64xf32>) outs(%4363 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %4365 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_831 = tensor.insert_slice %4364 into %4365[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_832 = tensor.insert_slice %extracted_slice_829 into %inserted_slice_831[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %4366 = tensor.empty() : tensor<1x32x13x128xf32>
    %4367 = tensor.empty() : tensor<1x32x13x128xf32>
    %4368 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4346 : tensor<1x1x13x128xf32>) outs(%4367 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %4369 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_832, %4368 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%4366 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %4370 = "tosa.add"(%4362, %4369) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %4371 = tensor.empty() : tensor<1x32x128x13xf32>
    %4372 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4370 : tensor<1x32x13x128xf32>) outs(%4371 : tensor<1x32x128x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x13xf32>
    %4373 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_833 = tensor.extract_slice %4358[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_834 = tensor.insert_slice %extracted_slice_833 into %4373[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %4374 = "tosa.reshape"(%inserted_slice_834) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %4375 = tensor.empty() : tensor<1x32x128x13xf32>
    %extracted_slice_835 = tensor.extract_slice %4372[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> to tensor<1x32x128x13xf32>
    %inserted_slice_836 = tensor.insert_slice %extracted_slice_835 into %4375[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> into tensor<1x32x128x13xf32>
    %4376 = "tosa.reshape"(%inserted_slice_836) {new_shape = array<i64: 32, 128, 13>} : (tensor<1x32x128x13xf32>) -> tensor<32x128x13xf32>
    %4377 = tensor.empty() : tensor<32x13x13xf32>
    %4378 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%4377 : tensor<32x13x13xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x13xf32>
    %4379 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4374, %4376 : tensor<32x13x128xf32>, tensor<32x128x13xf32>) outs(%4378 : tensor<32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x13xf32>
    %4380 = "tosa.reshape"(%4379) {new_shape = array<i64: 1, 32, 13, 13>} : (tensor<32x13x13xf32>) -> tensor<1x32x13x13xf32>
    %cst_837 = arith.constant 11.3137083 : f32
    %4381 = tensor.empty() : tensor<1x32x13x13xf32>
    %4382 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4380 : tensor<1x32x13x13xf32>) outs(%4381 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.divf %in, %cst_837 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %4383 = "tosa.add"(%4382, %24) : (tensor<1x32x13x13xf32>, tensor<1x1x13x13xf32>) -> tensor<1x32x13x13xf32>
    %4384 = tensor.empty() : tensor<1x32x13x1xf32>
    %4385 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4384 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %4386 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4383 : tensor<1x32x13x13xf32>) outs(%4384 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.maxf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %4387 = tensor.empty() : tensor<1x32x13x13xf32>
    %4388 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4383, %4386 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%4387 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.subf %in, %in_999 : f32
      %5295 = math.exp %5294 : f32
      linalg.yield %5295 : f32
    } -> tensor<1x32x13x13xf32>
    %4389 = tensor.empty() : tensor<1x32x13x1xf32>
    %4390 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4389 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %4391 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4388 : tensor<1x32x13x13xf32>) outs(%4390 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %4392 = tensor.empty() : tensor<1x32x13x13xf32>
    %4393 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4388, %4391 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%4392 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.divf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %4394 = tensor.empty() : tensor<1x32x13x13xf32>
    %extracted_slice_838 = tensor.extract_slice %4393[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> to tensor<1x32x13x13xf32>
    %inserted_slice_839 = tensor.insert_slice %extracted_slice_838 into %4394[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> into tensor<1x32x13x13xf32>
    %4395 = "tosa.reshape"(%inserted_slice_839) {new_shape = array<i64: 32, 13, 13>} : (tensor<1x32x13x13xf32>) -> tensor<32x13x13xf32>
    %4396 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_840 = tensor.extract_slice %4332[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_841 = tensor.insert_slice %extracted_slice_840 into %4396[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %4397 = "tosa.reshape"(%inserted_slice_841) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %4398 = tensor.empty() : tensor<32x13x128xf32>
    %4399 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%4398 : tensor<32x13x128xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x128xf32>
    %4400 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4395, %4397 : tensor<32x13x13xf32>, tensor<32x13x128xf32>) outs(%4399 : tensor<32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x128xf32>
    %4401 = "tosa.reshape"(%4400) {new_shape = array<i64: 1, 32, 13, 128>} : (tensor<32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %4402 = tensor.empty() : tensor<1x13x32x128xf32>
    %4403 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4401 : tensor<1x32x13x128xf32>) outs(%4402 : tensor<1x13x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x32x128xf32>
    %extracted_slice_842 = tensor.extract_slice %4403[0, 0, 0, 0] [1, 13, 32, 128] [1, 1, 1, 1] : tensor<1x13x32x128xf32> to tensor<1x13x32x128xf32>
    %4404 = "tosa.reshape"(%extracted_slice_842) {new_shape = array<i64: 1, 13, 4096>} : (tensor<1x13x32x128xf32>) -> tensor<1x13x4096xf32>
    %4405 = tensor.empty() : tensor<4096x4096xf32>
    %4406 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg251 : tensor<4096x4096xf32>) outs(%4405 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4407 = "tosa.reshape"(%4404) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %4408 = tensor.empty() : tensor<13x4096xf32>
    %4409 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4408 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %4410 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4407, %4406 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%4409 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %4411 = "tosa.reshape"(%4410) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %4412 = "tosa.add"(%4288, %4411) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %4413 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_843 = arith.constant 2 : i32
    %4414 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4412 : tensor<1x13x4096xf32>) outs(%4413 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_843 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_844 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %4415 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4414 : tensor<1x13x4096xf32>) outs(%cst_844 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_845 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4416 = "tosa.add"(%4415, %cst_845) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %4417 = tensor.empty() : tensor<1x13x1xf32>
    %4418 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4416 : tensor<1x13x1xf32>) outs(%4417 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %4419 = tensor.empty() : tensor<1x13x4096xf32>
    %4420 = tensor.empty() : tensor<1x13x4096xf32>
    %4421 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4418 : tensor<1x13x1xf32>) outs(%4420 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %4422 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4412, %4421 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%4419 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %4423 = tensor.empty() : tensor<1x13x4096xf32>
    %4424 = tensor.empty() : tensor<1x13x4096xf32>
    %4425 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg53 : tensor<4096xf32>) outs(%4424 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %4426 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4425, %4422 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%4423 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %4427 = tensor.empty() : tensor<4096x11008xf32>
    %4428 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg252 : tensor<11008x4096xf32>) outs(%4427 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4429 = "tosa.reshape"(%4426) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %4430 = tensor.empty() : tensor<13x11008xf32>
    %4431 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4430 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %4432 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4429, %4428 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%4431 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %4433 = "tosa.reshape"(%4432) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %4434 = tensor.empty() : tensor<1x13x11008xf32>
    %4435 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4433 : tensor<1x13x11008xf32>) outs(%4434 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      %5295 = math.exp %5294 : f32
      %cst_999 = arith.constant 1.000000e+00 : f32
      %5296 = arith.addf %cst_999, %5295 : f32
      %5297 = arith.divf %in, %5296 : f32
      linalg.yield %5297 : f32
    } -> tensor<1x13x11008xf32>
    %4436 = tensor.empty() : tensor<4096x11008xf32>
    %4437 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg253 : tensor<11008x4096xf32>) outs(%4436 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4438 = "tosa.reshape"(%4426) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %4439 = tensor.empty() : tensor<13x11008xf32>
    %4440 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4439 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %4441 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4438, %4437 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%4440 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %4442 = "tosa.reshape"(%4441) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %4443 = tensor.empty() : tensor<1x13x11008xf32>
    %4444 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4435, %4442 : tensor<1x13x11008xf32>, tensor<1x13x11008xf32>) outs(%4443 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x11008xf32>
    %4445 = tensor.empty() : tensor<11008x4096xf32>
    %4446 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg254 : tensor<4096x11008xf32>) outs(%4445 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %4447 = "tosa.reshape"(%4444) {new_shape = array<i64: 13, 11008>} : (tensor<1x13x11008xf32>) -> tensor<13x11008xf32>
    %4448 = tensor.empty() : tensor<13x4096xf32>
    %4449 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4448 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %4450 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4447, %4446 : tensor<13x11008xf32>, tensor<11008x4096xf32>) outs(%4449 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %4451 = "tosa.reshape"(%4450) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %4452 = "tosa.add"(%4412, %4451) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %4453 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_846 = arith.constant 2 : i32
    %4454 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4452 : tensor<1x13x4096xf32>) outs(%4453 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_846 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_847 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %4455 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4454 : tensor<1x13x4096xf32>) outs(%cst_847 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_848 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4456 = "tosa.add"(%4455, %cst_848) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %4457 = tensor.empty() : tensor<1x13x1xf32>
    %4458 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4456 : tensor<1x13x1xf32>) outs(%4457 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %4459 = tensor.empty() : tensor<1x13x4096xf32>
    %4460 = tensor.empty() : tensor<1x13x4096xf32>
    %4461 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4458 : tensor<1x13x1xf32>) outs(%4460 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %4462 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4452, %4461 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%4459 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %4463 = tensor.empty() : tensor<1x13x4096xf32>
    %4464 = tensor.empty() : tensor<1x13x4096xf32>
    %4465 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg54 : tensor<4096xf32>) outs(%4464 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %4466 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4465, %4462 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%4463 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %4467 = tensor.empty() : tensor<4096x4096xf32>
    %4468 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg255 : tensor<4096x4096xf32>) outs(%4467 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4469 = "tosa.reshape"(%4466) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %4470 = tensor.empty() : tensor<13x4096xf32>
    %4471 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4470 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %4472 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4469, %4468 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%4471 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %4473 = "tosa.reshape"(%4472) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %4474 = tensor.empty() : tensor<4096x4096xf32>
    %4475 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg256 : tensor<4096x4096xf32>) outs(%4474 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4476 = "tosa.reshape"(%4466) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %4477 = tensor.empty() : tensor<13x4096xf32>
    %4478 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4477 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %4479 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4476, %4475 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%4478 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %4480 = "tosa.reshape"(%4479) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %4481 = tensor.empty() : tensor<4096x4096xf32>
    %4482 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg257 : tensor<4096x4096xf32>) outs(%4481 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4483 = "tosa.reshape"(%4466) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %4484 = tensor.empty() : tensor<13x4096xf32>
    %4485 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4484 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %4486 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4483, %4482 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%4485 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %4487 = "tosa.reshape"(%4486) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %4488 = "tosa.reshape"(%4473) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %4489 = tensor.empty() : tensor<1x32x13x128xf32>
    %4490 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4488 : tensor<1x13x32x128xf32>) outs(%4489 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %4491 = "tosa.reshape"(%4480) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %4492 = tensor.empty() : tensor<1x32x13x128xf32>
    %4493 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4491 : tensor<1x13x32x128xf32>) outs(%4492 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %4494 = "tosa.reshape"(%4487) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %4495 = tensor.empty() : tensor<1x32x13x128xf32>
    %4496 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4494 : tensor<1x13x32x128xf32>) outs(%4495 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_849 = tensor.extract_slice %arg345[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_850 = tensor.extract_slice %extracted_slice_849[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_851 = tensor.extract_slice %extracted_slice_850[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %extracted_slice_852 = tensor.extract_slice %arg346[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_853 = tensor.extract_slice %extracted_slice_852[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_854 = tensor.extract_slice %extracted_slice_853[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %4497 = tensor.empty() : tensor<1x13x128xf32>
    %4498 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_851 : tensor<1x1x13x128xf32>) outs(%4497 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %4499 = tensor.empty() : tensor<13x128xf32>
    %4500 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%4498 : tensor<1x13x128xf32>) outs(%4499 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %4501 = tensor.empty() : tensor<1x13x128xf32>
    %4502 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_854 : tensor<1x1x13x128xf32>) outs(%4501 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %4503 = tensor.empty() : tensor<13x128xf32>
    %4504 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%4502 : tensor<1x13x128xf32>) outs(%4503 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %4505 = tensor.empty() : tensor<1x13x128xf32>
    %4506 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%4505 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %4500[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %4507 = "tosa.reshape"(%4506) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %4508 = tensor.empty() : tensor<1x13x128xf32>
    %4509 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%4508 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %4504[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %4510 = "tosa.reshape"(%4509) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %4511 = tensor.empty() : tensor<1x32x13x128xf32>
    %4512 = tensor.empty() : tensor<1x32x13x128xf32>
    %4513 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4507 : tensor<1x1x13x128xf32>) outs(%4512 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %4514 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4490, %4513 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%4511 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_855 = tensor.extract_slice %4490[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_856 = tensor.extract_slice %4490[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %4515 = tensor.empty() : tensor<1x32x13x64xf32>
    %4516 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_856 : tensor<1x32x13x64xf32>) outs(%4515 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %4517 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_857 = tensor.insert_slice %4516 into %4517[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_858 = tensor.insert_slice %extracted_slice_855 into %inserted_slice_857[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %4518 = tensor.empty() : tensor<1x32x13x128xf32>
    %4519 = tensor.empty() : tensor<1x32x13x128xf32>
    %4520 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4510 : tensor<1x1x13x128xf32>) outs(%4519 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %4521 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_858, %4520 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%4518 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %4522 = "tosa.add"(%4514, %4521) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %4523 = tensor.empty() : tensor<1x32x13x128xf32>
    %4524 = tensor.empty() : tensor<1x32x13x128xf32>
    %4525 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4507 : tensor<1x1x13x128xf32>) outs(%4524 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %4526 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4493, %4525 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%4523 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_859 = tensor.extract_slice %4493[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_860 = tensor.extract_slice %4493[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %4527 = tensor.empty() : tensor<1x32x13x64xf32>
    %4528 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_860 : tensor<1x32x13x64xf32>) outs(%4527 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %4529 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_861 = tensor.insert_slice %4528 into %4529[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_862 = tensor.insert_slice %extracted_slice_859 into %inserted_slice_861[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %4530 = tensor.empty() : tensor<1x32x13x128xf32>
    %4531 = tensor.empty() : tensor<1x32x13x128xf32>
    %4532 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4510 : tensor<1x1x13x128xf32>) outs(%4531 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %4533 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_862, %4532 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%4530 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %4534 = "tosa.add"(%4526, %4533) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %4535 = tensor.empty() : tensor<1x32x128x13xf32>
    %4536 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4534 : tensor<1x32x13x128xf32>) outs(%4535 : tensor<1x32x128x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x13xf32>
    %4537 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_863 = tensor.extract_slice %4522[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_864 = tensor.insert_slice %extracted_slice_863 into %4537[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %4538 = "tosa.reshape"(%inserted_slice_864) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %4539 = tensor.empty() : tensor<1x32x128x13xf32>
    %extracted_slice_865 = tensor.extract_slice %4536[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> to tensor<1x32x128x13xf32>
    %inserted_slice_866 = tensor.insert_slice %extracted_slice_865 into %4539[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> into tensor<1x32x128x13xf32>
    %4540 = "tosa.reshape"(%inserted_slice_866) {new_shape = array<i64: 32, 128, 13>} : (tensor<1x32x128x13xf32>) -> tensor<32x128x13xf32>
    %4541 = tensor.empty() : tensor<32x13x13xf32>
    %4542 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%4541 : tensor<32x13x13xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x13xf32>
    %4543 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4538, %4540 : tensor<32x13x128xf32>, tensor<32x128x13xf32>) outs(%4542 : tensor<32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x13xf32>
    %4544 = "tosa.reshape"(%4543) {new_shape = array<i64: 1, 32, 13, 13>} : (tensor<32x13x13xf32>) -> tensor<1x32x13x13xf32>
    %cst_867 = arith.constant 11.3137083 : f32
    %4545 = tensor.empty() : tensor<1x32x13x13xf32>
    %4546 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4544 : tensor<1x32x13x13xf32>) outs(%4545 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.divf %in, %cst_867 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %4547 = "tosa.add"(%4546, %24) : (tensor<1x32x13x13xf32>, tensor<1x1x13x13xf32>) -> tensor<1x32x13x13xf32>
    %4548 = tensor.empty() : tensor<1x32x13x1xf32>
    %4549 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4548 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %4550 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4547 : tensor<1x32x13x13xf32>) outs(%4548 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.maxf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %4551 = tensor.empty() : tensor<1x32x13x13xf32>
    %4552 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4547, %4550 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%4551 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.subf %in, %in_999 : f32
      %5295 = math.exp %5294 : f32
      linalg.yield %5295 : f32
    } -> tensor<1x32x13x13xf32>
    %4553 = tensor.empty() : tensor<1x32x13x1xf32>
    %4554 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4553 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %4555 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4552 : tensor<1x32x13x13xf32>) outs(%4554 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %4556 = tensor.empty() : tensor<1x32x13x13xf32>
    %4557 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4552, %4555 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%4556 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.divf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %4558 = tensor.empty() : tensor<1x32x13x13xf32>
    %extracted_slice_868 = tensor.extract_slice %4557[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> to tensor<1x32x13x13xf32>
    %inserted_slice_869 = tensor.insert_slice %extracted_slice_868 into %4558[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> into tensor<1x32x13x13xf32>
    %4559 = "tosa.reshape"(%inserted_slice_869) {new_shape = array<i64: 32, 13, 13>} : (tensor<1x32x13x13xf32>) -> tensor<32x13x13xf32>
    %4560 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_870 = tensor.extract_slice %4496[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_871 = tensor.insert_slice %extracted_slice_870 into %4560[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %4561 = "tosa.reshape"(%inserted_slice_871) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %4562 = tensor.empty() : tensor<32x13x128xf32>
    %4563 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%4562 : tensor<32x13x128xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x128xf32>
    %4564 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4559, %4561 : tensor<32x13x13xf32>, tensor<32x13x128xf32>) outs(%4563 : tensor<32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x128xf32>
    %4565 = "tosa.reshape"(%4564) {new_shape = array<i64: 1, 32, 13, 128>} : (tensor<32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %4566 = tensor.empty() : tensor<1x13x32x128xf32>
    %4567 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4565 : tensor<1x32x13x128xf32>) outs(%4566 : tensor<1x13x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x32x128xf32>
    %extracted_slice_872 = tensor.extract_slice %4567[0, 0, 0, 0] [1, 13, 32, 128] [1, 1, 1, 1] : tensor<1x13x32x128xf32> to tensor<1x13x32x128xf32>
    %4568 = "tosa.reshape"(%extracted_slice_872) {new_shape = array<i64: 1, 13, 4096>} : (tensor<1x13x32x128xf32>) -> tensor<1x13x4096xf32>
    %4569 = tensor.empty() : tensor<4096x4096xf32>
    %4570 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg258 : tensor<4096x4096xf32>) outs(%4569 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4571 = "tosa.reshape"(%4568) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %4572 = tensor.empty() : tensor<13x4096xf32>
    %4573 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4572 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %4574 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4571, %4570 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%4573 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %4575 = "tosa.reshape"(%4574) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %4576 = "tosa.add"(%4452, %4575) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %4577 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_873 = arith.constant 2 : i32
    %4578 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4576 : tensor<1x13x4096xf32>) outs(%4577 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_873 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_874 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %4579 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4578 : tensor<1x13x4096xf32>) outs(%cst_874 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_875 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4580 = "tosa.add"(%4579, %cst_875) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %4581 = tensor.empty() : tensor<1x13x1xf32>
    %4582 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4580 : tensor<1x13x1xf32>) outs(%4581 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %4583 = tensor.empty() : tensor<1x13x4096xf32>
    %4584 = tensor.empty() : tensor<1x13x4096xf32>
    %4585 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4582 : tensor<1x13x1xf32>) outs(%4584 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %4586 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4576, %4585 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%4583 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %4587 = tensor.empty() : tensor<1x13x4096xf32>
    %4588 = tensor.empty() : tensor<1x13x4096xf32>
    %4589 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg55 : tensor<4096xf32>) outs(%4588 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %4590 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4589, %4586 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%4587 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %4591 = tensor.empty() : tensor<4096x11008xf32>
    %4592 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg259 : tensor<11008x4096xf32>) outs(%4591 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4593 = "tosa.reshape"(%4590) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %4594 = tensor.empty() : tensor<13x11008xf32>
    %4595 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4594 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %4596 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4593, %4592 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%4595 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %4597 = "tosa.reshape"(%4596) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %4598 = tensor.empty() : tensor<1x13x11008xf32>
    %4599 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4597 : tensor<1x13x11008xf32>) outs(%4598 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      %5295 = math.exp %5294 : f32
      %cst_999 = arith.constant 1.000000e+00 : f32
      %5296 = arith.addf %cst_999, %5295 : f32
      %5297 = arith.divf %in, %5296 : f32
      linalg.yield %5297 : f32
    } -> tensor<1x13x11008xf32>
    %4600 = tensor.empty() : tensor<4096x11008xf32>
    %4601 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg260 : tensor<11008x4096xf32>) outs(%4600 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4602 = "tosa.reshape"(%4590) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %4603 = tensor.empty() : tensor<13x11008xf32>
    %4604 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4603 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %4605 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4602, %4601 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%4604 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %4606 = "tosa.reshape"(%4605) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %4607 = tensor.empty() : tensor<1x13x11008xf32>
    %4608 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4599, %4606 : tensor<1x13x11008xf32>, tensor<1x13x11008xf32>) outs(%4607 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x11008xf32>
    %4609 = tensor.empty() : tensor<11008x4096xf32>
    %4610 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg261 : tensor<4096x11008xf32>) outs(%4609 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %4611 = "tosa.reshape"(%4608) {new_shape = array<i64: 13, 11008>} : (tensor<1x13x11008xf32>) -> tensor<13x11008xf32>
    %4612 = tensor.empty() : tensor<13x4096xf32>
    %4613 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4612 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %4614 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4611, %4610 : tensor<13x11008xf32>, tensor<11008x4096xf32>) outs(%4613 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %4615 = "tosa.reshape"(%4614) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %4616 = "tosa.add"(%4576, %4615) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %4617 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_876 = arith.constant 2 : i32
    %4618 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4616 : tensor<1x13x4096xf32>) outs(%4617 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_876 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_877 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %4619 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4618 : tensor<1x13x4096xf32>) outs(%cst_877 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_878 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4620 = "tosa.add"(%4619, %cst_878) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %4621 = tensor.empty() : tensor<1x13x1xf32>
    %4622 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4620 : tensor<1x13x1xf32>) outs(%4621 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %4623 = tensor.empty() : tensor<1x13x4096xf32>
    %4624 = tensor.empty() : tensor<1x13x4096xf32>
    %4625 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4622 : tensor<1x13x1xf32>) outs(%4624 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %4626 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4616, %4625 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%4623 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %4627 = tensor.empty() : tensor<1x13x4096xf32>
    %4628 = tensor.empty() : tensor<1x13x4096xf32>
    %4629 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg56 : tensor<4096xf32>) outs(%4628 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %4630 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4629, %4626 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%4627 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %4631 = tensor.empty() : tensor<4096x4096xf32>
    %4632 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg262 : tensor<4096x4096xf32>) outs(%4631 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4633 = "tosa.reshape"(%4630) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %4634 = tensor.empty() : tensor<13x4096xf32>
    %4635 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4634 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %4636 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4633, %4632 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%4635 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %4637 = "tosa.reshape"(%4636) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %4638 = tensor.empty() : tensor<4096x4096xf32>
    %4639 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg263 : tensor<4096x4096xf32>) outs(%4638 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4640 = "tosa.reshape"(%4630) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %4641 = tensor.empty() : tensor<13x4096xf32>
    %4642 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4641 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %4643 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4640, %4639 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%4642 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %4644 = "tosa.reshape"(%4643) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %4645 = tensor.empty() : tensor<4096x4096xf32>
    %4646 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg264 : tensor<4096x4096xf32>) outs(%4645 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4647 = "tosa.reshape"(%4630) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %4648 = tensor.empty() : tensor<13x4096xf32>
    %4649 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4648 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %4650 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4647, %4646 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%4649 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %4651 = "tosa.reshape"(%4650) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %4652 = "tosa.reshape"(%4637) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %4653 = tensor.empty() : tensor<1x32x13x128xf32>
    %4654 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4652 : tensor<1x13x32x128xf32>) outs(%4653 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %4655 = "tosa.reshape"(%4644) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %4656 = tensor.empty() : tensor<1x32x13x128xf32>
    %4657 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4655 : tensor<1x13x32x128xf32>) outs(%4656 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %4658 = "tosa.reshape"(%4651) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %4659 = tensor.empty() : tensor<1x32x13x128xf32>
    %4660 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4658 : tensor<1x13x32x128xf32>) outs(%4659 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_879 = tensor.extract_slice %arg347[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_880 = tensor.extract_slice %extracted_slice_879[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_881 = tensor.extract_slice %extracted_slice_880[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %extracted_slice_882 = tensor.extract_slice %arg348[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_883 = tensor.extract_slice %extracted_slice_882[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_884 = tensor.extract_slice %extracted_slice_883[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %4661 = tensor.empty() : tensor<1x13x128xf32>
    %4662 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_881 : tensor<1x1x13x128xf32>) outs(%4661 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %4663 = tensor.empty() : tensor<13x128xf32>
    %4664 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%4662 : tensor<1x13x128xf32>) outs(%4663 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %4665 = tensor.empty() : tensor<1x13x128xf32>
    %4666 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_884 : tensor<1x1x13x128xf32>) outs(%4665 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %4667 = tensor.empty() : tensor<13x128xf32>
    %4668 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%4666 : tensor<1x13x128xf32>) outs(%4667 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %4669 = tensor.empty() : tensor<1x13x128xf32>
    %4670 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%4669 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %4664[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %4671 = "tosa.reshape"(%4670) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %4672 = tensor.empty() : tensor<1x13x128xf32>
    %4673 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%4672 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %4668[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %4674 = "tosa.reshape"(%4673) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %4675 = tensor.empty() : tensor<1x32x13x128xf32>
    %4676 = tensor.empty() : tensor<1x32x13x128xf32>
    %4677 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4671 : tensor<1x1x13x128xf32>) outs(%4676 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %4678 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4654, %4677 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%4675 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_885 = tensor.extract_slice %4654[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_886 = tensor.extract_slice %4654[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %4679 = tensor.empty() : tensor<1x32x13x64xf32>
    %4680 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_886 : tensor<1x32x13x64xf32>) outs(%4679 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %4681 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_887 = tensor.insert_slice %4680 into %4681[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_888 = tensor.insert_slice %extracted_slice_885 into %inserted_slice_887[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %4682 = tensor.empty() : tensor<1x32x13x128xf32>
    %4683 = tensor.empty() : tensor<1x32x13x128xf32>
    %4684 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4674 : tensor<1x1x13x128xf32>) outs(%4683 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %4685 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_888, %4684 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%4682 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %4686 = "tosa.add"(%4678, %4685) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %4687 = tensor.empty() : tensor<1x32x13x128xf32>
    %4688 = tensor.empty() : tensor<1x32x13x128xf32>
    %4689 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4671 : tensor<1x1x13x128xf32>) outs(%4688 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %4690 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4657, %4689 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%4687 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_889 = tensor.extract_slice %4657[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_890 = tensor.extract_slice %4657[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %4691 = tensor.empty() : tensor<1x32x13x64xf32>
    %4692 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_890 : tensor<1x32x13x64xf32>) outs(%4691 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %4693 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_891 = tensor.insert_slice %4692 into %4693[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_892 = tensor.insert_slice %extracted_slice_889 into %inserted_slice_891[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %4694 = tensor.empty() : tensor<1x32x13x128xf32>
    %4695 = tensor.empty() : tensor<1x32x13x128xf32>
    %4696 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4674 : tensor<1x1x13x128xf32>) outs(%4695 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %4697 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_892, %4696 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%4694 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %4698 = "tosa.add"(%4690, %4697) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %4699 = tensor.empty() : tensor<1x32x128x13xf32>
    %4700 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4698 : tensor<1x32x13x128xf32>) outs(%4699 : tensor<1x32x128x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x13xf32>
    %4701 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_893 = tensor.extract_slice %4686[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_894 = tensor.insert_slice %extracted_slice_893 into %4701[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %4702 = "tosa.reshape"(%inserted_slice_894) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %4703 = tensor.empty() : tensor<1x32x128x13xf32>
    %extracted_slice_895 = tensor.extract_slice %4700[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> to tensor<1x32x128x13xf32>
    %inserted_slice_896 = tensor.insert_slice %extracted_slice_895 into %4703[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> into tensor<1x32x128x13xf32>
    %4704 = "tosa.reshape"(%inserted_slice_896) {new_shape = array<i64: 32, 128, 13>} : (tensor<1x32x128x13xf32>) -> tensor<32x128x13xf32>
    %4705 = tensor.empty() : tensor<32x13x13xf32>
    %4706 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%4705 : tensor<32x13x13xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x13xf32>
    %4707 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4702, %4704 : tensor<32x13x128xf32>, tensor<32x128x13xf32>) outs(%4706 : tensor<32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x13xf32>
    %4708 = "tosa.reshape"(%4707) {new_shape = array<i64: 1, 32, 13, 13>} : (tensor<32x13x13xf32>) -> tensor<1x32x13x13xf32>
    %cst_897 = arith.constant 11.3137083 : f32
    %4709 = tensor.empty() : tensor<1x32x13x13xf32>
    %4710 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4708 : tensor<1x32x13x13xf32>) outs(%4709 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.divf %in, %cst_897 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %4711 = "tosa.add"(%4710, %24) : (tensor<1x32x13x13xf32>, tensor<1x1x13x13xf32>) -> tensor<1x32x13x13xf32>
    %4712 = tensor.empty() : tensor<1x32x13x1xf32>
    %4713 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4712 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %4714 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4711 : tensor<1x32x13x13xf32>) outs(%4712 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.maxf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %4715 = tensor.empty() : tensor<1x32x13x13xf32>
    %4716 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4711, %4714 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%4715 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.subf %in, %in_999 : f32
      %5295 = math.exp %5294 : f32
      linalg.yield %5295 : f32
    } -> tensor<1x32x13x13xf32>
    %4717 = tensor.empty() : tensor<1x32x13x1xf32>
    %4718 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4717 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %4719 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4716 : tensor<1x32x13x13xf32>) outs(%4718 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %4720 = tensor.empty() : tensor<1x32x13x13xf32>
    %4721 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4716, %4719 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%4720 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.divf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %4722 = tensor.empty() : tensor<1x32x13x13xf32>
    %extracted_slice_898 = tensor.extract_slice %4721[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> to tensor<1x32x13x13xf32>
    %inserted_slice_899 = tensor.insert_slice %extracted_slice_898 into %4722[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> into tensor<1x32x13x13xf32>
    %4723 = "tosa.reshape"(%inserted_slice_899) {new_shape = array<i64: 32, 13, 13>} : (tensor<1x32x13x13xf32>) -> tensor<32x13x13xf32>
    %4724 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_900 = tensor.extract_slice %4660[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_901 = tensor.insert_slice %extracted_slice_900 into %4724[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %4725 = "tosa.reshape"(%inserted_slice_901) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %4726 = tensor.empty() : tensor<32x13x128xf32>
    %4727 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%4726 : tensor<32x13x128xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x128xf32>
    %4728 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4723, %4725 : tensor<32x13x13xf32>, tensor<32x13x128xf32>) outs(%4727 : tensor<32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x128xf32>
    %4729 = "tosa.reshape"(%4728) {new_shape = array<i64: 1, 32, 13, 128>} : (tensor<32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %4730 = tensor.empty() : tensor<1x13x32x128xf32>
    %4731 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4729 : tensor<1x32x13x128xf32>) outs(%4730 : tensor<1x13x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x32x128xf32>
    %extracted_slice_902 = tensor.extract_slice %4731[0, 0, 0, 0] [1, 13, 32, 128] [1, 1, 1, 1] : tensor<1x13x32x128xf32> to tensor<1x13x32x128xf32>
    %4732 = "tosa.reshape"(%extracted_slice_902) {new_shape = array<i64: 1, 13, 4096>} : (tensor<1x13x32x128xf32>) -> tensor<1x13x4096xf32>
    %4733 = tensor.empty() : tensor<4096x4096xf32>
    %4734 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg265 : tensor<4096x4096xf32>) outs(%4733 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4735 = "tosa.reshape"(%4732) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %4736 = tensor.empty() : tensor<13x4096xf32>
    %4737 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4736 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %4738 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4735, %4734 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%4737 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %4739 = "tosa.reshape"(%4738) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %4740 = "tosa.add"(%4616, %4739) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %4741 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_903 = arith.constant 2 : i32
    %4742 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4740 : tensor<1x13x4096xf32>) outs(%4741 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_903 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_904 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %4743 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4742 : tensor<1x13x4096xf32>) outs(%cst_904 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_905 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4744 = "tosa.add"(%4743, %cst_905) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %4745 = tensor.empty() : tensor<1x13x1xf32>
    %4746 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4744 : tensor<1x13x1xf32>) outs(%4745 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %4747 = tensor.empty() : tensor<1x13x4096xf32>
    %4748 = tensor.empty() : tensor<1x13x4096xf32>
    %4749 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4746 : tensor<1x13x1xf32>) outs(%4748 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %4750 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4740, %4749 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%4747 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %4751 = tensor.empty() : tensor<1x13x4096xf32>
    %4752 = tensor.empty() : tensor<1x13x4096xf32>
    %4753 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg57 : tensor<4096xf32>) outs(%4752 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %4754 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4753, %4750 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%4751 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %4755 = tensor.empty() : tensor<4096x11008xf32>
    %4756 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg266 : tensor<11008x4096xf32>) outs(%4755 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4757 = "tosa.reshape"(%4754) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %4758 = tensor.empty() : tensor<13x11008xf32>
    %4759 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4758 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %4760 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4757, %4756 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%4759 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %4761 = "tosa.reshape"(%4760) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %4762 = tensor.empty() : tensor<1x13x11008xf32>
    %4763 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4761 : tensor<1x13x11008xf32>) outs(%4762 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      %5295 = math.exp %5294 : f32
      %cst_999 = arith.constant 1.000000e+00 : f32
      %5296 = arith.addf %cst_999, %5295 : f32
      %5297 = arith.divf %in, %5296 : f32
      linalg.yield %5297 : f32
    } -> tensor<1x13x11008xf32>
    %4764 = tensor.empty() : tensor<4096x11008xf32>
    %4765 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg267 : tensor<11008x4096xf32>) outs(%4764 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4766 = "tosa.reshape"(%4754) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %4767 = tensor.empty() : tensor<13x11008xf32>
    %4768 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4767 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %4769 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4766, %4765 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%4768 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %4770 = "tosa.reshape"(%4769) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %4771 = tensor.empty() : tensor<1x13x11008xf32>
    %4772 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4763, %4770 : tensor<1x13x11008xf32>, tensor<1x13x11008xf32>) outs(%4771 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x11008xf32>
    %4773 = tensor.empty() : tensor<11008x4096xf32>
    %4774 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg268 : tensor<4096x11008xf32>) outs(%4773 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %4775 = "tosa.reshape"(%4772) {new_shape = array<i64: 13, 11008>} : (tensor<1x13x11008xf32>) -> tensor<13x11008xf32>
    %4776 = tensor.empty() : tensor<13x4096xf32>
    %4777 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4776 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %4778 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4775, %4774 : tensor<13x11008xf32>, tensor<11008x4096xf32>) outs(%4777 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %4779 = "tosa.reshape"(%4778) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %4780 = "tosa.add"(%4740, %4779) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %4781 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_906 = arith.constant 2 : i32
    %4782 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4780 : tensor<1x13x4096xf32>) outs(%4781 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_906 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_907 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %4783 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4782 : tensor<1x13x4096xf32>) outs(%cst_907 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_908 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4784 = "tosa.add"(%4783, %cst_908) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %4785 = tensor.empty() : tensor<1x13x1xf32>
    %4786 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4784 : tensor<1x13x1xf32>) outs(%4785 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %4787 = tensor.empty() : tensor<1x13x4096xf32>
    %4788 = tensor.empty() : tensor<1x13x4096xf32>
    %4789 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4786 : tensor<1x13x1xf32>) outs(%4788 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %4790 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4780, %4789 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%4787 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %4791 = tensor.empty() : tensor<1x13x4096xf32>
    %4792 = tensor.empty() : tensor<1x13x4096xf32>
    %4793 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg58 : tensor<4096xf32>) outs(%4792 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %4794 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4793, %4790 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%4791 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %4795 = tensor.empty() : tensor<4096x4096xf32>
    %4796 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg269 : tensor<4096x4096xf32>) outs(%4795 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4797 = "tosa.reshape"(%4794) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %4798 = tensor.empty() : tensor<13x4096xf32>
    %4799 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4798 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %4800 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4797, %4796 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%4799 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %4801 = "tosa.reshape"(%4800) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %4802 = tensor.empty() : tensor<4096x4096xf32>
    %4803 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg270 : tensor<4096x4096xf32>) outs(%4802 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4804 = "tosa.reshape"(%4794) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %4805 = tensor.empty() : tensor<13x4096xf32>
    %4806 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4805 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %4807 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4804, %4803 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%4806 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %4808 = "tosa.reshape"(%4807) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %4809 = tensor.empty() : tensor<4096x4096xf32>
    %4810 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg271 : tensor<4096x4096xf32>) outs(%4809 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4811 = "tosa.reshape"(%4794) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %4812 = tensor.empty() : tensor<13x4096xf32>
    %4813 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4812 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %4814 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4811, %4810 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%4813 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %4815 = "tosa.reshape"(%4814) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %4816 = "tosa.reshape"(%4801) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %4817 = tensor.empty() : tensor<1x32x13x128xf32>
    %4818 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4816 : tensor<1x13x32x128xf32>) outs(%4817 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %4819 = "tosa.reshape"(%4808) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %4820 = tensor.empty() : tensor<1x32x13x128xf32>
    %4821 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4819 : tensor<1x13x32x128xf32>) outs(%4820 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %4822 = "tosa.reshape"(%4815) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %4823 = tensor.empty() : tensor<1x32x13x128xf32>
    %4824 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4822 : tensor<1x13x32x128xf32>) outs(%4823 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_909 = tensor.extract_slice %arg349[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_910 = tensor.extract_slice %extracted_slice_909[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_911 = tensor.extract_slice %extracted_slice_910[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %extracted_slice_912 = tensor.extract_slice %arg350[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_913 = tensor.extract_slice %extracted_slice_912[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_914 = tensor.extract_slice %extracted_slice_913[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %4825 = tensor.empty() : tensor<1x13x128xf32>
    %4826 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_911 : tensor<1x1x13x128xf32>) outs(%4825 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %4827 = tensor.empty() : tensor<13x128xf32>
    %4828 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%4826 : tensor<1x13x128xf32>) outs(%4827 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %4829 = tensor.empty() : tensor<1x13x128xf32>
    %4830 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_914 : tensor<1x1x13x128xf32>) outs(%4829 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %4831 = tensor.empty() : tensor<13x128xf32>
    %4832 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%4830 : tensor<1x13x128xf32>) outs(%4831 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %4833 = tensor.empty() : tensor<1x13x128xf32>
    %4834 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%4833 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %4828[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %4835 = "tosa.reshape"(%4834) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %4836 = tensor.empty() : tensor<1x13x128xf32>
    %4837 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%4836 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %4832[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %4838 = "tosa.reshape"(%4837) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %4839 = tensor.empty() : tensor<1x32x13x128xf32>
    %4840 = tensor.empty() : tensor<1x32x13x128xf32>
    %4841 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4835 : tensor<1x1x13x128xf32>) outs(%4840 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %4842 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4818, %4841 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%4839 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_915 = tensor.extract_slice %4818[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_916 = tensor.extract_slice %4818[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %4843 = tensor.empty() : tensor<1x32x13x64xf32>
    %4844 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_916 : tensor<1x32x13x64xf32>) outs(%4843 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %4845 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_917 = tensor.insert_slice %4844 into %4845[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_918 = tensor.insert_slice %extracted_slice_915 into %inserted_slice_917[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %4846 = tensor.empty() : tensor<1x32x13x128xf32>
    %4847 = tensor.empty() : tensor<1x32x13x128xf32>
    %4848 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4838 : tensor<1x1x13x128xf32>) outs(%4847 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %4849 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_918, %4848 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%4846 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %4850 = "tosa.add"(%4842, %4849) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %4851 = tensor.empty() : tensor<1x32x13x128xf32>
    %4852 = tensor.empty() : tensor<1x32x13x128xf32>
    %4853 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4835 : tensor<1x1x13x128xf32>) outs(%4852 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %4854 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4821, %4853 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%4851 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_919 = tensor.extract_slice %4821[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_920 = tensor.extract_slice %4821[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %4855 = tensor.empty() : tensor<1x32x13x64xf32>
    %4856 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_920 : tensor<1x32x13x64xf32>) outs(%4855 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %4857 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_921 = tensor.insert_slice %4856 into %4857[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_922 = tensor.insert_slice %extracted_slice_919 into %inserted_slice_921[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %4858 = tensor.empty() : tensor<1x32x13x128xf32>
    %4859 = tensor.empty() : tensor<1x32x13x128xf32>
    %4860 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4838 : tensor<1x1x13x128xf32>) outs(%4859 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %4861 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_922, %4860 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%4858 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %4862 = "tosa.add"(%4854, %4861) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %4863 = tensor.empty() : tensor<1x32x128x13xf32>
    %4864 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4862 : tensor<1x32x13x128xf32>) outs(%4863 : tensor<1x32x128x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x13xf32>
    %4865 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_923 = tensor.extract_slice %4850[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_924 = tensor.insert_slice %extracted_slice_923 into %4865[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %4866 = "tosa.reshape"(%inserted_slice_924) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %4867 = tensor.empty() : tensor<1x32x128x13xf32>
    %extracted_slice_925 = tensor.extract_slice %4864[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> to tensor<1x32x128x13xf32>
    %inserted_slice_926 = tensor.insert_slice %extracted_slice_925 into %4867[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> into tensor<1x32x128x13xf32>
    %4868 = "tosa.reshape"(%inserted_slice_926) {new_shape = array<i64: 32, 128, 13>} : (tensor<1x32x128x13xf32>) -> tensor<32x128x13xf32>
    %4869 = tensor.empty() : tensor<32x13x13xf32>
    %4870 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%4869 : tensor<32x13x13xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x13xf32>
    %4871 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4866, %4868 : tensor<32x13x128xf32>, tensor<32x128x13xf32>) outs(%4870 : tensor<32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x13xf32>
    %4872 = "tosa.reshape"(%4871) {new_shape = array<i64: 1, 32, 13, 13>} : (tensor<32x13x13xf32>) -> tensor<1x32x13x13xf32>
    %cst_927 = arith.constant 11.3137083 : f32
    %4873 = tensor.empty() : tensor<1x32x13x13xf32>
    %4874 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4872 : tensor<1x32x13x13xf32>) outs(%4873 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.divf %in, %cst_927 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %4875 = "tosa.add"(%4874, %24) : (tensor<1x32x13x13xf32>, tensor<1x1x13x13xf32>) -> tensor<1x32x13x13xf32>
    %4876 = tensor.empty() : tensor<1x32x13x1xf32>
    %4877 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4876 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %4878 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4875 : tensor<1x32x13x13xf32>) outs(%4876 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.maxf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %4879 = tensor.empty() : tensor<1x32x13x13xf32>
    %4880 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4875, %4878 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%4879 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.subf %in, %in_999 : f32
      %5295 = math.exp %5294 : f32
      linalg.yield %5295 : f32
    } -> tensor<1x32x13x13xf32>
    %4881 = tensor.empty() : tensor<1x32x13x1xf32>
    %4882 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%4881 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %4883 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4880 : tensor<1x32x13x13xf32>) outs(%4882 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %4884 = tensor.empty() : tensor<1x32x13x13xf32>
    %4885 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4880, %4883 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%4884 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.divf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %4886 = tensor.empty() : tensor<1x32x13x13xf32>
    %extracted_slice_928 = tensor.extract_slice %4885[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> to tensor<1x32x13x13xf32>
    %inserted_slice_929 = tensor.insert_slice %extracted_slice_928 into %4886[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> into tensor<1x32x13x13xf32>
    %4887 = "tosa.reshape"(%inserted_slice_929) {new_shape = array<i64: 32, 13, 13>} : (tensor<1x32x13x13xf32>) -> tensor<32x13x13xf32>
    %4888 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_930 = tensor.extract_slice %4824[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_931 = tensor.insert_slice %extracted_slice_930 into %4888[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %4889 = "tosa.reshape"(%inserted_slice_931) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %4890 = tensor.empty() : tensor<32x13x128xf32>
    %4891 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%4890 : tensor<32x13x128xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x128xf32>
    %4892 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4887, %4889 : tensor<32x13x13xf32>, tensor<32x13x128xf32>) outs(%4891 : tensor<32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x128xf32>
    %4893 = "tosa.reshape"(%4892) {new_shape = array<i64: 1, 32, 13, 128>} : (tensor<32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %4894 = tensor.empty() : tensor<1x13x32x128xf32>
    %4895 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4893 : tensor<1x32x13x128xf32>) outs(%4894 : tensor<1x13x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x32x128xf32>
    %extracted_slice_932 = tensor.extract_slice %4895[0, 0, 0, 0] [1, 13, 32, 128] [1, 1, 1, 1] : tensor<1x13x32x128xf32> to tensor<1x13x32x128xf32>
    %4896 = "tosa.reshape"(%extracted_slice_932) {new_shape = array<i64: 1, 13, 4096>} : (tensor<1x13x32x128xf32>) -> tensor<1x13x4096xf32>
    %4897 = tensor.empty() : tensor<4096x4096xf32>
    %4898 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg272 : tensor<4096x4096xf32>) outs(%4897 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4899 = "tosa.reshape"(%4896) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %4900 = tensor.empty() : tensor<13x4096xf32>
    %4901 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4900 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %4902 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4899, %4898 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%4901 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %4903 = "tosa.reshape"(%4902) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %4904 = "tosa.add"(%4780, %4903) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %4905 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_933 = arith.constant 2 : i32
    %4906 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4904 : tensor<1x13x4096xf32>) outs(%4905 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_933 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_934 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %4907 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4906 : tensor<1x13x4096xf32>) outs(%cst_934 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_935 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4908 = "tosa.add"(%4907, %cst_935) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %4909 = tensor.empty() : tensor<1x13x1xf32>
    %4910 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4908 : tensor<1x13x1xf32>) outs(%4909 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %4911 = tensor.empty() : tensor<1x13x4096xf32>
    %4912 = tensor.empty() : tensor<1x13x4096xf32>
    %4913 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4910 : tensor<1x13x1xf32>) outs(%4912 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %4914 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4904, %4913 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%4911 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %4915 = tensor.empty() : tensor<1x13x4096xf32>
    %4916 = tensor.empty() : tensor<1x13x4096xf32>
    %4917 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg59 : tensor<4096xf32>) outs(%4916 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %4918 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4917, %4914 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%4915 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %4919 = tensor.empty() : tensor<4096x11008xf32>
    %4920 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg273 : tensor<11008x4096xf32>) outs(%4919 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4921 = "tosa.reshape"(%4918) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %4922 = tensor.empty() : tensor<13x11008xf32>
    %4923 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4922 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %4924 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4921, %4920 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%4923 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %4925 = "tosa.reshape"(%4924) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %4926 = tensor.empty() : tensor<1x13x11008xf32>
    %4927 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4925 : tensor<1x13x11008xf32>) outs(%4926 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      %5295 = math.exp %5294 : f32
      %cst_999 = arith.constant 1.000000e+00 : f32
      %5296 = arith.addf %cst_999, %5295 : f32
      %5297 = arith.divf %in, %5296 : f32
      linalg.yield %5297 : f32
    } -> tensor<1x13x11008xf32>
    %4928 = tensor.empty() : tensor<4096x11008xf32>
    %4929 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg274 : tensor<11008x4096xf32>) outs(%4928 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %4930 = "tosa.reshape"(%4918) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %4931 = tensor.empty() : tensor<13x11008xf32>
    %4932 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4931 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %4933 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4930, %4929 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%4932 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %4934 = "tosa.reshape"(%4933) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %4935 = tensor.empty() : tensor<1x13x11008xf32>
    %4936 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4927, %4934 : tensor<1x13x11008xf32>, tensor<1x13x11008xf32>) outs(%4935 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x11008xf32>
    %4937 = tensor.empty() : tensor<11008x4096xf32>
    %4938 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg275 : tensor<4096x11008xf32>) outs(%4937 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %4939 = "tosa.reshape"(%4936) {new_shape = array<i64: 13, 11008>} : (tensor<1x13x11008xf32>) -> tensor<13x11008xf32>
    %4940 = tensor.empty() : tensor<13x4096xf32>
    %4941 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4940 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %4942 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4939, %4938 : tensor<13x11008xf32>, tensor<11008x4096xf32>) outs(%4941 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %4943 = "tosa.reshape"(%4942) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %4944 = "tosa.add"(%4904, %4943) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %4945 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_936 = arith.constant 2 : i32
    %4946 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4944 : tensor<1x13x4096xf32>) outs(%4945 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_936 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_937 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %4947 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%4946 : tensor<1x13x4096xf32>) outs(%cst_937 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_938 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %4948 = "tosa.add"(%4947, %cst_938) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %4949 = tensor.empty() : tensor<1x13x1xf32>
    %4950 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4948 : tensor<1x13x1xf32>) outs(%4949 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %4951 = tensor.empty() : tensor<1x13x4096xf32>
    %4952 = tensor.empty() : tensor<1x13x4096xf32>
    %4953 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4950 : tensor<1x13x1xf32>) outs(%4952 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %4954 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4944, %4953 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%4951 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %4955 = tensor.empty() : tensor<1x13x4096xf32>
    %4956 = tensor.empty() : tensor<1x13x4096xf32>
    %4957 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg60 : tensor<4096xf32>) outs(%4956 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %4958 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4957, %4954 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%4955 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %4959 = tensor.empty() : tensor<4096x4096xf32>
    %4960 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg276 : tensor<4096x4096xf32>) outs(%4959 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4961 = "tosa.reshape"(%4958) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %4962 = tensor.empty() : tensor<13x4096xf32>
    %4963 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4962 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %4964 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4961, %4960 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%4963 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %4965 = "tosa.reshape"(%4964) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %4966 = tensor.empty() : tensor<4096x4096xf32>
    %4967 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg277 : tensor<4096x4096xf32>) outs(%4966 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4968 = "tosa.reshape"(%4958) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %4969 = tensor.empty() : tensor<13x4096xf32>
    %4970 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4969 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %4971 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4968, %4967 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%4970 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %4972 = "tosa.reshape"(%4971) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %4973 = tensor.empty() : tensor<4096x4096xf32>
    %4974 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg278 : tensor<4096x4096xf32>) outs(%4973 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %4975 = "tosa.reshape"(%4958) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %4976 = tensor.empty() : tensor<13x4096xf32>
    %4977 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%4976 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %4978 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%4975, %4974 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%4977 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %4979 = "tosa.reshape"(%4978) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %4980 = "tosa.reshape"(%4965) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %4981 = tensor.empty() : tensor<1x32x13x128xf32>
    %4982 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4980 : tensor<1x13x32x128xf32>) outs(%4981 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %4983 = "tosa.reshape"(%4972) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %4984 = tensor.empty() : tensor<1x32x13x128xf32>
    %4985 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4983 : tensor<1x13x32x128xf32>) outs(%4984 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %4986 = "tosa.reshape"(%4979) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %4987 = tensor.empty() : tensor<1x32x13x128xf32>
    %4988 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4986 : tensor<1x13x32x128xf32>) outs(%4987 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_939 = tensor.extract_slice %arg351[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_940 = tensor.extract_slice %extracted_slice_939[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_941 = tensor.extract_slice %extracted_slice_940[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %extracted_slice_942 = tensor.extract_slice %arg352[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_943 = tensor.extract_slice %extracted_slice_942[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_944 = tensor.extract_slice %extracted_slice_943[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %4989 = tensor.empty() : tensor<1x13x128xf32>
    %4990 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_941 : tensor<1x1x13x128xf32>) outs(%4989 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %4991 = tensor.empty() : tensor<13x128xf32>
    %4992 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%4990 : tensor<1x13x128xf32>) outs(%4991 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %4993 = tensor.empty() : tensor<1x13x128xf32>
    %4994 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_944 : tensor<1x1x13x128xf32>) outs(%4993 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %4995 = tensor.empty() : tensor<13x128xf32>
    %4996 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%4994 : tensor<1x13x128xf32>) outs(%4995 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %4997 = tensor.empty() : tensor<1x13x128xf32>
    %4998 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%4997 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %4992[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %4999 = "tosa.reshape"(%4998) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %5000 = tensor.empty() : tensor<1x13x128xf32>
    %5001 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%5000 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %4996[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %5002 = "tosa.reshape"(%5001) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %5003 = tensor.empty() : tensor<1x32x13x128xf32>
    %5004 = tensor.empty() : tensor<1x32x13x128xf32>
    %5005 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4999 : tensor<1x1x13x128xf32>) outs(%5004 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %5006 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4982, %5005 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%5003 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_945 = tensor.extract_slice %4982[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_946 = tensor.extract_slice %4982[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %5007 = tensor.empty() : tensor<1x32x13x64xf32>
    %5008 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_946 : tensor<1x32x13x64xf32>) outs(%5007 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %5009 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_947 = tensor.insert_slice %5008 into %5009[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_948 = tensor.insert_slice %extracted_slice_945 into %inserted_slice_947[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %5010 = tensor.empty() : tensor<1x32x13x128xf32>
    %5011 = tensor.empty() : tensor<1x32x13x128xf32>
    %5012 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%5002 : tensor<1x1x13x128xf32>) outs(%5011 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %5013 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_948, %5012 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%5010 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %5014 = "tosa.add"(%5006, %5013) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %5015 = tensor.empty() : tensor<1x32x13x128xf32>
    %5016 = tensor.empty() : tensor<1x32x13x128xf32>
    %5017 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%4999 : tensor<1x1x13x128xf32>) outs(%5016 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %5018 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4985, %5017 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%5015 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_949 = tensor.extract_slice %4985[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_950 = tensor.extract_slice %4985[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %5019 = tensor.empty() : tensor<1x32x13x64xf32>
    %5020 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_950 : tensor<1x32x13x64xf32>) outs(%5019 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %5021 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_951 = tensor.insert_slice %5020 into %5021[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_952 = tensor.insert_slice %extracted_slice_949 into %inserted_slice_951[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %5022 = tensor.empty() : tensor<1x32x13x128xf32>
    %5023 = tensor.empty() : tensor<1x32x13x128xf32>
    %5024 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%5002 : tensor<1x1x13x128xf32>) outs(%5023 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %5025 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_952, %5024 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%5022 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %5026 = "tosa.add"(%5018, %5025) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %5027 = tensor.empty() : tensor<1x32x128x13xf32>
    %5028 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%5026 : tensor<1x32x13x128xf32>) outs(%5027 : tensor<1x32x128x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x13xf32>
    %5029 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_953 = tensor.extract_slice %5014[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_954 = tensor.insert_slice %extracted_slice_953 into %5029[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %5030 = "tosa.reshape"(%inserted_slice_954) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %5031 = tensor.empty() : tensor<1x32x128x13xf32>
    %extracted_slice_955 = tensor.extract_slice %5028[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> to tensor<1x32x128x13xf32>
    %inserted_slice_956 = tensor.insert_slice %extracted_slice_955 into %5031[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> into tensor<1x32x128x13xf32>
    %5032 = "tosa.reshape"(%inserted_slice_956) {new_shape = array<i64: 32, 128, 13>} : (tensor<1x32x128x13xf32>) -> tensor<32x128x13xf32>
    %5033 = tensor.empty() : tensor<32x13x13xf32>
    %5034 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%5033 : tensor<32x13x13xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x13xf32>
    %5035 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%5030, %5032 : tensor<32x13x128xf32>, tensor<32x128x13xf32>) outs(%5034 : tensor<32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x13xf32>
    %5036 = "tosa.reshape"(%5035) {new_shape = array<i64: 1, 32, 13, 13>} : (tensor<32x13x13xf32>) -> tensor<1x32x13x13xf32>
    %cst_957 = arith.constant 11.3137083 : f32
    %5037 = tensor.empty() : tensor<1x32x13x13xf32>
    %5038 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%5036 : tensor<1x32x13x13xf32>) outs(%5037 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.divf %in, %cst_957 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %5039 = "tosa.add"(%5038, %24) : (tensor<1x32x13x13xf32>, tensor<1x1x13x13xf32>) -> tensor<1x32x13x13xf32>
    %5040 = tensor.empty() : tensor<1x32x13x1xf32>
    %5041 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%5040 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %5042 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%5039 : tensor<1x32x13x13xf32>) outs(%5040 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.maxf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %5043 = tensor.empty() : tensor<1x32x13x13xf32>
    %5044 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%5039, %5042 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%5043 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.subf %in, %in_999 : f32
      %5295 = math.exp %5294 : f32
      linalg.yield %5295 : f32
    } -> tensor<1x32x13x13xf32>
    %5045 = tensor.empty() : tensor<1x32x13x1xf32>
    %5046 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%5045 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %5047 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%5044 : tensor<1x32x13x13xf32>) outs(%5046 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %5048 = tensor.empty() : tensor<1x32x13x13xf32>
    %5049 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%5044, %5047 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%5048 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.divf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %5050 = tensor.empty() : tensor<1x32x13x13xf32>
    %extracted_slice_958 = tensor.extract_slice %5049[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> to tensor<1x32x13x13xf32>
    %inserted_slice_959 = tensor.insert_slice %extracted_slice_958 into %5050[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> into tensor<1x32x13x13xf32>
    %5051 = "tosa.reshape"(%inserted_slice_959) {new_shape = array<i64: 32, 13, 13>} : (tensor<1x32x13x13xf32>) -> tensor<32x13x13xf32>
    %5052 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_960 = tensor.extract_slice %4988[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_961 = tensor.insert_slice %extracted_slice_960 into %5052[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %5053 = "tosa.reshape"(%inserted_slice_961) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %5054 = tensor.empty() : tensor<32x13x128xf32>
    %5055 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%5054 : tensor<32x13x128xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x128xf32>
    %5056 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%5051, %5053 : tensor<32x13x13xf32>, tensor<32x13x128xf32>) outs(%5055 : tensor<32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x128xf32>
    %5057 = "tosa.reshape"(%5056) {new_shape = array<i64: 1, 32, 13, 128>} : (tensor<32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %5058 = tensor.empty() : tensor<1x13x32x128xf32>
    %5059 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%5057 : tensor<1x32x13x128xf32>) outs(%5058 : tensor<1x13x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x32x128xf32>
    %extracted_slice_962 = tensor.extract_slice %5059[0, 0, 0, 0] [1, 13, 32, 128] [1, 1, 1, 1] : tensor<1x13x32x128xf32> to tensor<1x13x32x128xf32>
    %5060 = "tosa.reshape"(%extracted_slice_962) {new_shape = array<i64: 1, 13, 4096>} : (tensor<1x13x32x128xf32>) -> tensor<1x13x4096xf32>
    %5061 = tensor.empty() : tensor<4096x4096xf32>
    %5062 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg279 : tensor<4096x4096xf32>) outs(%5061 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %5063 = "tosa.reshape"(%5060) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %5064 = tensor.empty() : tensor<13x4096xf32>
    %5065 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%5064 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %5066 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%5063, %5062 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%5065 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %5067 = "tosa.reshape"(%5066) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %5068 = "tosa.add"(%4944, %5067) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %5069 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_963 = arith.constant 2 : i32
    %5070 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%5068 : tensor<1x13x4096xf32>) outs(%5069 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_963 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_964 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %5071 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%5070 : tensor<1x13x4096xf32>) outs(%cst_964 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_965 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %5072 = "tosa.add"(%5071, %cst_965) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %5073 = tensor.empty() : tensor<1x13x1xf32>
    %5074 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%5072 : tensor<1x13x1xf32>) outs(%5073 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %5075 = tensor.empty() : tensor<1x13x4096xf32>
    %5076 = tensor.empty() : tensor<1x13x4096xf32>
    %5077 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%5074 : tensor<1x13x1xf32>) outs(%5076 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %5078 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%5068, %5077 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%5075 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %5079 = tensor.empty() : tensor<1x13x4096xf32>
    %5080 = tensor.empty() : tensor<1x13x4096xf32>
    %5081 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg61 : tensor<4096xf32>) outs(%5080 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %5082 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%5081, %5078 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%5079 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %5083 = tensor.empty() : tensor<4096x11008xf32>
    %5084 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg280 : tensor<11008x4096xf32>) outs(%5083 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %5085 = "tosa.reshape"(%5082) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %5086 = tensor.empty() : tensor<13x11008xf32>
    %5087 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%5086 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %5088 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%5085, %5084 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%5087 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %5089 = "tosa.reshape"(%5088) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %5090 = tensor.empty() : tensor<1x13x11008xf32>
    %5091 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%5089 : tensor<1x13x11008xf32>) outs(%5090 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      %5295 = math.exp %5294 : f32
      %cst_999 = arith.constant 1.000000e+00 : f32
      %5296 = arith.addf %cst_999, %5295 : f32
      %5297 = arith.divf %in, %5296 : f32
      linalg.yield %5297 : f32
    } -> tensor<1x13x11008xf32>
    %5092 = tensor.empty() : tensor<4096x11008xf32>
    %5093 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg281 : tensor<11008x4096xf32>) outs(%5092 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %5094 = "tosa.reshape"(%5082) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %5095 = tensor.empty() : tensor<13x11008xf32>
    %5096 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%5095 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %5097 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%5094, %5093 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%5096 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %5098 = "tosa.reshape"(%5097) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %5099 = tensor.empty() : tensor<1x13x11008xf32>
    %5100 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%5091, %5098 : tensor<1x13x11008xf32>, tensor<1x13x11008xf32>) outs(%5099 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x11008xf32>
    %5101 = tensor.empty() : tensor<11008x4096xf32>
    %5102 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg282 : tensor<4096x11008xf32>) outs(%5101 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %5103 = "tosa.reshape"(%5100) {new_shape = array<i64: 13, 11008>} : (tensor<1x13x11008xf32>) -> tensor<13x11008xf32>
    %5104 = tensor.empty() : tensor<13x4096xf32>
    %5105 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%5104 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %5106 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%5103, %5102 : tensor<13x11008xf32>, tensor<11008x4096xf32>) outs(%5105 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %5107 = "tosa.reshape"(%5106) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %5108 = "tosa.add"(%5068, %5107) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %5109 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_966 = arith.constant 2 : i32
    %5110 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%5108 : tensor<1x13x4096xf32>) outs(%5109 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_966 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_967 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %5111 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%5110 : tensor<1x13x4096xf32>) outs(%cst_967 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_968 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %5112 = "tosa.add"(%5111, %cst_968) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %5113 = tensor.empty() : tensor<1x13x1xf32>
    %5114 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%5112 : tensor<1x13x1xf32>) outs(%5113 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %5115 = tensor.empty() : tensor<1x13x4096xf32>
    %5116 = tensor.empty() : tensor<1x13x4096xf32>
    %5117 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%5114 : tensor<1x13x1xf32>) outs(%5116 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %5118 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%5108, %5117 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%5115 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %5119 = tensor.empty() : tensor<1x13x4096xf32>
    %5120 = tensor.empty() : tensor<1x13x4096xf32>
    %5121 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg62 : tensor<4096xf32>) outs(%5120 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %5122 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%5121, %5118 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%5119 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %5123 = tensor.empty() : tensor<4096x4096xf32>
    %5124 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg283 : tensor<4096x4096xf32>) outs(%5123 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %5125 = "tosa.reshape"(%5122) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %5126 = tensor.empty() : tensor<13x4096xf32>
    %5127 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%5126 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %5128 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%5125, %5124 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%5127 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %5129 = "tosa.reshape"(%5128) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %5130 = tensor.empty() : tensor<4096x4096xf32>
    %5131 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg284 : tensor<4096x4096xf32>) outs(%5130 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %5132 = "tosa.reshape"(%5122) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %5133 = tensor.empty() : tensor<13x4096xf32>
    %5134 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%5133 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %5135 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%5132, %5131 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%5134 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %5136 = "tosa.reshape"(%5135) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %5137 = tensor.empty() : tensor<4096x4096xf32>
    %5138 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg285 : tensor<4096x4096xf32>) outs(%5137 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %5139 = "tosa.reshape"(%5122) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %5140 = tensor.empty() : tensor<13x4096xf32>
    %5141 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%5140 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %5142 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%5139, %5138 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%5141 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %5143 = "tosa.reshape"(%5142) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %5144 = "tosa.reshape"(%5129) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %5145 = tensor.empty() : tensor<1x32x13x128xf32>
    %5146 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%5144 : tensor<1x13x32x128xf32>) outs(%5145 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %5147 = "tosa.reshape"(%5136) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %5148 = tensor.empty() : tensor<1x32x13x128xf32>
    %5149 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%5147 : tensor<1x13x32x128xf32>) outs(%5148 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %5150 = "tosa.reshape"(%5143) {new_shape = array<i64: 1, 13, 32, 128>} : (tensor<1x13x4096xf32>) -> tensor<1x13x32x128xf32>
    %5151 = tensor.empty() : tensor<1x32x13x128xf32>
    %5152 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%5150 : tensor<1x13x32x128xf32>) outs(%5151 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_969 = tensor.extract_slice %arg353[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_970 = tensor.extract_slice %extracted_slice_969[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_971 = tensor.extract_slice %extracted_slice_970[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %extracted_slice_972 = tensor.extract_slice %arg354[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_973 = tensor.extract_slice %extracted_slice_972[0, 0, 0, 0] [1, 1, 2048, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x2048x128xf32>
    %extracted_slice_974 = tensor.extract_slice %extracted_slice_973[0, 0, 0, 0] [1, 1, 13, 128] [1, 1, 1, 1] : tensor<1x1x2048x128xf32> to tensor<1x1x13x128xf32>
    %5153 = tensor.empty() : tensor<1x13x128xf32>
    %5154 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_971 : tensor<1x1x13x128xf32>) outs(%5153 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %5155 = tensor.empty() : tensor<13x128xf32>
    %5156 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%5154 : tensor<1x13x128xf32>) outs(%5155 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %5157 = tensor.empty() : tensor<1x13x128xf32>
    %5158 = linalg.generic {indexing_maps = [#map12, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%extracted_slice_974 : tensor<1x1x13x128xf32>) outs(%5157 : tensor<1x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x128xf32>
    %5159 = tensor.empty() : tensor<13x128xf32>
    %5160 = linalg.generic {indexing_maps = [#map13, #map4], iterator_types = ["parallel", "parallel"]} ins(%5158 : tensor<1x13x128xf32>) outs(%5159 : tensor<13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<13x128xf32>
    %5161 = tensor.empty() : tensor<1x13x128xf32>
    %5162 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%5161 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %5156[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %5163 = "tosa.reshape"(%5162) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %5164 = tensor.empty() : tensor<1x13x128xf32>
    %5165 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<1x13xi64>) outs(%5164 : tensor<1x13x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %5294 = arith.index_cast %in : i64 to index
      %5295 = linalg.index 2 : index
      %extracted = tensor.extract %5160[%5294, %5295] : tensor<13x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x13x128xf32>
    %5166 = "tosa.reshape"(%5165) {new_shape = array<i64: 1, 1, 13, 128>} : (tensor<1x13x128xf32>) -> tensor<1x1x13x128xf32>
    %5167 = tensor.empty() : tensor<1x32x13x128xf32>
    %5168 = tensor.empty() : tensor<1x32x13x128xf32>
    %5169 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%5163 : tensor<1x1x13x128xf32>) outs(%5168 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %5170 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%5146, %5169 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%5167 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_975 = tensor.extract_slice %5146[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_976 = tensor.extract_slice %5146[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %5171 = tensor.empty() : tensor<1x32x13x64xf32>
    %5172 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_976 : tensor<1x32x13x64xf32>) outs(%5171 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %5173 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_977 = tensor.insert_slice %5172 into %5173[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_978 = tensor.insert_slice %extracted_slice_975 into %inserted_slice_977[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %5174 = tensor.empty() : tensor<1x32x13x128xf32>
    %5175 = tensor.empty() : tensor<1x32x13x128xf32>
    %5176 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%5166 : tensor<1x1x13x128xf32>) outs(%5175 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %5177 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_978, %5176 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%5174 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %5178 = "tosa.add"(%5170, %5177) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %5179 = tensor.empty() : tensor<1x32x13x128xf32>
    %5180 = tensor.empty() : tensor<1x32x13x128xf32>
    %5181 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%5163 : tensor<1x1x13x128xf32>) outs(%5180 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %5182 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%5149, %5181 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%5179 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %extracted_slice_979 = tensor.extract_slice %5149[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %extracted_slice_980 = tensor.extract_slice %5149[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x64xf32>
    %5183 = tensor.empty() : tensor<1x32x13x64xf32>
    %5184 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_980 : tensor<1x32x13x64xf32>) outs(%5183 : tensor<1x32x13x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x64xf32>
    %5185 = tensor.empty() : tensor<1x32x13x128xf32>
    %inserted_slice_981 = tensor.insert_slice %5184 into %5185[0, 0, 0, 0] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %inserted_slice_982 = tensor.insert_slice %extracted_slice_979 into %inserted_slice_981[0, 0, 0, 64] [1, 32, 13, 64] [1, 1, 1, 1] : tensor<1x32x13x64xf32> into tensor<1x32x13x128xf32>
    %5186 = tensor.empty() : tensor<1x32x13x128xf32>
    %5187 = tensor.empty() : tensor<1x32x13x128xf32>
    %5188 = linalg.generic {indexing_maps = [#map14, #map15], iterator_types = ["parallel", "parallel", "parallel", "parallel", "reduction"]} ins(%5166 : tensor<1x1x13x128xf32>) outs(%5187 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x13x128xf32>
    %5189 = linalg.generic {indexing_maps = [#map5, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_982, %5188 : tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) outs(%5186 : tensor<1x32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x128xf32>
    %5190 = "tosa.add"(%5182, %5189) : (tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %5191 = tensor.empty() : tensor<1x32x128x13xf32>
    %5192 = linalg.generic {indexing_maps = [#map16, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%5190 : tensor<1x32x13x128xf32>) outs(%5191 : tensor<1x32x128x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x32x128x13xf32>
    %5193 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_983 = tensor.extract_slice %5178[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_984 = tensor.insert_slice %extracted_slice_983 into %5193[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %5194 = "tosa.reshape"(%inserted_slice_984) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %5195 = tensor.empty() : tensor<1x32x128x13xf32>
    %extracted_slice_985 = tensor.extract_slice %5192[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> to tensor<1x32x128x13xf32>
    %inserted_slice_986 = tensor.insert_slice %extracted_slice_985 into %5195[0, 0, 0, 0] [1, 32, 128, 13] [1, 1, 1, 1] : tensor<1x32x128x13xf32> into tensor<1x32x128x13xf32>
    %5196 = "tosa.reshape"(%inserted_slice_986) {new_shape = array<i64: 32, 128, 13>} : (tensor<1x32x128x13xf32>) -> tensor<32x128x13xf32>
    %5197 = tensor.empty() : tensor<32x13x13xf32>
    %5198 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%5197 : tensor<32x13x13xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x13xf32>
    %5199 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%5194, %5196 : tensor<32x13x128xf32>, tensor<32x128x13xf32>) outs(%5198 : tensor<32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x13xf32>
    %5200 = "tosa.reshape"(%5199) {new_shape = array<i64: 1, 32, 13, 13>} : (tensor<32x13x13xf32>) -> tensor<1x32x13x13xf32>
    %cst_987 = arith.constant 11.3137083 : f32
    %5201 = tensor.empty() : tensor<1x32x13x13xf32>
    %5202 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%5200 : tensor<1x32x13x13xf32>) outs(%5201 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.divf %in, %cst_987 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %5203 = "tosa.add"(%5202, %24) : (tensor<1x32x13x13xf32>, tensor<1x1x13x13xf32>) -> tensor<1x32x13x13xf32>
    %5204 = tensor.empty() : tensor<1x32x13x1xf32>
    %5205 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%5204 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0xFF800000 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %5206 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%5203 : tensor<1x32x13x13xf32>) outs(%5204 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.maxf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %5207 = tensor.empty() : tensor<1x32x13x13xf32>
    %5208 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%5203, %5206 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%5207 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.subf %in, %in_999 : f32
      %5295 = math.exp %5294 : f32
      linalg.yield %5295 : f32
    } -> tensor<1x32x13x13xf32>
    %5209 = tensor.empty() : tensor<1x32x13x1xf32>
    %5210 = linalg.generic {indexing_maps = [#map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%5209 : tensor<1x32x13x1xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<1x32x13x1xf32>
    %5211 = linalg.generic {indexing_maps = [#map5, #map18], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%5208 : tensor<1x32x13x13xf32>) outs(%5210 : tensor<1x32x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x1xf32>
    %5212 = tensor.empty() : tensor<1x32x13x13xf32>
    %5213 = linalg.generic {indexing_maps = [#map5, #map18, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%5208, %5211 : tensor<1x32x13x13xf32>, tensor<1x32x13x1xf32>) outs(%5212 : tensor<1x32x13x13xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.divf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x32x13x13xf32>
    %5214 = tensor.empty() : tensor<1x32x13x13xf32>
    %extracted_slice_988 = tensor.extract_slice %5213[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> to tensor<1x32x13x13xf32>
    %inserted_slice_989 = tensor.insert_slice %extracted_slice_988 into %5214[0, 0, 0, 0] [1, 32, 13, 13] [1, 1, 1, 1] : tensor<1x32x13x13xf32> into tensor<1x32x13x13xf32>
    %5215 = "tosa.reshape"(%inserted_slice_989) {new_shape = array<i64: 32, 13, 13>} : (tensor<1x32x13x13xf32>) -> tensor<32x13x13xf32>
    %5216 = tensor.empty() : tensor<1x32x13x128xf32>
    %extracted_slice_990 = tensor.extract_slice %5152[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> to tensor<1x32x13x128xf32>
    %inserted_slice_991 = tensor.insert_slice %extracted_slice_990 into %5216[0, 0, 0, 0] [1, 32, 13, 128] [1, 1, 1, 1] : tensor<1x32x13x128xf32> into tensor<1x32x13x128xf32>
    %5217 = "tosa.reshape"(%inserted_slice_991) {new_shape = array<i64: 32, 13, 128>} : (tensor<1x32x13x128xf32>) -> tensor<32x13x128xf32>
    %5218 = tensor.empty() : tensor<32x13x128xf32>
    %5219 = linalg.generic {indexing_maps = [#map1], iterator_types = ["parallel", "parallel", "parallel"]} outs(%5218 : tensor<32x13x128xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<32x13x128xf32>
    %5220 = linalg.generic {indexing_maps = [#map7, #map17, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%5215, %5217 : tensor<32x13x13xf32>, tensor<32x13x128xf32>) outs(%5219 : tensor<32x13x128xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<32x13x128xf32>
    %5221 = "tosa.reshape"(%5220) {new_shape = array<i64: 1, 32, 13, 128>} : (tensor<32x13x128xf32>) -> tensor<1x32x13x128xf32>
    %5222 = tensor.empty() : tensor<1x13x32x128xf32>
    %5223 = linalg.generic {indexing_maps = [#map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%5221 : tensor<1x32x13x128xf32>) outs(%5222 : tensor<1x13x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x32x128xf32>
    %extracted_slice_992 = tensor.extract_slice %5223[0, 0, 0, 0] [1, 13, 32, 128] [1, 1, 1, 1] : tensor<1x13x32x128xf32> to tensor<1x13x32x128xf32>
    %5224 = "tosa.reshape"(%extracted_slice_992) {new_shape = array<i64: 1, 13, 4096>} : (tensor<1x13x32x128xf32>) -> tensor<1x13x4096xf32>
    %5225 = tensor.empty() : tensor<4096x4096xf32>
    %5226 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg286 : tensor<4096x4096xf32>) outs(%5225 : tensor<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x4096xf32>
    %5227 = "tosa.reshape"(%5224) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %5228 = tensor.empty() : tensor<13x4096xf32>
    %5229 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%5228 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %5230 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%5227, %5226 : tensor<13x4096xf32>, tensor<4096x4096xf32>) outs(%5229 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %5231 = "tosa.reshape"(%5230) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %5232 = "tosa.add"(%5108, %5231) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %5233 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_993 = arith.constant 2 : i32
    %5234 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%5232 : tensor<1x13x4096xf32>) outs(%5233 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_993 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_994 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %5235 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%5234 : tensor<1x13x4096xf32>) outs(%cst_994 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_995 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %5236 = "tosa.add"(%5235, %cst_995) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %5237 = tensor.empty() : tensor<1x13x1xf32>
    %5238 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%5236 : tensor<1x13x1xf32>) outs(%5237 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %5239 = tensor.empty() : tensor<1x13x4096xf32>
    %5240 = tensor.empty() : tensor<1x13x4096xf32>
    %5241 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%5238 : tensor<1x13x1xf32>) outs(%5240 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %5242 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%5232, %5241 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%5239 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %5243 = tensor.empty() : tensor<1x13x4096xf32>
    %5244 = tensor.empty() : tensor<1x13x4096xf32>
    %5245 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg63 : tensor<4096xf32>) outs(%5244 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %5246 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%5245, %5242 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%5243 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %5247 = tensor.empty() : tensor<4096x11008xf32>
    %5248 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg287 : tensor<11008x4096xf32>) outs(%5247 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %5249 = "tosa.reshape"(%5246) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %5250 = tensor.empty() : tensor<13x11008xf32>
    %5251 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%5250 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %5252 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%5249, %5248 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%5251 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %5253 = "tosa.reshape"(%5252) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %5254 = tensor.empty() : tensor<1x13x11008xf32>
    %5255 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%5253 : tensor<1x13x11008xf32>) outs(%5254 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.negf %in : f32
      %5295 = math.exp %5294 : f32
      %cst_999 = arith.constant 1.000000e+00 : f32
      %5296 = arith.addf %cst_999, %5295 : f32
      %5297 = arith.divf %in, %5296 : f32
      linalg.yield %5297 : f32
    } -> tensor<1x13x11008xf32>
    %5256 = tensor.empty() : tensor<4096x11008xf32>
    %5257 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg288 : tensor<11008x4096xf32>) outs(%5256 : tensor<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x11008xf32>
    %5258 = "tosa.reshape"(%5246) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %5259 = tensor.empty() : tensor<13x11008xf32>
    %5260 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%5259 : tensor<13x11008xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x11008xf32>
    %5261 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%5258, %5257 : tensor<13x4096xf32>, tensor<4096x11008xf32>) outs(%5260 : tensor<13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x11008xf32>
    %5262 = "tosa.reshape"(%5261) {new_shape = array<i64: 1, 13, 11008>} : (tensor<13x11008xf32>) -> tensor<1x13x11008xf32>
    %5263 = tensor.empty() : tensor<1x13x11008xf32>
    %5264 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%5255, %5262 : tensor<1x13x11008xf32>, tensor<1x13x11008xf32>) outs(%5263 : tensor<1x13x11008xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x11008xf32>
    %5265 = tensor.empty() : tensor<11008x4096xf32>
    %5266 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg289 : tensor<4096x11008xf32>) outs(%5265 : tensor<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<11008x4096xf32>
    %5267 = "tosa.reshape"(%5264) {new_shape = array<i64: 13, 11008>} : (tensor<1x13x11008xf32>) -> tensor<13x11008xf32>
    %5268 = tensor.empty() : tensor<13x4096xf32>
    %5269 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%5268 : tensor<13x4096xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x4096xf32>
    %5270 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%5267, %5266 : tensor<13x11008xf32>, tensor<11008x4096xf32>) outs(%5269 : tensor<13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x4096xf32>
    %5271 = "tosa.reshape"(%5270) {new_shape = array<i64: 1, 13, 4096>} : (tensor<13x4096xf32>) -> tensor<1x13x4096xf32>
    %5272 = "tosa.add"(%5232, %5271) : (tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) -> tensor<1x13x4096xf32>
    %5273 = tensor.empty() : tensor<1x13x4096xf32>
    %c2_i32_996 = arith.constant 2 : i32
    %5274 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%5272 : tensor<1x13x4096xf32>) outs(%5273 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.fpowi %in, %c2_i32_996 : f32, i32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %cst_997 = arith.constant dense<0.000000e+00> : tensor<1x13x1xf32>
    %5275 = linalg.generic {indexing_maps = [#map6, #map7], iterator_types = ["parallel", "parallel", "reduction", "parallel"]} ins(%5274 : tensor<1x13x4096xf32>) outs(%cst_997 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = arith.addf %in, %out : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %cst_998 = arith.constant dense<9.99999997E-7> : tensor<f32>
    %5276 = "tosa.add"(%5275, %cst_998) : (tensor<1x13x1xf32>, tensor<f32>) -> tensor<1x13x1xf32>
    %5277 = tensor.empty() : tensor<1x13x1xf32>
    %5278 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%5276 : tensor<1x13x1xf32>) outs(%5277 : tensor<1x13x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %5294 = math.rsqrt %in : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x1xf32>
    %5279 = tensor.empty() : tensor<1x13x4096xf32>
    %5280 = tensor.empty() : tensor<1x13x4096xf32>
    %5281 = linalg.generic {indexing_maps = [#map7, #map6], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%5278 : tensor<1x13x1xf32>) outs(%5280 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %5282 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%5272, %5281 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%5279 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %5283 = tensor.empty() : tensor<1x13x4096xf32>
    %5284 = tensor.empty() : tensor<1x13x4096xf32>
    %5285 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg64 : tensor<4096xf32>) outs(%5284 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x13x4096xf32>
    %5286 = linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel"]} ins(%5285, %5282 : tensor<1x13x4096xf32>, tensor<1x13x4096xf32>) outs(%5283 : tensor<1x13x4096xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      linalg.yield %5294 : f32
    } -> tensor<1x13x4096xf32>
    %5287 = tensor.empty() : tensor<4096x32000xf32>
    %5288 = linalg.generic {indexing_maps = [#map4, #map9], iterator_types = ["parallel", "parallel"]} ins(%arg290 : tensor<32000x4096xf32>) outs(%5287 : tensor<4096x32000xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<4096x32000xf32>
    %5289 = "tosa.reshape"(%5286) {new_shape = array<i64: 13, 4096>} : (tensor<1x13x4096xf32>) -> tensor<13x4096xf32>
    %5290 = tensor.empty() : tensor<13x32000xf32>
    %5291 = linalg.generic {indexing_maps = [#map4], iterator_types = ["parallel", "parallel"]} outs(%5290 : tensor<13x32000xf32>) {
    ^bb0(%out: f32):
      %cst_999 = arith.constant 0.000000e+00 : f32
      linalg.yield %cst_999 : f32
    } -> tensor<13x32000xf32>
    %5292 = linalg.generic {indexing_maps = [#map3, #map10, #map], iterator_types = ["parallel", "parallel", "reduction"]} ins(%5289, %5288 : tensor<13x4096xf32>, tensor<4096x32000xf32>) outs(%5291 : tensor<13x32000xf32>) {
    ^bb0(%in: f32, %in_999: f32, %out: f32):
      %5294 = arith.mulf %in, %in_999 : f32
      %5295 = arith.addf %5294, %out : f32
      linalg.yield %5295 : f32
    } -> tensor<13x32000xf32>
    %5293 = "tosa.reshape"(%5292) {new_shape = array<i64: 1, 13, 32000>} : (tensor<13x32000xf32>) -> tensor<1x13x32000xf32>
    return %5293, %106, %68, %270, %232, %434, %396, %598, %560, %762, %724, %926, %888, %1090, %1052, %1254, %1216, %1418, %1380, %1582, %1544, %1746, %1708, %1910, %1872, %2074, %2036, %2238, %2200, %2402, %2364, %2566, %2528, %2730, %2692, %2894, %2856, %3058, %3020, %3222, %3184, %3386, %3348, %3550, %3512, %3714, %3676, %3878, %3840, %4042, %4004, %4206, %4168, %4370, %4332, %4534, %4496, %4698, %4660, %4862, %4824, %5026, %4988, %5190, %5152, %5286, %arg0, %arg1, %arg2, %arg3, %arg4, %arg5, %arg6, %arg7, %arg8, %arg9, %arg10, %arg11, %arg12, %arg13, %arg14, %arg15, %arg16, %arg17, %arg18, %arg19, %arg20, %arg21, %arg22, %arg23, %arg24, %arg25, %arg26, %arg27, %arg28, %arg29, %arg30, %arg31, %arg32, %arg33, %arg34, %arg35, %arg36, %arg37, %arg38, %arg39, %arg40, %arg41, %arg42, %arg43, %arg44, %arg45, %arg46, %arg47, %arg48, %arg49, %arg50, %arg51, %arg52, %arg53, %arg54, %arg55, %arg56, %arg57, %arg58, %arg59, %arg60, %arg61, %arg62, %arg63, %arg64, %arg355, %3, %30, %34, %40, %41, %47, %48, %54, %55, %79, %82, %110, %112, %129, %131, %133, %142, %143, %148, %154, %158, %164, %165, %169, %171, %173, %174, %178, %182, %183, %188, %194, %198, %204, %205, %211, %212, %218, %219, %243, %246, %274, %276, %293, %295, %297, %306, %307, %312, %318, %322, %328, %329, %333, %335, %337, %338, %342, %346, %347, %352, %358, %362, %368, %369, %375, %376, %382, %383, %407, %410, %438, %440, %457, %459, %461, %470, %471, %476, %482, %486, %492, %493, %497, %499, %501, %502, %506, %510, %511, %516, %522, %526, %532, %533, %539, %540, %546, %547, %571, %574, %602, %604, %621, %623, %625, %634, %635, %640, %646, %650, %656, %657, %661, %663, %665, %666, %670, %674, %675, %680, %686, %690, %696, %697, %703, %704, %710, %711, %735, %738, %766, %768, %785, %787, %789, %798, %799, %804, %810, %814, %820, %821, %825, %827, %829, %830, %834, %838, %839, %844, %850, %854, %860, %861, %867, %868, %874, %875, %899, %902, %930, %932, %949, %951, %953, %962, %963, %968, %974, %978, %984, %985, %989, %991, %993, %994, %998, %1002, %1003, %1008, %1014, %1018, %1024, %1025, %1031, %1032, %1038, %1039, %1063, %1066, %1094, %1096, %1113, %1115, %1117, %1126, %1127, %1132, %1138, %1142, %1148, %1149, %1153, %1155, %1157, %1158, %1162, %1166, %1167, %1172, %1178, %1182, %1188, %1189, %1195, %1196, %1202, %1203, %1227, %1230, %1258, %1260, %1277, %1279, %1281, %1290, %1291, %1296, %1302, %1306, %1312, %1313, %1317, %1319, %1321, %1322, %1326, %1330, %1331, %1336, %1342, %1346, %1352, %1353, %1359, %1360, %1366, %1367, %1391, %1394, %1422, %1424, %1441, %1443, %1445, %1454, %1455, %1460, %1466, %1470, %1476, %1477, %1481, %1483, %1485, %1486, %1490, %1494, %1495, %1500, %1506, %1510, %1516, %1517, %1523, %1524, %1530, %1531, %1555, %1558, %1586, %1588, %1605, %1607, %1609, %1618, %1619, %1624, %1630, %1634, %1640, %1641, %1645, %1647, %1649, %1650, %1654, %1658, %1659, %1664, %1670, %1674, %1680, %1681, %1687, %1688, %1694, %1695, %1719, %1722, %1750, %1752, %1769, %1771, %1773, %1782, %1783, %1788, %1794, %1798, %1804, %1805, %1809, %1811, %1813, %1814, %1818, %1822, %1823, %1828, %1834, %1838, %1844, %1845, %1851, %1852, %1858, %1859, %1883, %1886, %1914, %1916, %1933, %1935, %1937, %1946, %1947, %1952, %1958, %1962, %1968, %1969, %1973, %1975, %1977, %1978, %1982, %1986, %1987, %1992, %1998, %2002, %2008, %2009, %2015, %2016, %2022, %2023, %2047, %2050, %2078, %2080, %2097, %2099, %2101, %2110, %2111, %2116, %2122, %2126, %2132, %2133, %2137, %2139, %2141, %2142, %2146, %2150, %2151, %2156, %2162, %2166, %2172, %2173, %2179, %2180, %2186, %2187, %2211, %2214, %2242, %2244, %2261, %2263, %2265, %2274, %2275, %2280, %2286, %2290, %2296, %2297, %2301, %2303, %2305, %2306, %2310, %2314, %2315, %2320, %2326, %2330, %2336, %2337, %2343, %2344, %2350, %2351, %2375, %2378, %2406, %2408, %2425, %2427, %2429, %2438, %2439, %2444, %2450, %2454, %2460, %2461, %2465, %2467, %2469, %2470, %2474, %2478, %2479, %2484, %2490, %2494, %2500, %2501, %2507, %2508, %2514, %2515, %2539, %2542, %2570, %2572, %2589, %2591, %2593, %2602, %2603, %2608, %2614, %2618, %2624, %2625, %2629, %2631, %2633, %2634, %2638, %2642, %2643, %2648, %2654, %2658, %2664, %2665, %2671, %2672, %2678, %2679, %2703, %2706, %2734, %2736, %2753, %2755, %2757, %2766, %2767, %2772, %2778, %2782, %2788, %2789, %2793, %2795, %2797, %2798, %2802, %2806, %2807, %2812, %2818, %2822, %2828, %2829, %2835, %2836, %2842, %2843, %2867, %2870, %2898, %2900, %2917, %2919, %2921, %2930, %2931, %2936, %2942, %2946, %2952, %2953, %2957, %2959, %2961, %2962, %2966, %2970, %2971, %2976, %2982, %2986, %2992, %2993, %2999, %3000, %3006, %3007, %3031, %3034, %3062, %3064, %3081, %3083, %3085, %3094, %3095, %3100, %3106, %3110, %3116, %3117, %3121, %3123, %3125, %3126, %3130, %3134, %3135, %3140, %3146, %3150, %3156, %3157, %3163, %3164, %3170, %3171, %3195, %3198, %3226, %3228, %3245, %3247, %3249, %3258, %3259, %3264, %3270, %3274, %3280, %3281, %3285, %3287, %3289, %3290, %3294, %3298, %3299, %3304, %3310, %3314, %3320, %3321, %3327, %3328, %3334, %3335, %3359, %3362, %3390, %3392, %3409, %3411, %3413, %3422, %3423, %3428, %3434, %3438, %3444, %3445, %3449, %3451, %3453, %3454, %3458, %3462, %3463, %3468, %3474, %3478, %3484, %3485, %3491, %3492, %3498, %3499, %3523, %3526, %3554, %3556, %3573, %3575, %3577, %3586, %3587, %3592, %3598, %3602, %3608, %3609, %3613, %3615, %3617, %3618, %3622, %3626, %3627, %3632, %3638, %3642, %3648, %3649, %3655, %3656, %3662, %3663, %3687, %3690, %3718, %3720, %3737, %3739, %3741, %3750, %3751, %3756, %3762, %3766, %3772, %3773, %3777, %3779, %3781, %3782, %3786, %3790, %3791, %3796, %3802, %3806, %3812, %3813, %3819, %3820, %3826, %3827, %3851, %3854, %3882, %3884, %3901, %3903, %3905, %3914, %3915, %3920, %3926, %3930, %3936, %3937, %3941, %3943, %3945, %3946, %3950, %3954, %3955, %3960, %3966, %3970, %3976, %3977, %3983, %3984, %3990, %3991, %4015, %4018, %4046, %4048, %4065, %4067, %4069, %4078, %4079, %4084, %4090, %4094, %4100, %4101, %4105, %4107, %4109, %4110, %4114, %4118, %4119, %4124, %4130, %4134, %4140, %4141, %4147, %4148, %4154, %4155, %4179, %4182, %4210, %4212, %4229, %4231, %4233, %4242, %4243, %4248, %4254, %4258, %4264, %4265, %4269, %4271, %4273, %4274, %4278, %4282, %4283, %4288, %4294, %4298, %4304, %4305, %4311, %4312, %4318, %4319, %4343, %4346, %4374, %4376, %4393, %4395, %4397, %4406, %4407, %4412, %4418, %4422, %4428, %4429, %4433, %4435, %4437, %4438, %4442, %4446, %4447, %4452, %4458, %4462, %4468, %4469, %4475, %4476, %4482, %4483, %4507, %4510, %4538, %4540, %4557, %4559, %4561, %4570, %4571, %4576, %4582, %4586, %4592, %4593, %4597, %4599, %4601, %4602, %4606, %4610, %4611, %4616, %4622, %4626, %4632, %4633, %4639, %4640, %4646, %4647, %4671, %4674, %4702, %4704, %4721, %4723, %4725, %4734, %4735, %4740, %4746, %4750, %4756, %4757, %4761, %4763, %4765, %4766, %4770, %4774, %4775, %4780, %4786, %4790, %4796, %4797, %4803, %4804, %4810, %4811, %4835, %4838, %4866, %4868, %4885, %4887, %4889, %4898, %4899, %4904, %4910, %4914, %4920, %4921, %4925, %4927, %4929, %4930, %4934, %4938, %4939, %4944, %4950, %4954, %4960, %4961, %4967, %4968, %4974, %4975, %4999, %5002, %5030, %5032, %5049, %5051, %5053, %5062, %5063, %5068, %5074, %5078, %5084, %5085, %5089, %5091, %5093, %5094, %5098, %5102, %5103, %5108, %5114, %5118, %5124, %5125, %5131, %5132, %5138, %5139, %5163, %5166, %5194, %5196, %5213, %5215, %5217, %5226, %5227, %5232, %5238, %5242, %5248, %5249, %5253, %5255, %5257, %5258, %5262, %5266, %5267, %5272, %5278, %5282, %5288, %5289 : tensor<1x13x32000xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x32x13x128xf32>, tensor<1x13x4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<4096xf32>, tensor<1x13xi64>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x1x13x128xf32>, tensor<1x1x13x128xf32>, tensor<32x13x128xf32>, tensor<32x128x13xf32>, tensor<1x32x13x13xf32>, tensor<32x13x13xf32>, tensor<32x13x128xf32>, tensor<4096x4096xf32>, tensor<13x4096xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<1x13x11008xf32>, tensor<4096x11008xf32>, tensor<13x4096xf32>, tensor<1x13x11008xf32>, tensor<11008x4096xf32>, tensor<13x11008xf32>, tensor<1x13x4096xf32>, tensor<1x13x1xf32>, tensor<1x13x4096xf32>, tensor<4096x32000xf32>, tensor<13x4096xf32>
  }
}

