#include <buddy/Core/Container.h>
#include <buddy/LLM/TextContainer.h>
#include <fstream>
#include <iostream>
#include <time.h>
using namespace buddy;
using namespace std;

extern "C" void _mlir_ciface_forward(MemRef<float, 3> *, MemRef<float, 1> *, MemRef<long long, 2> *);

int main() {
  // Guide the user to enter the VOCAB path
  string vocabDir = "/home/limeng/buddy-mlir/tests/Interface/core/vocab_llama.txt";
  // cout<<"please input vocab file path"<<endl;
  // getline(cin, vocabDir);
  // Initialize the container
  string pureStr;
  cout << "Please enter what you want to say to me" << endl;
  getline(cin,pureStr);
  clock_t buddyTokenizeStart = clock();
  Text<long long, 2> pureStrContainer(pureStr);
  pureStrContainer.tokenizeLlama(vocabDir, 80);
  clock_t buddyTokenizeEnd = clock();
  double buddyTokenizeTime = (double)(buddyTokenizeEnd - buddyTokenizeStart) / CLOCKS_PER_SEC;
  // Print the tokenized result
  cout << "Get User input:"<<pureStrContainer.revert(pureStrContainer)<<endl;
  cout << "[Buddy] Tokenize input time: " << buddyTokenizeTime * 1000 << "ms" << endl;
  // Read the params
  clock_t buddyReadStart = clock();
  cout<<"Please input params file directory"<<endl;
  string params_path;
  getline(cin, params_path);
  MemRef<float, 1> arg0({intptr_t(6755192832)});
  ifstream in0(params_path+"/arg0.data",ios::in | ios::binary);
  if (!in0.is_open()) {
    throw std::runtime_error("Failed to open param file !");
  }
  in0.read((char *)(arg0.getData()), sizeof(float) * (arg0.getSize()));
  in0.close();
  clock_t buddyReadEnd = clock();
  double buddyReadTime =(double)(buddyReadEnd - buddyReadStart) / CLOCKS_PER_SEC;
  cout << "Read params finish" << endl;
  cout << "[Buddy] Read params time: " << buddyReadTime << "s" << endl;
  // Run the model
  MemRef<float, 3> result({1, 80, 32000});
  int generate_len = 80 - pureStrContainer.getTokenCnt();
  cout << "---------------------------start generate---------------------------" << endl;
  clock_t buddyStart = clock();
  for (int i = 0; i < generate_len; i++) {
    if(i < 10)
      cout << "-----------------------------Iteration"<<i<<"-----------------------------" << endl;
    else
      cout << "----------------------------Iteration"<<i<<"-----------------------------" << endl;
    buddyReadStart = clock();
    // Perform calculations in memref generated by user input
    _mlir_ciface_forward(&result, &arg0, &pureStrContainer);
    int token_index = pureStrContainer.getTokenCnt() - 1;
    int index = 0;
    int max_elem = result.getData()[token_index * 32000];
    // Calculate the probability of occurrence of each token
    for (int j = index + 1; j < 32000; j++) {
      if (result.getData()[token_index * 32000 + j] > max_elem) {
        max_elem = result.getData()[token_index * 32000 + j];
        index = j;
      }
    }
    pureStrContainer.getData()[pureStrContainer.getTokenCnt()] = index;
    // If the model generate 2(sep marker),interrupt generation immediately
    if (index == 2) {
      break;
    }
    buddyReadEnd = clock();
    buddyReadTime = (double)(buddyReadEnd - buddyReadStart) / CLOCKS_PER_SEC;
    cout << pureStrContainer.getStr(index) << endl;
    cout << "[Buddy] Llama iteration "<<i<<" time: " << buddyReadTime << "s" << endl;
    pureStrContainer.setTokenCnt(pureStrContainer.getTokenCnt() + 1);
  }
  cout << "--------------------------------------------------------------------" << endl;
  // Statistics running time
  clock_t buddyEnd = clock();
  buddyReadTime = (double)(buddyEnd - buddyStart) / CLOCKS_PER_SEC;
  // Print the result
  cout << "[Buddy] Result: "<< pureStrContainer.revert(pureStrContainer)<< endl;
  cout << "[Buddy] Llama exection time: " << buddyReadTime << "s" << endl;
  return 0;
}
