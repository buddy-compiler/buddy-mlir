name: test build process

on:
  push:
    branches: [ main, ci ]
  pull_request:
    branches: [ main, ci ]

jobs:
  build:
    runs-on: self-hosted
    steps:
      # Checkout action, used to pull the code from the repository.
      # Ensure that all Git submodules are also checked out, not just the main repository.
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: 'true'
      # Install Ninja build system. This action ensures that Ninja is available for the build process.
      - name: Set up ninja
        uses: seanmiddleditch/gha-setup-ninja@master
      # # Install Python 3.10
      # - name: Set up Python 3.10
      #   uses: actions/setup-python@v4
      #   with:
      #     python-version: '3.10'
      # # Define cache key based on requirements.txt checksum
      # - name: Cache Python virtual environment
      #   id: cache-pyenv
      #   uses: actions/cache@v4
      #   with:
      #     path: buddy-mlir-venv-${{ hashFiles('requirements.txt') }}
      #     key: pyenv-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
      # # Create virtual environment if needed and install dependencies
      # - name: Set up virtual environment
      #   run: |
      #     venv_path="buddy-mlir-venv-${{ hashFiles('requirements.txt') }}"
      #     if [ ! -d "$venv_path" ]; then
      #       python -m venv $venv_path
      #       source $venv_path/bin/activate
      #       pip install --upgrade pip
      #       pip install -r requirements.txt
      #     fi
      #   shell: bash
      # # Activate virtual environment and verify installation
      # - name: Activate virtual environment and verify installation
      #   run: |
      #     source buddy-mlir-venv-${{ hashFiles('requirements.txt') }}/bin/activate
      #     python --version
      #     pip list
      #   shell: bash
      # This step has an ID that can be used to reference the output in later steps.
      - name: Prepare llvm build directory name
        id: llvm-build-dir
        run: |
          echo "commit=$(git submodule status llvm | awk '{print $1;}')" >> $GITHUB_OUTPUT
      # Use GitHub Actions caching to save the build directory for later use.
      # If the submodule's commit hash changes, a new cache will be created;
      # otherwise, the previous cache will be used to speed up builds.
      - name: Cache llvm build directory
        uses: actions/cache@v4
        with:
          path: llvm
          key: build-${{ steps.llvm-build-dir.outputs.commit }}
      # Run a shell script 'TestBuild.sh' to test the build process.
      # The script is run with the path to the build directory that includes the commit ID,
      # ensuring the correct build version is tested.
      # This step executes the actual build verification after caching is set up.
      - name: Test build
        run: |
          conda activate buddy
          bash ./tests/Actions/TestBuild.sh llvm/build-${{ steps.llvm-build-dir.outputs.commit }}
        shell: bash
